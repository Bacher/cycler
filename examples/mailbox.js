Jane.module('mail.mailbox.js', function() {
    /* mailbox.js begin */
/* mail.externals.js begin */
yr.externals['hide-firstline'] = function() {
    // не показываем "Поправить первую строку", если
    return Boolean(
        // мы не в сети Яндекса
        Jane.$H('account-information').getDataKey('home') != 'yes' ||
            // есть настройка
            Jane.$H('settings').isSet('hide-firstline') ||
            // мы в трипейне
            Daria.layout != '2pane'
    );
};

yr.externals['from-user-emails'] = function() {
    return $.map(Jane.$H('account-information').getFromEmails(), function(email) {
        return { data: email };
    });
};

yr.externals['lang2index'] = function(str) {
    return ($.inArray(str, Daria.Translate.langs.all.s) > -1) ? $.inArray(str, Daria.Translate.langs.all.s) : 0;
};

yr.externals['social-avatar'] = function(params) {
    return Daria.SocialAvatars2.register(params);
};


yr.externals['event-pretty-date'] = function(str) {
    //var parseDate = str.match(/(\d{4})-(\d{2})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/);
    //if (!parseDate || parseDate.length !== 7) {
    //    return str;
    //}

    var n = Jane.Common.n;
    var result = [];
    //var date = new Date(parseDate[1], parseDate[2] - 1, parseDate[3], parseDate[4], parseDate[5], parseDate[6]);
    var date = new Date(str);
    var now = new Date();

    var year = date.getFullYear();
    var month = date.getMonth();
    var day = date.getDate();
    var hour = date.getHours();
    var minute = date.getMinutes();

    var nowYear = now.getFullYear();
    var nowMonth = now.getMonth();
    var nowDay = now.getDate();


    if (nowYear == year && nowMonth == month && nowDay == day) {
        // Сегодня
        result.push(i18n('%Сегодня'));
    } else if (new Date(year, month, day) - new Date(nowYear, nowMonth, nowDay) === 3600 * 1000 * 24){
        // Завтра
        result.push(i18n('%Завтра'));
    }

    result.push(Jane.Date.format('%Date_dBY_year', date));
    result.push(" <input class='b-calendar-event__time__input' type='text' value='" + n(hour) + ":" + n(minute) + "' maxlength='5'>");

    return result.join(", ");
};

yr.externals['get-human-size'] = Jane.getHumanSize;

yr.externals['date-gt'] = function(str) {
    var date = new Date(str);
    var now = new Date(Daria.now());
    var result = now > date;

    return result;
};

yr.externals['date-format'] = Jane.Date.format;

yr.externals['json'] = function(nodeset) {
    return JSON.stringify(nodeset[0].data);
};

yr.externals['amount-format'] = function(amount) {
    amount = Daria.Money.parseAmount(amount);
    if (amount[1]) {
        return i18n("%Money_amount", amount[0], amount[1]);
    } else {
        return i18n("%Money_amount_whole", amount[0]);
    }
};

yr.externals['money-possible'] = function() {
    return Daria.Money && Daria.Money.isPossible();
};

yr.externals['daria-url-docviewer'] = function() {
    //TODO: Удалить 2 строки, когда ять в шаблоне сможет делать конверсии nodeset -> object
    var args = Array.prototype.slice.call(arguments);
    args[0] = yr.nodeset2data(args[0]);

    return Daria.url.docviewer.apply(Daria.url, args);
};

yr.externals['daria-url-attachment'] = function() {
    //TODO: Удалить 2 строки, когда ять в шаблоне сможет делать конверсии nodeset -> object
    var args = Array.prototype.slice.call(arguments);
    args[0] = yr.nodeset2data(args[0]);

    return Daria.url.attachment.apply(Daria.url, args);
};

// Если в абуке у определенной группы нет цвета, подставляем его
yr.externals['color-picker'] = function(tid) {
    return Daria.ABOOK_COLORS[tid % Daria.ABOOK_COLORS.length];
};

// Проверка возможности показа электронных билетов для авиаперелетов и гостиниц
yr.externals['can-show-etickets'] = function(messageFid) {
    var hFolders = Jane.$H('folders');
    return Jane.$H('settings').canShowEtickets() && messageFid && !hFolders.spamOrTrash(messageFid);
};

/**
 * Нормализует цифровые логины к одному формату
 *
 * @param {String} digitLogin
 *
 * @returns {String} возвращает логин с удаленным плюсом
 *
 */
yr.externals['normalize-digital-login'] = function(digitLogin) {
    return digitLogin.replace('+', '');
};

yr.externals['get-shortcut-label-for'] = function(key, group, withParentheses) {
    return Daria.Shortcuts.getShortcutLabelFor(key, group, withParentheses);
};

/* mail.externals.js end */

/* mail.entity.js begin */
/*
Не стоит добавлять сюда entity.blocks.json, потому что там в урле есть версия,
Версия меняется при каждой сборке и убивает фриз.
Jane.addEntities(
    include("../../blocks/entity.blocks.json");
);
*/
if (Jane.Config.dev) {
    Jane.addEntities({
        "mail-static": Jane.Config.staticHost + '/mail/static',
        "mail-root": Jane.Config.staticHost + '/mail'
    });

} else {
    Jane.addEntities({
        "mail-static": Jane.Config.staticHost + '/mail/' + Jane.Services.getProjectVersion('mail') + '/static',
        "mail-root": Jane.Config.staticHost + '/mail/' + Jane.Services.getProjectVersion('mail')
    });
}
Jane.addEntities(
    /* ../../blocks/_entity.images.json begin */
{"b-banner_orange.png":"/mail/static/blocks/jane/jane/b-banner/orange.png","b-folders__folder__clean.gif":"/mail/static/blocks/jane/jane/b-folders/folder/b-folders__folder__clean.gif","b-ico.gif":"/mail/static/blocks/jane/jane/b-ico/b-ico.gif","b-ico_blacklist.png":"/mail/static/blocks/jane/jane/b-ico/_type/b-ico_blacklist.png","b-ico_filter.png":"/mail/static/blocks/jane/jane/b-ico/_type/b-ico_filter.png","b-ico_important.png":"/mail/static/blocks/jane/jane/b-ico/_base/b-ico_important_13.png","b-ico_unimportant.png":"/mail/static/blocks/jane/jane/b-ico/_base/b-ico_unimportant.png","b-mail-icon_add-person.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_add-person.gif","b-mail-icon_ajax-loader.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_ajax-loader.gif","b-mail-icon_alert-big.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_alert-big.png","b-mail-icon_alert.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_alert.gif","b-mail-icon_attach.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_attach.gif","b-mail-icon_attachments.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_attachments.gif","b-mail-icon_avia-ticket.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_avia-ticket.png","b-mail-icon_bad-signature-2.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_bad-signature-2.png","b-mail-icon_bokali.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_bokali.png","b-mail-icon_camera.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_camera.png","b-mail-icon_car-stereo.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_car-stereo.png","b-mail-icon_checkbox-empty.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_checkbox-empty.gif","b-mail-icon_checkbox.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_checkbox.gif","b-mail-icon_cleaning.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_cleaning.png","b-mail-icon_clothes.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_clothes.png","b-mail-icon_compose-design.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_compose-design.png","b-mail-icon_computer.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_computer.png","b-mail-icon_cosmetica.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_cosmetica.png","b-mail-icon_couch.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_couch.png","b-mail-icon_custom.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_custom.png","b-mail-icon_deffered.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_deffered.png","b-mail-icon_delete.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_delete.gif","b-mail-icon_disk.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_disk.png","b-mail-icon_done-promo-facebook.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_done-promo-facebook.png","b-mail-icon_done-promo-vk.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_done-promo-vk.png","b-mail-icon_dry-cleaning.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_dry-cleaning.png","b-mail-icon_e-book.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_e-book.png","b-mail-icon_electrovarka.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_electrovarka.png","b-mail-icon_error-big.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_error-big.png","b-mail-icon_error-black.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_error-black.gif","b-mail-icon_error.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_error.gif","b-mail-icon_error.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_error.png","b-mail-icon_file-general.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_file-general.gif","b-mail-icon_fitness.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_fitness.png","b-mail-icon_forward.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_forward.gif","b-mail-icon_fridge.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_fridge.png","b-mail-icon_frying-pan.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_frying-pan.png","b-mail-icon_furniture.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_furniture.png","b-mail-icon_gmail.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_gmail.png","b-mail-icon_gps.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_gps.png","b-mail-icon_haircut.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_haircut.png","b-mail-icon_hard-drive.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_hard-drive.png","b-mail-icon_history.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_history.gif","b-mail-icon_hotmail.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_hotmail.png","b-mail-icon_hranenie-shin.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_hranenie-shin.png","b-mail-icon_important.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_important.gif","b-mail-icon_info-big.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_info-big.png","b-mail-icon_info.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_info.gif","b-mail-icon_info.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_info.png","b-mail-icon_info-gray.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_info-gray.png","b-mail-icon_knife.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_knife.png","b-mail-icon_krovati.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_krovati.png","b-mail-icon_lang-az.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-az.gif","b-mail-icon_lang-be.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-be.gif","b-mail-icon_lang-en.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-en.gif","b-mail-icon_lang-hy.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-hy.gif","b-mail-icon_lang-ka.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-ka.gif","b-mail-icon_lang-kk.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-kk.gif","b-mail-icon_lang-ro.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-ro.gif","b-mail-icon_lang-ru.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-ru.gif","b-mail-icon_lang-tr.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-tr.gif","b-mail-icon_lang-tt.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-tt.gif","b-mail-icon_lang-uk.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_lang-uk.gif","b-mail-icon_lens.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_lens.png","b-mail-icon_links.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_links.gif","b-mail-icon_mailru.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_mailru.png","b-mail-icon_manicure.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_manicure.png","b-mail-icon_mark-green.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_mark-green.png","b-mail-icon_monitor.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_monitor.png","b-mail-icon_mp3-96.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_mp3-96.png","b-mail-icon_ok-grey.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_ok-grey.png","b-mail-icon_ok-white.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_ok-white.png","b-mail-icon_pan.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_pan.png","b-mail-icon_phone.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_phone.png","b-mail-icon_planshet.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_planshet.png","b-mail-icon_play.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_play.png","b-mail-icon_printer.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_printer.png","b-mail-icon_print.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_print.gif","b-mail-icon_quote-hide.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_quote-hide.gif","b-mail-icon_quote-show.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_quote-show.gif","b-mail-icon_rambler.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_rambler.png","b-mail-icon_relax.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_relax.png","b-mail-icon_reload.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_reload.png","b-mail-icon_reply-all.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_reply-all.gif","b-mail-icon_reply.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_reply.gif","b-mail-icon_restaurant.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_restaurant.png","b-mail-icon_robot-pilesos.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_robot-pilesos.png","b-mail-icon_shoes.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_shoes.png","b-mail-icon_smartphone.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_smartphone.png","b-mail-icon_thread.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_thread.gif","b-mail-icon_to-menu.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_to-menu.png","b-mail-icon_translate.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_translate.png","b-mail-icon_tr-arr.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_tr-arr.png","b-mail-icon_tv.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_tv.png","b-mail-icon_verified-2.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_verified-2.png","b-mail-icon_video-link.gif":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_video-link.gif","b-mail-icon_videoregistrator.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_videoregistrator.png","b-mail-icon_watch.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_watch.png","b-mail-icon_what-is-it.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_what-is-it.png","b-mail-icon_what-is-it_simple.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_what-is-it_simple.png","b-mail-icon_what-is-it_white.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_what-is-it_white.png","b-mail-icon_yahoo.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_yahoo.png","b-mail-icon_ya-shield-big.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_ya-shield-big.png","b-mail-icon_ya-shield.png":"/mail/static/blocks/jane/jane/b-mail-icon/_type/b-mail-icon_ya-shield.png","b-mail-icon_yoga.png":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_yoga.png","b-mail-person__userpic_none_en.png":"/mail/static/blocks/mail/mailbox/b-mail-person/userpic/b-mail-person__userpic_none_en.png","b-mail-person__userpic_none.png":"/mail/static/blocks/mail/mailbox/b-mail-person/userpic/b-mail-person__userpic_none.png","b-mail-person__userpic_none_tr.png":"/mail/static/blocks/mail/mailbox/b-mail-person/userpic/b-mail-person__userpic_none_tr.png","b-market-advert__image_cam-mic1.png":"/mail/static/blocks/mail/compose/b-market-advert/image/b-market-advert__image_cam-mic1.png","b-market-advert__image_cam-no-mic1.png":"/mail/static/blocks/mail/compose/b-market-advert/image/b-market-advert__image_cam-no-mic1.png","b-market-advert__image_mic1.png":"/mail/static/blocks/mail/compose/b-market-advert/image/b-market-advert__image_mic1.png","b-messages_nolabel-en.png":"/mail/static/blocks/mail/mailbox/b-messages/_mode/b-messages_nolabel-en.png","b-messages_nolabel-ru.png":"/mail/static/blocks/mail/mailbox/b-messages/_mode/b-messages_nolabel-ru.png","b-popup__picture_gmail.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_gmail.png","b-popup__picture_hotmail.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_hotmail.png","b-popup__picture_mail.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_mail.png","b-popup__picture_mynet.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_mynet.png","b-popup__picture_narod-disk.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_narod-disk.png","b-popup__picture_qip.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_qip.png","b-popup__picture_rambler.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_rambler.png","b-popup__picture_winlive.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_outlook.png","b-popup__picture_yahoo.png":"/mail/static/blocks/jane/jane/b-popup/picture/_type/b-popup__picture_yahoo.png","b-shortcuts_help.png":"/mail/static/blocks/mail/mailbox/b-shortcuts/promo/help.png","b-site-icon_facebook.gif":"/mail/static/blocks/mail/mailbox/b-site-icon/_type/b-site-icon_facebook.gif","b-site-icon_info.png":"/mail/static/blocks/mail/mailbox/b-site-icon/_type/b-site-icon_info.png","b-site-icon_yacards.gif":"/mail/static/blocks/mail/mailbox/b-site-icon/_type/b-site-icon_yacards.gif","b-switch-off.png":"/mail/static/blocks/mail/setup/b-switch/b-switch-off.png","b-switch-on.png":"/mail/static/blocks/mail/setup/b-switch/b-switch-on.png","b-teaser_icon-02.png":"/mail/static/blocks/jane/jane/b-teaser/_type/b-teaser_icon-02.png","b-teaser_icon-03.png":"/mail/static/blocks/jane/jane/b-teaser/_type/b-teaser_icon-03.png","b-teaser_plug.png":"/mail/static/blocks/jane/jane/b-teaser/_type/b-teaser_plug.png","b-teaser_wizard-small.png":"/mail/static/blocks/jane/jane/b-teaser/_type/b-teaser_wizard-small.png","b-yabble-dnd.png":"/mail/static/blocks/mail/mailbox/b-yabble/b-yabble-dnd.png","b-mail_marka.png":"/mail/static/blocks/mail/mailbox/b-ico/b-mail_marka.png","b-mail-icon_plus":"/mail/static/blocks/mail/mailbox/b-mail-icon/_type/b-mail-icon_plus.png","icon-24open":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_24open.png","icon-4square":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_4square.png","icon-7vetrovmskru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_7vetrovmskru.png","icon-7yaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_7yaru.png","icon-afyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_afyru.png","icon-airticket":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_airticket.png","icon-allegropl":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_allegropl.png","icon-allsoftru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_allsoftru.png","icon-anketkaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_anketkaru.png","icon-applecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_applecom.png","icon-askfm":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_askfm.png","icon-astrostarru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_astrostarru.png","icon-aukroua":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_aukroua.png","icon-aviasalesru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_aviasalesru.png","icon-avitoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_avitoru.png","icon-b2bcenterru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_b2bcenterru.png","icon-babyblogru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_babyblogru.png","icon-babyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_babyru.png","icon-beonru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_beonru.png","icon-bigbuzzyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_bigbuzzyru.png","icon-bio4bigbuzzyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_bio4freecom.png","icon-bio4freecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_bio4freecom.png","icon-biznesbombaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_biznesbombaru.png","icon-bonprixde":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_bonprixde.png","icon-bookingcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_bookingcom.png","icon-burningmancom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_burningmancom.png","icon-busuu_com":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_busuu_com.png","icon-busuucom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_busuucom.png","icon-butikru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_butikru.png","icon-chingoraclecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_chingoraclecom.png","icon-chocolifeme":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_chocolifeme.png","icon-comon":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_comon.png","icon-couchsurfing":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_couchsurfing.png","icon-crewardscom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_crewardscom.png","icon-darudarorg":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_darudarorg.png","icon-datingsite":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_datingsite.png","icon-dealextremecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_dealextremecom.png","icon-dealextreme":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_dealextreme.png","icon-diary_ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_diary_ru.png","icon-diaryru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_diaryru.png","icon-dissercatcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_dissercatcom.png","icon-dotnewsru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_dotnewsru.png","icon-drimmicom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_drimmicom.png","icon-ea_com":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_ea_com.png","icon-ebaycom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_ebaycom.png","icon-edarlingru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_edarlingru.png","icon-emeacom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_emeacom.png","icon-emirates":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_emirates.png","icon-eticket":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_eticket.png","icon-evernoteru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_evernoteru.png","icon-executive":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_executive.png","icon-facebook":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_facebook.png","icon-feedgeecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_feedgeecom.png","icon-finance1ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_finance1ru.png","icon-finance1":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_finance1ru.png","icon-finance":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_finance1ru.png","icon-floridecorru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_floridecorru.png","icon-forex4you":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_forex4you.png","icon-formspring":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_formspring.png","icon-forum2x2ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_forum2x2ru.png","icon-forum2x2":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_forum2x2ru.png","icon-forumhouseru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_forumhouseru.png","icon-fotostrana":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_datingsite.png","icon-freelance":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_freelance.png","icon-friendfeed":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_friendfeed.png","icon-futuretodayru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_futuretodayru.png","icon-fxcluborg":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_fxcluborg.png","icon-gamenetru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_gamenetru.png","icon-gate32ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_gate32ru.png","icon-geometriaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_geometriaru.png","icon-getresponsecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_getresponsecom.png","icon-gideparkru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_gideparkru.png","icon-girlsgogamesru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_girlsgogamesru.png","icon-githubcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_githubcom.png","icon-googlecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_googlecom.png","icon-google_groups_com":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_google_groups_com.png","icon-googlegroupscom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_googlegroupscom.png","icon-grouponsite":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_grouponsite.png","icon-gurboyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_grouponsite.png","icon-habrahabr":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_habrahabr.png","icon-headhunter":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_headhunter.png","icon-horoscopofreecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_horoscopofreecom.png","icon-hotel":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_hotel.png","icon-imnicamail_com":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_imnicamail_com.png","icon-imnicamailcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_imnicamailcom.png","icon-info74ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_info74ru.png","icon-infobonprixde":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_infobonprixde.png","icon-internetprosru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_internetprosru.png","icon-interopros_ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_interopros_ru.png","icon-iskusnitsaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_iskusnitsaru.png","icon-jira":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_jira.png","icon-jobru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_jobru.png","icon-jobsmarketru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_jobsmarketru.png","icon-jooble_ru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_jooble_ru.png","icon-joobleru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_joobleru.png","icon-justclickru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_justclickru.png","icon-kissesru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_kissesru.png","icon-kolizeoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_kolizeoru.png","icon-lamodaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_lamodaru.png","icon-linkedin":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_linkedin.png","icon-liststarotaroru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_liststarotaroru.png","icon-liveexpertru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_liveexpertru.png","icon-liveinternet":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_liveinternet.png","icon-livejournal":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_livejournal.png","icon-livemasterru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_livemasterru.png","icon-loccitaneru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_loccitaneru.png","icon-luxaleru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_luxaleru.png","icon-mailluxaleru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mailluxaleru.png","icon-malinaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_malinaru.png","icon-mamsyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mamsyru.png","icon-markafoni":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_markafoni.png","icon-mcafeecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mcafeecom.png","icon-meggymallru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_meggymallru.png","icon-microsoft":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_microsoft.png","icon-mirtesen":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mirtesen.png","icon-mithostru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mithostru.png","icon-mnogoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mnogoru.png","icon-moikrug":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_moikrug.png","icon-molotokru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_molotokru.png","icon-mvideo":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_mvideo.png","icon-myfantru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_grouponsite.png","icon-myspace":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_myspace.png","icon-newsprofipostorg":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_newsprofipostorg.png","icon-newsquickofficecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_newsquickofficecom.png","icon-notifyastrostarru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_notifyastrostarru.png","icon-odnoklassniki":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_odnoklassniki.png","icon-oley":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_oley.png","icon-ottoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_ottoru.png","icon-ozonru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_ozonru.png","icon-pathcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_pathcom.png","icon-paypal_com":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_paypal_com.png","icon-paypalcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_paypalcom.png","icon-pcdaysru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_pcdaysru.png","icon-pingadmin":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_pingadmin.png","icon-pokerstarscom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_pokerstarscom.png","icon-prestigeua":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_prestigeua.png","icon-probelovnet":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_probelovnet.png","icon-professionali":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_professionali.png","icon-promenadru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_promenadru.png","icon-public_map":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_public-map.png","icon-qualitynetua":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_qualitynetua.png","icon-quelleinforu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_quelleinforu.png","icon-quelleru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_quelleru.png","icon-quickofficecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_quickofficecom.png","icon-rabotaua":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_rabotaua.png","icon-radiomarketru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_radiomarketru.png","icon-rambler-pkpass":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_rambler-pkpass.png","icon-rdwru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_rdwru.png","icon-regru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_regru.png","icon-rugionru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_rugionru.png","icon-rutube":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_rutube.png","icon-sapatoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_sapatoru.png","icon-s-bank":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_s-bank.png","icon-s-company":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_company.png","icon-servicegirlsgogamesru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_servicegirlsgogamesru.png","icon-s-eshop":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_s-eshop.png","icon-shopdeluxeru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_shopdeluxeru.png","icon-skyperu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_skyperu.png","icon-slandoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_slandoru.png","icon-smartresponderru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_smartresponderru.png","icon-softkeyru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_softkeyru.png","icon-specservercom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_specservercom.png","icon-sprashivairu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_sprashivairu.png","icon-s-realty":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_s-realty.png","icon-stilagoinfo":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_stilagoinfo.png","icon-s-travel":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_s-travel.png","icon-stumbleupon":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_stumbleupon.png","icon-subscribe":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_subscribe.png","icon-superjob":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_superjob.png","icon-s-zdticket":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_s-zdticket.png","icon-taggedmailcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_taggedmailcom.png","icon-teszveszhu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_teszveszhu.png","icon-theboutiqueru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_theboutiqueru.png","icon-tizoro":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_tizoro.png","icon-topfacecom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_topfacecom.png","icon-topshopru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_topshopru.png","icon-torrnadoru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_torrnadoru.png","icon-tradesu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_tradesu.png","icon-transportlineru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_transportlineru.png","icon-trudcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_trudcom.png","icon-twitter":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_twitter.png","icon-vabankcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_vabankcom.png","icon-vedomostiru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_vedomostiru.png","icon-victoriassecretcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_victoriassecretcom.png","icon-videoletter":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_videoletter.png","icon-vkontakte":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_vkontakte.png","icon-vkrugudruzei":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_vkrugudruzei.png","icon-vshtate":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_vshtate.png","icon-westwingru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_westwingru.png","icon-wildberriesru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_wildberriesru.png","icon-wmjru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_wmjru.png","icon-wmmailru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_wmmailru.png","icon-womanjournalru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_womanjournalru.png","icon-wordpresscom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_wordpresscom.png","icon-workua":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_workua.png","icon-worldoftanksru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_worldoftanksru.png","icon-yaafisha":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaafisha.png","icon-yaauto":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaauto.png","icon-yabetatest":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yabetatest.png","icon-yablogi":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yablogi.png","icon-yacal-01":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-01.png","icon-yacal-02":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-02.png","icon-yacal-03":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-03.png","icon-yacal-04":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-04.png","icon-yacal-05":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-05.png","icon-yacal-06":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-06.png","icon-yacal-07":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-07.png","icon-yacal-08":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-08.png","icon-yacal-09":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-09.png","icon-yacal-10":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-10.png","icon-yacal-11":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-11.png","icon-yacal-12":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-12.png","icon-yacal-13":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-13.png","icon-yacal-14":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-14.png","icon-yacal-15":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-15.png","icon-yacal-16":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-16.png","icon-yacal-17":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-17.png","icon-yacal-18":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-18.png","icon-yacal-19":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-19.png","icon-yacal-20":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-20.png","icon-yacal-21":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-21.png","icon-yacal-22":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-22.png","icon-yacal-23":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-23.png","icon-yacal-24":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-24.png","icon-yacal-25":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-25.png","icon-yacal-26":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-26.png","icon-yacal-27":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-27.png","icon-yacal-28":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-28.png","icon-yacal-29":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-29.png","icon-yacal-30":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-30.png","icon-yacal-31":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-31.png","icon-yacal":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacal-01.png","icon-yacards":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yacards.png","icon-yadirect":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yadirect.png","icon-yadisk":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yadisk.png","icon-yagazeta":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagazeta.png","icon-yagreeting__eng":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting__eng.png","icon-yagreeting":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting.png","icon-yakartinki":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yakartinki.png","icon-yaknigi":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaknigi.png","icon-yamail":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yamail.png","icon-yamaps":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yamaps.png","icon-yamarket":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yamarket.png","icon-yametrika":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yametrika.png","icon-yamoney":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yamoney.png","icon-yamusic":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yamusic.png","icon-yanarod":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yanarod.png","icon-yandexcom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting__eng.png","icon-yandexcomtr":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting__eng.png","icon-yandexfotki":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yandexfotki.png","icon-yandexmusic":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yandexmusic.png","icon-yandexru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting.png","icon-yandexvideo":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yandexvideo.png","icon-yandexwiki":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yandexwiki.png","icon-yanews":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yanews.png","icon-yangutucom":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yangutucom.png","icon-yaotveti":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaotveti.png","icon-yapogoda":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yapogoda.png","icon-yarabota":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yarabota.png","icon-yaraspisania":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaraspisania.png","icon-yarealty":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yarealty.png","icon-yaru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaru.png","icon-yasearch":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yasearch.png","icon-yashare":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yashare.png","icon-yasitesearch":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yasitesearch.png","icon-yaslovari":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yaslovari.png","icon-yasupport":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yasupport.png","icon-yatodo":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting.png","icon-yatv":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yatv.png","icon-yawebmaster":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting.png","icon-yawiki":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yawiki.png","icon-yaxml":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yagreeting.png","icon-yonja":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yonja.png","icon-yourclotheseu":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yourclotheseu.png","icon-youtube":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_youtube.png","icon-yves-rocherru":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_yves-rocherru.png","icon-zoomby":"/mail/static/blocks/jane/jane/b-ico/_service/b-ico_service_zoomby.png","b-mail-icon_blue-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_folder/b-mail-icon_blue-48.png","b-mail-icon_camera-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_folder/b-mail-icon_camera-48.png","b-mail-icon_shared-own-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_folder/b-mail-icon_shared-own-48.png","b-mail-icon_ai-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_ai-48.png","b-mail-icon_application-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_application-48.png","b-mail-icon_archive-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_archive-48.png","b-mail-icon_audio-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_audio-48.png","b-mail-icon_avi-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_avi-48.png","b-mail-icon_bmp-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_bmp-48.png","b-mail-icon_cdr-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_cdr-48.png","b-mail-icon_csv-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_csv-48.png","b-mail-icon_development-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_development-48.png","b-mail-icon_djvu-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_djvu-48.png","b-mail-icon_doc-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_doc-48.png","b-mail-icon_eml-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_eml-48.png","b-mail-icon_exe-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_exe-48.png","b-mail-icon_executable-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_executable-48.png","b-mail-icon_flash-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_flash-48.png","b-mail-icon_font-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_font-48.png","b-mail-icon_general-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_general-48.png","b-mail-icon_gif-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_gif-48.png","b-mail-icon_image-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_image-48.png","b-mail-icon_jpg-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_jpg-48.png","b-mail-icon_mail-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_mail-48.png","b-mail-icon_mov-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_mov-48.png","b-mail-icon_mp3-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_mp3-48.png","b-mail-icon_mp4-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_mp4-48.png","b-mail-icon_narod-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_narod-48.png","b-mail-icon_none-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_none-48.png","b-mail-icon_odp-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_odp-48.png","b-mail-icon_ods-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_ods-48.png","b-mail-icon_odt-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_odt-48.png","b-mail-icon_pcx-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_pcx-48.png","b-mail-icon_pdf-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_pdf-48.png","b-mail-icon_pls-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_pls-48.png","b-mail-icon_png-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_png-48.png","b-mail-icon_ppt-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_ppt-48.png","b-mail-icon_psd-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_psd-48.png","b-mail-icon_rar-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_rar-48.png","b-mail-icon_rtf-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_rtf-48.png","b-mail-icon_script-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_script-48.png","b-mail-icon_text-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_text-48.png","b-mail-icon_tiff-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_tiff-48.png","b-mail-icon_txt-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_txt-48.png","b-mail-icon_video-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_video-48.png","b-mail-icon_virus-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_virus-48.png","b-mail-icon_wav-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_wav-48.png","b-mail-icon_wma-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_wma-48.png","b-mail-icon_wmv-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_wmv-48.png","b-mail-icon_xls-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_xls-48.png","b-mail-icon_zip-48.png":"/mail/static/blocks/jane/jane/b-mail-icon/_file/b-mail-icon_zip-48.png","b-meeting-reminder__bell.png":"/mail/static/blocks/mail/mailbox/b-meeting-reminder/b-meeting-reminder__bell.png","b-box__search.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__search.png","b-box__box-gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__box-gb-present-promo.png","b-box__socials-gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__socials-gb-present-promo.png","b-box__gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__gb-present-promo.png","b-box__songs-gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__songs-gb-present-promo.png","b-box__photo-gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__photo-gb-present-promo.png","b-box__text-gb-present-promo.png":"/mail/static/blocks/jane/jane/b-box/pic/b-box__text-gb-present-promo.png","b-promo_aliases__notepad_rus.png":"/mail/static/blocks/mail/mailbox/b-intruder/_type/b-promo_aliases__notepad_rus.png","b-promo_aliases__notepad_tr.png":"/mail/static/blocks/mail/mailbox/b-intruder/_type/b-promo_aliases__notepad_tr.png","b-promo_aliases__notepad_en.png":"/mail/static/blocks/mail/mailbox/b-intruder/_type/b-promo_aliases__notepad_en.png","b-promo_aliases__notepad_uk.png":"/mail/static/blocks/mail/mailbox/b-intruder/_type/b-promo_aliases__notepad_uk.png"}
/* ../../blocks/_entity.images.json end */

);

/* mail.entity.js end */

/* ../../js/external/atob.js begin */
// window.atob polyfill
// @see https://github.com/inexorabletash/polyfill
(function (global) {
  var B64_ALPHABET = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  global.atob = global.atob || function (input) {
    input = String(input);
    var position = 0,
        output = [],
        buffer = 0, bits = 0, n;

    input = input.replace(/\s/g, '');
    if ((input.length % 4) === 0) { input = input.replace(/=+$/, ''); }
    if ((input.length % 4) === 1) { throw new Error("InvalidCharacterError"); }
    if (/[^+/0-9A-Za-z]/.test(input)) { throw new Error("InvalidCharacterError"); }

    while (position < input.length) {
      n = B64_ALPHABET.indexOf(input.charAt(position));
      buffer = (buffer << 6) | n;
      bits += 6;

      if (bits === 24) {
        output.push(String.fromCharCode((buffer >> 16) & 0xFF));
        output.push(String.fromCharCode((buffer >>  8) & 0xFF));
        output.push(String.fromCharCode(buffer & 0xFF));
        bits = 0;
        buffer = 0;
      }
      position += 1;
    }

    if (bits === 12) {
      buffer = buffer >> 4;
      output.push(String.fromCharCode(buffer & 0xFF));
    } else if (bits === 18) {
      buffer = buffer >> 2;
      output.push(String.fromCharCode((buffer >> 8) & 0xFF));
      output.push(String.fromCharCode(buffer & 0xFF));
    }

    return output.join('');
  };
} (this));

/* ../../js/external/atob.js end */

/* ../../js/common.js begin */
(function(/**Daria*/Daria) {

    Daria.ABOOK_COLORS = [
        '282879', 'd99148', 'd21f1f', '8d2f8d', '59b1b1',
        'e4e400', '996633', '470000', 'd24b4b', '9eb571',
        'ca4275', '0066cc', 'a54ba5', 'a51f1f', '114f00',
        'ff7db1', 'cc6633', '8251b3', '8fd700', 'e15900',
        '3e007c', 'cccc33', '781f1f', '224300', '418200',
        '663399', 'ec6196', '0099cc', 'e18700', '6bab2c',
        'ff925b', '666600', 'a5a51f', '78d2d2', '95ff40',
        'ff6600', 'ffcc33', '663300', '5b5bc9', '333399'
    ];

    var BASE64_COMPAT_RX = /[_-]/g;
    var BASE64_COMPAT_MAP = { '-': '+', '_': '/' };

    /**
     * Регуляка, проверяющая принадлежность контакта корп. почте
     * @constant {RegExp}
     */
    var REG_CHECK_CORP_EMAIL = /^([^@]+)@(ya(?:ndex\-team|money)\.(?:ru|com(\.(tr|ua))?))$/;

    /**
     * Регуляка, проверяющая принадлежность контакта yandex-team домену
     * @constant {RegExp}
     */
    var REG_CHECK_YATEAM_EMAIL = /^([^@]+)@(yandex\-team\.(?:ru|com(\.(tr|ua))?))$/;


    /**
     * Возвращает отформатированную строку для полей to и from. Пример:
     * "Stepan Reznikov" <stepanvr@yandex.ru>, "Василий Пупкин" <vasily@pupkin.ru>
     * @param {Array|Object} items Массив объектов {'email': 'name', ...}
     * @param {Boolean} [excludeUserAddresses=false] Исключать ли собственный адреса из списка.
     */
    Daria.formatContacts = function(items, excludeUserAddresses) {
        var userEmails;
        if (excludeUserAddresses) {
            userEmails = Jane.$H("account-information").getEmails();
        }

        var result = [];

        if (!$.isArray(items)) {
            items = [items];
        }

        for (var i = 0, j = items.length; i < j; i++) {
            var item = items[i];
            var email = item.email;
            var name = item.name;

            if (!email || (excludeUserAddresses && $.inArray(email, userEmails) > -1)) {
                continue;
            }

            if (name === 'no_address' || name === '(адрес не указан)') {
                continue;
            }

            result.push( Jane.FormValidation.obj2contact(item) );
        }

        return result.join(', ');
    };

    /**
     * Итерируется по найденным письмам и вызывает для них callback
     * @param {Node} node Корневая нода.
     * @param {String} classPrefix Префикс класса искомой ноды.
     * @param {Array} ids Массив mid'ов писем.
     * @param {Function} callback Функция вызываемая для каждой найденной ноды.
     */
    Daria.iterateIds = function(node, classPrefix, ids, callback) {
        if (node && ids) {
            for (var i = 0, j = ids.length; i < j; i++) {
                var id = ids[i];
                var rows = node.getElementsByClassName(classPrefix + id);
                for (var k = 0, l = rows.length; k < l; k++) {
                    callback.call(rows[k], id);
                }
            }
        }
    };

    Daria._formWhiteList = ['booking.com', 'google.com', 'livejournal.com', 'mail.ru', 'yandex.ru'];

    /**
     * Предупреждение об отправке данных из формы в письме на внешний сайт.
     * @param {Element} form Форма.
     */
    Daria.formWarning = function(form) {
        var action = form.getAttribute('action');
        var domain = action.split('/')[2];

        if (domain) {
            // проверяем домен по "белому списку"
            domain = domain.split('.').slice(-2).join('.');
            if ($.inArray(domain, Daria._formWhiteList) > 0) {
                return true;
            }
        }

        //TODO: может сделать это delegate событием, вместо onsubmit?
        Jane.ErrorLog.send({
            'event': 'formWarning',
            'host': action
        });

        return window.confirm('Вы отправляете данные на сайт, не имеющий никакого отношения к Яндексу.\nВы уверены?');
    };

    /**
     * Предзагружает письма и треды.
     * Принимает два вида аргументов:
     *   1) массив ids ['123', '456']
     *   2) массив ids и тредов [ '123', ['folder_id', '456'], '789' ]. true означает thread
     * @param {Array} ids Массив id писем.
     */
    Daria.preloadMessages = function(ids) {
        var handlers = [];
        for (var i = 0, j = ids.length; i < j; i++) {
            var preloadInfo = ids[i];
            if ($.isArray(preloadInfo)) {
                handlers.push({
                    handlers: ['messages'],
                    params: {
                        //aandrosov: при запросе треда folder_id не нужен
                        thread_id: preloadInfo[1]/*,
                        current_folder: preloadInfo[0]*/
                    }
                });
            } else {
                handlers.push({
                    // все блоки теперь lazy, в предзагрузке остался самый большой - msg-body
                    // еще из-за message-nearest есть проблема:
                    //   - есть два рядом стоящих непрочитанных сообщений
                    //   - открываем новую вкладку на втором и переходим во входящие
                    //   - два сообщения показаны как непрочитанные, потому что из message-nearest приехала новая инфа для открытого сообщения и оно там еще непрочитано
                    handlers: ['message-body'/*, 'message-nearest'*//*, 'message-thread-nearest'*/],
                    params: {
                        ids: preloadInfo
                    }
                });
            }
        }
        Jane.Handler.getAll(handlers);
    };

    /**
     * Безопасно перерисовывает почту.
     * @param {Boolean} [blockGlobalRun=false] Не использовать глобальный ран.
     */
    Daria.safeMailRedraw = function(blockGlobalRun) {
        // Обновляем протухшие блоки
        if (Jane.watcher.get('pageService') == 'mail') {
            var pageType = Jane.watcher.get('pageType');

            if (pageType == 'messages') {
                var bMessagesBox = Jane.$B("messages-list-box");
                var activeMessages;
                if (bMessagesBox) {
                    activeMessages = bMessagesBox.active;
                }
                if (activeMessages) {
                    if (activeMessages.hasOpenThread()) {
                        blockGlobalRun = true;
                    } else {
                        var table = activeMessages.table;
                        // Сохраняем выделенные чекбоксы
                        if (table) {
                            var selectedIds = table.getIDs();
                            var count = table.getCount();

                            if (count > 1 && (selectedIds.mids || selectedIds.tids)) {
                                Daria.Table.restoreCheckboxes = {
                                    mids: selectedIds.mids,
                                    tids: selectedIds.tids
                                };
                            }
                        }
                    }
                }

            }

            var Page = Jane.Page;

            if (blockGlobalRun ||
                // блокируем глобальный ран, если находимся не в списке писем
                pageType != 'messages' ||
                // если мы находимся в фильтре "непрочитанные"
                (pageType == 'messages' && Page.params.extra_cond == 'only_new')
            ) {
                var bMailLeft = Jane.$B("mail-left");
                // запускаем ран слева только если блок виден
                if (bMailLeft && bMailLeft.visible) {
                    bMailLeft.run(null, Page.updateTitle);
                } else {
                    Page.updateTitle();
                }

            } else {
                Jane.$B("app").run(null, Page.updateTitle);
            }
        }
    };

    /**
     * Очищает тему письма от множественных "Re:" и " Fwd:"
     * @param {String} subject Тема письма.
     * @returns String
     */
    Daria.clearMessageSubject = function(subject) {
        var re = /^(Re|Fwd):\s*/i;
        var startLength;
        var endLength;
        do {
            startLength = subject.length;
            subject = subject.replace(re, '');
            endLength = subject.length;
        } while (startLength != endLength);

        return subject;
    };

    /**
     * Проверяет, что переданные параметры соответствуют простому открытию папки.
     * @param {Object} params Параметры страницы.
     * @return {Boolean}
     */
    Daria.params4SimplePath = function(params) {
        /**
         * Параметры, при которых будет забирать последнее открытое письмо.
         * @constant
         * @type {Object}
         */
        var VALID_PARAMS = {
            'current_folder': null,
            'hide-firstline': null,
            'threaded': null,
            'ids': null,
            'thread_id': null
        };

        for (var name in params) {
            // если в параметрах попадает хоть один лишний параметр,
            // это означает, что мы не открыли простую папку
            if (name.charAt(0) != '_' && !(name in VALID_PARAMS)) {
                return false;
            }
        }

        // в конце проверяем, что у нас все-таки есть current_folder и это не спам или удаленные
        return 'current_folder' in params;
    };

    /**
     * Проверка принадлежности email корп. почтею
     * Выполняется только для корпа.
     * @param {String} email
     * @return {Boolean} false, если не принадлежит корп. почте, или проверка выполнена не на корпе.
     */
    Daria.isCorpEmail = function(email) {
        return Daria.IS_CORP && REG_CHECK_CORP_EMAIL.test(email);
    };

    /**
     * Проверка принадлежности email тольуо yandex-team домену
     *
     * FIXME(rikishi) функция добавлена только для возможности определить почту,
     * логин которой может быть использован для посторения ссылок на корп. проекты,
     * т.к. для yamoney логин в email может отличаться.
     * После того, как будет сделана возможность определения логина по email, функцию следует удалить.
     *
     * @param {String} email
     * @return {Boolean} false, если не принадлежит yandex-team домену, или проверка выполнена не на корпе.
     */
    Daria.isYateamEmail = function(email) {
        return Daria.IS_CORP && REG_CHECK_YATEAM_EMAIL.test(email);
    };

    /**
     * Проверка принадлежить ли ящик службе поддержки
     * @param {string} email
     */
    Daria.isSupportEmail = function(email) {
        // Регуляка, проверяющая пренадлежность контакта поддержке
        var supportEmail = /^(?:[^@]+)@(?:support\.yandex\.(?:ru|ua|com|com\.tr|com\.ua))$/;
        return supportEmail.test(email);
    };

    /**
     * Проверка, что email является ЦА
     * Формат:
     * +123123@ya.ru
     * 123123@yandex.ru
     *
     * @param {String} email
     * @param {Object} [paramsEmail] составные части мыла
     * @return {Boolean}
     */
    Daria.isCAEmail = function(email, paramsEmail) {
        var m = email.match(/^(\+?\d+)@ya(?:ndex)?\./);

        if (!m) {
            return false;
        }

        if (paramsEmail) {
            paramsEmail.phone = m[1];
        }

        return true;
    };

    /**
     * Окрывает композ либо в текущем, либо в новом окне.
     * Варианты вызова:
     *   Daria.composeGo() - переход на "#compose"
     *   Daria.composeGo(callback) - переход на "#compose" с колбэком
     *   Daria.composeGo(url) - переход на url
     *   Daria.composeGo(url, callback) - переход на url с колбэком
     *   Daria.composeGo(url, true) - переход на url с колбэком
     * @param {String} [url='#compose']  Урл композа.
     * @param {Function|Boolean} [newWindowOrCallback=false]  Если функция, то композ открывается в текущем окне
     *                                                        и она считается колбэком.
     *                                                        Если true, to композ откроется в новом окне.
     */
    Daria.composeGo = function(url, newWindowOrCallback) {
        var callback;
        if ($.isFunction(url)) {
            callback = url;
            url = null;
        }
        url = url || '#compose';

        if (newWindowOrCallback === true) {
            Daria.openNewWindow('?page=3pane-wnd' + url, 'compose' + $.now());
        } else {
            callback = callback || ($.isFunction(newWindowOrCallback) ? newWindowOrCallback : null);
            Jane.Page.go(url, callback);
        }
    };

    /**
     * Объект, в котором хранятся id-шники свежих черновиков, которые юзер не захотел дописывать (DARIA-4503)
     * P.S. Раньше он находился в Daria.Compose, но т.к. в 3pane из основного окна композ выпилили и в нем этого объекта нет,
     * то теперь храним их здесь.
     */
    Daria.disabledDrafts = {};

    Daria.openNewWindow = function(url, name) {
        var width = 1000;
        var height = 500;
        name = name || 'daria_wnd_' + $.now();
        var params = [
            'location=no',
            'menubar=no',
            'toolbar=no',
            'resizable=yes',
            'scrollbars=yes',
            'status=yes',
            'height=' + height,
            'width=' + width,
            'top=' + Math.floor((window.screen.height - height) / 2),
            'left=' + Math.floor((window.screen.width - width) / 2)
        ];
        window.open(url, name, params.join(','));
    };

    Daria.getUrlParams = function() {
        var match;
        var pl = /\+/g;
        var search = /([^&=]+)=?([^&]*)/g;
        var query = window.location.search.substring(1);
        var decode = function(s) {
            return decodeURIComponent(s.replace(pl, " "));
        };

        var urlParams = {};
        while ( (match = search.exec(query)) ) {
            urlParams[decode(match[1])] = decode(match[2]);
        }

        return urlParams;
    };

    Daria.uidEnds = function(uids) {
        if ($.isArray(uids) && uids.length) {
            var len = String(uids[0]).length;
            var uid = parseInt(Daria.uid.slice(-len), 10);
            return $.inArray(uid, uids) > -1;
        }
        return false;
    };

    /**
     * Проверяет, что переданные параметры соответствуют письму, открытому из поиска
     * @param {Object} params Параметры страницы.
     * @return {Boolean}
     */
    Daria.isMessageFromSearch = function(params) {
        var prev = Jane.Page.History.prev(0);
        var fromSearch = prev && prev.params._page === 'messages' && prev.params.search == "yes";

        if (params._page == 'message' && params.ids && fromSearch) {
            return true;
        }

        return false;
    };

    /**
     * Декодирование base64 для ссылок
     * @param {String} url URL, закодированный base64
     * @returns {String}
     */
    Daria.base64UrlDecode = function(url) {
        url = window.atob(url.replace(BASE64_COMPAT_RX, function(c) {
            return BASE64_COMPAT_MAP[c];
        }));

        // https://developer.mozilla.org/en-US/docs/Web/API/window.btoa
        // Фикс для не ASCII символов.
        return decodeURIComponent(escape(url));
    };

    /**
     * Выполняет утверждение
     *
     * @param {Boolean|*} assertion        Утверждение
     * @param {String} description         Описание
     * @param {String} [assertNamespace]   Пространство имен для утверждений
     * @param {Function} callback          Вызываемая функция в случае если пространство имен совпало
     */
    Daria.assert = function(assertion, description, assertNamespace, callback) {
        assertNamespace = assertNamespace || null;
        var debug = Daria.DEBUG;
        var solutionKey;
        var solution;
        var ALL_ASSERTION_MODE = 'all-assertions';
        var OBTRUSIVE_ASSERTION_MODE = 'obtrusive-assertions';

        var assertResult = ( assertion ) ? 'PASS' : 'FAIL';

        var debugMode;

        switch (debug) {

        case assertNamespace:
            debugMode = 'assert-namespace';
            break;

        case OBTRUSIVE_ASSERTION_MODE:
        case ALL_ASSERTION_MODE:
            debugMode = debug;
            break;

        default:
            debugMode = ( debug ) ? 'default-debug': 'disable-debug';
        }

        var multiCall = function(callbacks) {
            if (!$.isArray(callbacks) && arguments.length) {
                callbacks = Array.prototype.slice.call(arguments);
            }
            return function(ctx, argList) {
                ctx = ctx || null;
                argList = argList || [];
                $.each(callbacks, function(ix, fn) {
                    if ($.isFunction(fn)) {
                        fn.apply(ctx, argList);
                    }
                });
            };
        };

        var consoleAssert = function(assertResult, description) {
            if (console.assert) {
                console.assert(assertResult === 'PASS', description);
            } else {
                if (assertResult === 'FAIL') {
                    throw new Error(description + ': ' + assertResult);
                }
            }

        };

        var alertAssert = function(assertResult, description) {
            alert(description + ': ' + assertResult);
        };

        var nop = function() {};

        callback = callback || function(assertResult, description) {
            if (assertResult === 'FAIL') {
                throw new Error(description + ': ' + assertResult);
            }
        };

        var solutionTable = {
            'obtrusive-assertions:PASS': multiCall(consoleAssert),
            'obtrusive-assertions:FAIL': multiCall(alertAssert, consoleAssert),

            'all-assertions:PASS': multiCall(consoleAssert),
            'all-assertions:FAIL': multiCall(consoleAssert),

            'assert-namespace:PASS': multiCall(callback, consoleAssert),
            'assert-namespace:FAIL': multiCall(callback, alertAssert, consoleAssert),

            'default-debug:PASS': multiCall(consoleAssert),
            'default-debug:FAIL': multiCall(consoleAssert),

            'disable-debug:PASS': nop,
            'disable-debug:FAIL': nop
        };

        solutionKey = [debugMode, assertResult].join(':');
        solution = solutionTable[solutionKey];
        solution(null, [assertResult, description]);

    };

    /**
     * Возвращает возраст аккаунта в днях
     *
     * @returns {Number} Сколько полных дней прошло c момента регистрации
     */
    Daria.getAccountAgeInDays = function() {
        var account = Jane.$H('account-information');
        return (Daria.now() - account.getData().reg_date) / 86400000;
    };

    /**
     * Конвертирует временные параметры в миллисекунды или другие единицы времени
     *
     * @static
     *
     * @param {Object} timifyParams
     * @param {Number} [timifyParams.seconds]
     * @param {Number} [timifyParams.minutes]
     * @param {Number} [timifyParams.hours]
     * @param {Number} [timifyParams.days]
     * @param {Number} [timifyParams.weeks]
     * @param {Number} [timifyParams.months] в расчете 30 дней в месяце !!!
     * @param {Number} [timifyParams.years] в расчете 12 месяцев в году === 360 дней !!!
     *
     * @param {Object} outputEntity {'seconds'|'timestamp'|'minutes'|'hours'|'days'|'months'|'years'}
     * @description timestamp(UNIX timestamp) то же самое, что и секунды
     *
     * @returns {Number}
     */
    Daria.timify = function(timifyParams, outputEntity) {
        outputEntity = outputEntity || 'milliseconds';
        var denominator;
        var entityInMilliseconds;

        var dateEntities = {
            milliseconds: 1,
            seconds: 1000,
            timestamp: 1000,
            minutes: 60000,
            hours: 3600000,
            days: 86400000,
            weeks: 604800000,
            months: 2592000000,
            years: 31104000000
        };

        if (!timifyParams) {
            throw new Error('Not provided any time parameter');
        }

        var milliseconds = _.chain(timifyParams).pairs().reduce(function(totalTime, timeSetting) {
            var timeEntity = timeSetting[0];
            var quantity = timeSetting[1];
            var entityInMilliseconds = dateEntities[timeEntity];

            if (entityInMilliseconds) {
                return totalTime + entityInMilliseconds * quantity;
            }
            throw new TypeError('Unknow time entity in timeSettings');

        }, 0).value();


        entityInMilliseconds = dateEntities[outputEntity];
        if (!entityInMilliseconds) {
            throw new TypeError('Unknow time entity in timeSettings');
        }

        denominator = dateEntities[outputEntity];

        return milliseconds / denominator;
    };

    /**
     * Колбэк для метрики
     * @callback metrikaCallback
     * @param {string|Array} base - База метрики
     * @param {string|Array} path - Остаток пути
     */

    /**
     * Аспектное декларирование метрики
     *
     * @param {string|Array} metrikaBase - Базовая / Корневая ветвь метрики
     * @param {Object} objectToDecorate - объект, методы которого будем декорировать
     * @param {Object} metrikaConfig - декларация метрики @see example
     * @param {metrikaCallback} [metrikaCallback] - метричный метод
     *
     * @example
     *
     * var bubble = {
     *     show: _.noop,
     *     onClickButton: _.noop,
     *     onFatalError: _.noop,
     *     metrika: function(base, path) {Jane.c(base.concat(path);}
     * };
     *
     * Daria.decorateMetrika('Экстраординарный бабл', bubble, {
     *     show: [
     *         '@once', // модификатор, гарантирует, что данный счетчик в рамках сессии жизни объекта выполнится не более 1 раза
     *         'Показ' // При вызове метода show получим метрику вида "Экстраординарный бабл => Показ"
     *     ],
     *     onClickButton: ['Цель выполнена'], // Получим метрику вида "Экстраординарный бабл => Цель выполнена"
     *     onFatalError: ['Ошибка', 'КРАХ'] // Получим метрику вида "Экстраординарный бабл => Ошибка => КРАХ"
     * }, bubble.metrika.bind(bubble));
     *
     * TODO(hexode): можно подержать передачу в декларации метода вместо массива с целью вычисления
     * динамической метрики
     */
    Daria.initializeMetrika = function(metrikaBase, objectToDecorate, metrikaConfig, metrikaCallback) {
        if (!metrikaBase) {
            throw new Error('initializeMetrika: parameter `metrikaBase` is required');
        }
        if (!objectToDecorate) {
            throw new Error('initializeMetrika: parameter `objectToDecorate` is required');
        }
        if (!_.isObject(metrikaConfig)) {
            throw new Error('initializeMetrika: parameter `metrikaConfig` is required and must be object');
        }

        // Защита от двойного декорирования
        if (objectToDecorate._isMetrikaInitialized) {
            return;
        }

        metrikaCallback = metrikaCallback || function(base, path) {
            Jane.c([].concat(base, path));
        };

        _(metrikaConfig).forEach(function(metrikaPath, methodName) {
            metrikaPath = [].concat(metrikaPath);
            var method = objectToDecorate[methodName];
            if (!_.isFunction(method)) {
                throw new ReferenceError('initializeMetrika: no method `' + methodName + '` found or it\'s not a function');
            }

            // partial выполняет две цели: частично применяет к колбеку
            // параметр metrikaBase и создает новую функцию для каждого метода, что
            // дает возможность безопасно использовать _.once
            var metrikaFunc = _.partial(metrikaCallback, metrikaBase);

            if (_.first(metrikaPath) === '@once') {
                metrikaPath = _.rest(metrikaPath);
                metrikaFunc = _.once(metrikaFunc);
            }

            objectToDecorate[methodName] = _.wrap(method, function(method) {
                // TODO: здесь можно добавить логирование метрики для облегченного дебага
                metrikaFunc(metrikaPath);
                return method.apply(objectToDecorate, _.rest(arguments));
            });
        });

        objectToDecorate._isMetrikaInitialized = true;
    };

    /**
     * Привязывает обработчики событий, описанные в `data-event` атрибутах DOM-элементов.
     * Значение `data-event` — строка в формате `<eventType>.<handlerName> [, <eventType>.<handlerName>]`.
     * N.B.: при указании нескольких обработчиков для одного типа события, выполняться будет только первый.
     *
     * Удобно использовать вне блоков/вьюх/whatever для декларативного описания обработчиков событий в шаблоне.
     *
     * @param {jquery} $node Нода, внутри которой ищем элементы c описанными событиями,
     *     также на неё вешается делегированный обработчик событий.
     * @param {object} handlersSource Объект, методы которого будут вызываться при срабатывании событий. This у методов будет handlersSource.
     * @param {string} [selector] Уточняющий селектор, который будет приписываться в начало к `[data-event]`
     * @param {string} [eventNamespace='.dataevent'] Namespace событий, по умолчанию `.dataevent`. Можно передавать без точки в начале.
     *
     * @example
     * // При клике на label будет вызываться обработчик obj.bar,
     * // при фокусе на span будет вызываться обработчик obj.baz.
     * var $node =  $('<div>' +
     *     '<label data-event="click.bar"></label>' +
     *     '<span data-event="focusin.baz"></span>' +
     *     '</div>');
     * var obj = {
     *     bar: function(event) {
     *         // внутрь обработчика передаётся инстанс jQuery.Event
     *         console.log(event instanceof $.Event); // true
     *     },
     *     baz: $.noop
     * };
     * Daria.bindDataAttrEvents($node, obj);
     *
     * @example
     * // При клике на label будет вызываться обработчик obj.bar,
     * // а при фокусе на нём — обработчик obj.focusinbar.
     * var $node =  $('<div>' +
     *     '<label data-event="click.bar, focusin.focusinbar"></label>' +
     *     '</div>');
     * var obj = {
     *     bar: $.noop,
     *     focusinbar: $.noop
     * };
     * Daria.bindDataAttrEvents($node, obj);
     *
     * @example
     * // Бывает удобно указать уточняющий селектор для поиска элементов. Например, nanoislands иногда навешивает атрибуты
     * // не только на внешнюю ноду наноблока, а класс только на внешнюю, а найти надо только одну.
     * var $node =  $('<div>' +
     *     '<label class="someclass" data-event="click.bar">' +
     *     '<span data-event="click.bar"></span>' +
     *     '</label>' +
     *     '</div>');
     * var obj = {
     *     bar: $.noop
     * };
     * Daria.bindDataAttrEvents($node, obj, '.someclass'); // при клике на span, obj.bar вызовется не два раза, а один
     *
     * * @example
     * // Можно указывать свой неймспейс для событий
     * var $node =  $('<div>' +
     *     '<label data-event="click.bar"></label>' +
     *     '<span data-event="focusin.baz"></span>' +
     *     '</div>');
     * var obj = {
     *     bar: $.noop,
     *     baz: $.noop
     * };
     * Daria.bindDataAttrEvents($node, obj, null, 'myns');
     * // Для отвязки событий достаточно $node.off('.myns');
     */
    Daria.bindDataAttrEvents = function($node, handlersSource, selector, eventNamespace) {
        if (_.isUndefined($node) && _.isUndefined(handlersSource)) {
            throw new Error('bindDataAttrEvents takes at least 2 arguments');
        }
        if (!($node instanceof jQuery)) {
            throw new Error('bindDataAttrEvents: parameter `$node` is required and must be a Jquery instance');
        }
        if (!_.isObject(handlersSource)) {
            throw new Error('bindDataAttrEvents: parameter `handlersSource` is required and must be an object');
        }
        selector = (selector ? selector : '') + '[data-event]';
        eventNamespace = eventNamespace ? eventNamespace : '.dataevent';
        if (eventNamespace.indexOf('.') !== 0) {
            eventNamespace = '.' + eventNamespace;
        }

        // Массив объектов с данными обо всех найденых событиях,
        // из него позже составляем список уникальных событий для первого параметра $.fn.on,
        // т.к. используем делегирование.
        var allEventsData = [];

        $node.find(selector).each(function() {
            var $el = $(this);

            // Массив с данными о всех найденных событиях для одного DOM-элемента
            var elEventsData = [];
            $el.data('event').split(/\s*,\s*/).forEach(function(eventInfo) {
                eventInfo = [].concat(eventInfo.match(/(\w+)\.(\w+)/)).slice(1);

                if (eventInfo.length !== 2) {
                    throw new Error('bindDataAttrEvents: invalid `data-event` attribute, must be in `<eventType>.<handlerName>` format');
                }

                var type = eventInfo[0];
                var handlerName = eventInfo[1];

                if (!_.isFunction(handlersSource[handlerName])) {
                    throw new ReferenceError('bindDataAttrEvents: no method `' + handlerName + '` found');
                }

                elEventsData.push({
                    type: type,
                    handlerName: handlerName
                });
            });
            // В data-event теперь храним не строку, а массив объектов с данными о событиях для элемента,
            // таким образом, при срабатывании события не нужно ещё раз распаршивать строку.
            $el.data('event', elEventsData);
            allEventsData = allEventsData.concat(elEventsData);
        });

        function getNamespacedEventType(eventType) {
            return eventType + eventNamespace;
        }

        $node.on(_(allEventsData).pluck('type').uniq().map(getNamespacedEventType).values().join(' '), selector, function(event) {
            var handlerName = _.find($(this).data('event'), {type: event.type}).handlerName;
            handlersSource[handlerName].call(handlersSource, event);
        });
    };
})(Daria);



(function() {
    'use strict';
    // TODO: вынести его в components
    /**
     * Миксин для добавления к объекту publisher/subscriber pattern функциональности
     */
    var PubSubMixin = Daria.PubSubMixin = function() {};


    /**
     * Метод для добавления обработчиков событий.
     *
     * @param {String} eventName    Название события.
     * @param {Function} listener   Обработчик.
     */
    PubSubMixin.on = function(eventName, listener) {
        var that = this;
        var SECOND_ARGUMENT_IX = 1;

        $(this).bind(eventName, function() {
            listener.apply(that, Array.prototype.slice.call(arguments, SECOND_ARGUMENT_IX));
        });
    };

    /**
     * Добавить обработчик события, который выполнится один раз, после чего уничтожит себя
     *
     * @param {String} eventName    Название события.
     * @param {Function} listener   Обработчик.
     */
    PubSubMixin.once = function(eventName, listener) {
        var that = this;
        var SECOND_ARGUMENT_IX = 1;

        $(this).bind(eventName, function() {
            listener.apply(that, Array.prototype.slice.call(arguments, SECOND_ARGUMENT_IX));
            that.off(eventName, listener);
        });
    };

    /**
     * Удаляет обработчик события
     *
     * @param {String} eventName    Название события.
     * @param {Function} listener   Обработчик.
     */
    PubSubMixin.off = function(eventName, listener) {
        $(this).unbind(eventName, listener);
    };

    /**
     * Тригерит на себе событие
     *
     * @param {String} eventName   имя события
     * @returns {Object}            chainable
     */
    PubSubMixin.trigger = function(eventName, data) {
        var $this = $(this);

        $this.triggerHandler(eventName, data);
        return this;
    };

})(Daria);

/* ../../js/common.js end */

/* ../../js/watchers.js begin */
(function(/**Jane*/Jane) {
    Jane.watcher.set('folder-actions-mode', false);
    Jane.watcher.set('daria:selection-mode', false);

    var defaultFolders = [ "spam", "trash", "sent", "draft", "template", "archive" ];

    Jane.events.bind("pageKey.change", function() {
        var Page = Jane.Page;
        var params = Page.params;
        var fid;
        var type = Page.type;
        if (type == "messages") {
            fid = params.current_folder;

        } else if (type == "message") {
            fid = Jane.$H("message").getFolderId(params.ids);

        } else {
            return;
        }

        Jane.watcher.set('currentFolder', fid);

        var ids = Jane.$H("folders").ids;
        $.each(defaultFolders, function(i, name) {
            Jane.watcher.set("its-" + name, (ids[name] && ids[name] == fid));
        });
    });

    Jane.watcher.watch("all-selected-is-read", {
        get: function() {
            var ids = Jane.Page.getSelectedMessagesIds();
            if (ids) {
                var selectedInfo = Jane.$H("message").getSelectedInfo(ids);
                return (selectedInfo.read > 0 && selectedInfo.all == selectedInfo.read);
            }

            return false;
        },
        deps: [ "selectedCount" ]
    });
})(Jane);

/* ../../js/watchers.js end */

/* ../../js/jquery/jquery.fixedscroll.js begin */
(function($) {

    var FixedScroll = function(mainScroller, selector) {
        this._$main = $(mainScroller);

        this._onViewScrollBinded = $.proxy(this._onViewScroll, this);
        this._$blocks = this._$main
            .on('scroll.fixedscroll', $.proxy(this.recalc, this))
            .find(selector)
            .on('scroll.fixedscroll', this._onViewScrollBinded);

        this.recalc();
    };

    FixedScroll.prototype = {

        /**
         * Add new block to collection.
         * @param {jQuery} block New block(s)
         * @return {FixedScroll}
         */
        addBlock: function(block) {
            this._$blocks = this._$blocks.add(block);
            block.on('scroll.fixedscroll', this._onViewScrollBinded);

            return this;
        },

        destroy: function() {
            this._$main.off('.fixedscroll');
            this._$blocks.off('.fixedscroll');

            // remove scroller
            if (this._$scroller) {
                this._$scroller.off('.fixedscroll').remove();
                delete this._$scroller;
            }
        },

        /**
         * Lazy custom scroller creator.
         * @param {Boolean} [preventInitIfNotExists=false] Prevent scroller init if it isn't exists&
         * @return {jQuery}
         * @private
         */
        _getCustomScroller: function(preventInitIfNotExists) {
            if (!this._$scroller && !preventInitIfNotExists) {
                this._$scroller = $('<div class="jquery-fixedscroll" style="display: none;"><div class="jquery-fixedscroll__i"></div></div>')
                    .on('scroll.fixedscroll', $.proxy(this._onCustomScroll, this))
                    .appendTo(this._$main);
            }

            return this._$scroller;
        },

        /**
         *
         * @private
         */
        _onCustomScroll: function(e) {
            if (this._curBlock) {
                this._curBlock.scrollLeft = e.currentTarget.scrollLeft;
            }
        },

        /**
         * Process scroll event on inner scrolled blocks.
         * @param {Event} e Scroll event.
         * @private
         */
        _onViewScroll: function(e) {
            var target = e.currentTarget;
            // check current block and scroll target
            if (this._curBlock && this._curBlock === target) {
                this._getCustomScroller().scrollLeft(target.scrollLeft);
            }
        },

        /**
         * Process current blocks. Hide or show custom scroll if needed.
         */
        recalc: function() {
            for (var i = 0, j = this._$blocks.length; i < j; i++) {
                var block =  this._$blocks[i];

                var scrollWidth = block.scrollWidth;
                var offsetWidth = block.offsetWidth;
                // has scroll
                if (scrollWidth > offsetWidth) {
                    var $block = $(block);
                    var mainScrollerOffset = this._$main.offset();
                    var scrollerTop = this._$main[0].scrollTop;

                    var blockOffset = $block.offset();

                    var blockTop = blockOffset.top - mainScrollerOffset.top + scrollerTop;
                    var blockBottom = blockTop + block.offsetHeight;


                    var scrollerBottom = scrollerTop + this._$main[0].offsetHeight;

                    /**
                     * @type {Boolean}
                     */
                    var blockTopInViewport = scrollerTop <= blockTop && blockTop <= scrollerBottom;

                    /**
                     * @type {Boolean}
                     */
                    var blockBottomInViewport = scrollerTop <= blockBottom && blockBottom <= scrollerBottom;

                    /**
                     * @type {Boolean}
                     */
                    var blockMiddleInViewport = scrollerTop >= blockTop && blockBottom >= scrollerBottom;

                    // общее определение, что письмо находится в видимой области
                    if ((blockTopInViewport || blockMiddleInViewport) && !blockBottomInViewport) {
                        this._setScroller(block);
                        continue;
                    }
                }

                // видна нижняя граница - сбрасываем кастомный скролл
                this._resetScroller(block);
            }
        },

        _setScroller: function(associatedBlock) {
            // if we change associatedBlock or changed width in current block
            if (associatedBlock != this._curBlock || associatedBlock.offsetWidth != this._curBlockWidth) {
                var $customScroller = this._getCustomScroller();

                /**
                 * Current scrolled block in view.
                 * @type {Node}
                 * @private
                 */
                this._curBlock = associatedBlock;

                /**
                 * Cached width of current scrolled block.
                 * @type {Number}
                 * @private
                 */
                this._curBlockWidth = associatedBlock.offsetWidth;

                $customScroller.width(this._curBlockWidth);
                $customScroller.find(':first').width(associatedBlock.scrollWidth);
                $customScroller.show();
                $customScroller.scrollLeft(associatedBlock.scrollLeft);

            }
        },

        _resetScroller: function(associatedBlock) {
            if (associatedBlock == this._curBlock) {
                var $customScroller = this._getCustomScroller(true);
                if ($customScroller) {
                    $customScroller.hide();
                }
                // reset cached data
                delete this._curBlockWidth;
                delete this._curBlock;
            }
        }
    };

    $.fn.fixedScroll = function(selector) {
        return new FixedScroll(this, selector);
    };

})(jQuery);

/* ../../js/jquery/jquery.fixedscroll.js end */

/* ../../js/tiny_mce/jquery.tinymce.js begin */
(function (c) {
    var b, e, a = [],
        d = window;
    c.fn.tinymce = function (j) {
        var p = this,
            g, k, h, m, i, l = "",
            n = "";
        if (!p.length) {
            return p
        }
        if (!j) {
            return tinyMCE.get(p[0].id)
        }
        p.css("visibility", "hidden");

        function o() {
            var r = [],
                q = 0;
            // if (f) {
            //     f();
            //     f = null
            // }
            p.each(function (t, u) {
                var s, w = u.id,
                    v = j.oninit;
                if (!w) {
                    u.id = w = tinymce.DOM.uniqueId()
                }
                s = new tinymce.Editor(w, j);
                r.push(s);
                s.onInit.add(function () {
                    var x, y = v;
                    p.css("visibility", "");
                    if (v) {
                        if (++q == r.length) {
                            if (tinymce.is(y, "string")) {
                                x = (y.indexOf(".") === -1) ? null : tinymce.resolve(y.replace(/\.\w+$/, ""));
                                y = tinymce.resolve(y)
                            }
                            y.apply(x || tinymce, r)
                        }
                    }
                })
            });
            c.each(r, function (t, s) {
                s.render()
            })
        }
        if (!d.tinymce && !e && (g = j.script_url)) {
            e = 1;
            h = g.substring(0, g.lastIndexOf("/"));
            if (/_(src|dev)\.js/g.test(g)) {
                n = "_src"
            }
            m = g.lastIndexOf("?");
            if (m != -1) {
                l = g.substring(m + 1)
            }
            d.tinyMCEPreInit = d.tinyMCEPreInit || {
                base: h,
                suffix: n,
                query: l
            };
            if (g.indexOf("gzip") != -1) {
                i = j.language || "en";
                g = g + (/\?/.test(g) ? "&" : "?") + "js=true&core=true&suffix=" + escape(n) + "&themes=" + escape(j.theme) + "&plugins=" + escape(j.plugins) + "&languages=" + i;
                if (!d.tinyMCE_GZ) {
                    tinyMCE_GZ = {
                        start: function () {
                            tinymce.suffix = n;

                            function q(r) {
                                tinymce.ScriptLoader.markDone(tinyMCE.baseURI.toAbsolute(r))
                            }
                            q("langs/" + i + ".js");
                            q("themes/" + j.theme + "/editor_template" + n + ".js");
                            q("themes/" + j.theme + "/langs/" + i + ".js");
                            c.each(j.plugins.split(","), function (s, r) {
                                if (r) {
                                    q("plugins/" + r + "/editor_plugin" + n + ".js");
                                    q("plugins/" + r + "/langs/" + i + ".js")
                                }
                            })
                        },
                        end: function () {}
                    }
                }
            }
            c.ajax({
                type: "GET",
                url: g,
                dataType: "script",
                cache: true,
                success: function () {
                    tinymce.dom.Event.domLoaded = 1;
                    e = 2;
                    if (j.script_loaded) {
                        j.script_loaded()
                    }
                    o();
                    c.each(a, function (q, r) {
                        r()
                    })
                }
            })
        } else {
            if (e === 1) {
                a.push(o)
            } else {
                o()
            }
        }
        return p
    };
    // c.extend(c.expr[":"], {
    //     tinymce: function (g) {
    //         return !!(g.id && "tinyMCE" in window && tinyMCE.get(g.id))
    //     }
    // });

    // function f() {
    //     function i(l) {
    //         if (l === "remove") {
    //             this.each(function (n, o) {
    //                 var m = h(o);
    //                 if (m) {
    //                     m.remove()
    //                 }
    //             })
    //         }
    //         this.find("span.mceEditor,div.mceEditor").each(function (n, o) {
    //             var m = tinyMCE.get(o.id.replace(/_parent$/, ""));
    //             if (m) {
    //                 m.remove()
    //             }
    //         })
    //     }
    //     function k(n) {
    //         var m = this,
    //             l;
    //         if (n !== b) {
    //             i.call(m);
    //             m.each(function (p, q) {
    //                 var o;
    //                 if (o = tinyMCE.get(q.id)) {
    //                     o.setContent(n)
    //                 }
    //             })
    //         } else {
    //             if (m.length > 0) {
    //                 if (l = tinyMCE.get(m[0].id)) {
    //                     return l.getContent()
    //                 }
    //             }
    //         }
    //     }
    //     function h(m) {
    //         var l = null;
    //         (m) && (m.id) && (d.tinymce) && (l = tinyMCE.get(m.id));
    //         return l
    //     }
    //     function g(l) {
    //         return !!((l) && (l.length) && (d.tinymce) && (l.is(":tinymce")))
    //     }
    //     var j = {};
    //     c.each(["text", "html", "val"], function (n, l) {
    //         var o = j[l] = c.fn[l],
    //             m = (l === "text");
    //         c.fn[l] = function (s) {
    //             var p = this;
    //             if (!g(p)) {
    //                 return o.apply(p, arguments)
    //             }
    //             if (s !== b) {
    //                 k.call(p.filter(":tinymce"), s);
    //                 o.apply(p.not(":tinymce"), arguments);
    //                 return p
    //             } else {
    //                 var r = "";
    //                 var q = arguments;
    //                 (m ? p : p.eq(0)).each(function (u, v) {
    //                     var t = h(v);
    //                     r += t ? (m ? t.getContent().replace(/<(?:"[^"]*"|'[^']*'|[^'">])*>/g, "") : t.getContent({
    //                         save: true
    //                     })) : o.apply(c(v), q)
    //                 });
    //                 return r
    //             }
    //         }
    //     });
    //     c.each(["append", "prepend"], function (n, m) {
    //         var o = j[m] = c.fn[m],
    //             l = (m === "prepend");
    //         c.fn[m] = function (q) {
    //             var p = this;
    //             if (!g(p)) {
    //                 return o.apply(p, arguments)
    //             }
    //             if (q !== b) {
    //                 p.filter(":tinymce").each(function (s, t) {
    //                     var r = h(t);
    //                     r && r.setContent(l ? q + r.getContent() : r.getContent() + q)
    //                 });
    //                 o.apply(p.not(":tinymce"), arguments);
    //                 return p
    //             }
    //         }
    //     });
    //     c.each(["remove", "replaceWith", "replaceAll", "empty"], function (m, l) {
    //         var n = j[l] = c.fn[l];
    //         c.fn[l] = function () {
    //             i.call(this, l);
    //             return n.apply(this, arguments)
    //         }
    //     });
    //     j.attr = c.fn.attr;
    //     c.fn.attr = function (o, q) {
    //         var m = this,
    //             n = arguments;
    //         if ((!o) || (o !== "value") || (!g(m))) {
    //             if (q !== b) {
    //                 return j.attr.apply(m, n)
    //             } else {
    //                 return j.attr.apply(m, n)
    //             }
    //         }
    //         if (q !== b) {
    //             k.call(m.filter(":tinymce"), q);
    //             j.attr.apply(m.not(":tinymce"), n);
    //             return m
    //         } else {
    //             var p = m[0],
    //                 l = h(p);
    //             return l ? l.getContent({
    //                 save: true
    //             }) : j.attr.apply(c(p), n)
    //         }
    //     }
    // }
})(jQuery);

/* ../../js/tiny_mce/jquery.tinymce.js end */

/* ../../jane/js/lib/monogram.js begin */
(function(global) {

    var REG_MONOGRAM_SPLIT = /[^a-zа-яё0-9]/i;
    var REG_CYRILLIC_FIX = /%/g;
    var REG_MONOGRAM_SANITIZED = /['"()<>]/g;
    var REG_MONOGRAM_MAIL = /^[a-zа-яё0-9]/i;
    var REG_CAPITALS = /[A-ZА-ЯЁ]/g;
    /*
     * Достает монограмму из строки без дальнейшей кодировки
     */
    function extractMonogram(str) {
        if (!str) {
            return;
        }

        str = String(str);
        str = str.replace(REG_MONOGRAM_SANITIZED, '');

        if (!str) {
            return;
        }


        var strParts = str.split(REG_MONOGRAM_SPLIT);
        var capitals = strParts[0].match(REG_CAPITALS) || [];
        if (capitals.length) {
            // если первая буква оригинальной строки прописная, то удаляем ее из массива матчей
            if (str.charAt(0).match(REG_CAPITALS)) {
                capitals = capitals.slice(1);
            }
        }

        // кейс  dydka2@yandex.ru -> D
        if (str.indexOf('@') !== -1 && REG_MONOGRAM_MAIL.test(str)) {
            str = str.charAt(0);

        // кейс  db -> DB
        } else if (strParts[0].length === 2) {
            str = strParts[0];

        // кейс  iBookStore.ru -> IB
        } else if (capitals.length) {
            str = strParts[0].charAt(0) + capitals[0];

        // кейс  Book Store -> BS
        } else if (strParts.length > 1) {
            str = strParts[0].charAt(0) + strParts[1].charAt(0);

        } else {
            str = strParts[0].charAt(0);
        }

        return str.toUpperCase();
    }

    /*
     * Достает закодированную монограмму из строки для передачи в хранилище монограмм
     */
    function createMonogram(str) {
        var monogram = extractMonogram(str);
        if (!monogram) {
            return;
        } else {
            return encodeURI(monogram).replace(REG_CYRILLIC_FIX, '')
        }
    }

    var monogramObj = {
        extractMonogram: extractMonogram,
        createMonogram: createMonogram
    };

    if (global.Daria) {
        global.Daria.Monogram = monogramObj;
    }

    return monogramObj;

})(this);


/* ../../jane/js/lib/monogram.js end */


(function($, /**Daria*/Daria, /**Jane*/Jane) {
    /* jshint unused: false */

    // js от tinyMCE грузится по фриженному урлу, поэтому надо вручную указывать base
    window.tinyMCEPreInit = {
        base: Jane.getEntity('mail-root') + '/js/tiny_mce',
        query: "",
        suffix: ""
    };

    /* ../../js/daria.messageaction.js begin */
/**
 * Создает MessageAction
 * @augments Jane.Action
 * @class MessageAction - обертка над Jane.Action, которая автоматически прокидывает параметры писем, с которыми сейчас ведется работа на странице.
 * @constructor
 * @name Daria.MessageAction
 * @param {String} id
 * @param {Function} _run
 * @param {Boolean} _status
 */
Daria.MessageAction = function(id, _run, _status) {
    Jane.Action.call(this, id, _run, _status || Daria.MessageAction._defaultStatus);

    Daria.MessageAction._init(id);
};

var MessageAction = Daria.MessageAction;

MessageAction._init = function(id) {
    var customStatus = MessageAction._customStatus[id];
    var deps = ['selected', 'pageKey'];
    var status;

    if (customStatus) {
        if ($.isFunction(customStatus)) {
            customStatus = {status: customStatus};
        }
        status = function() {
            return MessageAction._defaultStatus() && customStatus.status();
        };
        if (customStatus.deps) {
            $.merge(deps, customStatus.deps);
        }
    } else {
        status = MessageAction._defaultStatus;
    }

    Jane.watcher.watch("action-" + id + "-status", {
        get: status,
        deps: deps
        // , debug: true
    });
};

MessageAction._defaultStatus = function() {
    return Jane.watcher.get("selected");
};

MessageAction._customStatus = {
    'label': function() {
        var fid = Page.params.current_folder;
        return !(fid && fid == Jane.$H("folders").ids.spam);
    }
};

// Дизэйблим экшены при включении режима работы с папками
(function(customStatus) {
    var actionStatus = {
        status: function() {
            var mode = Jane.watcher.get('folder-actions-mode');
            return !mode;
        },
        deps: ['folder-actions-mode']
    };

    $.each([
        'ignore', 'unignore', 'sendon',
        'forward', 'tospam', 'notspam', 'move', 'label', 'delete', 'mark', 'unmark'
    ], function(i, action) {
        customStatus[action] = actionStatus;
    });
})(MessageAction._customStatus);

if (Daria.layout !== '2pane') {
    $.extend(MessageAction._customStatus, {
        'reply-all': {
            status: function() {
                var selectedCount = Jane.watcher.get('selectedCount');
                return (selectedCount === 1 || (selectedCount === 0 && Jane.Page.params.ids)) &&
                    Jane.watcher.get('message.has-multiply-reply-addresses');
            },
            deps: ['selectedCount', 'message.has-multiply-reply-addresses']
        },
        'reply': {
            status: function() {
                var selectedCount = Jane.watcher.get('selectedCount');
                return selectedCount === 1 || (selectedCount === 0 && Jane.Page.params.ids);
            },
            deps: ['selectedCount']
        }
    });
}

Daria.extend(MessageAction, Jane.Action);

MessageAction.warning = function(text) {
    var text3;
    if (typeof text != 'string') {
        text = i18n('%Messages_Action_Warning_', Daria.Shortcuts.getShortcutLabelFor('Select_all', 'messages', false));
        text3 = i18n('%3pane_Messages_Action_Warning');
        var fid = Daria.Page.params.current_folder;
        if (fid && !parseInt(Jane.$H('folders').getCount(fid), 10)) {
            text = i18n('%Messages_Action_Warning_Empty_Folder');
            text3 = i18n('%3pane_Messages_Action_Warning_Empty_Folder');
        }
    }

    Daria.Statusline.showMsg({
        name: 'message-action-warning',
        body: text,
        body3: text3
    });
};

/**
 * Собирает параметры писем и вызываем с ними Action
 * @name MessageAction.prototype.run
 * @param {Object} o Параметры
 */
MessageAction.prototype.run = function(o) {
    var params = o.params;

    // если вдруг в params сразу передать ids, то просто тупо взять их и считать правильными.
    if (!o.ids) {

        if (!(params["message-id"] || params["thread-id"] || this.status())) {
            MessageAction.warning();
            return;
        }

        var table;

        //TODO: правильно определять 3pane по тому, что одновременно видны messages-list-box и messages-box
        if (Page.type == 'messages') {
            var bMessagesListBox = Jane.$B("messages-list-box");
            if (bMessagesListBox && bMessagesListBox.active) {
                table = bMessagesListBox.active.table;
            }
            bMessagesListBox = null;
        }

        var messageID = params["message-id"];
        if (!messageID && (Page.type == 'message' || Daria.layout == '2pane')) {
            var bMessagesBox = Jane.$B("messages-box");
            if (bMessagesBox && bMessagesBox.active) {
                messageID = bMessagesBox.active.params.ids;
            }
            bMessagesBox = null;
        }

        var threadID = params["thread-id"];

        var ids;
        if (threadID) {
            var list = [];
            if (table) {
                $.each(table.checkboxTree.items['t' + threadID].items, function() {
                    list.push(this.id);
                });
            }
            ids = {
                ids: list,
                mids: [],
                tids: [ threadID ]
            };
        } else if (messageID) {
            ids = {
                ids: [ messageID ],
                mids: [ messageID ],
                tids: []
            };
        } else {
            if (table && (table.checkboxTree.count || Daria.layout != '2pane')) { // Что-нибудь выбрано.
                ids = table.getIDs();
            }
        }

        o.ids = ids;
    }
    // Если письмо прочитывается автоматически, то дропдауны не закрываем
    if (!params.doNotCloseDropdown) {
        $(document).trigger("b-mail-dropdown-closeall"); // Закрываем дропдаун после действия.
    }
    try {
        return this._run(o);
    } catch(e) {
        Jane.ErrorLog.sendException('exception.action', e, {
            'action-name': this.id
        });
    }
};

MessageAction.prototype.copyTo = function(dest) {
    MessageAction._init(dest);
    return this;
};

/* ../../js/daria.messageaction.js end */

    /* ../../js/daria.url.js begin */
Daria.url = {
    /**
     * Проверяет есть ли у аттача hid
     * @private
     * @throws
     */
    _checkAttachmentHasHid: function(attachment) {
        if (!this._notEmptyString(attachment.hid)) {
            throw new Error('Attachment should have a hid');
        }
    },

    /**
     * Проверяет, что mid не пустой
     * @param {String} mid Message id
     *
     * @private
     * @throws
     */
    _checkMid: function(mid) {
        if (!this._notEmptyString(mid)) {
            throw new Error('Invalid message id passed');
        }
    },

    /**
     * Возвращает имя для использования в урле
     *
     * @param {Object} attachment Информация об аттаче в том виде, в котором она приходит из хендлеров
     * @returns {String}
     *
     * @private
     */
    _getAttachmentName: function(attachment) {
        return attachment['name-uri-encoded'] || attachment.name || "";
    },

    /**
     * Проверяет, что переданный параметр -- строка ненулевой длины
     *
     * @param {String} str
     * @returns {Boolean}
     *
     * @private
     */
    _notEmptyString: function(str) {
        return str && typeof str === "string";
    },

    /**
     * Генерирует урл на доквьювер, для просмотра аттача
     *
     * @param {Object} attachment Информация об аттаче в том виде, в котором она приходит из хендлеров
     * @param {String} mid Message id
     * @returns {String}
     * @throws
     */
    docviewer: function(attachment, mid) {
        this._checkMid(mid);
        this._checkAttachmentHasHid(attachment);

        var config = Daria.Config.XSL;
        return config['docviewer-frontend-host'] + config['url-prefix'] +
            '/?url=' + encodeURIComponent('ya-mail://' + mid + '/' + attachment.hid) +
            '&name=' + this._getAttachmentName(attachment);
    },

    /**
     * Проверяет - отсутствует ли у eml аттача суффикс
     *
     * @param {string} type - rfc2387 type
     * @param {string} subtype - rfc2387 subtype
     * @param {string} name - имя файла(возможно закодированное)
     *
     * @returns {boolean}
     */
    isEMLSuffixMissing: function(type, subtype, name) {
        if (!name) {
            return false;
        }
        var decodedName = decodeURIComponent(name);
        var filenameParts = decodedName.split('.');
        var isContentTypeEML = ([type, subtype].join('/') === 'message/rfc822');

        var isSuffixMissing = _.all([
            // Если нет суффикса eml, либо у файла вообще нет суффикса
            ((filenameParts.length > 1 && _.last(filenameParts) !== 'eml') || filenameParts.length === 1),
            // и это тип eml
            isContentTypeEML
        ]);

        return isSuffixMissing;
    },

    /**
     * Генерирует урл на файл аттача
     *
     * @param {Object} attachment Информация об аттаче в том виде, в котором она приходит из хендлеров
     * @param {String} mid Message id
     * @param {Object} [options] хеш с опциями, которые надо дописать к урлу,
     * например { 'no_disposition': true } добавит &no_disposition=y
     * игнорирует незнакомые оции и опции, значение которых приводится к false
     *
     * @returns {String}
     * @throws
     */
    attachment: function(attachment, mid, options) {
        if (attachment.url) {
            return attachment.url;
        }

        this._checkMid(mid);
        this._checkAttachmentHasHid(attachment);

        var name = this._getAttachmentName(attachment);

        // Патчим отсутствующее расширение eml
        // @see https://jira.yandex-team.ru/browse/DARIA-35968
        if (this.isEMLSuffixMissing(attachment.type, attachment.subtype, name)) {
            name = encodeURIComponent(decodeURIComponent(name) + '.eml');
        }

        var url = '../message_part/' + name +
            '?name=' + name +
            '&hid=' + attachment.hid +
            '&ids=' + mid;

        var knownOptions = ['no_disposition', 'exif_rotate', 'thumb'];

        options = options || {};
        for (var option in options) {
            if (options.hasOwnProperty(option) && ($.inArray(option, knownOptions) > -1) && Boolean(options[option])) {
                url += '&' + option + '=y';
            }
        }

        return url;
    },
    /**
     * @desc Возвращает url для сервиса загрузок
     * @return {String} The url of mail upload service
     */
    upload: function() {
        var url = $.url(Jane.Config.mailUploadServiceUrl);
        var currentQuery = Daria.parseQuery(url.query());

        url.query($.extend(currentQuery, {
            _ckey: Jane.Page.ckey
        }));

        return url.toString();
    }
};

/* ../../js/daria.url.js end */

    /* ../../js/daria.messageprocess.js begin */
(function() {
    'use strict';

    /**
     * @namespace Daria.MessageProcess
     */
    var that = Daria.MessageProcess = {};

    /* ../../js/daria.messageprocess.author.js begin */
(function(messageProcess) {

    /**
     * @namespace Daria.MessageProcess.Author
     */
    var that = messageProcess.Author = {};

    /**
     * Количество цитат, обрабатываемых за один цикл при асинхронной обработке при поиске автора
     * @constant {Number} Daria.MessageProcess.AUTHOR_CHUNK_SIZE
     * @memberof Daria.MessageProcess
     */
    that.AUTHOR_CHUNK_SIZE = 10;

    /**
     * Часть с описанием автора может сливаться с текстом цитаты и находится в той же ноде
     * Например так: ":>какой-то текст"
     * По этому регу выполняется проверка наличия таких случаев
     * @constant {RegExp} Daria.MessageProcess.Author.REG_AUTHOR_PART_CONTEXT
     * @memberof Daria.MessageProcess.Author
     */
    that.REG_AUTHOR_PART_CONTEXT = /^(?:\)?>)\s?(?:wrote|пишет|пише|піша|написав|напісаў|yazdı|yazıyor|написал(?:\(а\)))?\s?:/;

    /**
     * @constant {Array} Daria.MessageProcess.Author.PARSE_AUTHOR_FORMATS
     * @memberof Daria.MessageProcess.Author
     */
    that.PARSE_AUTHOR_FORMATS = [
        [ '?prefix', 'namefirst', '?date', '?time' ],
        [ '?prefix', '?date', '?time', 'namelast' ]
    ];

    /**
     * @constant {Array} Daria.MessageProcess.Author.PARSE_AUTHOR_PARTS
     * @memberof Daria.MessageProcess.Author
     */
    that.PARSE_AUTHOR_PARTS = {
        prefix: [
            [
                /^Sent from my (?:iPad|iPhone|iPod)/i,
                function() {
                    return {
                        weight: 5
                    };
                }
            ]
        ],
        date: [
            // 12.12.14 | 12.12.2014 | On 12.12.14 | 12-12-2014 | [12-12-2014] | ...
            [
                /^\[?(?:on\s)?(\d\d)[\.\/\-](\d\d)[\.\/\-](\d\d(?:\d\d)?)\]?/i,
                function(data) {
                    var year = Number(data[3]);
                    if (year < 100) {
                        year = 2000 + year;
                    }
                    var date = Date.UTC(year, Number(data[2]) - 1, Number(data[1]));
                    return {
                        weight: 5,
                        datetime: {
                            date: data[1] + '.' + data[2] + '.' + data[3],
                            ts: isNaN(date) ? false : date
                        }
                    };
                }
            ],
            // 2014.12.12 | 2014-12-12 | On 2014.12.12 | [2014.12.12] | ...
            [
                /^\[?(?:on\s)?(\d{4})[\/\.\-](\d{2})[\/\.\-](\d{2})\]?/i,
                function(data) {
                    var date = Date.UTC(Number(data[1]), Number(data[2]) - 1, Number(data[3]));
                    return {
                        weight: 5,
                        datetime: {
                            date: data[3] + '.' + data[2] + '.' + data[1],
                            ts: isNaN(date) ? false : date
                        }
                    };
                }
            ],
            // Среда 26 февраля 2014 | 26 февраля 2014 | [on 26 февраля 2014] | ...
            [
                /^\[?(?:on\s)?[^\s\d]*?\s?(\d{1,2})\s([^\s\d]+?)\s(\d{4})(?:\sг.)?\]?/i,
                function(data) {
                    var month = Jane.Date.getMonthByName(data[2]);
                    var date;

                    if (month !== -1) {
                        date = Date.UTC(Number(data[3]), month, Number(data[1]));
                    }

                    return {
                        weight: 5,
                        datetime: {
                            date: data[1] + ' ' + data[2] + ' ' + data[3],
                            ts: (!date || isNaN(date)) ? false : date
                        }
                    };
                }
            ],
            // Среда февраль 26 2014 | февраль 26 2014 | [февраль 26 2014] | ...
            [
                /^\[?(?:on\s)?[^\s\d]*?\s?([^\s\d]+?)\s(\d{1,2})\s(\d{4})(?:\sг.)?\]?/i,
                function(data) {
                    var month = Jane.Date.getMonthByName(data[1]);
                    var date;

                    if (month !== -1) {
                        date = Date.UTC(Number(data[3]), month, Number(data[2]));
                    }

                    return {
                        weight: 5,
                        datetime: {
                            date: data[1] + ' ' + data[2] + ' ' + data[3],
                            ts: (!date || isNaN(date)) ? false : date
                        }
                    };
                }
            ],
            // февраля 26 2014 | [on февраля 26 2014]
            [
                /^\[?(?:on\s)?([^\s\d]+?)\s(\d{1,2})\s(\d{4})(?:\sг.)?\]?/i,
                function(data) {
                    var month = Jane.Date.getMonthByName(data[1]);
                    var date;

                    if (month !== -1) {
                        date = Date.UTC(Number(data[3]), month, Number(data[2]));
                    }

                    return {
                        weight: 5,
                        datetime: {
                            date: data[1] + ' ' + data[2] + ' ' + data[3],
                            ts: (!date || isNaN(date)) ? false : date
                        }
                    };
                }
            ]
        ],

        time: [
            // в 19:29 +04:00 | в 19:29 | 19:29 | at 7:29 PM | 12:29 GMT+04:00 | [12:29 GMT+04:00] | ...
            [
                /^\[?(?:at\s|в\s)?(\d{1,2}:\d\d(?::\d\d)?\s?(?:am|pm)?\s?(?:(?:[A-Z]{3})?[+-]\d\d:?(?:\d\d)?)?)\]?/i,
                function(data) {
                    return {
                        weight: 5,
                        datetime: {
                            time: $.trim(data[1])
                        }
                    };
                }
            ]
        ],

        namefirst: [
            // т.к. имя стоит в начале строки, требуются более строгие проверки допустимых символов
            // в имени не должно быть символов " [ ] < >
            // * Автор <bufpost@ya.ru> | * <bufpost@ya.ru> | * Автор
            [
                /^\*\s(?:от\s|пользователь\s)?(?:"|\\")?([^"\\\[\]<>]*)(?:"|\\")?\s?(?:<([^<>]+)>)?/i,
                function(data) {
                    var out = { weight: 0 };

                    var name = $.trim(data[1]);
                    if (name) {
                        out.name = name;
                        out.weight = out.weight + 30;
                    }

                    var email = Jane.FormValidation.getEmailFromString($.trim(data[2]));
                    if (email) {
                        out.email = email;
                        out.weight = out.weight + 30;
                    }

                    return out;
                }
            ]
        ],

        namelast: [
            [
                /^(?:от\s|пользователь\s|from\s|user\s|ад\s|від\s|карыстальнік\s|користувач\s|kullanıcı\s)?(?:"|\\")?([^\:]*?)(?:"|\\")?\s?(?:<([^<>]+)>)?\s?(wrote|пишет|пише|піша|написав|напісаў|yazdı|yazıyor|написал(?:\(а\))?)?(?:\s?"?:)?$/i,
                function(data) {
                    var out = { weight: 0 };

                    var name = $.trim(data[1]);
                    // проверку на * выполняем из-за namefirst
                    // если автор будет задан так "* <test@ya.ru>:"
                    // то namefirst ничего не даст и проверка дойдет до namelast, где * будет определено как имя
                    if (name && name !== '*') {
                        out.name = name;
                        out.weight = out.weight + 30;
                    }

                    var email = Jane.FormValidation.getEmailFromString($.trim(data[2]));
                    if (email) {
                        out.email = email;
                        out.weight = out.weight + 30;
                    }

                    if (data[3]) {
                        out.weight = out.weight + 5;
                    }

                    return out;
                }
            ]
        ]
    };

    /**
     * Получение данных об авторе
     * Данные должны быть предварительно подготовлены.
     * @memberof Daria.MessageProcess.Author
     * @param {Node} quoteNode
     * @return {?Object}
     */
    that.getQuoteAuthor = function(quoteNode) {
        var author = quoteNode.getAttribute('data-author');
        if (!author) {
            return null;
        }

        try {
            author = JSON.parse(decodeURIComponent(author));

            if (author.email) {
                // пока возможен один вариант ссылкы с имени в цитате
                // в дальнейшем стоит добавить проверку типа автора до формирования ссылки
                author.href = Jane.$H('staff-info').getLinkStaffByEmail(author.email);
            }

            return author;

        } catch(e) {
            return null;
        }

        return author;
    };

    /**
     * Удаление данных об авторе
     * Внимательно, т.к. после удаления данные восстановить не получится
     * Вызывается после оборачивания ноды цитаты
     * @memberof Daria.MessageProcess.Author
     * @param {Node} quoteNode
     */
    that.removeQuoteAuthorData = function(quoteNode) {
        quoteNode.removeAttribute('data-author');
    };

    /**
     * Поиск автора цитаты в тексте
     * @memberof Daria.MessageProcess.Author
     * @param {String} text текс, в котором выполняется поиск автора
     * @return {?Object} NULL, если автор не найден
     * @tested test/unit/js/daria.messageprocess.js
     */
    that.parseAuthorText = function(text) {
        text = text.replace(/[,\n]/g, ' ')
            .replace(/\s+/g, ' ')
            .trim();

        var formats = that.PARSE_AUTHOR_FORMATS;
        var parts = that.PARSE_AUTHOR_PARTS;
        var format;
        var part;
        var idx = 0;
        var idxPart;
        var isExists;
        var regs;
        var reg;
        var idxReg;
        var data;
        var authorPart;
        var weight;
        var author;
        var tmpText;

        while (( format = formats[idx++] )) {
            idxPart = 0;
            weight = 0;
            author = {};
            tmpText = text;

            while (( part = format[idxPart++] )) {
                isExists = (part.charAt(0) !== '?');
                if (!isExists) {
                    part = part.substr(1);
                }

                authorPart = null;
                data = null;
                regs = parts[part];
                idxReg = 0;

                while (( reg = regs[idxReg++] )) {
                    data = tmpText.match(reg[0]);

                    if (data) {
                        authorPart = reg[1](data);
                        break;
                    }
                }

                if (authorPart) {
                    weight = weight + authorPart.weight;
                    $.extend(true, author, authorPart);

                } else if (isExists) {
                    break;
                }

                if (data && data[0]) {
                    tmpText = tmpText.substr(data[0].length).trim();
                }
            }

            if (weight > 30) {
                break;
            }
        }

        author.weight = weight;
        return author.weight > 30 ? author : null;
    };

    /**
     * Синхронный поиск авторов цитат
     * @memberof Daria.MessageProcess.Author
     * @param {Node} node контекст
     * @param {Number} [level] уровень вложенности цитат
     */
    that.findAndRemoveQuoteAuthorSync = function(node, level) {
        var quotes = that._getQuotesAuthorNotProcessed(node, level);
        var quote;
        var i = 0;

        while (( quote = quotes[i++] )) {
            that._findAndRemoveQuoteAuthor(quote);
        }

        that._compareQuoteAuthorPosition(level);
    };

    /**
     * Асинхронный поиск авторов цитат
     * @memberof Daria.MessageProcess.Author
     * @param {Node} node контекст
     * @param {Number} [level] уровень вложенности цитат
     * @param {Function} [callback]
     */
    that.findAndRemoveQuoteAuthor = function(node, level, callback) {
        callback = callback || $.noop;

        var quotes = that._getQuotesAuthorNotProcessed(node, level);
        var quotesLength = quotes.length;
        var chunks = Math.ceil(quotesLength / that.AUTHOR_CHUNK_SIZE);
        var chunksLeft = chunks;

        if (!chunks) {
            callback();
            return;
        }

        function generateTimer(chunkNum) {
            return function() {
                var start = chunkNum * that.AUTHOR_CHUNK_SIZE;
                var i = 0;
                var quote;

                for (; i < that.AUTHOR_CHUNK_SIZE; i++) {
                    quote = quotes[start + i];
                    if (quote) {
                        that._findAndRemoveQuoteAuthor(quote);
                    }
                }

                chunksLeft--;

                if (chunksLeft === 0) {
                    that._compareQuoteAuthorPosition(level);
                    callback();
                }
            };
        }

        for (var i = 0; i < chunks; i++) {
            Daria.setZeroTimeout(generateTimer(i));
        }
    };

    /**
     * Обработка нод при поиске автора
     * @memberof Daria.MessageProcess.Author
     * @param {Node} node текущая обрабатываемя нода
     * @param {String} content полученная строка после обработки предыдущих нод
     * @param {Object} data буфер данных
     * @param {Boolean} isInner признак способа поиска автора
     * @return {Boolean}
     * @private
     */
    that._findQuoteAuthorContentCheck = function(node, content, data, isInner) {
        // наткнулись на вложенную цитату, сразу прерываем обработку
        if (Jane.DOM.isBlockquote(node)) {
            return false;
        }

        var isBlockNode = Jane.DOM.isBlockNode(node);

        // автора начали определять, но дальше встретили блочную ноду
        // продолжать поиск не нужно
        // т.к. как правило строка с автором разделена инлайновыми блоками и br
        if (data.author && isBlockNode) {
            return false;

        // для поиска внутри, пока автор не найден и встречена блочная нода
        // то обязательно на следующем цикле должны получить автора
        // иначе возможен вариант лишнего захвата текста
        // TODO возможно стоит проверить, не пустая ли она
        } else if (isInner && !data.author && isBlockNode) {
            data.firstBlockNode = true;
        }

        // дальше проверка нужна только для прохода по текстовым нодам
        if (node.nodeType !== 3) {
            return true;
        }

        // проверка выполняется только для 4х строк
        var countLines = Jane.String.countLines(content);
        if (countLines > 4) {
            return false;
        }

        // если встречена пустая строка, то считаем разрывом и прерываем парсинг автора
        if (countLines !== Jane.String.countActualLines(content)) {
            return false;
        }

        if (!data.firstNode && content.length > 0) {
            data.firstNode = node;
        }

        var tmpAuthor = that.parseAuthorText(content);

        if (tmpAuthor) {
            // у найденного ранее автора вес оказался меньше чем у текущего
            if (data.author && data.author.weight > tmpAuthor.weight) {
                return false;
            }

            data.authorStr = content;
            data.author = tmpAuthor;
            data.lastNode = node;

            delete data.firstBlockNode;

        } else {

            // шаг после встречи блочной ноды, автор не найден, выходим
            if (data.firstBlockNode) {
                return false;
            }

            if (
                isInner &&
                data.author &&
                data.author.datetime &&
                data.author.name &&
                !data.author.email &&
                node.nodeValue
            ) {
                var matchAuthorQuoteContent = node.nodeValue.match(that.REG_AUTHOR_PART_CONTEXT);

                if (matchAuthorQuoteContent) {
                    content = data.authorStr + matchAuthorQuoteContent[0];
                    tmpAuthor = that.parseAuthorText(content);

                    if (tmpAuthor && tmpAuthor.weight > data.author.weight) {
                        data.author = tmpAuthor;

                        // если в тексте цитаты была найдена часть автора
                        // то последней новой автора ставим ноду, определенную на предыдущем шаге проверки
                        // в противном случае можем оставить кусок автора при вырезании
                        if (data.tmpNode) {
                            data.lastNode = data.tmpNode;
                            delete data.tmpNode;
                        }

                        // удаление куска автора из текста цитаты
                        node.nodeValue = node.nodeValue.substr(matchAuthorQuoteContent[0].length);
                        return false;
                    }
                }

                // временно сохраняем ноду, на случай если найдем мыло в следующем цикле
                data.tmpNode = node;
                data.authorStr = content;
            }
        }

        return true;
    };

    /**
     * Создание объекта выделения автора цитаты
     * @memberof Daria.MessageProcess.Author
     * @param {Node} firstNode
     * @param {Node} lastNode
     * @return {Range|Array}
     * @private
     */
    that._findQuoteAuthorCreateRange = function(firstNode, lastNode) {
        var range;

        try {
            range = document.createRange();

            if (firstNode === lastNode) {
                range.selectNode(firstNode);

            } else {
                range.setStartBefore(firstNode);
                range.setEndAfter(lastNode);
            }

        } catch(e) {
            range = [ firstNode, lastNode ];
        }

        return range;
    };

    /**
     * Поиск автора внутри цитаты
     * @memberof Daria.MessageProcess.Author
     * @param {Node} nodeQuote нода цитаты
     * @return {?Object}
     * @private
     * @tested test/unit/js/daria.messageprocess.js
     */
    that._findQuoteAuthorInner = function(nodeQuote) {
        var data = {};

        Jane.DOM.eachInnerFollowingText(nodeQuote, function(node, content) {
            return that._findQuoteAuthorContentCheck(node, Jane.String.ltrim(content), data, true);
        });

        if (!data.author || !data.lastNode || !data.firstNode) {
            return null;
        }

        // поиск текста после найденного автора
        // считаем, что после автора, указанного внутри цитаты, обязательно должен быть текст
        // иначе возможно ложное определение автора
        var isFindTextAfterAuthor = false;
        Jane.DOM.eachAfter(data.lastNode, function(node) {
            if (node.nodeType === 3 && !Jane.DOM.isEmptyTextNode(node)) {
                isFindTextAfterAuthor = true;
                return false;
            } else if (Jane.DOM.isBlockquote(node)) {
                return false;
            }
        }, nodeQuote);

        if (!isFindTextAfterAuthor) {
            return null;
        }

        return {
            range: that._findQuoteAuthorCreateRange(data.firstNode, data.lastNode),
            author: data.author
        };
    };

    /**
     * Поиск автора перед цитатой
     * @memberof Daria.MessageProcess.Author
     * @param {Node} nodeQuote нода цитаты
     * @return {?Object}
     * @private
     * @tested test/unit/js/daria.messageprocess.js
     */
    that._findQuoteAuthor = function(nodeQuote) {
        var data = {};

        Jane.DOM.eachBeforeText(nodeQuote, function(node, content) {
            return that._findQuoteAuthorContentCheck(node, Jane.String.rtrim(content), data, false);
        }, nodeQuote.parentNode);

        if (!data.author || !data.lastNode || !data.firstNode) {
            return null;
        }

        return {
            // обход в обратном порядке, поэтому lastNode и firstNode меняем местами
            range: that._findQuoteAuthorCreateRange(data.lastNode, data.firstNode),
            author: data.author
        };
    };

    /**
     * Поиск автора и удаление нод
     * @memberof Daria.MessageProcess.Author
     * @param {Node} nodeQuote нода цитаты
     * @return {Object} объект с данными автора
     * @private
     */
    that.__findAndRemoveQuoteAuthor = function(nodeQuote) {
        var author = that._findQuoteAuthor(nodeQuote);

        if (!author) {
            author = that._findQuoteAuthorInner(nodeQuote);
        }

        if (!author) {
            return null;
        }

        if (Array.isArray(author.range)) {
            Jane.DOM.deleteRangeContents(author.range[0], author.range[1]);

        } else {
            author.range.deleteContents();
            author.range.detach();
        }

        return author.author;
    };

    /**
     * Поиск автора и удаление нод
     * Установка признака обработки ноды для исключения повторной
     * Для цитаты с найденным автором добавление класса и сохранение данных в атрибут data-author
     * @memberof Daria.MessageProcess.Author
     * @param {Node} quoteNode нода цитаты
     * @return {Boolean}
     * @private
     */
    that._findAndRemoveQuoteAuthor = function(quoteNode) {
        messageProcess.flagAdd(quoteNode, messageProcess.F_QUOTE.SEARCH_AUTHOR);
        var author = that.__findAndRemoveQuoteAuthor(quoteNode);
        if (!author) {
            return false;
        }

        Jane.DOM.classAdd(quoteNode, 'b-quote_a');
        messageProcess.flagAdd(quoteNode, messageProcess.F_QUOTE.FOUND_AUTHOR);
        quoteNode.setAttribute('data-author', encodeURIComponent(JSON.stringify(author)));
        return true;
    };

    /**
     * Вспомогательная функция для поиска необработанных нод
     * @memberof Daria.MessageProcess.Author
     * @param {Node} quote
     * @return {Boolean}
     * @private
     */
    that.__getQuotesAuthorNotProcessed = function(quote) {
        return !messageProcess.flagContains(quote, messageProcess.F_QUOTE.SEARCH_AUTHOR);
    };

    /**
     * Поиск нод, в которых не выполнялся поиск автора
     * @memberof Daria.MessageProcess.Author
     * @param {Node} node контекст
     * @param {Number} [level] уровень вложенности цитат
     * @return {Array}
     * @private
     */
    that._getQuotesAuthorNotProcessed = function(node, level) {
        return Array.prototype.filter.call(messageProcess.getQuotesByLevel(node, level), that.__getQuotesAuthorNotProcessed);
    };

    /**
     * Определение позиции цитаты относительно первой цитаты с найденным автором на том же уровне вложенности
     * Для цитат, рассположенных ниже первой цитаты с автором добавляется класс b-quote_an
     * Используется для определения правил вывода верхних и нижних бордеров
     * @memberof Daria.MessageProcess.Author
     * @param {Number} [level] уровень вложенности цитат
     * @private
     */
    that._compareQuoteAuthorPosition = function(level) {
        var parent = messageProcess.getTopParent();
        if (!parent) {
            return;
        }

        var quotes = messageProcess.getQuotesByLevel(parent, level);
        var levels = {};
        var quote;
        var i = 0;
        var l;

        while (( quote = quotes[i++] )) {
            if (messageProcess.flagContains(quote, messageProcess.F_QUOTE.AUTHOR_POSITION_SEARCH)) {
                continue;
            }

            l = messageProcess.getQuoteLevel(quote);
            if (!levels[l]) {
                if (messageProcess.flagContains(quote, messageProcess.F_QUOTE.FOUND_AUTHOR)) {
                    levels[l] = true;
                }

                messageProcess.flagAdd(quote, messageProcess.F_QUOTE.AUTHOR_POSITION_SEARCH);

            } else {
                Jane.DOM.classAdd(quote, 'b-quote_an');
                messageProcess.flagAdd(quote, messageProcess.F_QUOTE.AUTHOR_NEXT, messageProcess.F_QUOTE.AUTHOR_POSITION_SEARCH);
            }
        }
    };

})(Daria.MessageProcess);


/* ../../js/daria.messageprocess.author.js end */

    /* ../../js/daria.messageprocess.transformers.js begin */
(function(that) {

    var REDIRECT_URL = '/re.jsx';
    var WBR_SPACE_RX = /\u00a0{2}/g;
    var WBR_SPACE_RX2 = /(\S)\u00a0(\S)/g;
    var WBR_SIZE = 25;
    var WBR_RX = new RegExp('\\S{' + WBR_SIZE + '}\\S');
    var WBR_NODE = document.createElement('wbr');

    // При клике на иконку открываем попап для просмотра видеоролика.
    // При клике на ссылку просто открываем ее в новом окне.
    var TMPL_VIDEO_LINK = '<a href="{url}" target="_blank" class="daria-action" data-action="message.video-player-open" data-params="{params}">' +
        '<img src="' + Jane.getEntity('b-mail-icon_video-link.gif') + '" class="b-mail-icon b-mail-icon_video-link" alt="" title="' + i18n('%Message_Video_Link') + '"/>' +
        '</a>' +
        '<a href="{url}" target="_blank">{url}</a>';

    /**
     * TODO:
     * 1. Надо поменять архитектуру трансформеров, так чтобы их можно было оттестировать при этом не потеряв возможность задавать порядок
     * я бы сделал так:
     * @typedef BodyTransformer
     * @type object
     * @property {Function} preprocess - колбэк препроцессор
     * @property {string} name - имя препроцессора
     *
     * 2. и метод getTransformerByName для BODY_TRANSFORMERS который получает нужный трансформер по имени
     */

    /**
     * @constant {Object} Daria.MessageProcess.BODY_TRANSFORMERS
     * @memberof Daria.MessageProcess
     */
    that.BODY_TRANSFORMERS = {
        regs: [
            [
                /(<img[\s\S]*?)src="([^"]*?)"([\s\S]*?\/?>)/gm,
                function(match, start, src, finish) {
                    return start + 'data-fake-img-src="' + src + '"' + finish;
                }
            ]
        ],

        dom: [
            (function() {
                var TEXT_NODE = 3;
                var debugMode = 'message-body.transformers.location-facts';
                var spacesRe = /\s/g;

                var Nodes = {
                    /**
                     * Проход по всем дереву для веток, выполняющих условие
                     */
                    traverse: (function() {
                        var traverse = function(node, criterion, action) {
                            if (criterion(node)) {
                                action(node);

                                if (node.childNodes.length > 0) {
                                    node.normalize(); //Merge adjacent text nodes, remove empty
                                    _.each(node.childNodes, function(node) {
                                        traverse(node, criterion, action);
                                    });
                                }
                            }
                        };

                        /**
                         * @param {Node} node
                         * @param {function} criterion
                         * @param {function} action
                         */
                        return function(node, criterion, action) {
                            Daria.assert(node instanceof Node, 'Top node should be an instance of Node', debugMode);
                            Daria.assert(typeof criterion === 'function', 'Criterion should be a function', debugMode);
                            Daria.assert(typeof action === 'function', 'Action should be a function', debugMode);

                            traverse.apply(null, arguments);
                        };
                    })(),

                    /**
                     * Проверяет, что otherNode находится внутри node. По достижению topNode поиск останавливается
                     *
                     * Поведение .contains сломано в phantom-1.9.7 (смотри https://github.com/ariya/phantomjs/issues/11479):
                     * var outer = document.createElement('span');
                     * var inner = document.createTextNode('inside!');
                     * outer.appendChild(inner);
                     * outer.firstChild === inner; //true
                     * outer.contains(inner); //false <-- this
                     */
                    contains: (function() {
                        var contains = function(node, otherNode, topNode) {
                            if (otherNode === node) {
                                return true;
                            }

                            if (otherNode.parentNode === null || otherNode === topNode) {
                                return false;
                            }

                            return contains(node, otherNode.parentNode, topNode);
                        };

                        /**
                         * @param {Node} node
                         * @param {Node} otherNode
                         * @param {Node} topNode
                         */
                        return function(node, otherNode, topNode) {
                            Daria.assert(
                                    node instanceof Node &&
                                    otherNode instanceof Node &&
                                    topNode instanceof Node,
                                'All arguments should be nodes',
                                debugMode
                            );
                            return contains(node, otherNode, topNode);
                        };
                    })(),

                    /**
                     * Поиск наименьших нод внутри topNode, текст внутри которых матчится регекспом
                     * @param {Node} topNode
                     * @param {RegExp} regexp
                     * @returns {Array}
                     */
                    getSmallestContainingNodes: function(topNode, regexp) {
                        Daria.assert(topNode instanceof Node, 'TopNode should be a Node', debugMode);
                        Daria.assert(regexp instanceof RegExp, 'Regexp should be a RegExp', debugMode);

                        var nodes = [];

                        var matches = function(text) {
                            var result = regexp.test(text);
                            regexp.lastIndex = 0; //Reset the index, so that regexp.test can be reused with a new string
                            return result;
                        };

                        //Находим все ноды, где текст соответствует регекспу
                        Nodes.traverse(
                            topNode,
                            function(node) { //Criterion
                                return matches(node.textContent);
                            },
                            function(node) {
                                nodes.push(node);
                            }
                        );

                        return _.filter(nodes, function(node) {
                            //Фильтруем все ноды, в которых текст соответствует регекспу
                            //Так чтобы ни одна нода не содержала ровно одну другую ноду (это значит, что можно ещё сузиться)

                            if (node.childNodes.length === 0) {
                                return true;
                            }

                            return !nodes.some(function(otherNode) {
                                if (otherNode === node || !Nodes.contains(node, otherNode, topNode)) {
                                    return false;
                                }

                                //Содержит другую подходящую ноду. Нужно проверить, содержит ли эта нода адрес, если убрать вложенную
                                return !matches(node.textContent.replace(otherNode.textContent));
                            });
                        });
                    }
                };

                /**
                 * Эскейпит юзер-инпут для использования в регекспе
                 *
                 * @param {string} string
                 * @returns {string}
                 *
                 * @see https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions
                 */
                var escapeRegExp = function(string) {
                    return string.replace(/([.*+?^=!:${}()|\[\]\/\\])/g, "\\$1");
                };

                /**
                 * Представление символа с привязкой к ноде в которой он находится
                 * @param {string}  character
                 * @param {number}  position
                 * @param {Node}    node
                 * @constructor
                 */
                var Symbol = function(character, position, node) {
                    this._char = character;
                    this._position = position;
                    this._node = node;
                };
                Symbol.prototype = {
                    getChar: function() {
                        return this._char;
                    },
                    getPosition: function() {
                        return this._position;
                    },
                    getNode: function() {
                        return this._node;
                    }
                };

                /**
                 * Стэк символов с искомым текстом
                 * @typedef {Stack}
                 * @constructor
                 */
                var Stack = function() {
                    /**
                     * Ноды, в которых находится найденная строка
                     * @type Node[]
                     * @private
                     */
                    this._stack = [];
                };
                Stack.prototype = {
                    /**
                     * Добавить ноду в стэк
                     */
                    push: function(symbol) {
                        this._stack.push(symbol);
                    },

                    getStart: function() {
                        return this._stack[0];
                    },

                    getEnd: function() {
                        return this._stack[this._stack.length - 1];
                    },

                    getSize: function() {
                        return this._stack.length;
                    },

                    isEmpty: function() {
                        return this.getSize() === 0;
                    },

                    shift: function() {
                        this._stack.shift();
                    },

                    pop: function() {
                        this._stack.pop();
                    },

                    toString: function() { //Для более простого дебага
                        return _.map(this._stack, function(symbol) {
                            if (symbol.getChar()) {
                                return symbol.getChar();
                            } else {
                                return symbol.getNode().toString();
                            }
                        }).join('');
                    }
                };


                /**
                 * Матчер для адреса
                 * @param {Object} addressFact    Факт об аддресе из томиты
                 * @constructor
                 */
                var Address = function(addressFact) {
                    this._fact = addressFact;
                    this._parsedAddress = addressFact.geo_addr;

                    this._reset();
                };
                Address.prototype = {
                    _reset: function() {
                        /**
                         * Набор заматченных адресов
                         * @type {Stack[]}
                         * @private
                         */
                        this._parts = [];

                        /**
                         * Позиция текущего ожидаемого символа
                         * @type {number}
                         * @private
                         */
                        this._parsedPosition = 0;
                        this._matched = false;

                        this._prevsiousChar = '';
                    },

                    /**
                     * @returns {Stack}
                     */
                    getCurrentPart: function() {
                        if (this._parts.length === 0) {
                            this.addPart();
                        }

                        return this._parts[this._parts.length - 1];
                    },

                    addPart: function() {
                        this._parts.push(new Stack());
                    },

                    getExpectedChar: function() {
                        return this._parsedAddress.charAt(this._parsedPosition);
                    },

                    shiftExpectedChar: function() {
                        this._parsedPosition++;
                        return this.getExpectedChar();
                    },

                    isSkippableNode: function(node) {
                        //Ноду можно пропустить (и обернуть потом в разметку), если она пустая и не поломает flow текста
                        return node.childNodes.length === 0 && ['br', 'wbr'].indexOf(node.nodeName.toLowerCase()) > -1;
                    },

                    spaceRe: /\s/,

                    /**
                     * Обработка следующего символа
                     * @param {Symbol} symbol
                     */
                    match: function(symbol) {
                        var currentPartIsEmpty = this.getCurrentPart().isEmpty();

                        var shiftedNodes = false;
                        if (!currentPartIsEmpty) {
                            shiftedNodes = symbol.getNode() !== this.getCurrentPart().getEnd().getNode();
                        } else if (this._previousSymbol) {
                            shiftedNodes = symbol.getNode() !== this._previousSymbol.getNode();
                        }

                        if (symbol.getChar() === this.getExpectedChar()) {
                            //Буковки совпадают.

                            if (shiftedNodes && !currentPartIsEmpty && !this.isSkippableNode(this.getCurrentPart().getEnd().getNode())) {
                                //Вышли из предыдущей ноды и её не скипнули — создаем новый стэк, если предыдущий не пустой.
                                this.addPart();
                            }

                            this.getCurrentPart().push(symbol);
                            this.shiftExpectedChar();

                            this._previousSymbol = symbol;
                        } else {
                            //Обрабатываем дополнительные случаи
                            if (this.anyMatched() && this.isSkippableNode(symbol.getNode())) {
                                //Нода, которую можно оборачивать (не в самом начале и конце поиска)
                                this.getCurrentPart().push(symbol);
                            } else if (this.spaceRe.test(symbol.getChar())) {
                                //Этот символ — пробел.
                                if (this.getExpectedChar() === ' ') {
                                    //Ожидаем тоже пробел, значит матчится
                                    this.getCurrentPart().push(symbol);
                                    this.shiftExpectedChar();
                                } else {
                                    //Символ пробел, ожидали не пробел — ждем следующий символ
                                    return; //Ничего не делаем, т.к. не знаем сколько должно было быть пробелов
                                }
                            } else if (this.getExpectedChar() === ' ') {
                                //Мы ожидали пробел, а получили не пробел. Надо заматчить следующий символ
                                this.shiftExpectedChar();
                                this.match(symbol);
                            } else if (shiftedNodes && !symbol.getChar()) {
                                //Вошли в новую ноду (буковки в этом случае не совпадают),
                                //сначала проверили, что новую ноду нельзя скипнуть,
                                //теперь создаем новый стэк
                                this.addPart();
                            } else if (this.numMatched() === 1 && this._previousSymbol.getChar() && symbol.getChar() === this._previousSymbol.getChar()) {
                                //Случай, когда "aab" с адресом "ab" — начали распознавать адрес не там, где он действительно находится
                                //Надо начать заново и сразу же заматчиться.
                                this._reset();
                                this.match(symbol);
                            } else {
                                //Увы, совсем не совпали
                                this._reset();
                            }
                        }

                        //Выставляем состояние. Заматчили адрес, когда использовали последний символ из ожидаемых
                        this._matched = this.numMatched() === this._parsedAddress.length;
                    },

                    anyMatched: function() {
                        return this.numMatched() > 0;
                    },

                    numMatched: function() {
                        return this._parsedPosition;
                    },

                    matches: function() {
                        return this._matched;
                    },

                    /**
                     * Подбор зацепки, по которой можно определить приоритетную часть адреса
                     * @returns {String}
                     */
                    getAnchor: function() {
                        var addr = this._fact.addr;
                        var result = null;
                        ['numbers', 'km', 'street', 'metro', 'quarter'].some(function(key) {
                            if (key in addr) {
                                result = addr[key];
                                return true;
                            }

                            return false;
                        });

                        return result;
                    },

                    partToRange: function(part) {
                        this.normalizePart(part);
                        if (part.isEmpty()) {
                            return null;
                        }

                        var range = document.createRange();

                        range.setStart(part.getStart().getNode(), part.getStart().getPosition());

                        //+1, потому что последний найденный символ тоже должен оказаться обернутым
                        range.setEnd(part.getEnd().getNode(), part.getEnd().getPosition() + 1);
                        return range;
                    },

                    /**
                     * Потримать стек от нод, которые можно пропускать (wbr, br)
                     * @param {Stack} part
                     */
                    normalizePart: function(part) {
                        while (!part.isEmpty() && (/\s/.test(part.getStart().getChar()) || this.isSkippableNode(part.getStart().getNode()))) {
                            part.shift();
                        }

                        while (!part.isEmpty() && (/\s/.test(part.getEnd().getChar()) || this.isSkippableNode(part.getEnd().getNode()))) {
                            part.pop();
                        }
                    },

                    /**
                     * Выбрать лучшую часть адреса для оборачивания
                     */
                    selectPart: function() {
                        var that = this;

                        //Приводим в порядок известные куски адреса
                        this._parts = _(this._parts)
                            .each(function(part) {
                                that.normalizePart(part);
                            })
                            .filter(function(part) {
                                return !part.isEmpty();
                            })
                            .valueOf();

                        if (this._parts.length === 1) {
                            //Когда адрес целиком в одном куске долго думать не надо
                            return this.getCurrentPart();
                        }

                        //Когда адрес размазан по нескольким кускам, нужно выбрать подходящую
                        var matchingPart;
                        var anchor = this.getAnchor();
                        if (anchor && this._parts.some(function(part) {
                            var range = that.partToRange(part);
                            if (range && range.toString().indexOf(anchor) > -1) {
                                //Подходящая часть та, в которой есть якорь
                                matchingPart = part;
                                return true;
                            }

                            return false;
                        })) {
                            return matchingPart;
                        }

                        //Нет, якорь не найден (из-за склонений, например), возвращаем самый большой из найденных кусков адреса
                        return _.max(this._parts, function(part) {
                            return part.toString().length;
                        });
                    },

                    /**
                     * Обернуть часть найденного адреса в разметку
                     */
                    wrap: function() {
                        var range = this.partToRange(this.selectPart());
                        if (!range || $(range.commonAncestorContainer).closest('a, .js-extracted-address').size() !== 0) {
                            return; //Не нужно размечать адреса, находящиеся внутри ссылок или других адресов
                        }

                        var wrapNode = document.createElement('span');
                        wrapNode.setAttribute('class', 'js-extracted-address');
                        wrapNode.setAttribute('data-action', 'map-up.showAddress');
                        wrapNode.setAttribute('data-params', 'address=' + this._parsedAddress);

                        /*
                         Сделующие три строчки вместо range.surroundContents(wrapNode)
                         Потому что range.surroundContents падает в phantomjs:

                         var el = document.createElement('div');
                         el.innerHTML = '<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Город Пемза, улица Великого Ктулху, владение 15. Vivamus eleifend sagittis venenatis.</div>';

                         var textNode = el.childNodes[0].childNodes[0];

                         var range = document.createRange();
                         range.setStart(textNode, 57);
                         range.setEnd(textNode, 105);

                         range.surroundContents(document.createElement('span')); // <-- Throws here
                         */
                        var fragment = range.extractContents();
                        range.insertNode(wrapNode);
                        wrapNode.appendChild(fragment);

                        range.commonAncestorContainer.normalize(); //Если остались пустые текстовые ноды, надо за собой подчистить
                    }
                };

                /**
                 * Поиск адреса в ноде
                 * @param {Node}    node        Нода, в которой нужно найти адрес
                 * @param {Object}  addressFact Факт об адресе из томиты
                 * @constructor
                 */
                var Parser = function(node, addressFact) {
                    this._topNode = node;
                    this._addressFact = addressFact;

                    this._currentNode = null;
                    this._currentPositionInsideNode = -1;

                    this._nodesQueue = [];
                    this.buildQueue();
                };
                Parser.prototype = {
                    /**
                     * Запуск парсера
                     */
                    start: function() {
                        var symbol;
                        var address = this.getNewAddress();

                        var addresses = [];

                        /* jshint boss:true */ /* Boss mode, woo hoo (присвоение тут и должно быть) */
                        while (symbol = this.shiftSymbol()) { //Пока есть символы
                            //Матчим адрес на символ
                            address.match(symbol);
                            if (address.matches()) {
                                //Если адрес сматчился, запоминаем его и создаем следующий адрес
                                addresses.push(address);
                                address = this.getNewAddress();
                            }
                        }

                        _(addresses)
                            .reverse() //Сначала последний найденный, чтобы не поломать индексы внутри одной текст-ноды
                            .each(function(address) {
                                //Оборачиваем все найденные адреса в разметку
                                address.wrap();
                            });
                    },

                    getNewAddress: function() {
                        return new Address(this._addressFact);
                    },

                    _getCharAtPosition: function(node, position) {
                        if (node.nodeType === TEXT_NODE && position < node.textContent.length) {
                            return new Symbol(
                                node.textContent.charAt(position),
                                position,
                                node
                            );
                        }

                        return null;
                    },

                    /**
                     * Находит следующий символ
                     * @returns {Symbol}
                     */
                    shiftSymbol: function() {
                        var currentNode = this.getCurrentNode();
                        this._currentPositionInsideNode += 1; //Сдвигаем индекс
                        var symbol = this._getCharAtPosition(currentNode, this._currentPositionInsideNode);
                        if (symbol) {
                            return symbol;
                        }

                        //В предыдущей ноде символы кончились, берем следующую
                        currentNode = this.shiftNode();
                        if (!currentNode) {
                            //Ноды кончились
                            return null;
                        }

                        this._currentPositionInsideNode = 0; //Вошли в новую ноду, ресетим позицию
                        symbol = this._getCharAtPosition(currentNode, this._currentPositionInsideNode);
                        if (symbol) {
                            return symbol;
                        }

                        //Новая нода не текстовая, нужно отдать инфо о ней, если она всё ещё в topNode
                        if (!Nodes.contains(this._topNode, currentNode, this._topNode)) {
                            return null;
                        }

                        return new Symbol(
                            null,
                            this._currentPositionInsideNode,
                            currentNode
                        );
                    },

                    getCurrentNode: function() {
                        return this._currentNode || this.shiftNode(); //'Or' solves the case when there is no currentNode yet
                    },

                    /**
                     * Находит следующую ноду
                     * @returns {Node}
                     */
                    shiftNode: function() {
                        if (!this._currentNode) {
                            this._currentNode = this._nodesQueue[0];
                            return this._currentNode;
                        }

                        var currentPosition = this._nodesQueue.indexOf(this._currentNode);
                        if (this._nodesQueue.length > currentPosition) {
                            this._currentNode = this._nodesQueue[currentPosition + 1];
                            return this._currentNode;
                        }

                        return null;
                    },

                    buildQueue: function() {
                        var queue = this._nodesQueue;

                        if (this._topNode.nodeType === TEXT_NODE) {
                            queue.push(this._topNode);
                        } else {
                            Nodes.traverse(
                                this._topNode,
                                function() { //Criterion
                                    return true; //All nodes
                                },
                                function(node) {
                                    queue.push(node);
                                }
                            );
                        }
                    }
                };

                /**
                 * ^[^\p{L}\d]+|[^\p{L}\d]+$ скомпилированный через XRegExp для поддержки юникода
                 *
                 * \p{L} //Все буквы
                 *
                 * ^[^\p{L}\d]+ //Вначале строки ищем "не буквы и не цифры"
                 * |
                 * [^\p{L}\d]+$ //И в конце строки ищем "не буквы и не цифры"
                 *
                 * @type {RegExp}
                 */
                var trimPunctuationRe = /^[^\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\d]+|[^\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC\d]+$/g;
                var trimPunctuation = function(address) {
                    return address.replace(trimPunctuationRe, '');
                };

                var transformer = function(bodyNode, params) {
                    if (!Daria.IS_CORP && !Jane.$H('account-information').hasSid('669') && Jane.$H('account-information').getDataKey('home') !== 'yes') {
                        //DARIA-37486 - Открыть карты только на 669 сид и внутреннюю сеть
                        return;
                    }

                    _(Jane.$H('message-body').getLocations(params.ids))
                        .uniq(function(address) {
                            return address.geo_addr;
                        })
                        .each(function(address) {
                            address.geo_addr = trimPunctuation(address.geo_addr);
                        })
                        .sortBy(function(address) {
                            return -address.geo_addr.length; //Сначала более длинные адреса
                        })
                        .each(function(address) {
                            //\s* матчит неразрывные пробелы и склеенный из-за переносов div'ами textContent
                            var addressRe = new RegExp(escapeRegExp(address.geo_addr).replace(spacesRe, "\\s*"), 'g');

                            //Поиск ноды регекспами, кажется, отрабатывает чуточку быстрее в простых случаях
                            Nodes.getSmallestContainingNodes(bodyNode, addressRe).forEach(function(node) {
                                var parser = new Parser(node, address);
                                parser.start();
                            });
                        });
                };

                //Exporting internals for testing
                return _.extend(transformer, {
                    transformerName: 'location-facts',
                    debugMode: debugMode,
                    trimPunctuation: trimPunctuation,
                    escapeRegExp: escapeRegExp,
                    Nodes: Nodes,
                    Symbol: Symbol,
                    Stack: Stack,
                    Address: Address,
                    Parser: Parser
                });
            })(),

            // В основном здесь фигурирует различный препроцессинг ссылок
            function(body, params) {
                var messageBody = Jane.$H('message-body').getCacheByParams(params);

                var isSpam = messageBody['is-spam'];
                var forceShowHrefs = params.forceShowHrefs;

                var isSupport = messageBody['is-support'];
                var hasLinks = false;

                var nodes = body.getElementsByTagName('a');
                var nodesLength = nodes.length;

                // Перебираем все ноды найденных ссылок
                while (nodesLength--) {
                    var node = nodes[nodesLength];
                    var href = node.getAttribute('href');

                    if (href && href.indexOf(REDIRECT_URL) !== -1) {
                        var realHref = href.slice(href.indexOf('&l=') + 3);
                        if (realHref) {
                            realHref = Daria.base64UrlDecode(realHref);

                            node.setAttribute('data-vdir-href', href);
                            node.setAttribute('data-orig-href', realHref);
                            node.setAttribute('href', realHref);
                        }
                    }

                    if (href && href.indexOf('mailto:') === 0) {
                        Jane.DOM.classAdd(node, 'daria-action');
                        node.setAttribute('data-action', 'common.go');
                        node.setAttribute('data-params', 'new_window&url=#compose/mailto=' + href.substr(7));

                    // Если нет необходимости показывать ссылки и картинки
                    // и это не саппорт
                    } else if (!forceShowHrefs && isSpam && !isSupport) {
                        // то атрибуты href подменяются на невалидные, допуская восстановление
                        hasLinks = true;
                        node.setAttribute('h_href', node.getAttribute('href'));
                        node.removeAttribute('href');
                        Jane.DOM.classAdd(node, 'ya-hidden-link');

                        // var $a = $(node);
                        // $a.replaceWith($a.contents());

                    } else {
                        hasLinks = true;
                        Jane.DOM.classAdd(node, 'daria-goto-anchor');
                        node.setAttribute('target', '_blank');
                    }
                }

                messageBody['has-links'] = hasLinks;
            },

            // Препроцессинг картинок
            function(body, params) {
                var forceShowImages = params.forceShowImages;

                var messageBody = Jane.$H('message-body').getCacheByParams(params);
                var hasImg = false;
                var hideImgs = messageBody['hide-imgs'];
                var hasLinks = messageBody['has-links'];

                var nodes = body.getElementsByTagName('img');
                var nodesLength = nodes.length;

                while (nodesLength--) {
                    var node = nodes[nodesLength];

                    hasImg = true;
                    if (hideImgs && !forceShowImages) {
                        var attrs = node.attributes;
                        // мы будем вставлять новые атрибуты, поэтому индексы у старой ноды будут меняеться
                        // надо все делать с новыой
                        var newImg = document.createElement('img');
                        for (var i = 0, j = attrs.length; i < j; i++) {
                            var attr = attrs[i];
                            var attrName = attr.nodeName;
                            var attrValue = attr.nodeValue;
                            if (attrName == 'data-fake-img-src') {
                                newImg.setAttribute('h_src', attrValue);

                            } else {
                                newImg.setAttribute('h_' + attrName, attrValue);
                            }
                        }
                        newImg.setAttribute('src', Jane.getEntity('b-ico.gif'));
                        newImg.setAttribute('class', 'ya-hidden-image' + (hasLinks ? ' ya-without-notice' : ''));
                        node.parentNode.replaceChild(newImg, node);

                    } else {
                        // возвращаем src обратно
                        var src = node.getAttribute('data-fake-img-src');
                        if (src !== null) {
                            node.removeAttribute('data-fake-img-src');
                            node.setAttribute('src', src);
                        }
                    }
                }

                messageBody['has-img'] = hasImg;
            },

            function(body) {
                var breakLongWords = function(node) {
                    var parent = node.parentNode;
                    var value = node.nodeValue;
                    var stop;
                    node.nodeValue = value.replace(WBR_SPACE_RX, '\u00a0\u0020').replace(WBR_SPACE_RX2, '$1\u0020$2');

                    stop = node.nodeValue.match(WBR_RX);
                    if (stop) {
                        node = node.splitText(stop.index + WBR_SIZE);
                        parent.insertBefore(WBR_NODE.cloneNode(false), node);
                        if (queue) {
                            queue.push(node);
                        }
                    }
                };

                if (document.createTreeWalker) {
                    var tw = document.createTreeWalker(body, NodeFilter.SHOW_TEXT, null, false);
                    while (tw.nextNode()) {
                        breakLongWords(tw.currentNode);
                    }

                } else {
                    var queue = [ body ];
                    var currentNode;

                    while (queue.length > 0) {
                        currentNode = queue.shift();

                        for (var i = 0, len = currentNode.childNodes.length; i < len; i++) {
                            queue.push(currentNode.childNodes[i]);
                        }

                        if (currentNode.nodeType == 3) {
                            breakLongWords(currentNode);
                        }
                    }
                }
            },

            function(body) {
                var nodes = body.getElementsByTagName('object');
                var nodesLength = nodes.length;

                if (!nodesLength) {
                    return body;
                }

                var paramNode = document.createElement('param');
                paramNode.setAttribute('name', 'wmode');
                paramNode.setAttribute('value', 'opaque');

                while (nodesLength--) {
                    nodes[nodesLength].appendChild(paramNode.cloneNode(false));
                }

                paramNode = null;
            },

            function(body) {
                var nodes = body.getElementsByTagName('embed');
                var nodesLength = nodes.length;

                while (nodesLength--) {
                    nodes[nodesLength].setAttribute('wmode', 'opaque');
                }
            },

            function(body) {
                var nodes = body.getElementsByTagName('form');
                var nodesLength = nodes.length;
                var node;

                while (nodesLength--) {
                    node = nodes[nodesLength];
                    node.setAttribute('onsubmit', 'return Daria.formWarning(this)');
                    node.setAttribute('target', '_blank');
                    // DARIA-10057 - [МПУ] XSS при просмотре HTML-письма
                    node.removeAttribute('formaction');
                }
            },

            function(body) {
                var nodes = body.getElementsByTagName('area');
                var nodesLength = nodes.length;

                while (nodesLength--) {
                    nodes[nodesLength].setAttribute('target', '_blank');
                }
            },

            function(body) {
                $('span.wmi-video-link', body).each(function() {
                    var $this = $(this);
                    $this.replaceWith(Daria.supplant(TMPL_VIDEO_LINK, {
                        url: $this.text(),
                        params: this.getAttribute('params')
                    }));
                });
            },

            function(body) {
                var nodes = that.getQuotesByLevel(body);
                var nodesLength = nodes.length;
                var i = 0;
                var node;
                var className;
                var levels = {};

                for (; i < nodesLength; i++) {
                    node = nodes[i];

                    // ищем ближайшую цитату, не считая себя
                    // jquery тут в 2-3 раза медленнее
                    var parent = node;
                    var parentLevel = 0;
                    while (( parent = parent.parentNode )) {
                        if (Jane.DOM.isBlockquote(parent)) {
                            parentLevel = that.getQuoteLevel(parent);
                            break;
                        }
                    }

                    var myLevel = parentLevel + 1;
                    var idxByLevel = (levels[myLevel] || 0) + 1;

                    // DARIA-22047
                    node.setAttribute('type', 'cite');
                    // уровень вложенности
                    node.setAttribute('data-level', String(myLevel));

                    node.removeAttribute('style');

                    className = 'b-quote';
                    if (parentLevel === 0) {
                        className += ' b-quote_lt';
                    }

                    className += myLevel % 2 ? ' b-quote_odd' : ' b-quote_even';
                    node.className = className;

                    levels[myLevel] = idxByLevel;
                }
            },

            // подьем вложенных нод цитирования на верхний уровень
            // объединение рядом стоящих нод цитирования
            function(body) {
                that.fixQuotesSync(body, 1);
            },

            function(body) {
                var nodes = that.getQuotesByLevel(body);
                var nodesLength = nodes.length;
                var i = 0;
                var levels = {};
                var node;
                var level;

                for (; i < nodesLength; i++) {
                    node = nodes[i];
                    level = that.getQuoteLevel(node);

                    if (!levels[level]) {
                        Jane.DOM.classAdd(node, 'b-quote_lf');
                        that.flagAdd(node, that.F_QUOTE.LEVEL_FIRST);

                    } else {
                        Jane.DOM.classAdd(node, 'b-quote_lc');
                        that.flagAdd(node, that.F_QUOTE.LEVEL_CENTER);
                    }

                    levels[level] = node;
                }

                for (var l in levels) {
                    node = levels[l];
                    Jane.DOM.classAdd(node, 'b-quote_ll');
                    Jane.DOM.classRemove(node, 'b-quote_lc');
                    that.flagAdd(node, that.F_QUOTE.LEVEL_LAST);
                    that.flagRemove(node, that.F_QUOTE.LEVEL_CENTER);
                }

                levels = null;
            },

            function(body, params) {
                var nodes = that.getQuotesByLevel(body, 1);
                var nodesLength = nodes.length;
                var i = 0;
                var node;
                var autoExpand = Jane.$H('message').isBodyAutoExpand(params.ids);
                var parentQuotes = nodesLength > 1;

                for (; i < nodesLength; i++) {
                    node = nodes[i];

                    // у последней части цитаты нет автораскрытия, не обрабатываем
                    if (that.flagContains(node, that.F_QUOTE.LEVEL_LAST)) {
                        continue;
                    }

                    if (autoExpand || parentQuotes) {
                        that.flagAdd(node, that.F_QUOTE.EXPANDED_ALL);

                        if (parentQuotes) {
                            Jane.DOM.classAdd(node, 'js-quote-mini');
                        }
                    }
                }
            },

            // выгребаем цитаты и красиво их оборачиваем
            // очень дорогая операция
            function(body, params) {
                var nodes = that.getQuotesByLevel(body, 1);
                var nodesLength = nodes.length;
                var i = 0;

                for (; i < nodesLength; i++) {
                    that.wrapQuote(nodes[i], params);
                }
            }
        ]
    };

})(Daria.MessageProcess);


/* ../../js/daria.messageprocess.transformers.js end */


    /**
     * Количество цитат, обрабатываемых за один цикл при асинхронной обработке при оборачивании
     * @constant {Number} Daria.MessageProcess.AUTHOR_CHUNK_SIZE
     * @memberof Daria.MessageProcess
     */
    that.QUOTES_CHUNK_SIZE = 10;

    /**
     * Флаги обработки тела письма
     * @enum {String}
     * @constant
     */
    that.F_QUOTE = {
        /* Цитата расположена ниже первой цитаты с автором на том же уровне */
        AUTHOR_NEXT: 'an',
        /* Был выполнен поиск позиции цитаты относительно первой цитаты с автором на том же уровне */
        AUTHOR_POSITION_SEARCH: 'aps',
        /* Было выполнено удаление незначащих нод внутри цитаты */
        BUBBLING_CONTENT: 'bc',
        /* Цитаты были объединены */
        CONCAT: 'cq',
        /* Цитату необходимо отобразить раскрытой */
        EXPANDED_ALL: 'ea',
        /* Автор найден */
        FOUND_AUTHOR: 'fa',
        /* Первая цитата на уровне */
        LEVEL_FIRST: 'lf',
        /* Последняя цитата на уровне */
        LEVEL_LAST: 'll',
        /* Средняя цитата на уровне */
        LEVEL_CENTER: 'lc',
        /* Был выполнен поиск автора */
        SEARCH_AUTHOR: 'sa',
        /* Цитата обернута */
        WRAP: 'qw',
        /* К цитате добавлены разделители от внешнего/внутреннего текста */
        WRAP_SEP: 'qws'
    };

    /**
     * Временная нода, которая используется для подготовки тела письма
     * @constant {?Node} Daria.MessageProcess.BODY_PROCESS
     * @memberof Daria.MessageProcess
     */
    that.BODY_PROCESS = null;

    /**
     * Получение ноды с текстом письма
     * Если текст письма ещё не добавлен на страницу, возвращает временную ноду
     * иначе возвращает текущюю активную ноду блока message-body-box
     * @memberof Daria.MessageProcess
     * @return {Node}
     */
    that.getTopParent = function() {
        return that.BODY_PROCESS || Jane.$B('message-body-box').getActiveCacheNode();
    };


    /**
     * Проверка налисия флага
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {String} processName
     * @return {Boolean} true, если флаг найден
     */
    that.flagContains = function(node, processName) {
        if (!processName) {
            return false;
        }

        if (node.nodeType !== 1) {
            return false;
        }

        return (' ' + (node.getAttribute('data-processed') || '') + ' ').indexOf(' ' + processName + ' ') !== -1;
    };

    /**
     * Добавление флага
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {...String} processName
     * @return {Boolean} true, если выполнена установка флага
     */
    that.flagAdd = function(node, processName) {
        /* jshint unused: false */

        if (node.nodeType !== 1) {
            return false;
        }

        var list = Array.prototype.slice.call(arguments);
        list.shift();

        var current = node.getAttribute('data-processed');
        current = current ? (' ' + current + ' ') : ' ';

        var isAdd = false;
        var item;
        var j = 0;

        while (( item = list[j++] )) {
            if (current.indexOf(' ' + item + ' ') === -1) {
                current += item + ' ';
                isAdd = true;
            }
        }

        if (isAdd) {
            node.setAttribute('data-processed', current.trim());
            return true;
        }

        return false;
    };

    /**
     * Удаление флага
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {...String} processName
     * @return {Boolean} true, если выполнено удаление флага
     */
    that.flagRemove = function(node, processName) {
        /* jshint unused: false */

        if (node.nodeType !== 1) {
            return false;
        }

        var list = Array.prototype.slice.call(arguments);
        list.shift();

        var current = node.getAttribute('data-processed');
        current = current ? (' ' + current + ' ') : '';

        var isRemove = false;
        var item;
        var j = 0;

        while (( item = list[j++] )) {
            while (current.indexOf(' ' + item + ' ') !== -1) {
                current = current.replace(' ' + item + ' ', ' ');
                isRemove = true;
            }
        }

        if (isRemove) {
            node.setAttribute('data-processed', current.trim());
            return true;
        }

        return false;
    };

    /**
     * Получение списка нод цитат в указанном контекте и для указанного уровня вложенности
     * @memberof Daria.MessageProcess
     * @param {Node} node контекст
     * @param {Number} [level] уровень вложенности
     * @return {NodeList|Array}
     */
    that.getQuotesByLevel = function(node, level) {
        if (level) {
            if (node.querySelectorAll) {
                return node.querySelectorAll('blockquote[data-level="' + level + '"]');

            } else {
                level = Number(level);
                return Array.prototype.filter.call(node.getElementsByTagName('blockquote'), function(quote) {
                    return (that.getQuoteLevel(quote) === level);
                });
            }
        }

        return node.getElementsByTagName('blockquote');
    };

    /**
     * Получение значения уровня вложенности для цитаты
     * @memberof Daria.MessageProcess
     * @param {Node} node нода цитаты
     * @return {Number}
     */
    that.getQuoteLevel = function(node) {
        return Number(node.getAttribute('data-level') || 0);
    };

    /**
     * Поиск фестлайна в цитате
     * @memberof Daria.MessageProcess
     * @param {Node} nodeQuote нода цитаты, для которой требуется определить фестлайн
     * @return {String}
     * @private
     * @tested test/unit/js/daria.messageprocess.js
     */
    that._findQuoteFirstLine = function(nodeQuote) {
        if (!nodeQuote.hasChildNodes()) {
            return '';
        }

        var regNewLine = /\n/g;
        var firstLine;
        var stringCount;
        var lastStringCount = 0;

        Jane.DOM.eachInnerFollowingText(nodeQuote, function(node, content) {
            if (Jane.DOM.isBlockquote(node)) {
                return false;
            }

            content = Jane.String.removeNonLetterString(content.trim());
            stringCount = content.match(regNewLine);
            stringCount = (stringCount ? stringCount.length : 0);

            // после перехода на новую строку длинная фестлайна стала больше 100
            if (stringCount !== lastStringCount && content.length > 100) {
                return false;
            }

            firstLine = content;
            lastStringCount = stringCount;
        });

        if (!firstLine) {
            return '';
        }

        // поиск первой не буквенной строки и удаление всех следующих за ней
        // пытаемся решить проблему с появлением текста подписи в фестлайне
        var isSep = false;
        firstLine = firstLine.split('\n').filter(function(line) {
            if (isSep || Jane.String.REG.NONLETTER_STR.test(line)) {
                isSep = true;
                return false;
            }

            return true;
        });

        if (!firstLine.length) {
            return '';
        }

        // автором может быть последняя строка
        // или объединение нескольких строк
        // по хорошему надо проверять начиная как с конца так и с начала списка строк
        // постепенно объединяя строки
        // пока делаем с объединением с конца, т.к. с начала случаев небыло
        var firstLineStringCount = firstLine.length;
        var checkString = '';
        var authorLines = -1;
        while (firstLineStringCount--) {
            checkString = firstLine[firstLineStringCount] + checkString;
            if (that.Author.parseAuthorText(checkString)) {
                authorLines = firstLineStringCount;
            }
        }

        if (authorLines !== -1) {
            firstLine = firstLine.slice(0, authorLines);
        }

        if (!firstLine.length) {
            return '';
        }

        firstLine = Jane.String.substrWord(firstLine.join(' '), 0, 200);

        return firstLine;
    };

    /**
     * Вспомогательная функция для _quoteWrapSeparator
     * Выполняет условие прекращения удаления пустых нод справа и слева от ноды обрабатываемой цитаты
     * @param {Node} checkNode проверяемая нода
     * @return {Boolean} false, если дальнейшую обработку требуется прекратить
     * @private
     */
    that._removeEmptyNodeCheck = function(checkNode) {
        if (Jane.DOM.isBlockquote(checkNode)) {
            return false;
        }

        if ([ 'IMG', 'HR' ].indexOf(checkNode.nodeName) !== -1) {
            return false;
        }

        if (Jane.DOM.hasAttribute(checkNode, 'style')) {
            return false;
        }

        if (Jane.DOM.classContains(checkNode, 'icon')) {
            //Не надо удалять, если это пустой тег с иконкой
            return false;
        }

        return true;
    };

    /**
     * Проверка необходимости и добавление классов с отступами от внешнего текста
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode
     * @private
     */
    that._quoteWrapSeparator = function(quoteNode) {
        if (that.flagContains(quoteNode, that.F_QUOTE.WRAP_SEP)) {
            return;
        }

        that.flagAdd(quoteNode, that.F_QUOTE.WRAP_SEP);

        var context = quoteNode.parentNode;

        Jane.DOM.removeEmptyNodeBefore(quoteNode, that._removeEmptyNodeCheck, context);
        Jane.DOM.removeEmptyNodeAfter(quoteNode, that._removeEmptyNodeCheck, context);

        Jane.DOM.eachBefore(quoteNode, function(el) {
            if (Jane.DOM.classContains(el, 'js-quote-ignore')) {
                return 'next';
            }

            if (Jane.DOM.isBlockquote(el)) {
                return false;
            }

            if (!Jane.DOM.isEmptyText($.text(el))) {
                Jane.DOM.classAdd(quoteNode, 'b-quote__t_sep');
                return false;
            }

            return true;
        }, context);

        Jane.DOM.eachAfter(quoteNode, function(el) {
            if (Jane.DOM.classContains(el, 'js-quote-ignore')) {
                return 'next';
            }

            if (Jane.DOM.isBlockquote(el)) {
                return false;
            }

            if (!Jane.DOM.isEmptyText($.text(el))) {
                Jane.DOM.classAdd(quoteNode, 'b-quote__b_sep');
                return false;
            }

            return true;
        }, context);
    };

    /**
     * Проверка необходимости и добавление классов с отступами внутреннего текста от края цитаты
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode
     * @private
     */
    that._quoteWrapSeparatorInner = function(quoteNode) {
        Jane.DOM.eachInnerPrevious(quoteNode, function(innerNode) {
            if (innerNode.nodeType === 3 && !Jane.DOM.isEmptyTextNode(innerNode)) {
                Jane.DOM.classAdd(quoteNode, 'b-quote__cb_sep');
                return false;
            } else if (Jane.DOM.isBlockNode(innerNode) && innerNode !== quoteNode) {
                return false;
            }
        });

        Jane.DOM.eachInnerFollowing(quoteNode, function(innerNode) {
            if (innerNode.nodeType === 3 && !Jane.DOM.isEmptyTextNode(innerNode)) {
                Jane.DOM.classAdd(quoteNode, 'b-quote__ct_sep');
                return false;
            } else if (Jane.DOM.isBlockNode(innerNode) && innerNode !== quoteNode) {
                return false;
            }
        });
    };

    /**
     * Проверка возможности удаления ноды с выносом контента
     * нода может содержать инлайновые аттачи в виде ссылок на картинки в background
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @return {Boolean} true, если ноду можно удалить
     * @private
     */
    that._bubblingQuoteContentCheckNode = function(node) {
        return !Jane.DOM.hasAttribute(node, 'style');
    };

    /**
     * Удаление незначащих вложенностей в div внутри цитат
     *
     * @example
     * // <DIV><BLOCKQUOTE>1<br>2</BLOCKQUOTE></DIV>
     * Daria.MessageProcess._bubblingQuoteContent(<DIV><BLOCKQUOTE><DIV><DIV>1</DIV></DIV><DIV>2</DIV></BLOCKQUOTE></DIV>);
     *
     * @memberof Daria.MessageProcess
     * @param {Node} node блок, внутри которого в каждом блоке цитат будет выполнено действие
     * @param {Number} [level] если указан, действие будет выполнено для данного уровня вложенности
     * @return {Node}
     * @private
     */
    that._bubblingQuoteContent = function(node, level) {
        if (!node.hasChildNodes()) {
            return node;
        }

        var quotes = that.getQuotesByLevel(node, level);
        var i = 0;
        var l = quotes.length;

        for (; i < l; i++) {
            if (that.flagContains(quotes[i], that.F_QUOTE.BUBBLING_CONTENT)) {
                continue;
            }

            Jane.DOM.bubblingDivContent(quotes[i], that._bubblingQuoteContentCheckNode);

            that.flagAdd(quotes[i], that.F_QUOTE.BUBBLING_CONTENT);
        }

        return node;
    };


    /**
     * Объединение всех найденных нод
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {Number} [level] уровень, только для которого требуется выполнить объединение
     * @return {Node}
     * @private
     */
    that._concatQuotes = function(node, level) {
        if (!node.hasChildNodes()) {
            return node;
        }

        var quotes = that.getQuotesByLevel(node, level);
        var deep = level ? false : true;
        var quote;
        var parent;
        var i;
        var l;

        for (i = 0, l = quotes.length; i < l; i++) {
            quote = quotes[i];

            // цитаты после склейки удаляются и пропадают из списка
            if (!quote) {
                continue;
            }

            parent = quote.parentNode;

            if (!parent) {
                continue;
            }

            that._concatChildQuotes(parent, deep);
        }

        return node;
    };

    /**
     * Проверка является ли нода пустой
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @return {Boolean}
     * @private
     */
    that._concatChildQuotesIsEmptyNode = function(node) {
        return Jane.DOM.isBr(node) || Jane.DOM.isEmptyTextNode(node) || Jane.DOM.isEmptyPreNode(node);
    };

    /**
     * Объединение дочерних blockquote нод
     * @memberof Daria.MessageProcess
     * @param {Node} parentNode
     * @param {Boolean} [deep] true, если требуется обработать все вложенные ноды
     * @return {Node}
     * @private
     */
    that._concatChildQuotes = function(parentNode, deep) {
        var next;
        var node;
        var quote;
        var parent;
        var stack = [ parentNode ];
        var empty = [];
        var i;
        var isempty;
        var br = parentNode.ownerDocument.createElement('br');

        while ((parent = stack.shift())) {
            if (!parent.hasChildNodes()) {
                continue;
            }

            if (that.flagContains(parent, that.F_QUOTE.CONCAT)) {
                continue;
            }

            node = parent.firstChild;
            quote = Jane.DOM.isBlockquote(node) ? node : null;

            while ((next = node.nextSibling)) {
                if (Jane.DOM.isBlockquote(next)) {
                    if (quote) {
                        if (empty.length) {
                            isempty = true;
                            for (i = 0; i < empty.length; i++) {
                                if (isempty && !Jane.DOM.isEmptyTextNode(empty[i])) {
                                    isempty = false;
                                }

                                quote.appendChild(empty[i]);
                            }

                            empty = [];
                            if (isempty) {
                                quote.appendChild(br.cloneNode(false));
                            }

                        } else if (
                            quote.lastChild &&
                            next.firstChild &&
                            !Jane.DOM.isNewlineNode(quote.lastChild) &&
                            !Jane.DOM.isNewlineNode(next.firstChild)
                        ) {
                            quote.appendChild(br.cloneNode(false));
                        }

                        while (next.firstChild) {
                            quote.appendChild(next.firstChild);
                        }

                        node = next.previousSibling;
                        next.parentNode.removeChild(next);

                        if (deep &&
                            stack.indexOf(quote) === -1 &&
                            that.getQuotesByLevel(quote).length > 0
                        ) {

                            stack.push(quote);
                        }

                        continue;

                    } else {
                        quote = next;
                    }

                } else if (quote && that._concatChildQuotesIsEmptyNode(next)) {
                    empty.push(next);

                } else {
                    empty = [];
                    quote = null;

                    if (deep &&
                        Jane.DOM.isBlockNode(node) &&
                        stack.indexOf(node) === -1 &&
                        that.getQuotesByLevel(node).length > 0
                    ) {
                        stack.push(node);
                    }
                }

                node = next;
            }

            that.flagAdd(parent, that.F_QUOTE.CONCAT);
        }

        br = null;
        return parentNode;
    };

    /**
     * Удаление лишней вложенности и объединение цитат. Поиск и удаление авторов.
     * Синхронная версия.
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {Number} [level]
     */
    that.fixQuotesSync = function(node, level) {
        that._bubblingQuoteContent(node, level);
        that._concatQuotes(node, level);
        that.Author.findAndRemoveQuoteAuthorSync(node, level);
    };

    /**
     * Удаление лишней вложенности и объединение цитат. Поиск и удаление авторов.
     * Асинхронная версия.
     * @memberof Daria.MessageProcess
     * @param {Node} node
     * @param {Number} [level]
     * @param {Function} [callback]
     */
    that.fixQuotes = function(node, level, callback) {
        that._bubblingQuoteContent(node, level);
        that._concatQuotes(node, level);
        that.Author.findAndRemoveQuoteAuthor(node, level, callback);
    };

    /**
     * Оборачивание цитаты, подстановка автора, фестлайна и контролов
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode
     * @param {Object} [params] параметры, с которыми открываем письмо
     * @return {Boolean}
     */
    that.wrapQuote = function(quoteNode, params) {
        if (that.flagContains(quoteNode, that.F_QUOTE.WRAP)) {
            return false;
        }

        that.flagAdd(quoteNode, that.F_QUOTE.WRAP);

        params = params || {};

        var author = that.Author.getQuoteAuthor(quoteNode);
        that.Author.removeQuoteAuthorData(quoteNode);

        var firstline = that._findQuoteFirstLine(quoteNode);

        // добавление разделителей между рамкой цитаты и текстом рядом
        that._quoteWrapSeparator(quoteNode);
        that._quoteWrapSeparatorInner(quoteNode);

        // работаем с клонированной нодой, чтобы не вызываеть reflow
        var node = quoteNode.cloneNode(true);

        // если цитата не содержит вложенных, то сразу расскрываем
        that._expandSmallQuotes(node);

        var $node = $(node);

        // оборачивает контент в div
        $node.wrapInner('<div class="b-quote_content"/>');

        var $content = $node.find('> .b-quote_content');

        $content.contents().wrapAll('<div class="b-quote__i js-quote-content"/>');
        $content.prepend(Jane.tt('mail-message:js-message-body-quote-ctrls', { ids: params.ids }));

        if (firstline) {
            $content.prepend(Jane.tt('mail-message:js-message-body-quote-firstline', { firstline: firstline }));
        }

        if (author) {
            author.mid = params.ids;
            $content.prepend(Jane.tt('mail-message:js-message-body-quote-author', author));
        }

        // заменяем оригинальную ноду на обработанную
        quoteNode.parentNode.replaceChild(node, quoteNode);

        // если есть автораскрытие цитаты, то обрабатываем еще и уровень ниже
        if (that.flagContains(node, that.F_QUOTE.EXPANDED_ALL)) {
            that.flagRemove(node, that.F_QUOTE.EXPANDED_ALL);

            that.wrapQuotesSync(node, false, function(quoteNode) {
                Jane.DOM.classAdd(quoteNode, 'b-quote_expanded');
            }, params);

            Jane.DOM.classAdd(node, 'b-quote_expanded');
        }

        return true;
    };

    /**
     * Оборачивание группы цитат
     * Синхронная версия
     * @see Daria.MessageProcess.wrapQuote
     * @memberof Daria.MessageProcess
     * @param {Node} node контекст, в котором выполняется поиск цитат
     * @param {Number} [level]
     * @param {Function} [callback]
     * @param {Object} [params] параметры, с которыми открываем письмо
     */
    that.wrapQuotesSync = function(node, level, callback, params) {
        callback = callback || $.noop;

        that.fixQuotesSync(node, level);

        var quotes = that.getQuotesByLevel(node, level);
        var i = 0;
        var l = quotes.length;

        for (; i < l; i++) {
            that.wrapQuote(quotes[i], params);
            callback(quotes[i]);
        }
    };

    /**
     * Оборачивание группы цитат
     * Асинхронная версия
     * @see Daria.MessageProcess.wrapQuote
     * @memberof Daria.MessageProcess
     * @param {Node} node контекст, в котором выполняется поиск цитат
     * @param {Function} [callback]
     * @param {Object} [params] параметры, с которыми открываем письмо
     */
    that.wrapQuotes = function(node, callback, params) {
        var queue = $({});

        queue.queue(function(next) {
            that.fixQuotes(node, null, next);
        });

        queue.queue(function(next) {
            var quotes = that.getQuotesByLevel(node);
            // обрабатываем чанками по 10 цитит
            var chunks = Math.ceil(quotes.length / that.QUOTES_CHUNK_SIZE);
            var chunksLeft = chunks;

            if (!chunks) {
                next();
                return;
            }

            function generateTimer(chunkNum) {
                return function() {
                    var start = chunkNum * that.QUOTES_CHUNK_SIZE;
                    for (var i = 0; i < that.QUOTES_CHUNK_SIZE; i++) {
                        var quote = quotes[start + i];
                        if (quote) {
                            that.wrapQuote(quote, params);
                        }
                    }
                    chunksLeft--;
                    if (chunksLeft === 0) {
                        next();
                    }
                };
            }

            for (var i = 0; i < chunks; i++) {
                Daria.setZeroTimeout(generateTimer(i));
            }
        });

        queue.queue(callback);
    };

    /**
     * Развернуть/свернуть цитату
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode
     * @param {Boolean} [switchExpand] принудительно свернуть/развернуть
     * @param {Object} [params] параметры, с которыми открываем письмо
     */
    that.quoteExpandToggle = function(quoteNode, switchExpand, params) {
        var isExpand = Jane.DOM.classContains(quoteNode, 'b-quote_expanded');
        var isNoSwitch = typeof(switchExpand) === 'undefined';

        if (switchExpand === false || (isNoSwitch && isExpand)) {
            Jane.DOM.classRemove(quoteNode, 'b-quote_expanded');
            return;
        }

        if (switchExpand === true || (isNoSwitch && !isExpand)) {
            var level = that.getQuoteLevel(quoteNode) + 1;
            that.wrapQuotesSync(quoteNode, level, null, params);
            Jane.DOM.classAdd(quoteNode, 'b-quote_expanded');
            Daria.SocialAvatars2.run();
        }
    };

    /**
     * Развернуть все цитаты в дереве вложенностей
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode
     * @param {Function} [callback]
     * @param {Object} [params] параметры, с которыми открываем письмо
     */
    that.quoteExpandAll = function(quoteNode, callback, params) {
        callback = callback || $.noop;
        var topQuote = $(quoteNode).closest('.b-quote_lt').get(0);

        that.wrapQuotes(topQuote, function() {
            callback();

            var quotes = that.getQuotesByLevel(topQuote);

            var l = quotes.length;
            while (l--) {
                if (!quotes[l]) {
                    continue;
                }

                Jane.DOM.classAdd(quotes[l], 'b-quote_expanded');
            }

            if (topQuote === quoteNode) {
                Jane.DOM.classAdd(topQuote, 'b-quote_expanded');
            }

            Daria.SocialAvatars2.run();
        }, params);
    };

    /**
     * Удаление лишней вложенности цитат
     * Обрабатывает только случай, когда цитаты вложены друг в друга без других нод.
     * Нода цитирования в ответе клонируется из первой ноды исходного текста с удалением атрибута style.
     *
     * @example
     * // <blockquote>123</blockquote>
     * Daria.MessageProcess.bubblingClipboardQuote('<blockquote><blockquote><blockquote>123</blockquote></blockquote></blockquote>')
     *
     * @memberof Daria.MessageProcess
     * @param {String} html
     * @return {String|Boolean} false, если обработка не выполнена
     */
    that.bubblingQuote = function(html) {
        // хром в ubuntu добавляет к данным буфера метатег
        html = html.replace(/^<meta[^>]*>/, '');

        // хром в windows возвращает строку html в body тегах, выделенную данными коментариями
        var match = html.match(/<!--StartFragment-->(.*?)<!--EndFragment-->/);
        if (match) {
            html = match[1];
        }

        var tmpNode = document.createElement('div');
        tmpNode.innerHTML = html;

        var quote;
        var node = tmpNode;

        while (node) {
            if (node.childNodes.length === 1 && Jane.DOM.isBlockquote(node.firstChild)) {
                node = node.firstChild;
                continue;
            }

            if (node === tmpNode) {
                break;
            }

            if (node.getElementsByTagName('blockquote').length) {
                break;
            }

            quote = tmpNode.firstChild.cloneNode(false);
            quote.removeAttribute('style');
            while (node.firstChild) {
                quote.appendChild(node.firstChild);
            }

            break;
        }

        tmpNode = null;

        return quote ? quote.outerHTML : false;
    };

    /**
     * Функция запуска обработки тела письма
     * @memberof Daria.MessageProcess
     * @param {String} content html теля письма
     * @param {Object} [params] параметры, с которыми открываем письмо
     * @return {Node} нода, с обработанным телом письма
     */
    that.processBody = function(content, params) {
        var i;
        var l;
        var item;
        var body = document.createElement('div');

        that.BODY_PROCESS = body;

        try {
            for (i = 0, l = that.BODY_TRANSFORMERS.regs.length; i < l; i++) {
                item = that.BODY_TRANSFORMERS.regs[i];
                content = content.replace(item[0], item[1]);
            }

            body.innerHTML = content;

            for (i = 0, l = that.BODY_TRANSFORMERS.dom.length; i < l; i++) {
                item = that.BODY_TRANSFORMERS.dom[i];
                item(body, params);
            }

        } catch(e) {
            Jane.ErrorLog.sendException('PROCESS_BODY_ERROR', e);
        }

        that.BODY_PROCESS = null;
        return body;
    };

    /**
     * Минимизация больших цитат в переданном контексте
     * @memberof Daria.MessageProcess
     * @param {Node} context
     */
    that.initQuotesByPage = function(context) {
        $('.js-quote-mini > * > .js-quote-content', context).each(function() {
            if (this.offsetHeight < 160) {
                return;
            }

            var quoteNode = this.parentNode.parentNode;
            var isLast = false;

            if (that.flagContains(quoteNode, that.F_QUOTE.LEVEL_LAST)) {
                isLast = true;
                that.quoteExpandToggle(quoteNode, false);

            } else if (that.flagContains(quoteNode, that.F_QUOTE.LEVEL_FIRST)) {
                Jane.DOM.classAdd(quoteNode, 'b-quote_minimized', 'b-quote_minimized_first');

            } else {
                Jane.DOM.classAdd(quoteNode, 'b-quote_minimized', 'b-quote_minimized_center');
            }

            // для разорванных сверху и посередине частей цитаты
            // прокручиваем скрол на конец текста
            if (!isLast) {
                setTimeout(function() {
                    this.scrollTop = this.scrollHeight;
                }.bind(this), 50);
            }
        });
    };


    /**
     * Оценка размера цитаты и возможности её показа сразу раскрытой
     * @memberof Daria.MessageProcess
     * @param {Node} quoteNode нода цитаты
     * @private
     */
    that._expandSmallQuotes = function(quoteNode) {
        if (Jane.DOM.classContains(quoteNode, 'b-quote_expanded')) {
            return;
        }

        if ($.text(quoteNode).length > 200) {
            return;
        }

        if (that.getQuotesByLevel(quoteNode).length) {
            return;
        }

        Jane.DOM.classAdd(quoteNode, 'b-quote_expanded');
    };

})();


/* ../../js/daria.messageprocess.js end */


    /* ../../js/components/message-list-info.js begin */
(function(Daria) {
    /* jshint unused: false */

    Jane.events.bind('table.updaterows', function(name, table) {
        // TODO обязательной причины нет, возможно стоит убрать
        Daria.setZeroTimeout(function() {
            Daria.MessageListInfo.redraw(table);
        });
    });


    /**
     * @constructor
     * @param {Object} message информация о письме из хендлера message
     */
    var listInfo = Daria.MessageListInfo = function(message) {
        this.mid = message.mid;
        this.__prepare = null;
        this.__service = '';
    };

    var protoListInfo = listInfo.prototype;

    /**
     * Общее обновление всех доп. блоков
     * @param {MessagesTable} table обновляемая таблица
     */
    listInfo.redraw = function(table) {
        // TODO в идеале тут мы не должны знать о money
        var hMessage = Jane.$H('message');
        $.each(table.rows, function(ids, row) {
            // деньги не рисуем в тредном письме
            if (!hMessage.isThreadKey(row.id)) {
                var message = hMessage.getCache(row.id);
                if (message && message.money) {
                    message.money.prepare().done(function() {
                        this.redraw(message, row.tr);
                    });
                }
            }
        });
    };

    /**
     * Подготовка данных
     * Переопределить в наследнике
     * @protected
     * @param {Object} messageBody информация о теле письма из хендлера message-body
     * @returns {Deferred}
     */
    protoListInfo._onprepare = function(messageBody) {
        var dfd = $.Deferred();
        dfd.resolve();
        return dfd.promise();
    };

    /**
     * Подготовка данных
     * На данный момент обязателен запрос на получение тела письма
     * @final
     * @returns {Deferred}
     */
    protoListInfo.prepare = function() {
        if (this.__prepare && this.__prepare.state() === 'pending') {
            return this.__prepare.promise();
        }

        this.__prepare = $.Deferred();

        var hMessageBodyParams = { ids: this.mid };
        var that = this;

        // без задержки тормозит отрисовка страницы
        Daria.setZeroTimeout(function() {
            Jane.Handler.getAll(['message-body'], hMessageBodyParams, function() {
                var data = Jane.$H('message-body').getCacheByParams(hMessageBodyParams);
                if (!data) {
                    that.__prepare.rejectWith(that);
                    return;
                }

                that._onprepare(data).then(function() {
                    that.__prepare.resolveWith(that);
                }, function() {
                    that.__prepare.rejectWith(that);
                });
            });
        });

        return this.__prepare.promise();
    };

    /**
     * Прорисовка данных в таблице
     * Переопределить в наследнике
     * @protected
     * @param {Object} message информация о письме из хендлера message
     * @param {Object} tr DOM объект строки с письмом в таблице
     */
    protoListInfo._onredraw = function(message, tr) {};

    /**
     * Прорисовка данных в таблице
     * @final
     * @param {Object} message информация о письме из хендлера message
     * @param {Object} tr DOM объект строки с письмом в таблице
     */
    protoListInfo.redraw = function(message, tr) {
        var $tr = $(tr);
        var services = $tr.data('messageServices') || '';
        var isLastRedraw = this.__service && (' ' + services).indexOf(' ' + this.__service) !== -1;

        if (!isLastRedraw) {
            $tr.data('messageServices', services + ' ' + this.__service);
            this._onredraw(message, tr);
        }
    };

})(Daria);


/* ../../js/components/message-list-info.js end */

    /* ../../js/components/autocompleter.email.js begin */
(function(Autocompleter) {
    Autocompleter.emailAutocompleterOpts = {
        tpl: '<div class="b-mail-suggest b-mail-suggest_contacts">' +
            '<div class="b-grid js-sections"></div>' +
        '</div>',
        activeClass: 'b-grid-item_selected',
        width: '20em',
        multiple: true,
        minChars: 0,
        // Больше скольки раз надо
        // кликнуть в поле что бы показался suggest
        minClickCount: 0,
        excludeSelected: true,
        filterItem: function(item) {
            var currentValue = this.currentValue || this.prevVal;
            var emails;

            if (item.data.title) {
                emails = [].concat(item.data.contacts);
                emails = $.grep(emails, function(contact) {
                    return currentValue.indexOf(contact.email) === -1;
                });
                return emails.length;
            } else if (item.data.email) {
                return currentValue.indexOf(item.data.email) === -1;
            }
        },
        scroll: true,
        scrollElem: '.b-grid',
        item: '.b-grid-item',
        onrender: function($body, data) {
            Daria.SocialAvatarsSuggest($body, data);
        },
        sections: [
            {
                url: 'handlers/handlers3.jsx?_handlers=abook-suggest',
                dataType: 'json',
                param: 'q',
                withCkey: true,
                extraParams: {
                    glimit: 5,
                    climit: 35
                },
                //DARIA-21505
                contextExtraParams: function() {
                    var bCompose = Jane.$B('compose');
                    var extraParams = { };
                    var toEmails;

                    if (!bCompose || Daria.Page.type !== 'compose') {
                        return extraParams;
                    }

                    toEmails = $.map(['To', 'Cc', 'Bcc'], function(type) {
                        var emails = bCompose['get' + type]();
                        if (emails) {
                            return emails.replace(/\s*/g, '').split(',');
                        }
                    });

                    toEmails = toEmails.join(',');
                    // нужно для того что бы получить только emails
                    toEmails = $.map(Jane.FormValidation.splitContacts(toEmails), function(obj) {
                        return obj.email;
                    });
                    toEmails = toEmails.join(',');

                    if (toEmails) {
                        extraParams.to = toEmails;
                    }

                    return extraParams;
                },
                tpl: '{results}',
                beforeRequest: function(term) {
                    return term.length >= 1;
                },
                parse: function(data, term) {
                    data = jpath(data, '.handlers[0].data')[0] || {};

                    var parsed = [];
                    var that = this;

                    function _iterate(items, func, results, max) {
                        for (var i = 0, len = items.length; i < len; i += 1) {
                            if (i === max) {
                                break;
                            }

                            var row = items[i];
                            if (row) {
                                results[results.length] = {
                                    data: row,
                                    value: func.call(that, row, term)
                                };
                            }
                        }
                    }

                    if (data.contacts && data.contacts.length) {
                        _iterate(data.contacts, that.formatContact, parsed, that.extraParams.climit);
                    }
                    if (data.groups && data.groups.length) {
                        _iterate(data.groups, that.formatGroup, parsed, that.extraParams.glimit);
                    }
                    return parsed;
                },
                groupTpl: '<div class="b-grid-item">' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__content__group">' + i18n('%Search_Suggest_group') + '</span>&#160;{title}</span></span>' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__misc">{emails}</span>' +
                    '</span></span>' +
                    '</div>',
                formatContact: function(row, term) {
                    var result = '<div class="b-grid-item">' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' + _.escape(row.name || row.email) + '</span></span>' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__misc">' + (row.name && row.email ? _.escape(row.email) : ' ') + '</span>' +
                    '</span></span><span class="b-grid-item__right"><span class="b-userpic b-userpic_small' + (row.cid ? ' cid-' + row.cid : '') + '"></span></span>';

                    result += '</div>';
                    return Daria.Autocompleter.utils.highlight(result, term);
                },
                formatGroup: function(row, term) {
                    var emails = [];
                    for (var i = 0, len = row.contacts.length; i < len; i++) {
                        emails.push(row.contacts[i].email);
                    }
                    return Daria.Autocompleter.utils.highlight(Daria.supplant(this.groupTpl, {
                        title: row.title,
                        emails: emails.join(', ')
                    }), term);
                },
                formatResult: function(row) {
                    var result;

                    function _format(contact) {
                        return contact.name ? '"' + contact.name + '" <' + contact.email + '>' : contact.email;
                    }

                    // Это группа
                    if (row.contacts) {
                        var contacts = [];

                        for (var i = 0, len = row.contacts.length; i < len; i++) {
                            contacts.push(_format(row.contacts[i]));
                        }

                        result = contacts.join(', ');
                    } else {
                        result = _format(row);
                    }

                    return result;
                }
            }
        ]
    };

    /**
     * Autocompleter популярных контактов
     */
    var emailAutocompleterSection = Autocompleter.emailAutocompleterOpts.sections[0];
    Autocompleter.emailAutocompleterOpts.sections.push($.extend({}, emailAutocompleterSection, {
        url: 'handlers/handlers3.jsx?_handlers=abook-contacts',
        extraParams: {
            popular: 10
        },
        parse: function(data, term) {
            var _data = jpath(data, '.handlers[0].data')[0] || {};

            if (_data.contact && !_data.contacts) {
                _data.contacts = _data.contact;
            }

            return emailAutocompleterSection.parse.call(this, data, term);
        },
        formatContact: function(row, term) {
            row.name = row.name && row.name.full;
            return emailAutocompleterSection.formatContact.call(this, row, term);
        },
        beforeRequest: function(term, autocompleter) {
            var pageType = Jane.Page.loadingHash;
            var pages = ['#compose'];
            var inCompose = $.inArray(pageType, pages) > -1;
            // нажали кнопку ctrl+v
            var pressed = (autocompleter && autocompleter.keyPressed);

            // не показываем suggest если создаем письмо
            // из template-а
            var params = Daria.Page.params;
            var hFolders = Jane.$H('folders');
            var hMessage = Jane.$H('message');

            var isTemplate = (Daria.composeParams && Daria.composeParams.save_symbol === 'template') ||
                params.save_symbol === 'template' ||
                (params.ids && hMessage.inFolder(params.ids, hFolders.ids.template));
            // end

            return inCompose && !pressed && !term && !isTemplate;
        },
        onshow: function() {
            Jane.c(['popular_suggest', 'Показы саджеста популярных контактов']);
        },
        onresult: function(contact) {
            Daria.composeParams = Daria.composeParams || {};
            if (!Daria.composeParams['popular-suggest-general']) {
                Daria.composeParams['popular-suggest-general'] = [];
            }
            Daria.composeParams['popular-suggest-general'].push(contact.email);
            Jane.c(['popular_suggest', 'Клики в саджест популярных контактов']);
            var contacts = Jane.watcher.get('autocompleter.popularContacts') || [];
            var that = this;
            var onUnload = function() {
                Jane.events.unbind('pageunload', onUnload);
                that.binded = false;
                Jane.watcher.set('autocompleter.popularContacts', []);
            };
            contacts.push(contact.email);

            Jane.watcher.set('autocompleter.popularContacts', contacts, {
                silent: true
            });

            if (!this.binded) {
                this.binded = true;
                Jane.events.bind('pageunload', onUnload);
            }
        }
    }));

    Autocompleter.getEmailAutocompleter = function() {
        var autocompleter = new Autocompleter(Autocompleter.emailAutocompleterOpts);
        var _onChange = autocompleter.onChange;

        autocompleter.onChange = function() {
            var currentValue = this.$input.val();
            if (this.keyPressed && !currentValue) {
                this.hide();
                return;
            }

            return _onChange.apply(this, arguments);
        };

        return autocompleter;
    };

    /**
     * Возвращает экземпляр автокомплита для контактов.
     * @returns Autocompleter
     */
    Autocompleter.getContact = function() {
        if (!Autocompleter.__contactInstance) {
            Autocompleter.__contactInstance = Autocompleter.getEmailAutocompleter();
        }

        return Autocompleter.__contactInstance;
    };

    /**
     * Только email контактов без групп.
     */
    Autocompleter.getContactEmail = function() {
        if (!Autocompleter.__contactEmailInstance) {
            Autocompleter.__contactEmailInstance = (function() {
                var options = $.extend(true, {}, Autocompleter.emailAutocompleterOpts, {
                    multiple: false,
                    filterItem: null
                });

                options.sections = $.each(options.sections, function(i, e) {
                    $.extend(e, {
                        formatResult: function(row) {
                            return row.email || '';
                        },
                        parse: function(data, term) {
                            data = jpath(data, '.handlers[0].data')[0] || {};

                            var parsed = [];
                            var that = this;

                            function _iterate(items, func, results, max) {
                                for (var i = 0, len = items.length; i < len; i += 1) {
                                    if (i === max) {
                                        break;
                                    }

                                    var row = items[i];
                                    if (row) {
                                        results[results.length] = {
                                            data: row,
                                            value: func.call(that, row, term)
                                        };
                                    }
                                }
                            }

                            if (data.contacts && data.contacts.length) {
                                _iterate(data.contacts, that.formatContact, parsed, that.extraParams.climit);
                            }

                            return parsed;
                        }
                    });
                });

                var autocompleter = new Autocompleter(options);
                var _onChange = autocompleter.onChange;

                autocompleter.onChange = function() {
                    var currentValue = this.$input.val();
                    if (this.keyPressed && !currentValue) {
                        this.hide();
                        return;
                    }

                    return _onChange.apply(this, arguments);
                };

                return autocompleter;
            })();

        }

        return Autocompleter.__contactEmailInstance;
    };
}(Daria.Autocompleter));

/* ../../js/components/autocompleter.email.js end */

    /* ../../js/components/autocompleter.search.js begin */
(function(Daria) {

    var instance = null;

    /**
     * Логирует информацию о саджесте.
     * @param {Object} suggestInfo
     */
    Daria.Autocompleter.logSuggestInfo = function(suggestInfo) {
        suggestInfo.uid = Daria.uid;

        if (Daria.urlParams.logger === 'suggest') {
            if (console.table) {
                console.table([suggestInfo]);
            } else {
                console.log(suggestInfo);
            }
        }

        Jane.ErrorLog.send(suggestInfo);
    };

    /**
     * Нумерует элементы массива.
     * @static
     * @param {Array} array
     * @param {number} start
     * @param {string} propertyName свойство использумое в качестве нумератора
     * @return {Array}
     */
    Daria.Autocompleter.enumerate = function(array, start, propertyName) {
        return array.map(function(el, ix) {
            el[propertyName] = ix + start;
            return el;
        });
    };

    /**
     * Возвращает экземпляр автокомплита для поиска.
     * @return {Daria.Autocompleter}
     */
    Daria.Autocompleter.getSearch = function() {

        if (!instance) {
            var $body = $(Jane.tt('mail-common:search-autocomplete'));

            $body.find('.js-filter-types-placeholder')
                .replaceWith(Daria.SearchFilters.createFilterTypesBlock());

            instance = new Daria.Autocompleter({
                tpl: $body,
                activeClass: 'b-grid-item_selected',
                item: '.b-grid-item',
                blockSubmit: false,
                selectFirst: false,
                minChars: 0,
                saveSelectionOnBlur: false,
                position: { right: 10 },
                lastWord: true,
                onrender: function($body, data) {
                    Daria.SocialAvatarsSuggest($body, data);
                },
                sections: [
                    /* ../../js/components/autocompleter.search.suggest.js begin */
/* jshint asi: true */

(function() {
    return {
        url: 'handlers/handlers3.jsx?_handlers=history-suggest',
        dataType: 'json',
        param: 'text',
        withCkey: true,
        max: 5,
        // TODO: Зачем это поле тут?
        dontShow: Jane.$H('settings').isSet('dont_save_history'),

        tpl: yr.run('mail-common', null, 'search-autocomplete-suggest'),

        onshow: function() {
            Jane.c({'Поиск': 'Показы "прошлые запросы"'});
        },

        onselect: function(suggestItem, idx) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_used',
                suggest_group: 'history',
                user_input: this.prevVal,
                user_select_idx: idx + 1,
                idx: suggestItem.idx || 1,
                suggest_text: suggestItem.text
            });
        },

        onfetch: function(data, isEmptySuggest) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_all',
                suggest_group: 'history',
                user_input: this.prevVal,
                empty_suggest: isEmptySuggest
            });
        },

        parse: function(data, term, autocompleter) {
            data = jpath(data, '.handlers[0].data');

            data = Daria.Autocompleter.enumerate(data, 1, 'idx');

            var savePrevMax = this.max;
            if (term === '') {
                this.max = 10;
            }
            var res = autocompleter.parse(data, this, term);
            this.max = savePrevMax;
            return res;
        },

        formatItem: function(row) {
            return yr.run('mail-common', row, 'search-autocomplete-suggest-item');
        },

        formatResult: function(row) {
            return row.text;
        }
    };
})()

/* ../../js/components/autocompleter.search.suggest.js end */
,
                    /* ../../js/components/autocompleter.search.contacts.js begin */
/* jshint asi: true */

(function() {
    return {
        url: 'handlers/handlers3.jsx?_handlers=abook-suggest',
        dataType: 'json',
        param: 'q',
        withCkey: true,
        max: 10,
        tpl: yr.run('mail-common', null, 'search-autocomplete-contacts'),

        parse: function(data, term) {
            data = jpath(data, '.handlers[0].data.contacts');

            var parsed = [];
            var that = this;

            if (data && data.length) {
                // Нумеруем варианты саджеста, чтобы идентифицировать их порядковый номер
                // в рамках конкретной секции саджеста
                data = Daria.Autocompleter.enumerate(data, 1, 'idx');

                for (var i = 0, len = data.length; i < len; i++) {
                    if (i === this.max) {
                        break;
                    }

                    var row = data[i];
                    if (row) {
                        parsed[parsed.length] = {
                            data: row,
                            value: that.formatItem(row, term)
                        };
                    }
                }
            }

            return parsed;
        },

        formatItem: function(row) {
            return yr.run('mail-common', row, 'search-autocomplete-contacts-item');
        },

        formatResult: function(row) {
            return row.email;
        },

        onshow: function() {
            Jane.c('Поиск', 'Показы "переписка с адресами"');
        },

        onselect: function(suggestItem, idx) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_used',
                suggest_group: 'address',
                user_input: this.prevVal,
                user_select_idx: idx + 1,
                idx: suggestItem.idx || 1,
                suggest_text: suggestItem.email
            });
        },

        onfetch: function(data, isEmptySuggest) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_all',
                suggest_group: 'address',
                user_input: this.prevVal,
                empty_suggest: isEmptySuggest
            });
        }
    };

})()

/* ../../js/components/autocompleter.search.contacts.js end */
,
                    /* ../../js/components/autocompleter.search.static.js begin */
/* jshint asi: true */

(function() {

    // FIXME: Урл продублирован в 'blocks/search/search.yate'
    var COUNTER_LINK = '//clck.yandex.ru/redir/dtype=stred/pid=2/cid=71675/';

    var tld = ({
        'RUS': 'ru',
        'TUR': 'com.tr'
    }[Daria.Config.product]) || 'com';

    var SEARCH_LINK = COUNTER_LINK + '*http://yandex.' + tld + '/yandsearch?text=';

    return {
        isStatic: true,
        tpl: yr.run('mail-common', null, 'search-autocomplete-internet'),

        onselect: function(suggestItem) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_used',
                suggest_group: 'internet',
                user_input: this.prevVal,
                idx: 0,
                user_select_idx: 1,
                suggest_text: suggestItem.term
            });

            Jane.c('Поиск', 'Клик по найти в интернете');
            window.open(suggestItem.url, '_blank');

            return false;
        },

        onfetch: function(data, isEmptySuggest) {
            Daria.Autocompleter.logSuggestInfo({
                event: 'suggest_all',
                suggest_group: 'internet',
                user_input: this.prevVal,
                empty_suggest: isEmptySuggest
            });
        },

        formatItem: function(row) {
            if (row.term) {
                row.url = SEARCH_LINK + encodeURIComponent(row.term);

                return yr.run('mail-common', row, 'search-autocomplete-internet-item');
            }
            return '';
        }

    };

})()

/* ../../js/components/autocompleter.search.static.js end */

                ]
            });
        }

        return instance;
    };

})(Daria);

/* ../../js/components/autocompleter.search.js end */

    /* ../../js/components/autocompleter.phone.js begin */
Daria.Autocompleter.phoneAutocompleterOpts = {
    tpl: '<div class="b-mail-suggest b-mail-suggest_phones">' +
            '<div class="b-grid js-sections"></div>' +
        '</div>',
    activeClass: 'b-grid-item_selected',
    width: '20em',
    multiple: false,
    excludeSelected: true,
    filterItem: function(item) {
        var currentValue = this.currentValue || this.prevVal;
        var emails;

        if (item.data.title) {
            emails = [].concat(item.data.contacts);
            emails = $.grep(emails, function(contact) {
                return currentValue.indexOf(contact.email) == -1;
            });
            return emails.length;
        } else if (item.data.email) {
            return currentValue.indexOf(item.data.email) == -1;
        }
    },
    scroll: true,
    scrollElem: '.b-grid',
    item: '.b-grid-item',
    onrender: function($body, data) {
        Daria.SocialAvatarsSuggest($body, data);
    },
    sections: [
        {
            url: 'handlers/handlers3.jsx?_handlers=abook-suggest',
            dataType: 'json',
            param: 'q',
            withCkey: true,
            extraParams: { glimit: 5, climit: 35, phone: 'must' },
            tpl: '{results}',
            parse: function(data, term) {
                data = jpath(data, '.handlers[0].data')[0] || {};

                var parsed = [];
                var that = this;

                function _iterate(items, func, results, max) {
                    for (var i = 0, len = items.length; i < len; i++) {
                        if (i === max) {
                            break;
                        }

                        var row = items[i];
                        if (row) {
                            results[results.length] = {
                                data: row,
                                value: func.call(that, row, term)
                            };
                        }
                    }
                }

                if (data.contacts && data.contacts.length) {
                    _iterate(data.contacts, that.formatContact, parsed, that.extraParams.climit);
                }
                if (data.groups && data.groups.length) {
                    _iterate(data.groups, that.formatGroup, parsed, that.extraParams.glimit);
                }
                return parsed;
            },
            groupTpl: '<div class="b-grid-item">' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__content__group">' + i18n('%Search_Suggest_group') + '</span>&#160;{title}</span></span>' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__misc">{emails}</span>' +
                    '</span></span>' +
                    '</div>',
            formatContact: function(row, term) {
                var tplPhone = '';
                if (row && row.phones && row.phones.length) {
                    tplPhone = '<span class="b-grid-item__content"><span class="b-grid-item__content__i"><span class="b-grid-item__misc">' +
                    _.escape(row.phones[0]) + '</span></span></span>';
                }
                var result = '<div class="b-grid-item">' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' + _.escape(row.name || row.email) + '</span></span>' +
                    '<span class="b-grid-item__content"><span class="b-grid-item__content__i">' +
                    '<span class="b-grid-item__misc">' + (row.name && row.email ? _.escape(row.email) : ' ') + '</span>' +
                    '</span></span>' +
                    tplPhone + '<span class="b-grid-item__right"><span class="b-userpic b-userpic_small' + (row.cid ? ' cid-' + row.cid : '')  + '"></span></span>';

                result += '</div>';
                return Daria.Autocompleter.utils.highlight(result, term);
            },
            formatGroup: function(row, term) {
                var emails = [];
                for (var i = 0, len = row.contacts.length; i < len; i++) {
                    emails.push(row.contacts[i].email);
                }
                return Daria.Autocompleter.utils.highlight(Daria.supplant(this.groupTpl, { title: row.title, emails: emails.join(', ') }), term);
            },
            formatResult: function(row) {
                if (row && $.isArray(row.phones) && row.phones.length > 0) {
                    return row.phones[0];
                }

                return '';
            }
        }
    ]
};

Daria.Autocompleter.getPhoneAutocompleter = function() {
    return new Daria.Autocompleter(Daria.Autocompleter.phoneAutocompleterOpts);
};

/**
 * Возвращает экземпляр автокомплита для телефонов.
 * @returns Daria.Autocompleter
 */
Daria.Autocompleter.getPhone = function() {
    if (!Daria.Autocompleter.__phoneInstance) {
        Daria.Autocompleter.__phoneInstance = Daria.Autocompleter.getPhoneAutocompleter();
    }

    return Daria.Autocompleter.__phoneInstance;
};


/* ../../js/components/autocompleter.phone.js end */

    /* ../../js/components/autocompleter.userphone.js begin */
/**
 * @desc Suggest for user's phones
 */
(function(Autocompleter) {

    Autocompleter.userphoneAutocompleterOpts = {
        tpl: '<div class="b-mail-suggest b-mail-suggest_contacts"><div class="b-grid js-sections"></div></div>',
        activeClass: 'b-grid-item_selected',
        item: '.b-grid-item',
        sections: [{
            tpl: '{results}',
            isStatic: true,
            formatResult: function(resutl) {
                return resutl;
            },
            parse: function(data, term) {
                return Jane.Promo.findPromo('alias-promo').promoBar.autocompleteData.filter(function(key) {
                    return key.indexOf(term) >= 0;
                }).map(function(key) {
                    return {
                        data: key,
                        value: Daria.supplant('<div class="b-grid-item">{suggetsItem}</div>', {
                            suggetsItem: key
                        })
                    };
                });
            }
        }]
    };

    Daria.Autocompleter.getUserPhoneAutocompleter = function() {
        return new Daria.Autocompleter(Daria.Autocompleter.userphoneAutocompleterOpts);
    };

}(Daria.Autocompleter));

/* ../../js/components/autocompleter.userphone.js end */

    /* ../../js/components/suggest.js begin */
(function() {
    /**
     * Создает саджест на базе саджеста из наноостровов
     * Часть опций саджеста - это опции из саджеста наноостровов
     * @link 'https://github.com/yandex-ui/nanoislands/blob/master/blocks/suggest/suggest.md'
     * @param {Node} inputField поле ввода, с которым связывается саджест. Может быть:
     *  - произвольным input или textarea
     *  - островным nb-suggest элементом.
     * @param {Object} [options] настройки саджеста
     * @param {string} [options.suggestClass='nb-island nb-island_type_fly nb-suggest__container nb-suggest_size_s mail-compose-suggest-wrapper']
     * класс, навешивающийся на выпадающую часть саджеста
     * @param {number} [options.cacheSize=50] объем хранимого кэша данных, полученных в результате запросов
     * @param {Object} [options.handlers={}] объект, несущие в себе названия используемых хэндлеров и дополнительные
     * данные к нему
     * @example
     *  options.handlers => {
     *      <handler name>: {Object} <params object>
     *      ...
     *  }
     * @param {Object} [options.extraParams] дополнительные параметры для хэндлера
     * @param {boolean} [options.multiple=false] возможность вывода нескольких выбранных вариантов из саджеста
     * @param {string} [options.multipleSeparator=','] разделитель нескольких выбранных вариантов
     * @param {Array} [options.previousValues=[]] предыдущие значения поля. Используется в сочетании с multiple флагом.
     * @param {Function} [options.hide] вызывается при срабатывании метода hide
     * Позволяет преписывать к значению саджеста дополнительные значения. Например, параметр можно использовать для исключения уже выбранных
     * на предыдущем шаге значений и они не отображаются в поле ввода.
     * @example
     *      new Daria.Suggest(<inputNode>, {
     *          minLength: 1,
     *          handlers: {
     *              'handler-name1': {limit: 2},
     *              'handler-name2': {limit: 3}
     *          },
     *          extraParams: {
     *              uid: '123'
     *          }
     *      });
     * @constructor
     */
    var Suggest = function(inputField, options) {
        this.options = $.extend({}, Suggest.defaults, options);

        /**
         * Кэш запросов
         * @type {Object}
         */
        this.cache = {};

        /**
         * Текущий контент саджеста
         * @type {Array}
         */
        this.currentContent = [];

        /**
         * Текущий терм саджеста
         * @type {string}
         */
        this.currentTerm = '';

        /**
         * Обработчики событий Jane.events
         */
        this._janeEvents = {};

        /**
         * Флаг запрета закрытия саджеста
         */
        this.dontClose = false;

        /**
         * Флаг покидания поля ввода
         */
        this.isInputFieldBlur = false;

        this.$document = $(document);
        this.changeInputField(inputField, true);
    };

    /**
     * Настройки саджеста по умолчанию
     */
    Suggest.defaults = {
        suggestClass: 'nb-island nb-island_type_fly nb-suggest__container nb-suggest_size_s mail-compose-suggest-wrapper',
        handlers: {},
        cacheSize: 50,
        multiple: false,
        multipleSeparator: ',',
        valuePrefix: '',
        // Опции по умолчанию для nb-suggest
        minLength: 0,
        delay: 0,
        autoFocus: true
    };

    /**
     * Выбирает последнии фразу, находящуюся за разделитем
     * @param {string} phrase вся фраза
     * @param {RegExp} splitRegExp разделитель, описанный в RegExp
     * @returns {string} фраза, находящаяся за разделителем
     */
    Suggest.extractLast = function(phrase, splitRegExp) {
        return phrase.split(splitRegExp).pop();
    };

    /**
     * Объединяет выполнение private метода объекта вместе с методом опции
     * @param {Object} obj объект, методы которого будут связываться с опциями
     * @param {Object} options опции, вязываемые с методами объекта
     * @param {Array} methods связываемые методы
     * @returns {Object} обновленный объект опций
     */
    // TODO (rebulus) - стоит ли делать поддержку return и что будет в этом случае приоритетнее?
    Suggest.mixPrivateMethodWithOption = function(obj, options, methods) {
        $.map(methods, function(methodName) {
            var objMethodName = '_' + methodName;
            var objMethod = obj[objMethodName];
            var optionMethod = options[methodName];
            // Для объединения должен существовать метод объекта
            if ($.isFunction(obj[objMethodName])) {
                // Должн существовать метод опции
                if ($.isFunction(optionMethod)) {
                    // Проверка метода опции на то, что он ещё не объединялся с методом объекта
                    if (!optionMethod.isMixed) {
                        options[methodName] = function() {
                            optionMethod.apply(this, arguments);
                            objMethod.apply(obj, arguments);
                        };
                    }
                } else {
                    // Если не существует метод опции, то результирующим является только метод объекта
                    options[methodName] = function() {
                        objMethod.apply(obj, arguments);
                    };
                }
                // Флаг, говорящий что данная опция уже была замиксована.
                // Позволяет исключить повторное смешивание
                options[methodName].isMixed = true;
            }
        });
        return options;
    };

    /**
     * Смена поля ввода, к которому будет привязан саджест
     * @param {Node} inputField новое поле ввода
     * @param {boolean} dontDestroy флаг запрета вызова #destroy метода
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.changeInputField = function(inputField, dontDestroy) {
        if (!dontDestroy) {
            this.destroy();
        }

        this.inputField = inputField;
        this.$inputField = $(inputField);

        if (inputField && typeof inputField === 'object' && inputField.nodeType === 1) {
            this.init();
        }

        return this;
    };

    /**
     * Инициализация саджеста
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.init = function() {
        /**
         * Подготовка поля ввода под nb-suggest
         */
        this.$inputField.addClass('_init');
        this.$inputField.attr({
                'data-nb': 'suggest',
                'data-class-suggest': this.options.suggestClass
            });

        this.nbSuggest = nb.block(this.inputField);
        this.setOptions(this.options).bindEvents();
        return this;
    };

    /**
     * Позволяет обновить опции
     * @param {Object} [options] объект опций
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.setOptions = function(options) {
        // Обновление опций саджеста
        this.options = $.extend({}, this.options, options);

        // Объединение методов саджеста с переданными опциями
        Suggest.mixPrivateMethodWithOption(this, this.options, [
            'source',
            'search',
            'select',
            'focus',
            'response',
            'open',
            'close'
        ]);

        if (this.nbSuggest) {
            this.nbSuggest.setOption(this.options);
        }

        // Перевод разделителя в RegExp
        if (this.options.multiple) {
            this.options.multipleSeparatorRegExp = new RegExp(this.options.multipleSeparator + '\\s*');
        }

        return this;
    };

    /**
     * Показывается саджест по запрашиваемому значению
     * @param {string} [value=<текущее значение поля ввода>] запрашиваемое значение
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.show = function(value) {
        if (this.nbSuggest) {
            if (!value) {
                value = this.nbSuggest.getValue();
            }
            this.nbSuggest.search(value);
        }

        return this;
    };

    /**
     * Скрывает саджест
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.hide = function() {
        this.dontClose = false;

        this.abort();

        if (this.nbSuggest) {
            this.nbSuggest.close();
        }

        if ($.isFunction(this.options.hide)) {
            this.options.hide.apply(this.inputField, arguments);
        }

        return this;
    };

    /**
     * Подписка на событие приложения
     * @param {string} eventName название события приложения
     * @param {string} methodName название метода саджеста
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.bindJaneEvent = function(eventName, methodName) {
        var eventHandler = this[methodName].bind(this);
        this._janeEvents[eventName] = eventHandler;
        Jane.events.bind(eventName, eventHandler);

        return this;
    };

    /**
     * Отписка от события приложения
     * @param {string} eventName название события приложения
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.unbindJaneEvent = function(eventName) {
        Jane.events.unbind(eventName, this._janeEvents[eventName]);
        delete this._janeEvents[eventName];

        return this;
    };

    /**
     * Подписка на события для саджеста
     * @returns {Suggest} текущий саджест
     * @virtual
     */
    Suggest.prototype.bindEvents = function() {
        this.bindJaneEvent('tinymce.click', 'hide');

        // Исправление закрытия саджеста при клике на скроллинг в IE
        if (Modernizr.msie) {
            var that = this;
            var uiSuggest = this.$inputField.data('uiSuggest');
            var uiSuggestClose = uiSuggest.close;

            uiSuggest.close = function() {
                if (!that.dontClose) {
                    uiSuggestClose.apply(this, arguments);
                }
            };

            this.$document.on('mousedown.daria-suggest', this._ieDocumentMousedown.bind(this));
            this.$inputField.on('blur.daria-suggest', this._ieInputBlur.bind(this));
        }

        return this;
    };

    /**
     * Подказывает, является ли target события элементом dropdown саджеста
     * @param {Event} event объект события
     * @returns {boolean}
     * @private
     */
    Suggest.prototype._isSuggestDropDown = function(event) {
        var suggestDropDown = this.nbSuggest.$suggest;
        return suggestDropDown[0] === event.target || $.contains(suggestDropDown[0], event.target);
    };

    /**
     * Обработчик клика мышью по документу
     * @param {Event} event объект события
     * @private
     */
    Suggest.prototype._ieDocumentMousedown = function(event) {
        var isSuggestDropDown = this._isSuggestDropDown(event);

        this.dontClose = isSuggestDropDown;

        // Если произошло покидание поля ввода, то необходмо при любом клике вне саджеста закрыть его
        if (this.isInputFieldBlur && !isSuggestDropDown) {
            this.hide();
        }
    };

    /**
     * Обработчик покидания поля ввода
     * @private
     */
    Suggest.prototype._ieInputBlur = function() {
        this.isInputFieldBlur = true;
    };

    /**
     * Возвращает значение саджеста вместе с префиксом
     * @returns значение саджеста с префикстом
     */
    Suggest.prototype.getValueWithPrevious = function() {
        var value = '';

        if (this.nbSuggest) {
            value = this.nbSuggest.getValue();

            if (this.options.multiple) {
                // Копируем предыдущие значения, чтобы не перетереть исходные параметры
                var previousValues = [].concat(this.options.previousValues);
                previousValues.push(value);
                value = previousValues.join(this.options.multipleSeparator + ' ');
            }
        }

        return value;
    };

    /**
     * Конвертирование хэнделеров в массив с подмешиванием данных
     * @param {Object} [params] данные запроса
     * @returns {Array} массив объектов с данными о хэндлерах
     * @private
     */
    Suggest.prototype._convertHandlers = function(params) {
        var extraParams = this.options.extraParams;
        return $.map(this.options.handlers, function(handlerParams, handlerName) {
                    return {
                        name: handlerName,
                        params: $.extend(
                                    {},
                                    // Общие дополнительные параметры
                                    extraParams,
                                    // Данные о хэндлере
                                    handlerParams,
                                    // Параметры запроса
                                    params
                                )
                    };
                });
    };

    /**
     * Формирование данных по ответам хэндлеров
     * @param {Array} handlers массив данных о хэндлерах
     * @param {Array} data полученные ответы от хэндлеров
     * @returns {Array} сформированный результат
     * @private
     */
    Suggest.prototype._parseHandlersData = function(handlers, data) {
        var that = this;
        var resultData = [];
        var handlersLength = handlers.length;

        $.each(data, function(index, argument) {
            // Количество проходов не более количества хэндлеров
            if (index >= handlersLength) {
                return false;
            }

            // Чтение ответа, зависит от количества изначальных запросов
            var handlerResponse;
            if (handlersLength > 1) {
                handlerResponse = argument[0].handlers;
            } else {
                handlerResponse = argument.handlers;
            }

            // При отсутствии ответов подготавливается нулевой ответ
            if (!handlerResponse) {
                handlerResponse = [{}];
            }
            if (!handlerResponse[0].data) {
                handlerResponse[0].data = {};
            }

            var parsedData = that.parse(handlers[index].name, handlerResponse[0].data);
            resultData = resultData.concat(parsedData);
        });

        return resultData;
    };

    /**
     * Получает term из полной строки
     * @param {string} value анализируемая строка
     * @returns {string} извлеченный терм
     * @private
     */
    Suggest.prototype._getTerm = function(value) {
        if (this.options.multiple) {
            value = Suggest.extractLast(value, this.options.multipleSeparatorRegExp);
        }
        return value;
    };

    /**
     * Формирует данные для саджеста
     * @param {Object} request объект запроса за данынми к саджесту
     * @param {Function} response метод обработки полученных данных саджестом
     * @private
     */
    Suggest.prototype._source = function(request, response) {
        var that = this;
        var term = this._getTerm(request.term);

        // Кэширование терма запроса за данными саджеста
        that.currentTerm = term;

        // Не получать данные, если терм не удовлетворяет по длине
        if (term.length < this.options.minLength) {
            return;
        }

        var requestData = {
            q: term
        };
        var handlers = this._convertHandlers(requestData);

        // Остановка предыдущих запросов
        this.abort();

        // Должен выводить пустые данные, когда нет хэндлеров
        if (!handlers.length) {
            response([]);
            return;
        }

        // Проверка данных в кэше
        var resultData = this.getCache(term);
        if (resultData) {
            // Отрисовка полученного набора элементов
            response(resultData);
            return;
        }

        // Список запросов
        this.requests = [];

        $.map(handlers, function(handler) {
            var url = $.url('handlers/handlers3.jsx');
            // Добавляем системные параметры хэндлера
            url.addParams({
                '_handlers': handler.name,
                '_ckey': Daria.Page.ckey
            });
            var request = $.ajax({
                type: 'get',
                dataType: 'json',
                jsonp: 'jsonp',
                scriptCharset: 'utf-8',
                cache: false,
                url: url.toString(),
                data: handler.params
            });
            that.requests.push(request);
        });

        // Ожидание результатов запроса
        $.when.apply($, this.requests).then(function() {
            var resultData = that._parseHandlersData(handlers, arguments);

            // Запись данных в кэш
            that.setCache(term, resultData);

            // Отрисовка полученного набора элементов
            response(resultData);
        });
    };

    /**
     * Обработка выбора значения из саджеста
     * @param {jQuery.Event} event обхект события
     * @param {Object} ui объект jUI для саджеста
     * @private
     */
    Suggest.prototype._select = function(event, ui) {
        this.dontClose = false;

        if (this.options.multiple && !event.isDefaultPrevented()) {
            // Берется текущее значение поля, т.к. к нему будет добавляться результат
            // (this.options.previousValues не должны быть выведены в поле ввода)
            var value = this.nbSuggest.getValue();
            var terms = value.split(this.options.multipleSeparatorRegExp);
            // Исключение текущего значения (последнего незавершенного терма)
            terms.pop();
            // Добавление выбранного из автокомплита элемента
            terms.push(ui.item.value);
            // Добавление плейсхолдера для формирования корректного разделителя при join
            terms.push("");
            this.nbSuggest.setValue(terms.join(this.options.multipleSeparator + ' '));
            event.preventDefault();
        }
    };

    /**
     * Обработка фокуса на элементе в саджесте
     * @param {jQuery.Event} event объект события
     * @private
     */
    Suggest.prototype._focus = function(event) {
        // Запрет на вывод в поле ввода значения в фокусе до подтверждения выбора
        // Например, чтобы не выводилось значение при перемещении в автокомплите с помощью стрелок
        event.preventDefault();
    };

    /**
     * Предобработка распаршенного ответа от хэндлеров
     * @private
     */
    Suggest.prototype._response = function(event, ui) {
        if (ui.content.length) {
            this.currentContent = ui.content;
        } else {
            this.currentContent = [];
        }

        // Производим исключение выбранных значений из данных саджеста
        var value = this.getValueWithPrevious();
        if (this.options.multiple && value.split(this.options.multipleSeparator).length > 1){
            var result = $.grep(ui.content, function(contentItem) {
                return value.indexOf(contentItem.value) === -1;
            });
            // Очистка контента
            ui.content.length = 0;
            // Дописывание результата
            ui.content.push.apply(ui.content, result);
        }
    };

    /**
     * Обработка данных при вызове саджеста
     * @private
     */
    Suggest.prototype._search = Daria.nop;

    /**
     * Обработка данных при открытии саджеста
     * @private
     */
    Suggest.prototype._open = Daria.nop;

    /**
     * Обработка закрытия саджеста
     * @private
     */
    Suggest.prototype._close = function() {
        this.dontClose = false;
        this.isInputFieldBlur = false;
        this.currentContent = [];
        this.currentTerm = '';
    };

    /**
     * Остановка текущих запросов
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.abort = function() {
        if ($.isArray(this.requests)) {
            $.map(this.requests, function(request) {
                if ($.isFunction(request.abort)) {
                    request.abort();
                }
            });
        }
        delete this.requests;
        return this;
    };

    /**
     * Уничтожение саджеста
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.destroy = function() {
        var that = this;

        this.abort();
        this._close();

        if (this.nbSuggest) {
            this.nbSuggest.destroy();
            this.nbSuggest = null;
        }

        if (this.$inputField) {
            this.$inputField.off('.daria-suggest');
        }

        this.$document.off('.daria-suggest');

        $.each(this._janeEvents, function(eventName) {
            that.unbindJaneEvent(eventName);
        });

        return this;
    };

    /**
     * Подготовка данных перед визуализацией
     * @param {string} handlerName название хэндлера, который является носителем данных
     * @param {Object} handlerData данные хэндлера
     * @returns {Object} обработанные данные хэндлера
     */
    Suggest.prototype.parse = function(handlerName, handlerData) {
        return handlerData;
    };

    /**
     * Добавление запроса (текстовой фразы) в кэш
     * @param {string} key ключ (запрос)
     * @param {Object} value данные о запросе
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.setCache = function(key, value) {
        if (Object.keys(this.cache).length >= this.options.cacheSize) {
            this.clearCache();
        }
        this.cache[key] = value;

        return this;
    };

    /**
     * Получение данных по запросу из кэша
     * @param {string} key ключ (запрос)
     * @returns {Array|Object} закэшированные данные
     */
    Suggest.prototype.getCache = function(key) {
        return this.cache[key];
    };

    /**
     * Очистка кэша
     * @returns {Suggest} текущий саджест
     */
    Suggest.prototype.clearCache = function() {
        this.cache = {};

        return this;
    };

    Daria.Suggest = Suggest;
})();

/* ../../js/components/suggest.js end */

    /* ../../js/components/contacts.suggest.js begin */
(function() {
    /**
     * Создает саджест контактов
     * @param {Node} inputField поле ввода, с которым связан саджест
     * @param {Object} options настройки саджеста
     * @param {boolean} [options.timeoutOfCopyToSms = false] определяет порядок вызова обработки кнопки "Копия по SMS"
     * @param {boolean} [options.noSmsButton = true] скрывает кнопку "Копия по SMS"
     * @constructor
     */
    var ContactsSuggest = function(inputField, options) {
        // Счетчик кликов в поле ввода
        this.countOfClick = 0;

        options = $.extend({
            timeoutOfCopyToSms: false,
            // не выводить "Копия по SMS" для корпоративной почты и ПДД
            noSmsButton: Daria.IS_CORP || Boolean(Jane.Config.PDD.domain),
            renderItem: this._renderItem.bind(this)
        }, options);

        Daria.Suggest.call(this, inputField, options);
    };

    Daria.extend(ContactsSuggest, Daria.Suggest);

    var SuperClass = ContactsSuggest.superClass;

    /**
     * Инициализация саджеста
     * @returns {Suggest} текущий саджест
     */
    ContactsSuggest.prototype.init = function() {
        // Скрытие кнопки "Копия по SMS" для Quick Reply
        var $parentNode = this.$inputField.closest('.js-compose-mail-input');
        if ($parentNode.hasClass('js-compose-mail-message-input')) {
            this.options.noSmsButton = true;
        }
        return SuperClass.init.apply(this, arguments);
    };

    /**
     * Подписка на события для саджеста
     * @returns {Suggest} текущий саджест
     */
    ContactsSuggest.prototype.bindEvents = function() {
        this.$inputField
            .on('keydown.daria-suggest keypress.daria-suggest', this._keydownEvent.bind(this))
            .on('click.daria-suggest', this._clickEvent.bind(this));

        return SuperClass.bindEvents.apply(this, arguments);
    };

    /**
     * Обработка событий нажатия клавиш
     * Реализует выбор находящегося в фокусе элемента саджеста при нажатии клавиш ',', ';'
     * и ' '. Пробел имеет ограничение: в саджесте должен быть только один элемент.
     * @param {Event} event объект события
     * @private
     */
    ContactsSuggest.prototype._keydownEvent = function(event) {
        var keyCode = Jane.Common.keyCode;
        // Исключаем рекурсию
        if (event.which === keyCode.ENTER) {
            return;
        }

        // Формирование выбора значения из саджеста по определенным символам (',',';',' ')
        var canSelect = false;
        if ($.trim(this.options.multipleSeparator) === ',') {
            switch (event.which) {
                case keyCode.COMMA_CHAR:
                case keyCode.SEMI_CHAR:
                    canSelect = true;
                    break;
                case keyCode.SPACE_CHAR:
                    if (this.currentContent.length === 1) {
                        canSelect = true;
                    }
                    break;
            }
        }

        if (canSelect && this.currentFocused) {
            event.preventDefault();
            this.$inputField.trigger($.Event('keydown', {
                which: keyCode.ENTER,
                keyCode: keyCode.ENTER
            }));
            this.currentFocused = null;
        }
    };

    /**
     * Обработка клика в поле ввода
     * Реализует открытие саджеста при первом клике в поле ввода. Тип саджеста зависит
     * от начального терма в поле ввода.
     * @private
     */
    ContactsSuggest.prototype._clickEvent = function() {
        // При первом клике в поле ввода должен появится саджест
        if (!this.countOfClick) {
            this.show();
        }
        this.countOfClick++;
    };

    /**
     * Рендринг элементов саджеста
     * Формирует HTML для элеметов саджеста с подсветкой выбранного терма
     * @param {Object} data данные элемента саджеста
     * @returns {string} HTML элемента саджеста
     */
    ContactsSuggest.prototype._renderItem = function(data) {
        var that = this;
        var item = data.item;
        var options = $.extend({
            hideSmsButton: false
        }, this.options);

        // Не подсвечивать ничего в названии секции
        if (item.type !== 'label') {
            var highlight = true;
            $.each(['name', 'email', 'phone'], function(index, field) {
                var highlightedKey = 'highlighted-' + field;

                // Попытка подсветить терм
                if (highlight) {
                    item[highlightedKey] = that._highlight(item[field], that.currentTerm);
                    if (item[highlightedKey].indexOf('js-suggest-highlight') !== -1) {
                        highlight = false;
                    }
                } else {
                    item[highlightedKey] = item[field];
                }
            });
        }

        if (item.email) {
            var userEmails = Jane.$H('account-information').getAllUserEmails();
            if ($.inArray(item.email, userEmails) > -1) {
                options.hideSmsButton = true;
            }
        }

        item.options = options;

        return yr.run('mail-common', data, 'compose-email-suggest-item');
    };

    /**
     * Проверка на то, что открыт шаблон письма
     * @private
     */
    ContactsSuggest.prototype._isTemplate = function() {
        // Проверка на то, что открыт шаблон письма
        var params = Daria.Page.params;
        var hFolders = Jane.$H('folders');
        var hMessage = Jane.$H('message');
        var isTemplate = false;
        if (jpath(Daria, '.composeParams.save_symbol')[0] === 'template' ||
            params.save_symbol === 'template' ||
            (params.ids && hMessage.inFolder(params.ids, hFolders.ids.template))) {
            isTemplate = true;
        }
        return isTemplate;
    };

    /**
     * Проверка на то, событие саджеста не вызвано событием браузера
     * @param {Event} event событие саджеста
     * @returns {boolean}
     * @private
     */
    ContactsSuggest.prototype._isInnerEvent = function(event) {
        return !event.originalEvent;
    };

    /**
     * Проверка на то, что событие саджеста вызвано событием нажатие клавиши в браузере
     * @param {Event} event событие саджеста
     * @returns {boolean}
     * @private
     */
    ContactsSuggest.prototype._isKeydown = function(event) {
        return Boolean(event.originalEvent && event.originalEvent.type === 'keydown');
    };

    /**
     * Проверка на то, что событие саджеста вызвано нажатием клавиш DOWN и UP
     * @param {Event} event событие саджеста
     * @returns {boolean}
     * @private
     */
    ContactsSuggest.prototype._isDownOrUpKey = function(event) {
        var keyCode = Jane.Common.keyCode;
        return this._isKeydown(event) && (event.originalEvent.which === keyCode.DOWN || event.originalEvent.which === keyCode.UP);
    };

    /**
     * Обработка запроса на поиск значения в саджесте
     * @param {Event} event объект события
     * @private
     */
    ContactsSuggest.prototype._search = function(event) {
        this.searchEvent = event;
        return SuperClass._search.apply(this, arguments);
    };

    /*
     * Формирует данные для саджеста
     * @param {Object} request объект запроса за данынми к саджесту
     * @private
     */
    ContactsSuggest.prototype._source = function(request) {
        var event = this.searchEvent;
        var term = this._getTerm(request.term);

        // Условия, когда не нужно отображать саджест популярных контактов (abook-contacts)
        if (!term && !this._isTemplate()) {
            /*
             * Вызывать формирование саджеста при пустом терме, если это было вызвано прямым запуском поиска или кнопками вниз/вверх
             * Причина - саджест популярных контактов не должен отображаться при отсутствии данных в поле
             */
            if (this._isInnerEvent(event) || this._isDownOrUpKey(event)) {
                this.options.handlers = {
                    'abook-contacts': {
                        popular: 10
                    }
                };
            } else {
                // Запрет вызова поиска для саджеста
                this.options.handlers = {};
            }
        } else {
            this.options.handlers = {
                'abook-suggest': {
                    climit: 35,
                    glimit: 5
                }
            };
        }

        return SuperClass._source.apply(this, arguments);
    };

    /**
     * Обработка выбора значения из саджеста
     * @private
     */
    ContactsSuggest.prototype._select = function(event, ui) {
        var suggestItem = ui.item;

        if (this.options.handlers['abook-contacts']) {
            Daria.composeParams = Daria.composeParams || {};
            if (!Daria.composeParams['popular-suggest-general']) {
                Daria.composeParams['popular-suggest-general'] = [];
            }
            Daria.composeParams['popular-suggest-general'].push(suggestItem.email);

            Jane.c(['popular_suggest', 'Клики в саджест популярных контактов']);
        }

        // DARIA-16717 - Сообщать о выборе пользователя в Абук
        var params = {
            q: this.currentTerm,
            section: suggestItem.type === 'group' ? 'group' : 'email',
            id: suggestItem.id || suggestItem.mcid,
            title: suggestItem.title || suggestItem.email
        };
        Jane.Handler.getAll(['abook-suggest-report'], params, null, { force: true });

        return SuperClass._select.apply(this, arguments);
    };

    /**
     * Обработка фокуса на элементе в саджесте
     * @param {jQuery.Event} event объект события
     * @param {Object} ui объект jUI для саджеста
     * @private
     */
    ContactsSuggest.prototype._focus = function(event, ui) {
        this.currentFocused = ui.item;
        return SuperClass._focus.apply(this, arguments);
    };

    /**
     * Предобработка распаршенного ответа от хэндлеров
     * @private
     */
    ContactsSuggest.prototype._response = function(event, ui) {
        // Вызов родительского класса с предобработкой результата саджеста
        SuperClass._response.apply(this, arguments);

        // Если в контенте лишь только label элемент, то очищаем контент,
        // чтобы не вывелась одна лейба
        if (ui.content.length === 1 && ui.content[0].type === 'label'){
            ui.content.length = 0;
        }
    };

    /**
     * Обработка данных при открытии саджеста
     * @private
     */
    ContactsSuggest.prototype._open = function() {
        if ($.isArray(this.currentContent)){
            // Формирование аватарок
            var data = $.map(this.currentContent, function(contentItem) {
                // Не учитывать контакты с переданной ссылкой на фото
                if (contentItem.photo) {
                    return;
                }
                return {
                    data: contentItem,
                    value: contentItem.value
                };
            });

            if (data.length) {
                Daria.SocialAvatarsContactsSuggest(this.nbSuggest.$suggest, [data]);
            }
        }

        if (this.options.handlers['abook-contacts']) {
            Jane.c(['popular_suggest', 'Показы саджеста популярных контактов']);
        }

        SuperClass._open.apply(this, arguments);

        this._updateGroupView();
    };

    ContactsSuggest.prototype._close = function() {
        this.countOfClick = 0;

        SuperClass._close.apply(this, arguments);
    };

    /**
     * Коректирует отображение группы, выводя при необходимости фразу +ещё
     * @private
     */
    ContactsSuggest.prototype._updateGroupView = function() {
        var $groupsEmails = $(this.nbSuggest.$suggest).find('.js-suggest-group-email');
        var groupsEmailsWidth = $groupsEmails.eq(0).width();
        var emailDataMoreWidth; // ширина надписи "+ ещё"

        $groupsEmails.each(function() {
            var $groupEmail = $(this);
            // Блок со списком email, содержащихся в группе
            var emailData = $groupEmail.find('.js-suggest-group-email-data');
            var emailDataWidth = emailData.innerWidth();
            var emailDataRightOffset = 0;
            // Блок, хранящий "+ ещё"
            var emailDataMore = $groupEmail.find('.js-suggest-group-email-data-and-more');

            if (emailDataWidth > groupsEmailsWidth) {
                emailDataMore.addClass('mail-compose-suggest-group-mail-and-more-show');
                // Оптимизируем, посчитываем ширину надписи "+ ещё" один раз
                if (typeof emailDataMoreWidth === 'undefined') {
                    emailDataMoreWidth = emailDataMore.innerWidth();
                }
                $groupEmail.css({
                    // запрет на расширение, если саджест будет увеличиваться в размерах
                    // позволяет не отслеживать resize окна
                    'max-width': groupsEmailsWidth
                });
                emailDataRightOffset = emailDataMoreWidth;
            }

            emailData.css({
                right: emailDataRightOffset,
                'text-overflow': 'ellipsis'
            });
        });
    };

    /**
     * Подсветка искомого терма в списке элементов саджеста
     * @param {string} value анализируемая строка
     * @param {string} term подсвечиваемыый терм
     * @returns {string} строка с подствеченным термом
     * @private
     */
    ContactsSuggest.prototype._highlight = function(value, term) {
        if (!value) {
            return '';
        }
        // Генерирование псевда тег strong, чтобы его не заэкранировало
        var strongTag = '/%strong-' + String($.now()) + String(Math.round((Math.random() * 1000)));
        var strongTagRegExp = Daria.regexpEscape(strongTag);
        strongTagRegExp = new RegExp(strongTagRegExp + '(.*)' + strongTagRegExp, 'i');

        // Генерирование RegExp для терма
        term = Daria.regexpEscape(term);
        var regexp = new RegExp('(' + term + ')', 'i');

        value = value.replace(regexp, strongTag + '$1' + strongTag);
        value = _.escape(value);
        return value.replace(strongTagRegExp, '<strong class="js-suggest-highlight">$1</strong>');
    };

    /**
     * Подготовка данных перед визуализацией
     * @param {string} handlerName название хэндлера, который является носителем данных
     * @param {Object} handlerData данные хэндлера
     * @returns {Array} обработанные данные хэндлера
     */
    ContactsSuggest.prototype.parse = function(handlerName, handlerData) {
        switch (handlerName) {
            case 'abook-suggest':
                return this.parseAbookSuggest(handlerData);
            case 'abook-contacts':
                return this.parseAbookContacts(handlerData);
        }
        return [];
    };

    /**
     * Подготовка данных от хэндлера abook-suggest
     * @param {Object} abookSuggest данные для обработки
     * @returns {Array} обработанные данные хэндлера
     */
    ContactsSuggest.prototype.parseAbookSuggest = function(abookSuggest) {
        var that = this;

        if (typeof abookSuggest !== 'object' || !abookSuggest) {
            return [];
        }

        if (!$.isArray(abookSuggest.contacts)) {
            abookSuggest.contacts = [];
        }
        if (!$.isArray(abookSuggest.groups)) {
            abookSuggest.groups = [];
        }

        // Флаг, говорящий о том, что все контакты - это подсказки
        // о популярных доменах
        var isPopdomContacts = true;

        // Формирование данных о контактах
        var contacts = $.map(abookSuggest.contacts, function(contact) {
            var contactType = 'contact';

            if (!contact.popdom) {
                isPopdomContacts = false;
            } else {
                contactType = 'popdom';
            }

            // Клонирование данных о контактах
            contact = $.extend({}, contact, {
                type: contactType,
                phone: contact.phones && contact.phones[0] ? contact.phones[0] : ''
            });

            contact.value = that.parseValue(contact);
            return contact;
        });

        // Формирование данных о группах
        var groups = $.map(abookSuggest.groups, function(group) {
            isPopdomContacts = false;

            // Клонирование данных о группе
            group = $.extend({}, group, {
                type: 'group',
                name: group.title ? group.title : ''
            });

            group.email = $.map(group.contacts, function(contact) {
                return contact.email;
            }).join(', ');

            group.value = that.parseValue(group);
            return group;
        });

        var listOfContacts = [].concat(contacts, groups);

        // Дополнение списка заголовком в случае с подсказками о популярных доменах
        if (isPopdomContacts && listOfContacts.length) {
            listOfContacts = [].concat({
                type: 'label',
                name: i18n('%Suggest_notify') + ':'
            }, listOfContacts);
        }

        return listOfContacts;
    };

    /**
     * Подготовка данных от хэндлера abook-suggest
     * @param {Object} abookContacts данные для обработки
     * @returns {Array} обработанные данные хэндлера
     */
    ContactsSuggest.prototype.parseAbookContacts = function(abookContacts) {
        var that = this;

        if (typeof abookContacts !== 'object' || !abookContacts) {
            return [];
        }

        if (!$.isArray(abookContacts.contact)) {
            abookContacts.contact = [];
        }

        return $.map(abookContacts.contact, function(contact) {
            // Клонирование данных
            contact = $.extend({}, contact, {
                type: 'contact',
                name: contact.name.full ? contact.name.full : '',
                phone: contact.phone && contact.phone[0] ? contact.phone[0] : ''
            });
            contact.value = that.parseValue(contact);
            return contact;
        });
    };

    /**
     * Получение value для поля input у саджеста
     * @param {Object} contact объект данных о контакте
     * @returns {string} результирующая строка значения поля ввода
     */
    ContactsSuggest.prototype.parseValue = function(contact) {
        var that = this;
        var result;

        // Это группа
        if (contact.type === 'group') {
            var groupContacts = $.map(contact.contacts, function(contact) {
                return that.formatContact(contact);
            });
            result = groupContacts.join(', ');
        } else {
            result = this.formatContact(contact);
        }

        return result;
    };

    /**
     * Форматирование значения результата выбора контакта
     * @param {Object} contact объект данных о контакте
     * @returns {string} результирующая строка контакта
     */
    ContactsSuggest.prototype.formatContact = function(contact) {
        /*
         * Нужно формировать адрес получателя по единой схеме во всем приложении.
         * Одна из причин:
         * @link https://jira.yandex-team.ru/browse/DARIA-16386
         */
        return Jane.FormValidation.obj2contact(contact);
    };

    Daria.Suggest.Contacts = ContactsSuggest;
})();

/* ../../js/components/contacts.suggest.js end */

    /* ../../js/components/compose.done.js begin */
Daria.PromoComposeDone = function(promos, params, that) {
    promos.groups = {
        json: {
            type: 'groups',
            users: []
        },
        /**
         * Метод выбора второго варианта промки
         **/
        variantWithContacts: function() {
            return Daria.uidEnds([5, 6, 7, 8, 9]);
        },
        getJSONParams: function() {
            return this.json;
        },
        /**
         * Берем контакты из композа
         **/
        getComposeEmails: function() {
            var composeParams = Daria.composeParams && 'tostr' in Daria.composeParams ? Daria.composeParams : params;
            var emailsOld = composeParams.tostr.split(', ');
            var emails = [];
            $.each(emailsOld, function(i, email) {
                if (email) {
                    emails.push(email.replace(/^[\s\S]*</i, '').replace(/>[\s\S]*$/i, ''));
                }
            });
            return emails;
        },
        /**
         * Берем нужную инфу о контактах для отображения в промке
         **/
        getMiniContactsForPromo: function() {
            var promise = $.Deferred();
            var emails = this.getComposeEmails();
            if (emails.length < 2) {
                promise.reject();
                return promise.promise();
            }
            var users = [];
            this.json.users = [];
            function doneGetContacts(usersList) {
                this.json.users = this.json.users.concat(usersList);
                this.modifyUsersList();
                promise.resolve();
            }
            Jane.Handler.getAll(['abook-contacts'], {emails: emails.join(',')},  function() {
                var contactInfo;
                $.each(emails, function(i, email) {
                    contactInfo = Jane.$H('abook-contacts').getContactDataByEmail(email);
                    if (contactInfo) {
                        if (!contactInfo.name.full) {
                            contactInfo.name.full = contactInfo.email[0].value.split('@')[0];
                        }
                        users.push(contactInfo);
                    } else {
                        // если контакт не нашли то делаем с минимум необходимой структурой свой
                        users.push({
                            email: [
                                {
                                    value: email
                                }
                            ],
                            name: {
                                full: email.split('@')[0]
                            }
                        });
                    }
                });
                doneGetContacts.call(promos['groups'], users);
            });
            return promise.promise();
        },
        /**
         * Метод получения cid-ов по емейлам
         **/
        getContactsCids: function(emails) {
            var cids = [];
            var contactInfo;
            var updateContacts = $.Deferred();
            var addContacts = $.Deferred();
            this.json.cids = [];
            function doneGetContacts(usersList) {
                this.json.cids = this.json.cids.concat(usersList);
                updateContacts.resolve();
            }
            Jane.Handler.getAll(['abook-contacts'], {emails: emails.join(',')},  function() {
                addContacts.resolve();
                $.each(emails, function(i, email) {
                    contactInfo = Jane.$H('abook-contacts').getContactDataByEmail(email);
                    if (contactInfo) {
                        cids.push(contactInfo.cid);
                    } else {
                        // необходимо, чтобы добавление происходило последовательно, иначе нельзя сразу получить данные о контакте
                        addContacts = addContacts.then(function() {
                            return promos['groups'].addContact(email);
                        });
                    }
                });
                addContacts.then(
                    doneGetContacts.bind(promos['groups'], cids),
                    function() {
                        updateContacts.reject();
                    }
                );
            });
            return updateContacts.promise();
        },
        /**
         * Метод добавления контакта, если такой не найден в адресной книге
         * @param {String} email емейл контакта
         **/
        addContact: function(email) {
            var promise = $.Deferred();
            var thatGroup = promos['groups'];
            Jane.Handler.doAll(['do-abook-person-add'], {mail_addr: email}, function(data) {
                if (data.handlers[0].status === 'ok') {
                    Jane.Handler.getAll(['abook-contacts'], {emails: email},  function() {
                        var contact = Jane.$H('abook-contacts').getContactDataByEmail(email);
                        if (contact) {
                            thatGroup.json.cids.push(contact.cid);
                            promise.resolve();
                        } else {
                            promise.reject();
                        }
                    });
                } else {
                    promise.reject();
                }
            });
            return promise.promise();
        },
        /**
         * Метод для разбиение списка полученных контактов на выводимые и спрятанные под ссылку "еще"
         * выводим только 3 контакта, остальные выводятся в попапе по ссылке "еще"
         **/
        modifyUsersList: function() {
            var email = [];

            $.each(this.json.users, function(i, user) {
                if (user) {
                    email.push(user.email[0].value);
                }
            });
            this.json.email = email;
            this.json.params = 'emails=' + email.join(',');

            var usersLength = this.json.users.length;
            if (usersLength > 3) {
                this.json.more = this.json.users.splice(3, usersLength - 3);
            }
        },
        /**
         * Метод вызывает определение параметров в свойстве json, потому что они должны быть готовы
         * к моменту определения шаблона и не известны до вызова cb 
         **/
        initParams: function() {
            if (this.variantWithContacts()) {
                this.json.withcontacts = 1;
            }
            var promise = $.Deferred();
            var contacts = this.getMiniContactsForPromo();
            function afterGetContacts() {
                var jsonData = this.json;
                if (!jsonData.users || (jsonData.users && jsonData.users.length < 2) || !jsonData.email) {
                    promise.reject();
                    return;
                }
                Jane.Handler.doAll(['abook-band-info'], {email: jsonData.email}, function(data) {
                    if (jpath(data, '.handlers.data.band.counter')[0] > 1) {
                        promise.resolve();
                    } else {
                        promise.reject();
                    }
                });
            }
            function afterFailContacts() {
                promise.reject();
            }
            contacts.fail(afterFailContacts).done(afterGetContacts.bind(this));
            return promise.promise();
        },
        /**
         * Коллбек промки
         **/
        cb: function() {
            Jane.$H('settings').setSettings({
                'promo-done-groups': Daria.now()
            });

            var $node = $(that.getCacheNode());

            // в зависимости от вариант промки проводим подготовительные работы
            if (this.variantWithContacts()) {
                $node.find('.b-message-head_full').addClass('g-hidden');
                $node.find('.js-group-promo-people-more-link').on('click', function() {
                    that.clearRedirectTimeout();
                });
                Jane.c(['Промо-групп', 'Аватары', 'показы промо']);
            } else {
                Jane.c(['Промо-групп', 'Адресаты', 'показы промо']);
            }

            $node.find('.group-promo-button').on('mouseover', function() {
                that.clearRedirectTimeout();
            });
        }
    };

    return promos;
};

/* ../../js/components/compose.done.js end */

    /* ../../js/components/phones.suggest.js begin */
(function() {
    /**
     * Создает саджест контактов к полю ввода телефонов
     * @param {Node} inputField поле ввода, с которым связан саджест
     * @param {Object} [options] настройки саджеста
     * @constructor
     */
    var PhonesSuggest = function(inputField, options) {

        options = $.extend({
            noSmsButton: true
        }, options);

        Daria.Suggest.Contacts.call(this, inputField, options);
    };

    Daria.extend(PhonesSuggest, Daria.Suggest.Contacts);

    /**
     * Формирует данные для саджеста
     * @private
     */
    PhonesSuggest.prototype._source = function() {
        this.options.handlers = {
            'abook-suggest': {
                climit: 35,
                glimit: 5,
                phone: 'must'
            }
        };

        return Daria.Suggest.prototype._source.apply(this, arguments);
    };

    /**
     * Подготовка данных перед визуализацией
     * @param {string} handlerName название хэндлера, который является носителем данных
     * @param {Object} handlerData данные хэндлера
     * @returns {Array} обработанные данные хэндлера
     */
    PhonesSuggest.prototype.parse = function(handlerName, handlerData) {
        // Исключение групп из ответа
        if (handlerData && $.isArray(handlerData.groups)) {
            handlerData.groups = [];
        }

        return Daria.Suggest.Contacts.prototype.parse.apply(this, arguments);
    };

    PhonesSuggest.prototype.formatContact = function(contact) {
        return contact.phone;
    };

    Daria.Suggest.Phones = PhonesSuggest;
})();

/* ../../js/components/phones.suggest.js end */

    /* ../../js/daria.extensions.js begin */
(function(/**Daria*/Daria) {

    /**
     * Соответствие расширения типу файла и его иконки (<class>/<icon-suffix>)
     */
    var hash = {
        "doc": "doc",
        "docx": "doc",
        "htm": "doc/text",
        "html": "doc/text",
        "mht": "doc",
        "odt": "doc",
        "rtf": "doc",
        "txt": "doc/txt",
        "pdf": "pdf",
        "odp": "ppt",
        "ppt": "ppt",
        "pptx": "ppt",
        "csv": "xls/xls",
        "ods": "xls",
        "ots": "xls",
        "xls": "xls",
        "xlsx": "xls",
        "eml": "mail/eml",
        "vcf": "mail/eml",
        "exe": "application/exe",

        "aac": "audio/audio",
        "mka": "audio",
        "mp3": "audio/mp3",
        "ogg": "audio/audio",
        "wav": "audio",
        "wma": "audio/wma",

        "ai": "image/ai",
        "bmp": "image/bmp",
        "cdr": "image/cdr",
        "djvu": "image",
        "eps": "image",
        "gif": "image/gif",
        "ico": "image",
        "jpe": "image",
        "jpeg": "image/jpg",
        "jpg": "image/jpg",
        "pcx": "image/pcx",
        "pjpeg": "image",
        "png": "image/png",
        "ps": "image",
        "psd": "image/psd",
        "tga": "image",
        "tif": "image/tiff",
        "tiff": "image/tiff",

        "3gp": "video",
        "avi": "video/avi",
        "flv": "video/video",
        "m2v": "video",
        "mkv": "video",
        "mov": "video/mov",
        "mp4": "video/mp4",
        "mpe": "video",
        "mpeg": "video",
        "mpg": "video",
        "qt": "video",
        "vob": "video",
        "wmv": "video/wmv",

        "7z": "zip/zip",
        "arj": "zip/zip",
        "bz2": "zip",
        "lzh": "zip/zip",
        "uc2": "zip/zip",
        "zip": "zip",
        "rar": "rar"
    };

    /**
     * Список расширений, которые показывать как картинки.
     * @type {Array}
     */
    var extenstionsWithPreview = ['bmp', 'gif', 'jpg', 'jpeg', 'pjpeg', 'pcx', 'png', 'tif', 'tiff'];

    // Расширения, для которых принудительно устанавливаем неизвестный тип/иконку (DARIA-5505)
    var ignoreTypes = ['apk', 'cab', 'dmg', 'docb', 'docm', 'gz', 'js', 'msi', 'phps', 'pptb', 'pptm',
        'sea', 'sit', 'tar', 'torrent', 'xlsb', 'xlsm', 'xpi'];

    $.each(ignoreTypes, function(_, ext) {
        hash[ext] = 'general/general';
    });

    /**
     * Возвращает информацию о типе и иконке по расширению файла.
     * @param {String} filename
     * @return {Object}
     */
    Daria.getExtensionInfo = function(filename) {
        var ext = Daria.splitName(filename)[1].toLowerCase();
        var info = (hash[ext] || '').split('/');
        var res = {
            'class': info[0] || 'general',
            'preview': $.inArray(ext, extenstionsWithPreview) > -1
        };

        if (info.length > 1) {
            res.icon = info[1];
        }

        return res;
    };

    /**
     * Разделяет имя файла на имя и расширение.
     * @param {String} file Имя файла.
     * @returns Array
     */
    Daria.splitName = function(file) {
        file = file || '';
        var info = file.split('.');
        // файл без расширения
        if (info.length == 1) {
            return [file, ''];
        }

        var ext = info.pop();
        return [info.join('.'), ext];
    };

    /**
     * Возвращает путь до родительской папки для переданного пути.
     * @param  {String} path
     * @return {String}
     */
    Daria.dirname = function(path) {
        path = path || '';
        var slash = '/';
        var hasLeadingSlash = path.charAt(0) === slash;

        var segments = $.grep(path.split(slash), function(i) { return i.length; });
        segments.pop();

        return (hasLeadingSlash ? slash : '') + segments.join(slash);
    };


})(Daria);

/* ../../js/daria.extensions.js end */

    /* ../../js/components/validator.js begin */
(function() {
    'use strict';

    /**
     * Пространство имен для компонента валидации
     *
     * @namespace
     */
    var Validator = Daria.Validator = {};

    /**
     * Нэймспейс для сохранения настроек и дебаг режима
     *
     * @type {String}
     */
    Validator._namespace = 'validator';

    /**
     * Список хэндлеров, которые использует объект телефона пользователя
     */
    Validator._hMethods = {};

    Validator.assert = function(assertion, description, callback) {
        var assertNamespace = Validator._namespace;
        Daria.assert.call(Daria, assertion, description, assertNamespace, callback);
    };

    var assert = Validator.assert;

    /**
     * Ленивая инициализация методов хэндлеров
     *
     * @param {String} handlerName Имя хэндлера
     * @param {String} methodName Имя метода хэндлера
     *
     * @return {Function} Возвращает функцию с инкапсулированным внутри вызовом метода хэндлера
     */
    Validator._getHandlerMethodLazy = function(handlerName, methodName) {
        return function() {
            var handler = Jane.$H(handlerName);
            var handlerMethod = handler[methodName];

            return handlerMethod.apply(handler, Array.prototype.slice.call(arguments));
        };
    };

    /**
     * Инжектирует методы хэндлеров с ленивой инициализацией в пространство имен Валидатора
     *
     * @param  {String} methodName        [description]
     * @param  {String} handlerName       [description]
     * @param  {String} handlerMethodName [description]
     *
     * @return {Validator}
     */
    Validator._inject = function(methodName, handlerName, handlerMethodName) {
        assert(!this._hMethods[methodName], 'This method already exists');

        this._hMethods[methodName] = this._getHandlerMethodLazy(handlerName, handlerMethodName);
        return this;
    };

    /**
     * Получение коллекции телефонов
     *
     * @param {Boolean} [getFromCache=false]  взять данные из кэша если есть
     *
     * @return {Promise} Резолвится c коллекцией UserPhones
     */
    Validator.getUserPhones = function(getFromCache) {
        var UserPhones = Validator._UserPhones;
        var fetchingPhoneData = this._hMethods.getAllPhones(getFromCache);

        var done = function(phonesRawData) {
            return new UserPhones(phonesRawData);
        };

        return fetchingPhoneData.then(done);
    };

    /**
     * Метаинформация о телефоне
     * @typedef {Object} LocalPhoneInfo
     *
     * @property {String} country - Страна
     * @property {String} code - код, который будет использоваться для данной страны
     * @property {String} placeholder - вид плейсхолдера
     */

    /**
     * Возращает локальную метаинформацию о телефоне по коду страны
     *
     * @param {String} userCountryPhoneCode
     * @param {String} [infoParam] Если задан параметр, то возращает его
     *
     * @returns {LocalPhoneInfo|Any}
     */
    Validator.getLocalPhoneInfo = function(userCountryPhoneCode, infoParam) {
        var countryMap = {
            '7': {
                country: 'Russia',
                code: '7',
                placeholder: '7 ххх ххх хх хх'
            },
            '380': {
                country: 'Ukraine',
                code: '+380',
                placeholder: '+380 хх ххх хх хх'
            },
            '90': {
                country: 'Turkey',
                code: '90',
                placeholder: '90 ххх ххх х ххх'
            },
            '1': {
                country: 'USA',
                code: '1',
                placeholder: '1 ххх ххх хххх'
            },
            other: {
                country: 'All other world!',
                code: '+7',
                placeholder: '+7 ххх ххх хх хх'
            }
        };

        var localPhoneInfo = countryMap[userCountryPhoneCode] || countryMap.other;

        if (infoParam) {
            return localPhoneInfo[infoParam];
        }

        return localPhoneInfo;
    };

    /**
     * Проставляет за пользователя, плейсхолдер или другую информацию возращаемую getPredict
     *
     * @param {jQuery} $inputNumber
     * @param {Function} [getPredict=$input.attr('placeholder')] по умолчанию берется значение из плейсхолдера
     *
     */
    Validator.predictInput = function($inputNumber, getPredict) {
        getPredict = getPredict || $inputNumber.attr.bind($inputNumber, 'placeholder');

        var number = $inputNumber.val();
        if (number !== '') {
            return;
        }

        if (!$inputNumber) {
            throw new Error('Argument $inputNumber must be a present');
        }

        if (!_.isFunction(getPredict)) {
            throw new Error('Argument getPredict must be a function');
        }

        var phonePrefix = getPredict();

        $inputNumber.val(phonePrefix);
    };

    /* Выставляет фокус в последнюю позицию
     * http://stackoverflow.com/a/4609476
     *
     * @param {jQuery} $input
     */
    Validator.moveCaretToEnd = function($input) {
        var input = $input.get(0);
        var inputLen = input.value.length;

        // For IE Only
        if (document.selection) {
            // Set focus
            input.focus();
            // Use IE Ranges
            var oSel = document.selection.createRange();
            // Reset position to 0 & then set at end
            oSel.moveStart('character', -inputLen);
            oSel.moveStart('character', inputLen);
            oSel.moveEnd('character', 0);
            oSel.select();
        } else if (input.selectionStart || input.selectionStart == '0') {
            // Firefox/Chrome
            input.selectionStart = inputLen;
            input.selectionEnd = inputLen;
            input.focus();
        }
    };


    Validator._inject('getAllPhones', 'userphones', 'getAll');
    Validator._inject('register', 'phone-register', 'register');
    Validator._inject('resendCode', 'phone-register', 'resendCode');
    Validator._inject('confirm', 'phone-confirm', 'confirm');
    Validator._inject('prolong', 'phone-prolong', 'prolong');
    Validator._inject('remove', 'phone-delete', 'remove');

})();

/* ../../js/components/validator.js end */

    /* ../../js/components/validator.userphone.js begin */
/* jshint strict: true */
/**
 * Объект телефона пользователя
 *
 * @see https://jira.yandex-team.ru/browse/DARIA-25425
 * @param  {Object} global
 */
(function(global, Daria, Validator) {
    'use strict';

    var UserPhone;
    var proto;
    var hMethods;
    var getHandlerMethodLazy;

    var assert = Validator.assert;

    /**
     * Объект телефона пользователя
     *
     * @private используется только в пределах коллекции UserPhones
     * @param {Object} phoneData Сырые данные телефона
     */
    Validator._UserPhone = function(phoneData) {
        assert(phoneData, 'UserPhone constructor: parameter phoneData is undefined');

        /**
         * Содержит данные телефона
         * @private
         * @type {Object}
         */
        this._phoneData = phoneData;
        /**
         * Содержит данные о ошибках
         * @private
         * @type {Array<Object>}
         */
        this._errors = [];
    };

    UserPhone = Validator._UserPhone;
    proto = UserPhone.prototype;

    hMethods = Validator._hMethods;
    getHandlerMethodLazy = Validator._getHandlerMethodLazy;

    /**
     * Возвращает параметр у объекта
     *
     * @param {String} fieldName Имя параметра
     *
     * @return {*}
     */
    proto.get = function(fieldName) {
        if (this._phoneData[fieldName] === undefined) {
            assert(false, 'phone doesn\'t have property ' + fieldName);
        }
        return this._phoneData[fieldName];
    };

    /**
     * Возращает true, если телефон защищенный
     *
     * @return {Boolean}
     */
    proto.isSecure = function() {
        return this.get('secure');
    };

    /**
     * Возращает true, если телефон простой
     *
     * @return {Boolean}
     */
    proto.isSimple = function() {
        return !this.isSecure();
    };

    /**
     * Возращает true, если телефон провалидирован
     *
     * @return {Boolean}
     */
    proto.isValid = function() {
        return this.get('valid') === 'valid';
    };

    /**
     * Возращает true, если телефон зарегистрирован
     *
     * @return {Boolean}
     */
    proto.isRegistered = function() {
        return !(this.isValid());
    };

    /**
     * Возвращает дату валидации(необходимо учитывать, что на самом деле это время отправки смс)
     *
     * @throws {Error}
     * @return {Number}
     */
    proto.getValidationTimestamp = function() {
        // В общем из-за причуд в логике паспорта, поле validation_date - не дата валидации, как
        // можно догадаться из названия - а последняя дата отправки смс, и так для зарегистрированного телефона
        // не может быть даты валидации здесь срабатывает ассерт.
        assert(this.isValid(), 'Validation timestamp for registered phone is unconsistent');

        return this.get('validation_date');
    };

    /**
     * Возвращает дату регистрации(необходимо учитывать, что на самом деле это время отправки смс)
     *
     * @throws {Error}
     * @return {Number}
     */
    proto.getRegistrationTimestamp = function() {
        assert(this.isRegistered(), 'Validation timestamp for registered phone is unconsistent');

        return this.get('validation_date');
    };

    /**
     * Отдает номер телефона
     *
     * @return {String}
     */
    proto.getNumber = function() {
        return this.get('number');
    };

    /**
     * Потверждает зарегистрированный телефон кодом и паролем(если телефон защищенный, то пароль обязателен)
     *
     * @param  {String|Number} code     Код на момент создания он цифровой
     * @param  {String} [password]      Пользовательский пароль
     *
     * @throws {Error}                  Выбрасывает ошибку при отсутсвии пароля для защищенного телефона
     * @throws {Error}                  Выбрасывает ошибку, если телефон уже провалидирован
     *
     * @return {Promise}                Резолвится с потвержденным телефоном
     */
    proto.confirm = function(code, password) {
        assert(this.isRegistered(), 'Phone must be registered');
        assert(this.isSecure() && password, 'Parameter password for secure phone is compulsory');

        var that = this;

        var phoneNumber = this.getNumber();

        var confirming = hMethods.confirm(phoneNumber, code, password);

        var done = function(validPhoneData) {
            // Тригерим события
            that._reset(validPhoneData);
            that._trigger('confirm', that);

            return that;
        };

        var fail = function(error) {
            that._fail(error, 'confirm-fail');
            return error;
        };

        return confirming.then(done, fail);
    };

    /**
     * Повторно высылает код конфирмации
     *
     * @return {Promise} resolve with UserPhone
     */
    proto.resendCode = function() {
        var resendingCode;
        var that = this;

        resendingCode = hMethods.resendCode(this.getNumber());

        var done = function(phoneData) {
            // Тригерим события
            that._reset(phoneData);
            that._trigger('resend-code', that);

            return that;
        };

        var fail = function(error) {
            that._fail(error, function(error) {
                if (error.errorcode === 'TEMPORARYBLOCK') {
                    return 'resend-code-block';
                }
                return 'resend-code-fail';
            });

            return error;
        };

        return resendingCode.then(done, fail);
    };

    /**
     * Отдает время до следущей возможности отправить смс с кодом потверждения
     *
     * @return {Number|Null} Так как паспорт на данный момент не поддержал поле next_validation, то отдается null
     */
    proto.getResendCodeTimeout = function() {
        var nextResendCodeTime = this.get('next_validation');
        if (!nextResendCodeTime) {
            return null;
        }
        var delta = nextResendCodeTime - Daria.now();

        return ( delta < 0 ) ? 0 : delta;
    };

    /**
     * Ставит обработчик на завершение таймаута для повторной отправки смс с кодом потверждения,
     * если таймаут нулевой то обработчик сработает сразу
     *
     * WARNING: эта функциональность будет работать только тогда, когда паспорт поддержит в ручках наличие
     * поля next_validation(должен содержать время следующей возможной отправки смс)
     *
     * @param  {Function} listener обработчик
     *
     * @return {UserPhone}  chainable
     */
    proto.onResendCodeTimeout = function(listener) {
        var that = this;
        var resendCodeTimeout = this.getResendCodeTimeout();

        if (resendCodeTimeout === null) {
            throw new Error('No field resendCodeTimeout');
        }

        this.on('confirm-timeout', listener);

        this._timerId = setTimeout(function() {
            that._trigger('confirm-timeout', that);
        }, resendCodeTimeout);

        return this;
    };

    /**
     * Отдает true если телефон можно валидировать - не совсем консистентно так как могут быть ситуации(перезагрузка
     * после повтороной отправки смс), когда очень проблематичично а порой и невозможно определить таймаут до
     * возможности отправить смс.
     * При наличии поля c временем возможности отправить смс должен работать корректно
     *
     * @return {Boolean}
     */
    proto.canResendCode = function() {
        var resendCodeTimeout = this.getResendCodeTimeout();

        if (resendCodeTimeout === null) {
            if (Daria.DEBUG) {
                throw new Error('Normal operation of this method is impossible');
            }
            return null;
        }

        return resendCodeTimeout === 0;
    };

    /**
     * Пролонгирует защищенный провалидированный телефон
     *
     * @return {Promise} resolve with UserPhone
     */
    proto.prolong = function() {
        var that = this;

        if (this.isRegistered()) {
            throw new Error('Phone must be valid for prolonging');
        }

        if (this.isSimple()) {
            throw new Error('Phone must be secure for prolonging');
        }

        var done = function(phoneData) {
            that._reset(phoneData);
            that._trigger('prolong', that);

            return that;
        };

        return hMethods.prolong(this.getNumber()).then(done);
    };

    /**
     * Если телефон простой, то удаляет телефон из системы паспорта
     * Если телефон защищенный, то начинает удаление (status: `STARTED`)
     *
     * @return {Promise}
     */
    proto.remove = function() {
        var that = this;

        var done = function(removeResult) {
            assert(removeResult, 'Result must be exist');
            assert(
                removeResult.status === 'OK' || removeResult.status === 'STARTED',
                'Successfull result of remove operation must return `OK` or `STARTED`'
            );

            if (removeResult.status === 'OK') {
                that._trigger('remove', that);
                that.die();
            } else if (removeResult.status === 'STARTED') {
                that._trigger('remove-secure-start', that);
                that.die();
            }

            return null;
        };

        return hMethods.remove(this.getNumber()).then(done);
    };

   /**
    * Обрабатывает не фатальные ошибки
    *
    * @private
    *
    * @param {Object} error Объект с данными об ошибке
    * @param {Boolean|Function} [trigger] Если функция возвращает строку
    *
    * @return {UserPhone} chainable
    */
    proto._fail = function(error, trigger) {
        assert(typeof error === 'object', 'Parameter error is compulsory');

        var errorName;

        if ($.isFunction(trigger)) {
            errorName = trigger.call(null, error);
        } else if (typeof trigger === 'string') {
            errorName = trigger;
        }

        var errorRecord = {
            error: error
        };

        if (Daria.DEBUG === Validator._namespace) {
            console.error(errorName, error);
        }

        if (typeof errorName === 'string') {
            this._trigger(errorName, error);
            errorRecord.errorName = errorName;
        }

        this._errors.push(errorRecord);

        return this;
    };

    /**
     * Получить последнюю ошибку
     *
     * @return {Object}
     */
    proto.getLastError = function() {
        if (!this._errors) {
            return null;
        }
        return this._errors.slice(-1)[0];
    };

    /**
     * Обновляет поле данных телефона и тригерит на себе событие `change`
     *
     * @private
     * @param {String} fieldName    Обновляемое поле данных
     * @param {*} fieldValue        Значение поля данных
     *
     * @returns {UserPhone}         chainable
     */
    proto._set = function(fieldName, fieldValue) {
        assert(typeof fieldName === 'string', 'Parameter fieldName must be string');

        if (this._phoneData[fieldName] === fieldValue) {
            return;
        }

        var previous = this._phoneData[fieldName];
        this._phoneData[fieldName] = fieldValue;

        this._trigger('change', this, {
            fieldName: fieldName,
            previous: previous,
            current: fieldValue
        });

        return this;
    };

    /**
     * Обновляет все данные телефона и тригерит на себе событие `reset`
     *
     * @private
     * @param  {Object} phoneRawData    новые данные телефона
     * @return {UserPhone}              chainable
     */
    proto._reset = function(phoneRawData) {
        assert(typeof phoneRawData === 'object', 'Parameter phoneRawData must be object');

        var previous = this._phoneData;

        this._phoneData = phoneRawData;

        this._trigger('reset', this, {
            previous: previous,
            current: phoneRawData
        });

        return this;
    };

    /**
     * Тригерит на себе событие
     *
     * @private
     * @param  {String} eventName       имя события
     * @returns {UserPhone}             chainable
     */
    proto._trigger = function(eventName /*,args*/) {
        assert(typeof eventName === 'string', 'Parameter eventName must be string');
        var $this;
        $this = $(this);

        var args = Array.prototype.slice.call(arguments);

        // TODO: если эту функциональность выносить в миксин, то следует подумать об этом месте
        if (Daria.DEBUG === Validator._namespace) {
            console.info.apply(console, ['Trigger event ' + eventName + ' with args:'].concat(args));
        }

        $this.triggerHandler.apply($this, args);

        return this;
    };

    /**
     * Метод для добавления обработчиков событий. События возникают на экземпляре UserPhone.
     *
     * @param {String} eventName    Название события.
     * @param {Function} listener   Обработчик.
     */
    proto.on = function(eventName, listener) {
        assert(typeof eventName === 'string', 'Parameter eventName must be string');
        assert($.isFunction(listener), 'Parameter eventName must be function');

        var that = this;
        var SECOND_ARGUMENT_IX = 1;

        $(this).bind(eventName, function() {
            listener.apply(that, Array.prototype.slice.call(arguments, SECOND_ARGUMENT_IX));
        });
    };

    /**
     * Метод для удаления обработчика
     *
     * @param {String} eventName    Название события.
     * @param {Function} listener   Обработчик.
     */
    proto.off = function(eventName, listener) {
        assert(typeof eventName === 'string', 'Parameter eventName must be string');
        assert($.isFunction(listener), 'Parameter eventName must be function');

        $(this).unbind(eventName, listener);
    };

    /**
     * Очищение всех обработчиков и таймеров
     *
     * @return {UserPhone} chainable
     */
    proto.die = function() {
        $(this).unbind();
        clearTimeout(this._timerId);

        return this;
    };

})(this, Daria, Daria.Validator);

/* ../../js/components/validator.userphone.js end */

    /* ../../js/components/validator.userphones.js begin */
/* jshint strict: true */
/**
 * Коллекция управления объектами телефонов пользователя
 *
 * @see https://jira.yandex-team.ru/browse/DARIA-25425
 * @param  {Object} global
 */
(function(global, Validator, UserPhone) {
    "use strict";

    var hMethods;
    var proto;
    var UserPhones;

    var assert = Validator.assert;

    hMethods = Validator._hMethods;

    /**
     * Создает коллекцию по управлению пользовательскими телефонами
     *
     * @param {Array<Object>} [phonesRawData=[]] Массив "сырых" данных телефонов
     * @constructor
     */
    UserPhones = Validator._UserPhones = function(phonesRawData) {
        phonesRawData = phonesRawData || [];
        this._userPhoneStore = [];
        var that = this;

        $.each(phonesRawData, function(ix, phoneRawData) {
            var phone = new UserPhone(phoneRawData);
            that._add(phone);
        });
    };


    proto = UserPhones.prototype;

    // Заимствуем методы у UserPhone
    // TODO: сделать это в виде миксина
    proto._fail = Validator._UserPhone.prototype._fail;
    proto.getLastError = Validator._UserPhone.prototype.getLastError;

    // TODO: использовать отчужденный PubSubMixin
    proto._trigger = Validator._UserPhone.prototype._trigger;
    proto.on = Validator._UserPhone.prototype.on;
    proto.off = Validator._UserPhone.prototype.off;
    proto.die = Validator._UserPhone.prototype.die;

    /**
     * Добавляет объект в коллекцию, на основе сырых данных
     *
     * @private
     * @param {Object} phone         Сырые данные телефона
     *
     * @return {phone}
     */
    proto._add = function(phone) {
        assert(phone instanceof UserPhone, 'Parameter phone must be instance of UserPhone');

        phone.on('remove', $.proxy(this.removePhone, this));
        phone.on('remove-secure-start', $.proxy(this.removePhone, this));

        this._userPhoneStore.push(phone);

        return phone;
    };

    /**
     * Удаляет выбранный телефон из коллекции
     *
     * @param  {UserPhone} removedPhone
     * @return {UserPhones} chainable
     */
    proto.removePhone = function(removedPhone) {
        var phoneIx;

        // Ищем телефон
        $.each(this._userPhoneStore, function(ix, phone) {
            if  (phone === removedPhone) {
                phoneIx = ix;
                return false;
            }
        });

        // Удаляем его
        this._userPhoneStore.splice(phoneIx, 1);

        this._trigger('remove', removedPhone);

        return this;
    };

    /**
     * Возвращает количество телефонов
     *
     * @return {Number}
     */
    proto.getPhoneCount = function() {
        return this._userPhoneStore.length;
    };

    /**
     * Проверяет наличие телефонов
     *
     * @return {Boolean}
     */
    proto.isEmpty = function() {
        return !Boolean(this.getPhoneCount());
    };

    /**
     * Возвращает защищенный телефон
     *
     * @return {UserPhone|null}
     */
    proto.getSecure = function() {
        if (!this._userPhoneStore.length) {
            return null;
        }
        var securePhone = $.grep(this._userPhoneStore, function(phone) {
            return phone.isSecure();
        })[0];

        return securePhone || null;
    };

    /**
     * Отдает список всех телефонов
     *
     * @return {Array}
     */
    proto.getAll = function() {
        return this._userPhoneStore;
    };

    /**
     * Отдает список всех провалидированных телефонов
     *
     * @return {Array}
     */
    proto.getAllValid = function() {
        var validPhones = $.grep(this.getAll(), function(phone) {
            return phone.isValid();
        });

        return validPhones;
    };

    /**
     * Отдает самый последний по дате провалидированный телефон
     *
     * @return {UserPhone|null}
     */
    proto.getLastValid = function() {
        var validPhones = this.getAllValid();
        var lastValidPhone;

        if (!validPhones.length) {
            return null;
        }

        lastValidPhone = validPhones[0];

        // Отбираем последний по дате валидации телефон
        $.each(validPhones, function(ix, validPhone) {
            if (lastValidPhone.getValidationTimestamp() < validPhone.getValidationTimestamp()) {
                lastValidPhone = validPhone;
            }
        });

        return lastValidPhone;
    };

    /**
     * Отдает последний зарегистрированный телефон
     *
     * @return {UserPhone|null}
     */
    proto.getLastRegistered = function() {
        var phones = this.getAll();
        var lastRegisteredPhone;

        if (!phones.length) {
            return null;
        }

        // Получаем зарегистрированные телефоны
        var registeredPhones = $.grep(phones, function(phone) {
            return phone.isRegistered();
        });

        if (!registeredPhones.length) {
            return null;
        }

        lastRegisteredPhone = registeredPhones[0];

        // Отбираем последний по дате регистрации телефон
        $.each(registeredPhones, function(ix, registeredPhone) {
            if (lastRegisteredPhone.getRegistrationTimestamp() < registeredPhone.getRegistrationTimestamp()) {
                lastRegisteredPhone = registeredPhone;
            }
        });

        return lastRegisteredPhone;
    };

    /**
     * Регистрируем защищенный телефон
     *
     * @param  {String} phoneNumber
     *
     * @throws {Error} Если в коллекции уже есть защищенный телефон
     *
     * @return {Promise} resolve with UserPhone
     */
    proto.registerSecure = function(phoneNumber) {
        assert(!this.getSecure(), 'Secure phone must not be in collection');

        return this._register(phoneNumber, true);
    };

    /**
     * Регистрируем простой телефон
     *
     * @param  {String} phoneNumber
     *
     * @return {Promise} resolve with UserPhone
     */
    proto.registerSimple = function(phoneNumber) {
        assert(typeof phoneNumber === 'string', 'Parameter phoneNumber must be string');

        return this._register(phoneNumber, false);
    };

    /**
     * Регистрирует телефон и добавляет его в коллекцию
     *
     * @param  {Number} phoneNumber Номер телефона
     * @param  {Boolean} secure создавать защищенный телефон, если secure = true
     *
     * @throws {Error} Если телефон уже присутсвует в коллекции
     *
     * @return {Promise}    resolve with UserPhone
     */
    proto._register = function(phoneNumber, secure) {
        var that = this;

        if (this.getPhone(phoneNumber)) {
            throw new Error('This phone must not be in collection');
        }

        var done = function(registeredPhoneData) {
            var registeredPhone = new UserPhone(registeredPhoneData);
            that._add(registeredPhone);

            return registeredPhone;
        };

        return hMethods.register(phoneNumber, secure).then(done);
    };

    /**
     * Получить объект телефона по его номеру
     *
     * @param  {String} phoneNumber Номер телефона
     *
     * @return {UserPhone|null}
     */
    proto.getPhone = function(phoneNumber) {
        assert(typeof phoneNumber === 'string', 'Parameter phoneNumber must be string');

        var phones = this.getAll();

        var phone = $.grep(phones, function(phone) {
            return phone.getNumber() === phoneNumber;
        })[0];

        phone = phone || null;

        return phone;
    };

})(this, Daria.Validator, Daria.Validator._UserPhone);

/* ../../js/components/validator.userphones.js end */

    /* ../../js/components/collectors.js begin */
(function(Daria) {

    /* global Settings */

    var isLoading = false;

    /**
     * @desc
     * Функция которая возврашает сообщение
     * связанное с получаемым от сервера статусом при
     * настройке сборшика.
     *
     * @param {String} errorStatus Статус ошибки.
     * @param {...} param1 Дополнительные параметры
     * которые будут переданны в i18n.
     *
     * @return {String} Сообщение для конкретного статуса.
     */
    var getStatusMessage = function(errorStatus, param1, param2) {
        switch (errorStatus) {
        case 'loading':
            return i18n('%Setup_Collector_Проверка_соединения');
        case 'success':
            return i18n('%Setup_Collector_Соединение_установлено');
        case 'fail':
            return i18n('%Setup_Collector_Сервер_не_существует');
        case 'auth_failed':
            var domain = param1 && param1.split('@')[1];
            var protocol = (param2 || '').toUpperCase();

            // Если ящик на Gmail'e показываем отдельное сообщение об ошибке
            if (domain === 'gmail.com') {
                return i18n('%Setup_Collector_Gmail', protocol);
            }
            return i18n('%Setup_Collector_Сервер_не_отвечает_текст');

        case 'this_server_belongs_to_yandex':
            return i18n('%Setup_Collector_Сборщик_на_самого_себя');
        case 'duplicated':
            return i18n('%Setup_Collectors_Уже_существует', param1, param2);
        default:
            return '';
        }
    };

    /**
     *
     * @param {[Node]} rootNode Корневой узел
     * в котором будет искаться узел статуса.
     * @param {[String]} type Тип статуса.
     * @param {[String]} name The name.
     * @param {[Array]} params Дополнительные параметры
     * для i18n.
     *
     * @return {Node} DOM Node.
     */
    var sstatus = function(rootNode, type, name, params) {
        var text;
        var $statusNode;
        var $notifyNode;
        var prevStatus;

        if (typeof rootNode === 'string') {
            params = name;
            name = type;
            type = rootNode;
            rootNode = null;
        }

        rootNode = rootNode || document;
        $statusNode = $(rootNode).find('.b-notification_status' + (name ? '-' + name : ''));
        $notifyNode = $statusNode.find('.b-notification');

        prevStatus = $notifyNode.data('status');

        if (prevStatus) {
            $notifyNode.removeClass('b-notification_' + prevStatus)
                .removeData('status');
        }

        if (type) {
            text = getStatusMessage.apply(null, $.merge([type], params || []));

            $notifyNode.addClass('b-notification_' + type)
                .data('status', type)
                .find('.b-notification-content').html(text);
        }

        return $statusNode;
    };


    /**
     * Объект для проверки настроек сборщика, отображения статусов и выполнения действий
     * в зависимости от результатов проверки
     *
     * Изначально создаётся для кнопки "Проверить", так как там больше всего статусов,
     * а для остальных мест (Создать и Изменить) будут переопределены некоторые методы
     */
    var Checker = {

        /**
         * Ссылка на форму, параметры которой проверяютсяы
         * @param params
         */
        form: null,

        /**
         * Ссылка на параметры формы
         * @param params
         */
        params: null,

        /**
         * Тип индикатора 'create|check|edit'
         */
        type: 'check',

        /**
         * Подписыается на все стади проверки и запускает чекер
         * @param {jQuery} form таргет акшена - кнопка или форма
         */
        run: function(form, owner) {
            // нельзя начинать проверку, если не закончена предыдущая
            if (isLoading === true) {
                return;
            }

            isLoading = true;

            this.owner = owner;

            this.form = form;
            this.params = this.form.serializeObject();

            sstatus(this.form).addClass('g-hidden');

            this.buttons = this.form.find('input:submit,input:button,button').closest('.nb-button').map(function() {
                return nb.block(this);
            });

            $.each(this.buttons, function() {
                this.disable();
            });

            // подпимывание на все стади проверки
            Jane.events.bind('onCollectorCheckStart', this.onCollectorCheckStart.bind(this));
            Jane.events.bind('onCollectorCheckSuccess', this.onCollectorCheckSuccess.bind(this));
            Jane.events.bind('onCollectorCheckFail', this.onCollectorCheckFail.bind(this));

            // запуск проверки
            Jane.Actions.run('collector._check', this.params);
        },

        /**
         * Обработчик начала проверки
         */
        onCollectorCheckStart: function() {
            sstatus(this.form, 'loading', this.type).removeClass('g-hidden');
        },

        /**
         * Обработчик успешной проверки
         */
        onCollectorCheckSuccess: function() {
            // Гамификация
            Jane.logUserActivity({ 'activity[verb]': 'mail.collector' });

            // скрыть и заанбиндить всё
            this.clear();
            // показать сообщение об успешной проверке
            sstatus(this.form, 'success', this.type).removeClass('g-hidden');
        },

        /**
         * Обработчик на случай, если проверка не удалась
         * @param {String} name имя события
         * @param {Object} data параметры события
         */
        onCollectorCheckFail: function(name, data) {
            // Логируем в метрику эксперимент с коллект
            if (this.owner == "wizard-collector-create" && Daria.urlParams['w'] == '2') {
                var urlParams = Daria.getUrlParams();
                var exp = urlParams['exp'];
                if (exp) {
                    if (exp == "4") {
                        Jane.c(['collect-coupons', 'Шаг 2', 'collector', 'Ошибка создания сборщика']);
                    }
                    if (exp == "5") {
                        Jane.c(['collect-tickets', 'Шаг 2', 'collector', 'Ошибка создания сборщика']);
                    }
                    if (exp == "6") {
                        Jane.c(['collect-events', 'Шаг 2', 'collector', 'Ошибка создания сборщика']);
                    }
                } else {
                    Jane.c(['Страница угона вариант №2', 'Шаг 2', 'collector', 'Ошибка создания сборщика']);
                }
                Actions.run('wizard.step-inline-block', {step: '3'});
            }
            // скрыть и заанбиндить всё
            this.clear();

            // показать сообщение об ошибке в зависимости от ответа
            var status = /auth_failed|this_server_belongs_to_yandex/.test(data.status) ? data.status : 'fail';
            sstatus(this.form, status, this.type, [this.params.email, this.params.protocol]).removeClass('g-hidden');

            this.onCollectorSaveFail();
        },

        /**
         * Обработчик любой ошибки при добавлении/редактировании сборщика
         */
        onCollectorSaveFail: function() {
            // для пдд доменов при любой ошибка показать форму редактирования подключения
            if (this.form.data('pddDomain')) {
                this.form.find('.b-form-layout__block_server-settings').removeClass('g-hidden');
            }
        },

        /**
         * Чистит биндинги и текстовые статус по достижению каких либо результатов
         */
        clear: function() {
            this.clearBindings();
            this.clearStatuses();
        },

        /**
         * анбиндится от событий чекера, определяется в ините
         * так что переопределять не нужно
         */
        clearBindings: function() {
            Jane.events.unbind('onCollectorCheckStart');
            Jane.events.unbind('onCollectorCheckSuccess');
            Jane.events.unbind('onCollectorCheckFail');

            $.each(this.buttons, function() {
                this.enable();
            });

            isLoading = false;
        },

        /**
         * Чистит текстовые статусы после достижения каких либо результатов
         */
        clearStatuses: function() {
            sstatus(this.form).addClass('g-hidden');
        }
    };

    /**
     * Переопределение поведения чекера для кнопки "Сохранить изменения"
     */
    var Editor = $.extend({}, Checker, {
        type: 'edit',
        onCollectorCheckSuccess: function() {
            var that = this;

            // DARIA-24070 - По IMAP не работает настройка в сборщиках "помещать письма в папку"
            if (this.params.protocol !== 'imap') {
                // DARIA-2488 - Не создавать фильтр перемещения письма во Входящие при настройке сборщика
                var inbox = Jane.$H("folders").getFolderBySymbol('inbox');

                if ('move_folder' in this.params && (inbox && inbox.fid !== this.params.move_folder)) {
                    this.params.cliker_folder = 'move';
                }
            }

            Jane.Handler.doAll(
                ["do-collector-edit"],
                this.params,
                function(data) {
                    // смотрим насколько удачно выполнился запрос
                    var resultNode = jpath(data, '.handlers[.name == "do-collector-edit"].data.body.updated').shift();

                    // переход на страницу созданного сборщика
                    if (resultNode === 'ok') {

                        // TODO: надо чистить эти кэши только, если сборщики изменили, а если не меняли, то можно и не чистить

                        // очищается кэш списка сборщиков, так как после изменеия настроек
                        // возможно изменится краткая информация о сборщиках в списке
                        Jane.$H("collectors").clearCache();
                        // Чистится кэш настроек сборщика
                        Jane.$H("collector").clearCache();

                        var filters = Jane.$H('filters').getForCollector(that.params.popid);
                        $.map(filters, function(filter) {
                            Jane.Handler.doAll(['do-filters-delete'], { id: filter.filid });
                        });
                        // кэш фильтров
                        Jane.$H("filters").clearCache();

                        Jane.events.trigger('onCollectorEditSuccess.' + that.owner, {popid: that.params.popid});

                    } else {
                        that.onCollectorSaveFail();
                    }

                    that.clear();
                }
            );
        }
    });

    /**
     * Переопределение поведения чекера для кнопки "Сохранить изменения"
     */
    var Creator = $.extend({}, Checker, {
        type: 'create',
        onCollectorCheckSuccess: function() {
            var that = this;

            Jane.Handler.doAll(
                ["do-collector-create", "collectors"],
                that.params,
                function(data) {
                    // смотрим насколько удачно выполнился запрос
                    var popid = jpath(data, '.handlers[.name == "do-collector-create"].data.body.popid').shift();

                    // переход на страницу созданного сборщика
                    if (popid) {
                        // Гамификация
                        Jane.logUserActivity({ 'activity[verb]': 'mail.collector' });

                        Jane.events.trigger('onCollectorCreateSuccess.' + that.owner, {popid: popid, email: that.params.email});
                        Jane.ErrorLog.send({collector_create: that.params['server']});
                        that.clear();
                    } else {
                        var error = jpath(data, '.handlers[.name == "do-collector-create"].error').shift();
                        var reason = error ? error.reason : '';

                        that.clear();

                        if (reason == 'rpop from himself error' || reason == 'dublicate error') {
                            var errorCode = {
                                'rpop from himself error': 'this_server_belongs_to_yandex',
                                'dublicate error': 'duplicated'
                            }[reason];
                            var msg = sstatus(that.form, errorCode, 'create', [that.params.server, that.params.login]);
                            msg.removeClass('g-hidden');
                        }

                        that.onCollectorSaveFail();
                    }
                }
            );
        }
    });

    /* ../../js/components/collectors.settings.js begin */

/**
 * Инициализация настроек
 * Объект, отвечающий за настройки сборщика, такие, как логин, пароль, параметры соединеия с сервером а также за их валидацию и заполнение известными занчениями
 * @param {jQuery} node jquery объект формы настроек
 */
function Settings(node) {
    node.data('settings', this);

    // @param {jQuery} node jquery объект формы настроек
    this.node = node;

    var that = this;

    this.getControl('login').on('nb-changed', function() {
        that.validate(this.getName());
    });

    this.getControl('password').on('nb-changed', function() {
        that.validate(this.getName());
    });

    this.getControl('server').on('nb-changed', function() {
        that.validate(this.getName());
    });

    this.getControl('port').on('nb-changed', function() {
        that.validate(this.getName());
    });

    this.getControl('email').on('nb-changed', function() {
        that.validate(this.getName());
        // изменение параметров подключения при изменении email
        that.onSettingsChange(true);
    });

    // изменение параметров подключения при выборе SSL
    this.getControl('use_ssl').on('nb-changed', function() {
        that.onSettingsChange();
    });

    // изменение параметров подключения при выборе протокола
    this.getControl('protocol').on('nb-changed', function() {
        var isImap = this.getState().value === 'imap';
        var fMoveFolder = that.getControl('move_folder');
        var fUseSSL = that.getControl('use_ssl');
        var noDeleteMsgFieldWrap = that.getControl('no_delete_msg').$node.closest('.b-form-layout__line');

        if (isImap) {
            if (fUseSSL) {
                fUseSSL.check();
            }

            if (fMoveFolder) {
                fMoveFolder.disable();
            }

            noDeleteMsgFieldWrap.addClass('g-hidden');
        } else {
            if (fMoveFolder) {
                fMoveFolder.enable();
            }

            noDeleteMsgFieldWrap.removeClass('g-hidden');
        }

        that.onSettingsChange();
    });
}

Settings.prototype = {
    /**
     * Неймспейс с которым биндятся события
     */
    ns: '.collectorsettings',

    /**
     * Элемент блока
     * @type $
     */
    node: null,

    /**
     * Возвращает поле по name
     * @param name
     * @type $
     */
    fields: null,

    /**
     * @param {string} type тип ошибки
     * @param {string} name название поля
     * @return {jQuery}
     */
    _fieldError: function(type, name) {
        return this.node.find('.b-notification_error-' + type + '_' + name);
    },

    /**
     * Чистит всё от себя
     */
    destroy: function() {
        this.node.unbind(this.ns);
        this.node.data('settings', null);
    },

    getControl: function(name) {
        var control = $('[name=' + name + ']', this.node).closest('.nb-input,.nb-select,.nb-checkbox').get(0);
        return control ? nb.block(control) : null;
    },

    getEmailSettings: function(email, useProtocol, useSSL) {
        var dfd = $.Deferred();

        if (!email) {
            return dfd.rejectWith(this);
        }

        var e = email.split('@');
        var login = e[0] || null;
        var domain = e[1] || null;

        if (!login || !domain) {
            return dfd.rejectWith(this);
        }

        var dd = Jane.$H('collector-settings').getByDomain(domain, useProtocol, useSSL);

        if (dd) {
            return dfd.resolveWith(this, [dd, email, login]);
        }

        Jane.Handler.doAll([ 'is-yandex-user' ], { email: email }, function(data) {
            // если является пользователем ПДД, то нужно янедксовые сервера вписать
            if (jpath(data, '.handlers[.name == "is-yandex-user"].data.y')[0] === 'yes') {
                var dd = Jane.$H('collector-settings').getByDomain('yandex.ru', useProtocol, useSSL);
                if (dd) {
                    dd.pdd = true;
                    dfd.resolveWith(this, [dd, email, login]);

                } else {
                    dfd.rejectWith(this);
                }

                // если и пользователем ПДД не является, то нужно очистить форму
            } else {
                dfd.rejectWith(this);
            }

        }.bind(this));

        return dfd.promise();
    },

    /**
     * Изменение SSL или протокола
     */
    onSettingsChange: function(resetDefault) {
        var email = this.getControl('email').getValue().toLowerCase();
        var useSSL = this.getControl('use_ssl').isChecked();
        var useProtocol = this.getControl('protocol').getState().value;

        if (resetDefault) {
            useProtocol = null;
            useSSL = null;
        }

        var defaultDD = Jane.$H('collector-settings').getDefaultConfig(useProtocol, useSSL);

        if (email && this.validate('email')) {
            this.getEmailSettings(email, useProtocol, useSSL)
                .done(function(dd, email, login) {
                    dd = $.extend({}, defaultDD, dd);
                    this.fillAll(dd, email, login);
                })
                .fail(function() {
                    this.fillAll(defaultDD);
                    this.onEmpty();
                });

        } else {
            this.fillAll(defaultDD);
        }
    },

    fillAll: function(domainData, email, login) {
        this.fill(domainData, email, login);

        if (!Daria.IS_CORP) {
            var copyFolders = this.getControl('copy_folders');

            if (copyFolders) {
                if (domainData.useProtocol === 'imap') {
                    copyFolders.enable().check();
                } else {
                    copyFolders.uncheck().disable();
                }
            }
        }
    },

    /**
     * Заполнение формы настройками из нашего файла
     * @param {Object} domainData
     * @param {String} email имя ящика
     * @param {String} login
     */
    fill: function(domainData, email, login) {
        // обработчик успешного заполнения формы настройками
        this.onFill();

        /*
        // Если домен принадлежит яндексу - нужно задизейблить чекбокс
        // "сохранять оригиналы писем в ящике"
        // если вдруг предыдущий домен был "наш" нужно раздизейблить чекбокс
        if (!!domainData['is-own']) {
            this.getControl('no_delete_msg').disable().check();
        } else {
            this.getControl('no_delete_msg').enable().uncheck();
        }
        */

        var server = domainData.server || '';
        if ($.isArray(server)) {
            server = domainData.server[0].name;
        }

        login = (domainData.tpl === 'login' ? login : email) || '';

        // заполнение формы для известного нам домена
        this.getControl('login').setValue(login);

        this.getControl('protocol').setState({ value: domainData.useProtocol });
        this.getControl('server').setValue(server);
        this.getControl('port').setValue(domainData.port);
        if (domainData.useSSL) {
            this.getControl('use_ssl').check();
        } else {
            this.getControl('use_ssl').uncheck();
        }

        this.node.data('pddDomain', !!domainData.pdd);
    },

    /**
     * Обработчик успешного заполнения настройками
     */
    onFill: function() {
        this.toggleServerSettingsBlock(false);
    },

    /**
     * @desc
     * Скрывает/Показывает блок с настройками
     * для сборщика
     *
     * @param {Boolean} show Если true то показываем блок
     */
    toggleServerSettingsBlock: function(show) {
        this.node.find('.b-form-layout__block_server-settings').toggleClass('g-hidden', !show);
    },

    /**
     * Очистка формы от настроек
     */
    empty: function() {
        var dd = Jane.$H('collector-settings').getDefaultConfig();

        // очистка формы, на случай, если до этого пользователь вводил известные нам домены
        this.getControl('login').setValue('');
        this.getControl('server').setValue('');
        this.getControl('port').setValue(dd.port);
        this.getControl('protocol').setState({ value: dd.useProtocol });
        if (dd.useSSL) {
            this.getControl('use_ssl').check();
        } else {
            this.getControl('use_ssl').uncheck();
        }

        // если вдруг предыдущий домен был "наш" нужно раздизейблить чекбокс
        // и поставить галочку по умолчанию
        this.getControl('no_delete_msg')
            .enable()
            .check();

        // DARIA-30520 - Скрывать или дизейблить чек-бокс
        if (!Daria.IS_CORP) {
            var copyFolders = this.getControl('copy_folders');
            if (copyFolders) {
                copyFolders.uncheck().disable();
            }
        }

        // обработчик очистки формы
        this.onEmpty();
    },

    /**
     * Обработчик очистки формы от настроек
     */
    onEmpty: function() {
        this.toggleServerSettingsBlock(true);
    },

    /**
     * Патерны валидации для полей
     * @param fieldName
     */
    validationPatterns: {
        email: {test: Jane.FormValidation.checkEmail.bind(Jane.FormValidation)},
        password: /.+/,
        login: /.+/,
        server: /^[0-9A-Za-zА-ЯЁа-яё\-]+(\.[0-9A-Za-zА-ЯЁа-яё\-]+)*$/,
        port: /^\d+$/,
        protocol: /^(pop|imap)$/
    },

    /**
     * Проверяет указанное поле или все поля, если параметр не передан
     * и выводит сообщение об ошибке в случае, если поле не прошло валидацию
     * @param {String} fieldName
     * @return Boolean
     */
    validate: function(fieldName) {
        var that = this;
        var valid = true;

        /**
         * Валидирует поле и выводит сообщение об ошибке в случае, если оно не валидно
         * @param {String} fieldName
         * @param {Boolean} focusOnError поставить фокус в ошибочное поле
         * @return Boolean
         */
        var validateField = function(fieldName, focusOnError) {
            var valid = true;
            var field = that.getControl(fieldName);
            var fType = field.getType();
            var fieldValue;

            // из валидируемых полей (кроме пароля!) вырезаются пробелы
            if (fieldName !== 'password' && fType === 'input') {
                field.setValue(field.getValue().replace(/\s/g, ''));
            }

            if (fType === 'input' || fType === 'checkbox') {
                fieldValue = field.getValue();
            } else if (fType === 'select') {
                fieldValue = field.getState().value;
            }

            // если паттерн есть, а поле пустое, то нужно показать ошибку
            // о необходимости заполнить поле
            if (that.validationPatterns[fieldName]) {
                if (!fieldValue) {
                    that._fieldError('pattern', fieldName).addClass('g-hidden');
                    that._fieldError('required', fieldName).removeClass('g-hidden');
                    valid = false;

                } else if (!that.validationPatterns[fieldName].test(fieldValue)) {
                    that._fieldError('pattern', fieldName).removeClass('g-hidden');
                    that._fieldError('required', fieldName).addClass('g-hidden');
                    valid = false;

                } else {
                    that._fieldError('pattern', fieldName).addClass('g-hidden');
                    that._fieldError('required', fieldName).addClass('g-hidden');
                }
            }

            // так как проверка осуществляется на onchange, то она происходит до блюра,
            // значит и фокус мы ставим до блюра, поэтому нужен таймаут, чтобы блюр успел сработать
            // и мы вернули фокус обратно
            return valid ? true : !!focusOnError && setTimeout(function() {
                field.focus();
            }, 1) && false;
        };

        // если передано имя поля, то валидируется только оно
        if (fieldName) {
            valid = validateField(fieldName);

            // иначе валидируются все поля, на которые есть патерны
        } else {
            var needFocus = true;
            for (var name in this.validationPatterns) {
                needFocus = valid = validateField(name, needFocus) ? valid : false;
            }
        }

        return valid;
    }
};


/* ../../js/components/collectors.settings.js end */


    Daria.Collectors = {
        Settings: Settings,
        Checker: Checker,
        Creator: Creator,
        Editor: Editor,
        getStatusMessage: getStatusMessage
    };

}(Daria));

/* ../../js/components/collectors.js end */

    /* ../../js/components/nb-dependence-controller.js begin */
(function() {

    /**
     * Контроллер зависимостей
     */
    Daria.NbDependenceController = function($root, instance) {
        return this.init($root, instance);
    };

    Daria.NbDependenceController.prototype = {
        /**
         * Кэш с зависимыми контролами вида
         * <code>
         *      [
         *          {
         *              block: parentControlName
         *              ids: {
         *                  id1: true|false,
         *                  id2: true|false,
         *                  ...
         *              },
         *              names: {
         *                  id2: name1,
         *                  id3: name2,
         *                  ...
         *              }
         *          },
         *          ...
         *      ]
         * </code>
         * @param root
         */
        cache: null,

        /**
         * id экземпляра - используется в событиях
         * @type String
         */
        instanceId: null,

        /**
         * Инициализация контроллера
         * @param {$} $root
         * @param {String} instance
         */
        init: function($root, instance) {
            var that = this;
            this.cache = [];
            this.instanceId = instance;

            // если есть кого контролировать
            var dependences = $root.find('.daria-dependence-child');
            if (!dependences.length) {
                return;
            }

            // сначала дети - потом родители - ПОРЯДОК ВАЖЕН!
            dependences.each(function() {
                var block = nb.block(this);
                if (block) {
                    that.add(
                        this.getAttribute('dependence-child-id').split(','),
                        block
                    );
                }
            });

            $root.find('.daria-dependence-parent')
                .each(function() {
                    var block = nb.block(this);
                    if (block) {
                        that.add(
                            this.getAttribute('dependence-parent-id'),
                            block,
                            block.getName(),
                            block.getType() === 'radio'
                        );

                        block.on('nb-changed', $.proxy(that.onBlockChange, that));
                    }
                });

            // бинд на ручное изменение родителя
            this.onDependenceChange = Jane.events.bind('dependence.change', this.onDependenceChange.bind(this));
        },

        destroy: function() {
            Jane.events.unbind('dependence.change', this.onDependenceChange);

            var that = this;
            $.each($.makeArray(this.cache), function() {
                if (this.block) {
                    this.block.off('nb-changed', $.proxy(that.onBlockChange, that));
                }
            });

            this.cache = null;
        },

        onDependenceChange: function(evt, data) {
            // стригерился эвент не для этого инстанса
            if (data.instance != this.instanceId) {
                return;
            }

            // может быть передан как контрол
            if (data.block) {
                this.update(
                    data.block.$node.attr('dependence-parent-id'),
                    this._blockDisabled(data.block)
                );

            } else if (data.id && ('disable' in data)) {
                // так и сразу id родителя и что с ним произошло (задизейблен он или раздизейблен)
                this.update(data.id, data.disable);
            }
        },

        onBlockChange: function(nameEvent, block) {
            this.update(block.$node.attr('dependence-parent-id'), this._blockDisabled(block));
        },

        /**
         * Добавление зависимостей в кэш
         * @param {String|Array} id
         * @param {nb.block} block
         * @param {String} name если есть имя, то это parent, иначе child
         * @param {boolean} radio   Флаг является ли этот контрол радиобаттоном
         */
        add: function(id, block, name, radio) {
            // сначала добавляются все дети
            if (!name) {
                this.cache.push({
                    block: block,
                    names: {},
                    // disable by
                    // Список айдишников родителей, по которым контрол надо дизейблить
                    // если хотябы один из них true, то контрол дизейблится
                    // эти айдишники указываются в @dependence-child-id через запятую
                    ids: (function() {
                        var ids = {};
                        for (var i = id.length; i--;) {
                            ids[id[i]] = true;
                        }
                        return ids;
                    })()
                });

            } else {
                // потом к ним подклеиваются неймы родителей, которые выступают, как unique-id
                // проверяется состояние родителя
                var disable = this._blockDisabled(block);
                // все зависимости данного id
                var items = this._getItems(id);
                // если есть такие зависимости
                if (items.length) {
                    $.each(items, function(i, o) {
                        // для радиобаттонов говорится, что данный id зависит от name
                        // т.е. группа id имеет общий name и в рамках этого name-а
                        // может быть только один раздизейбленный контрол
                        if (radio) {
                            o.names[name] = id;
                        }
                        // обновляется значение id-шника (disable by) в зависимости от состояния родителя
                        o.ids[id] = disable;
                    });
                } else {
                    // если таких зависимостей нет (и не будет, т.к. сначала добавлялись зависимости)
                    // фиктивный айтем
                    // используется когда есть зависимость по нейму в целом,
                    // но для данного id зависимого контрола нет
                    var fakeItem = { ids: {}, names: {}};
                    fakeItem.ids[id] = disable;
                    fakeItem.names[name] = id;
                    this.cache.push(fakeItem);
                }
            }
        },

        /**
         * У одного id может быть несколько зависимостей -
         * возвращает всех детей, зависящих от переданного id
         * @param {String} id
         */
        _getItems: function(id) {
            var items = [];
            for (var i = this.cache.length; i--;) {
                if (id in this.cache[i].ids) {
                    items.push(this.cache[i]);
                }
            }

            return items;
        },

        /**
         * Проверяет чекнутость с учётом инвертного поведения
         * @param {nb.block} block
         */
        _blockDisabled: function(block) {
            var disabled = (block.$node.attr('dependence-parent-type') === 'invert' ? true : false);
            return (block.isChecked() === disabled);
        },

        /**
         * Возвращает набор зависимостей и тёсок
         * <code>
         *  {
         *      items: [cacheItem1, ...],        // айтемы над которыми надо произвести действия
         *                                      // (задизейблить/раздизейблить в зависимости от переданного id)
         *      hewings: [cacheItem2, ...],     // тёски - они зависят от того же name, что и айтемы
         *      names: [name1, ...]             // неймы, по которым найдены тёски
         *  }
         * </code>
         * @param {String} id
         * @return  {Array} Object.items
         *          {Array} Object.hewings
         *          {Array} Object.names
         */
        _getSet: function(id) {
            // все зависимости
            var items = this._getItems(id);
            // все неймы, от которых зависят айтемы, зависящие от переданного id
            var itemsNames = $.map(items, function(item) {
                for (var name in item.names) {
                    if (item.names[name] == id) {
                        return name;
                    }
                }
            });

            var names = [];
            var hewings = [];

            function generateIterator(cacheItem) {
                return function(i, name) {
                    if (name in cacheItem.names) {
                        hewings.push(cacheItem);
                        names.push(name);
                    }
                };
            }

            // собираются все зависимости по нейму
            for (var i = this.cache.length; i--;) {
                var cacheItem = this.cache[i];
                // если это не уже отобранный айтем
                if (!(id in cacheItem.ids)) {
                    $.each(itemsNames, generateIterator(cacheItem));
                }
            }

            return {items: items, hewings: hewings, names: names};
        },

        /**
         * Обновление зависиости и тёсок зависемостей по id родителя
         * @param {String} id
         * @param {Boolean} disable
         */
        update: function(id, disable) {
            var set = this._getSet(id);

            $.each(set.items, function(i, o) {
                this._update(id, o, disable, set.names);
            }.bind(this));

            $.each(set.hewings, function(i, o) {
                this._update(id, o, !disable, set.names);
            }.bind(this));
        },

        /**
         * На основе переданных параметров раздизейбливает или раздизейбливает айтем
         * @param {String} id
         * @param {Object} item
         * @param {Boolean} disable
         * @param {Array} names
         */
        _update: function(id, item, disable, names) {
            var ids = item.ids;
            // глобальное решение дизейблить или нет
            var _disable = false;

            // проверка зависимостей по нейму
            $.each(names, function(i, name) {
                if (name in item.names) {
                    ids[item.names[name]] = disable;
                }
            });

            // проверка зависимостей по id
            if (id in ids) {
                ids[id] = disable;
            }

            // перебираются все айдишники "disable by"
            for (var j in ids) {
                // если найдена хотябы одна причина дизейблить - принимается глобальное решение "задизейблить"
                if (ids[j]) {
                    _disable = true;
                    break;
                }
            }

            // изменение отображения контрола в зависимости от глобального решения
            if (item.block) {
                this._updateBlock(item.block, _disable);
            }
        },

        /**
         * Визуализирует задизейбливание/раздизейбливание контрола
         * @param {nb.block} block
         * @param {Boolean} disable
         */
        _updateBlock: function(block, disable) {
            block.$node.closest('.b-form-element').toggleClass('b-form-element_disabled', disable);

            // Если у контрола есть зависимости, то при его задизейбливании снимаем галку и триггерим на нём изменение
            // (в обратную сторону не должно работать)
            if (block.isChecked && block.isChecked() && block.$node.hasClass('daria-dependence-parent') && disable) {
                block.uncheck();
                Jane.events.trigger('dependence.change', {
                    block: block,
                    instance: this.instanceId
                });
            }

            //Сначала uncheck, если надо, потом disable. Дизейбленный блок нельзя uncheck'нуть.
            if (disable) {
                block.disable();
            } else {
                block.enable();
            }
        }
    };

})();


/* ../../js/components/nb-dependence-controller.js end */

    /* ../../js/components/social-avatars.js begin */
(function(Daria, Jane) {

    /**
     * Кеш для хранения аватарок.
     * @type {Object}
     * @example
     *      {
     *          email: {
     *              url: 'http://avatar',
     *              ref: '09124982458y49u'
     *          }
     *      }
     */
    var CACHE = {};

    /**
     * SocialAvatars
     * @constructor
     */
    var SocialAvatars = function(node, params) {

        this.monitoring = {
            type: 'socialavatars',
            total: 0,
            social: 0,
            types: 0,
            avatars: 0,
            company: 0,
            noavatar: 0,
            monograms: 0
        };

        this.node = node;
        this.refs = [];
        this.cache = {};
        this.params = params || Jane.Page.params || {};
        this.emails = [];
        this.placeholder = '.js-social-avatar';
        this.corpsrc = '//center.yandex-team.ru/api/v1/user/%login%/avatar/';

        var hFolders = Jane.$H('folders');

        this.fid = jpath(params, 'current_folder')[0] || jpath(Daria, 'Page.params.current_folder')[0] || jpath(Daria, 'Page.params.fid')[0] || "";

        this.direction = hFolders.isFolder(this.fid, ["sent", "draft"]) ? "hdr_to" : "hdr_from";
        this.title = i18n('%Все_письма_с_этого_адреса');

        if (this.fid && hFolders.isFolder(this.fid, ['spam', 'trash', 'template']) && !Jane.Page.params.excluded) {
            return;
        }

        if (this.direction == "hdr_to") {
            this.title = i18n('%Все_письма_на_этот_адрес');
        }

        var handlers = ['service-emails', 'second-level-zones'];
        var that = this;

        _.defer(function() {
            Jane.Handler.getAll(handlers, {}, function() {
                that.getEmails();
                that.createCache();
                that.showCached();

                if (Daria.IS_CORP) {
                    that.loadCorpAvatars().always(function() {
                        that.loadAvatars().then(that.cleanTitles.bind(that));
                    });
                } else {
                    that.loadAvatars().then(that.cleanTitles.bind(that));
                }
            });
        });
    };


    var proto = SocialAvatars.prototype;

    proto.createCache = function() {
        var refs = this.refs;
        var cache = this.cache;
        var monitoring = this.monitoring;
        var params = this.params;
        var emailsList = [];

        var hMessage = Jane.$H('message');
        var hFolders = Jane.$H('folders');
        var hServiceEmails = Jane.$H('service-emails');

        $.each(this.emails, function(id, o) {
            var field = 'from';
            if (!params.thread_id) {
                var fid = params.current_folder || hMessage.getFolderId(id);
                if (fid && hFolders.isFolder(fid, ['sent', 'draft', 'outbox'])) {
                    field = 'to';
                }
            }

            if (Daria.Page.type == 'message') {
                field = 'from';
            }

            $.each(o, function(i, e) {
                // если данные пришли из messages-thread-participants, то там нет e['to']
                // берем то, что есть — e['from']
                var from = e[field] || e['from'];
                var email = from && from.email;

                if (email) {
                    emailsList.push(email);
                }

                var social = e.social;

                if (email && !social) {
                    var selector = '.' + (id.charAt(0) === 't' ? id.replace(/^t/, 'tid-') : 'mid-' + id);

                    if (cache[email]) {
                        // Если email уже был записан в кэш, то добавим в email селектор
                        cache[email].ids.push(selector);
                    } else {
                        cache[email] = {
                            ids: [selector],
                            ref: from.ref
                        };

                        if (!CACHE[email] && from.ref && !hServiceEmails.is(email)) {
                            refs.push(from.ref + ':' + email);
                        }
                    }
                } else if (social && o.company) {
                    monitoring.company++;
                } else if (social && o.dlid) {
                    monitoring.social++;
                } else if (social && o.dtype) {
                    monitoring.types++;
                }

                monitoring.total++;
            });
        });

        if (emailsList.length) {
            Jane.ErrorLog.send({ emailslist: emailsList.join(',') });
        }

    };

    /**
     * Убираем атрибут title у сдвоенных аватарок после их вставки
     */
    proto.cleanTitles = function() {
        $(this.node).find('.b-messages__icon-thread-wrapper .b-messages__icon__image').removeAttr('title');
    };

    proto.showCached = function() {
        var that = this;
        var cache = this.cache;
        var monitoring = this.monitoring;

        var idsObj = {length: 1};
        $.each(cache, function(email, cached) {
            var CACHED = CACHE[email];
            if (CACHED) {
                var selector = that.placeholder + '_' + cached.ref;

                if (CACHED.url === 'noavatar') {
                    monitoring.noavatar += (cached.ids || idsObj).length;
                    that.insertAvatar(cached.ids, that.getIcon('noavatar'), true, selector);
                } else {
                    monitoring.noavatar += (cached.ids || idsObj).length;
                    that.insertAvatar(cached.ids, that.getAvatar(CACHED.url, email), true, selector);
                }

                delete cache[email];
            }
        });
    };

    proto.loadAvatars = function() {
        var that = this;

        var deferred = new $.Deferred();

        var params = Jane.$H('social-avatars').uniq({
            refs: that.refs
        }, {});

        Jane.Handler.getAll(['social-avatars'], params, function() {
            that.showAvatars(params);
            that.showPlaceholders();

            deferred.resolve();
        }, { loader: null });

        return deferred.promise();
    };

    proto.showAvatars = function(params) {
        var that = this;
        var cache = this.cache;
        var monitoring = this.monitoring;
        var data = Jane.$H('social-avatars').getCacheByParams(params);

        $.each(data.avatar, function(i, avatar) {
            var url = avatar.url;
            var email = avatar.email;
            if (cache[email] && !Daria.isCorpEmail(email)) {
                var selector = that.placeholder + '_' + avatar.ref;
                monitoring.avatars += cache[email].ids.length;

                that.insertAvatar(cache[email].ids, that.getAvatar(url, email, avatar.ref), true, selector);

                CACHE[email] = { url: url, ref: avatar.ref };
                delete cache[email];
            }
        });
    };

    proto.loadCorpAvatars = function() {
        var that = this;
        var def = $.Deferred();
        var count = 0;
        var currents = 0;

        var hServiceEmails = Jane.$H('service-emails');

        function check() {
            if (count == currents) {
                def.resolve();
            }
        }

        $.each(that.cache, function(email, cached) {
            if (Daria.isCorpEmail(email) && !hServiceEmails.is(email)) {
                var login = email.split('@')[0];
                var url = location.protocol + that.corpsrc.replace('%login%', login) + '36.jpg';
                var selector = that.placeholder + '_' + cached.ref;
                if (CACHE[login]) {
                    that.insertAvatar(cached.ids, that.getCorpAvatar(url, email, cached.ref), true, selector);
                } else if (!(login in CACHE)) {
                    var avatar = new Image();
                    count += 1;
                    avatar.onload = function() {
                        CACHE[login] = true;
                        that.insertAvatar(cached.ids, that.getCorpAvatar(url, email, cached.ref), true, selector);
                        currents += 1;
                        check();
                    };
                    avatar.onerror = function() {
                        CACHE[login] = false;
                        currents += 1;
                        check();
                    };
                    avatar.src = url;
                }
            }
        });
        check();
        return def.promise();
    };

    proto.showPlaceholders = function() {
        var that = this;

        var cache = this.cache;
        var monitoring = this.monitoring;
        var noavatarString = this.getIcon('noavatar');

        var hUserEmails = Jane.$H('user-emails');
        var hServiceEmails = Jane.$H('service-emails');

        $.each(cache, function(email, cached) {
            if (!hServiceEmails.is(email) && hUserEmails.is(email)) {
                monitoring.noavatar += cached.ids.length;
                CACHE[email] = { url: 'noavatar', ref: cached.ref };

                that.insertAvatar(cached.ids, noavatarString, true, that.placeholder + '_' + cached.ref);
            } else {
                CACHE[email] = false;
            }
        });

        monitoring.monograms = monitoring.total - (monitoring.noavatar + monitoring.social + monitoring.types + monitoring.avatars + monitoring.company);
        this.sendMonitoring();
    };

    proto.getCorpAvatar = function(url, email) {
        var fid = this.fid;
        var direction = this.direction;
        var title = this.title;

        var image = '<img title="' + title + '" class="b-messages__icon__image" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '" />';
        var search = '#search/request=' + encodeURIComponent(email) + '&scope=' + direction;

        if (direction == "hdr_to") {
            search += '&fid=' + fid;
        }

        if (email) {
            return '<a href="' + search + '">' + image + '</a>';
        }

        return image;
    };

    proto.getAvatar = function(url, email) {
        var fid = this.fid;
        var direction = this.direction;
        var title = this.title;

        var search = '#search/request=' + encodeURIComponent(email) + '&scope=' + direction;

        if (direction == "hdr_to") {
            search += '&fid=' + fid;
        }

        var image = '<img title="' + title + '" class="b-messages__icon__image" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '/face-contact" />';

        if (email) {
            return '<a href="' + search  + '">' + image + '</a>';
        } else {
            return image;
        }
    };

    proto.getIcon = function(type) {
        if (type == 'noavatar') {
            return '<span class="b-ico b-ico_service b-ico_noavatar"></span>';
        }
    };

    proto.insertAvatar = function(ids, node, replace, iconselector) {
        if (ids) {
            var iconSelector = iconselector || this.placeholder;

            if (ids.length) {
                var selector = $.map(ids, function(id) { return id + ' ' + iconSelector; }).join(',');
                var fallbackSelector = $.map(ids, function(id) { return id + ' .js-social-avatar'; }).join(',');

                var $insertNode = $(node);
                var $insertNodeWithoutLink = $insertNode.clone();
                var $searchLink = $insertNodeWithoutLink.find('a');
                $searchLink.replaceWith($searchLink.children());

                var $nodes = $(this.node).find(selector);
                if (!$nodes.length) {
                    $nodes = $(this.node).find(fallbackSelector);
                }

                $nodes.each(function(i, node) {
                    var $node = $(node);
                    var insideLink = $node.parents('a').length > 0;
                    $node[replace ? 'replaceWith' : 'html'](insideLink ? $insertNodeWithoutLink.clone() : $insertNode.clone());
                });
            }
        }
    };

    proto.sendMonitoring = Daria.nop;

    Daria.SocialAvatars = function(node, params) {
        new SocialAvatars(node, params);
    };

    Daria.SocialAvatars.Constructor = SocialAvatars;

    Daria.SocialAvatars.AVATAR_CACHE = CACHE;

    Daria.SocialAvatars.error = function(node) {
        node.onerror = null;
        Jane.ErrorLog.sendException('socialavatars.error.noimg');
    };

    Daria.SocialAvatars.onerror = function(node) {
        Daria.SocialAvatars.error(node);
        $(node).closest('.js-social-avatar')
            .replaceWith('<span class="b-ico b-ico_service b-ico_noavatar"></span>');
    };


    /* --------------------------------------------------------------------- */

    /* ../../js/components/social-avatars-messages.js begin */
(function() {

    var AVATAR_CACHE = Daria.SocialAvatars.AVATAR_CACHE;

    /**
     * Messages
     * @constructor
     */
    var SA_Messages = Jane.extendClass(Daria.SocialAvatars.Constructor);
    var baseProto = Daria.SocialAvatars.Constructor.prototype;


    SA_Messages.prototype.getAvatar = function(url, email, ref) {
        var $html = $(baseProto.getAvatar.call(this, url, email));

        if ($html.is('A')) {
            var classToAdd = ref ? 'js-social-avatar js-social-avatar_' + ref : 'js-social-avatar';
            return $('<span>').addClass('b-messages__icon ' + classToAdd).append($html);
        }
        return $html;
    };

    SA_Messages.prototype.getCorpAvatar = function(url, email, ref) {
        var $html = $(baseProto.getCorpAvatar.call(this, url, email));

        if ($html.is('A')) {
            var classToAdd = ref ? 'js-social-avatar_' + ref : 'js-social-avatar';
            return $('<span>').addClass('b-messages__icon ' + classToAdd).append($html);
        }
        return $html;
    };

    SA_Messages.prototype.showAvatars = function(params) {
        var that = this;
        var cache = this.cache;
        var monitoring = this.monitoring;
        var data = Jane.$H('social-avatars').getCacheByParams(params);

        $.each(data.avatar, function(i, avatar) {
            var url = avatar.url;
            var email = avatar.email;
            var ref = avatar.ref;
            if (cache[email] && !Daria.isCorpEmail(email)) {
                var selector = that.placeholder + '_' + ref;
                monitoring.avatars += cache[email].ids.length;

                that.insertAvatar(cache[email].ids, that.getAvatar(url, email, ref), true, selector);

                AVATAR_CACHE[email] = {
                    url: url,
                    ref: ref
                };

                delete cache[email];
            }
        });
    };

    SA_Messages.prototype.getEmails = function() {
        var mails = Jane.$H('messages').getCacheByParams(this.params);
        var result = {};

        if (mails && mails.message) {
            $.map(mails.message, function(email) {
                var item = {};

                var key = (email.count ? 't' : '') + email.mid;
                result[key] = [];

                if (email.count > 1 && Daria.layout === '2pane') {
                    var hThreadParticipants = Jane.$H('messages-thread-participants');
                    var participants = jpath(hThreadParticipants.getCacheByParams({'tids': email.mid}), '.threads.participants')[0];
                    if (participants) {
                        // берем двух первых участников
                        participants = participants.slice(0, 2);
                        $.each(participants, function(i, p) {
                            item = {
                                social: !!(p.dlid || p.dtype),
                                dlid: !!(p.dlid),
                                dtype: !!(p.dtype),
                                company: !!(email.dtype && email.dtype.name == 's-company')
                            };

                            item['from'] = { ref: jpath(p, '.from.ref')[0], email: jpath(p, '.from.email')[0] };
                            result[key].push(item);
                        });
                    }
                }

                // если какая-то проблема с кешем участников, фолбечимся на старое поведение
                if (typeof item.social === 'undefined') {
                    item = {};

                    item.social = !!(email.dlid || email.dtype);
                    item.dlid = !!(email.dlid);
                    item.dtype = !!(email.dtype);
                    item.company = !!(email.dtype && email.dtype.name == 's-company');

                    $.each(email.field, function(i, field) {
                        // записываем только первого участника по типу
                        if (typeof item[field.type] === 'undefined') {
                            item[field.type] = { ref: field.ref, email: field.email };
                        }
                    });

                    result[key].push(item);
                }

            });
        }

        this.emails = result;
    };

    SA_Messages.prototype.sendMonitoring = function() {
        if (!Daria.IS_CORP) {
            Jane.ErrorLog.send(this.monitoring);
        }
    };

    Daria.SocialAvatars.Messages = Daria.SocialAvatarsMessages = function(node, params) {
        new SA_Messages(node, params);
    };

    Daria.SocialAvatars.Messages.Constructor = SA_Messages;


    /**
     * MessageThread
     * @constructor
     */
    var SA_MessageThread = Jane.extendClass(SA_Messages);

    SA_MessageThread.prototype.getEmails = function() {
        var that = this;
        that.emails = Jane.$H('messages').getEmails(this.params);

        // приводим данные к необходимому формату
        _.forEach(this.emails, function(obj, key) {
            that.emails[key] = [obj];
        });
    };

    Daria.SocialAvatars.MessageThread = Daria.SocialAvatarsMessageThread = function(node, params) {
        new SA_MessageThread(node, params);
    };

})();

/* ../../js/components/social-avatars-messages.js end */


    /* ../../js/components/social-avatars-message.js begin */
(function() {

    /**
     * Message
     * @constructor
     */
    var SA_Message = Jane.extendClass(Daria.SocialAvatars.Constructor);

    SA_Message.prototype.getAvatar = function(url) {
        return '<img onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '/face-contact" />';
    };

    SA_Message.prototype.insertAvatar = function(ids, node, replace, iconselector) {
        if (ids) {
            var selector = iconselector || this.placeholder;
            $(this.node).find(selector)[replace ? 'replaceWith' : 'html'](node);
        }
    };

    SA_Message.prototype.getCorpAvatar = function(url) {
        return '<img title="' + this.title + '" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '" />';
    };

    SA_Message.prototype.showPlaceholders = Daria.nop;

    SA_Message.prototype.getEmails = function() {
        var email = Jane.$H('message').getCacheByParams(this.params);
        var result = {};

        if (email) {
            result = {
                social: !!(email.dlid || email.dtype),
                dlid: !!email.dlid,
                dtype: !!email.dtype,
                company: !!(email.dtype && email.dtype.name == 's-company')
            };

            if (email.field && email.field.length) {
                var from = jpath(email.field, '[.type == "from"]')[0] || {};
                result['from'] = {
                    ref: from.ref,
                    email: from.email
                };
            }

            var ret = {};
            ret[email.mid] = result;
            this.emails = ret;
        } else {
            this.emails = {};
        }
    };

    Daria.SocialAvatars.Message = Daria.SocialAvatarsMessage = function(node, params) {
        new SA_Message(node, params);
    };

    Daria.SocialAvatars.Message.Constructor = SA_Message;


    /**
     * FiltersPreview
     * @constructor
     */
    var SA_FiltersPreview = Jane.extendClass(Daria.SocialAvatars.Messages.Constructor);

    Daria.SocialAvatars.FiltersPreview = Daria.SocialAvatarsFiltersPreview = function(node, params) {
        new SA_FiltersPreview(node, params);
    };
})();

/* ../../js/components/social-avatars-message.js end */


    /* ../../js/components/social-avatars-abook.js begin */
(function() {

    var AVATAR_CACHE = Daria.SocialAvatars.AVATAR_CACHE;

    /**
     * Abook
     * @constructor
     */
    var SA_Abook = Jane.extendClass(Daria.SocialAvatars.Constructor);

    SA_Abook.prototype.getEmails = function() {
        this.emails = Jane.$H('abook-contacts').getContactsEmails(this.params);
    };

    SA_Abook.prototype.createCache = function() {
        var refs = this.refs;
        var cache = this.cache;
        var emails = this.emails;

        var hServiceEmails = Jane.$H('service-emails');

        $.each(emails, function(cid, o) {
            $.each(o, function(email, ref) {
                var selector = '.abook-entry[data-cid="' + cid + '"]';

                if (cache[email]) {
                    cache[email].ids.push(selector);
                } else {
                    cache[email] = {ids: [selector], ref: ref};

                    if (!AVATAR_CACHE[email] && ref && !hServiceEmails.is(email)) {
                        refs.push(ref + ':' + email);
                    }
                }
            });
        });
    };

    SA_Abook.prototype.insertAvatar = function(ids, node) {
        var that = this;

        var selector = $.map(ids, function(id) {
            return id + ' ' + that.placeholder;
        }).join(',');

        $(this.node).find(selector).html(node);
    };

    SA_Abook.prototype.getAvatar = function(url) {
        return '<img class="b-mail-person__userpic__image" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '/middle" />';
    };

    Daria.SocialAvatars.Abook = Daria.SocialAvatarsAbook = function(node, params) {
        new SA_Abook(node, params);
    };


    /**
     * AbookPopup
     * @costructor
     */
    var SA_AbookPopup = Jane.extendClass(Daria.SocialAvatars.Message.Constructor);

    SA_AbookPopup.prototype.loadCorpAvatars = function() {
        var that = this;
        var def = $.Deferred();
        var count = 0;
        var currents = 0;

        var hServiceEmails = Jane.$H('service-emails');

        function check() {
            if (count == currents) {
                def.resolve();
            }
        }

        $.each(that.cache, function(email, cached) {
            if (Daria.isCorpEmail(email) && !hServiceEmails.is(email)) {
                var login = email.split('@')[0];
                var url = location.protocol + that.corpsrc.replace('%login%', login) + '150.jpg';

                if (AVATAR_CACHE[login]) {
                    that.insertAvatar(cached.ids, that.getCorpAvatar(url, email), true, cached.ref);

                } else if (!(login in AVATAR_CACHE)) {
                    count += 1;
                    var avatar = new Image();

                    avatar.onload = function() {
                        AVATAR_CACHE[login] = true;
                        that.insertAvatar(cached.ids, that.getCorpAvatar(url, email), true, cached.ref);
                        currents += 1;
                        check();
                    };

                    avatar.onerror = function() {
                        AVATAR_CACHE[login] = false;
                        currents += 1;
                        check();
                    };

                    avatar.src = url;
                }
            }
        });

        return def.promise();
    };

    SA_AbookPopup.prototype.getCorpAvatar = function(url) {
        return '<img onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '" />';
    };

    Daria.SocialAvatars.AbookPopup = Daria.SocialAvatarsAbookPopup = function(node) {
        new SA_AbookPopup(node);
    };

    

    /**
     * AbookPerson
     * @constructor
     */
    var SA_AbookPerson = Jane.extendClass(SA_Abook);

    SA_AbookPerson.prototype.getEmails = function() {
        this.emails = Jane.$H('abook-contacts').getContactsEmails(this.params);
    };

    SA_AbookPerson.prototype.createCache = function() {
        var emails = this.emails;
        var cache = this.cache;
        var refs = this.refs;

        $.each(emails, function(id, o) {
            $.each(o, function(email, ref) {
                cache[email] = { ids: 'none', ref: ref};
                refs.push(ref + ':' + email);
            });
        });
    };

    SA_AbookPerson.prototype.loadCorpAvatars = function() {
        var that = this;
        var def = $.Deferred();
        var count = 0;
        var currents = 0;

        var hServiceEmails = Jane.$H('service-emails');

        function check() {
            if (count == currents) {
                def.resolve();
            }
        }

        $.each(that.cache, function(email, cached) {
            if (Daria.isCorpEmail(email) && !hServiceEmails.is(email)) {
                var login = email.split('@')[0];
                var url = location.protocol + that.corpsrc.replace('%login%', login) + '36.jpg';
                if (AVATAR_CACHE[login]) {
                    that.insertCorpAvatar(cached.ids, that.getCorpAvatar(url, email), true, cached.ref);
                } else if (!(login in AVATAR_CACHE)) {
                    var avatar = new Image();
                    count += 1;
                    avatar.onload = function() {
                        AVATAR_CACHE[login] = true;
                        that.insertCorpAvatar(cached.ids, that.getCorpAvatar(url, email), true, cached.ref);
                        currents += 1;
                        check();
                    };
                    avatar.onerror = function() {
                        AVATAR_CACHE[login] = false;
                        currents += 1;
                        check();
                    };
                    avatar.src = url;
                }
            }
        });
        return def.promise();
    };

    SA_AbookPerson.prototype.insertCorpAvatar = function(ids, node) {
        if (ids == 'none') {
            $(this.node).find(this.placeholder).replaceWith(node);
        }
    };

    SA_AbookPerson.prototype.insertAvatar = function(ids, node) {
        if (ids == 'none') {
            $(this.node).find(this.placeholder).html(node).css('backgroundImage', 'none');
        }
    };

    SA_AbookPerson.prototype.getAvatar = function(url) {
        return '<img class="abook-avatar" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '/face-contact" />';
    };

    Daria.SocialAvatars.AbookPerson = Daria.SocialAvatarsAbookPerson = function(node, params) {
        new SA_AbookPerson(node, params);
    };

})();

/* ../../js/components/social-avatars-abook.js end */


    /* ../../js/components/social-avatars-suggest.js begin */
(function() {

    var AVATAR_CACHE = Daria.SocialAvatars.AVATAR_CACHE;

    /**
     * Suggest
     * @constructor
     */
    var SA_Suggest = Jane.extendClass(Daria.SocialAvatars.Constructor);

    SA_Suggest.prototype.getEmails = function() {
        this.emails = {};
        var emails = jpath(this.params, '.data[.email && .cid]')[0];

        for (var i = 0, l = emails.length; i < l; ++i) {
            var email = emails[i];

            this.emails[email.cid] = {
                email: email.email,
                ref: email.ref
            };
        }
    };

    SA_Suggest.prototype.createCache = function() {
        var refs = this.refs;
        var cache = this.cache;

        $.each(this.emails, function(cid, o) {
            cache[o.email] = {
                ids: ['.cid-' + cid],
                ref: o.ref
            };
            refs.push(o.ref + ':' + o.email);
        });
    };

    SA_Suggest.prototype.showCached = function() {
        var that = this;
        var cache = this.cache;

        $.each(cache, function(email, cached) {
            var CACHED = AVATAR_CACHE[email];
            if (CACHED) {
                if (CACHED.url !== 'noavatar') {
                    that.insertAvatar(cached.ids, that.getAvatar(CACHED.url, email), true, cached.ref);
                }

                delete cache[email];
            }
        });
    };

    SA_Suggest.prototype.insertAvatar = function(ids, node) {
        var selector = ids.join(',');
        $(this.node).find(selector).html(node);
    };

    SA_Suggest.prototype.getAvatar = function(url) {
        return '<img class="b-userpic__img" alt="" onerror="Daria.SocialAvatars.onerror(this)" src="' + url + '/face-contact" />';
    };

    SA_Suggest.prototype.showPlaceholders = Daria.nop;

    Daria.SocialAvatars.Suggest = Daria.SocialAvatarsSuggest = function(node, params) {
        new SA_Suggest(node, params);
    };

    Daria.SocialAvatars.Suggest.Constructor = SA_Suggest;


    /**
     * ContactsSuggest
     * @constructor
    */
    var SA_ContactsSuggest = Jane.extendClass(SA_Suggest);

    SA_ContactsSuggest.prototype.getAvatar = function(url) {
        return yr.run('mail-common', {
            src: url + '/face-contact'
        }, 'compose-email-suggest-item-avatar-img');
    };

    Daria.SocialAvatars.ContactsSuggest = Daria.SocialAvatarsContactsSuggest = function(node, params) {
        new SA_ContactsSuggest(node, params);
    };

    Daria.SocialAvatars.ContactsSuggest.onerror = function(node) {
        var placeholder = Jane.tt('mail-common:compose-email-suggest-item-avatar-placeholder');

        Daria.SocialAvatars.error(node);
        $(node).replaceWith(placeholder);
    };

})();

/* ../../js/components/social-avatars-suggest.js end */



    /* ../../js/components/social-avatars2.js begin */
/* global CACHE */
(function() {

    /**
     * Социальные аватарки
     * @namespace Daria.SocialAvatars2
     */
    Daria.SocialAvatars2 = {};

    /**
     * Очередь загрузки аватарок
     * @constant {Array} Daria.SocialAvatars2._queue
     * @private
     */
    Daria.SocialAvatars2._queue = [];

    /**
     * Шаблон для построения ссылки на корп. аватарку
     * @constant {String}
     */
    Daria.SocialAvatars2.SRC_CORP = '{protocol}//center.yandex-team.ru/api/v1/user/{login}/avatar/{size}.jpg';


    /**
     * Набор шаблонов для отрисовки аватарки
     * @constant
     * @enum {Function}
     */
    Daria.SocialAvatars2.TMPL = {};

    /**
     * Шаблон с серым человеком
     * Подставляется в случае ошибки регистрации аватарки или при нехватке данных.
     */
    Daria.SocialAvatars2.TMPL.DEFAULT = _.template(
        '<% if (href) { %> <a href="${ href }" target="_blank" class="js-social-avatar2 js-social-avatar_${ uid }""> <% } %>' +
            '<span class="b-ico b-ico_service b-ico_none <% if (!href) { %> js-social-avatar2 js-social-avatar_${ uid } <% } %>">' +
            '<span class="b-ico_placeholder"></span>' +
            '</span>' +
        '<% if (href) { %> </a> <% } %>'
    );

    /**
     * Шаблон для вывода монограммы
     */
    Daria.SocialAvatars2.TMPL.MONOGRAM = _.template(
        '<% if (href) { %> <a href="${ href }" target="_blank" class="js-social-avatar2 js-social-avatar_${ uid }"> <% } %>' +
            '<span class="b-ico b-ico_service b-ico_none b-ico_monogram <% if (!href) { %> js-social-avatar2 js-social-avatar_${ uid } <% } %>" style="background-image:url(${ url })">' +
            '<span class="b-ico_placeholder"></span>' +
            '</span>' +
        '<% if (href) { %> </a> <% } %>'
    );

    /**
     * Шаблон для выводе социальной аватарки
     */
    Daria.SocialAvatars2.TMPL.EMAIL = _.template(
        '<% if (href) { %> <a href="${ href }" target="_blank" class="js-social-avatar2 js-social-avatar_${ uid }"> <% } %>' +
            '<span class="b-ico b-ico_service <% if (!href) { %> js-social-avatar2 js-social-avatar_${ uid } <% } %>">' +
            '<img onerror="Daria.SocialAvatars2.onerror(this)" src="${ url }" />' +
            '</span>' +
        '<% if (href) { %> </a> <% } %>'
    );

    /**
     * Шаблон заглушка для email без аватарки
     * @constant {Function}
     */
    Daria.SocialAvatars2.TMPL.NOAVATAR = _.template(
        '<% if (href) { %> <a href="${ href }" target="_blank" class="js-social-avatar2"> <% } %>' +
            '<span class="b-ico b-ico_service <% if (!href) { %> js-social-avatar2 <% } %>">' +
            '<span class="b-ico b-ico_service b-ico_noavatar"></span>' +
            '</span>' +
        '<% if (href) { %> </a> <% } %>'
    );


    /* ../../js/components/social-avatars/avatar.js begin */
(function() {

    /**
     * Объект аватарка
     * @constructor
     * @param {Object} params
     * @param {String} [params.mid] MID письма, в котором можно получить ключ для загрузки аватарки по email
     * @param {String} [params.email] адрес для загрузки аватарки
     * @param {String} [params.name] имя объекта для вывода монограммы
     * @param {String} [params.size] размер аватарки
     * @param {String} [params.href] ссылка для перехода с аватарки
     * @throws {Error} отсутствуют права на показ аватарки
     */
    Daria.SocialAvatars2.Avatar = function(params) {

        /**
         * @property {String} uid уникальный номер аватарки, неоходим для поиска и замены в документе
         */
        this.uid = (Math.round(Math.random() * 10000) + Date.now()).toString(36);

        /**
         * @property {String} mid MID письма, в котором можно получить ключ для загрузки аватарки по email
         */
        this.mid = params.mid || Jane.Page.params.ids;

        /**
         * @property {String} email адрес для загрузки аватарки
         */
        this.email = params.email;

        /**
         * @property {String} login логин пользователя по email
         */
        this.login = undefined;

        /**
         * @property {String} name имя объекта для вывода монограммы
         */
        this.name = params.name;

        /**
         * @property {String} monogram монограмма объекта по имени
         */
        this.monogram = undefined;

        /**
         * @property {Number} size размер аватарки
         */
        this.size = params.size || 36;

        /**
         * @property {String} href ссылка для перехода с аватарки
         */
        this.href = params.href;

        /**
         * @property {Boolean} isCorp признак корпоративной почты
         */
        this.isCorp = false;


        if (this.name) {
            this.monogram = Daria.Monogram.createMonogram(this.name);
        }

        if (this.email) {
            if (Jane.FormValidation.checkEmail(this.email)) {
                this.login = this.email.split('@')[0];
                this.isCorp = Daria.isCorpEmail(this.email);

            } else {
                this.email = undefined;
            }
        }

        this._checkShowAccess();
    };

    /**
     * Проверка возможности вывода аватарок
     * FIXME(rikishi) подумать над возможностью выноса проверок дял разных групп аватарок
     * @throws {Error} письмо, для которого выводится аватарка, находится в папке "Удаленные"
     * @private
     */
    Daria.SocialAvatars2.Avatar.prototype._checkShowAccess = function() {
        if (this.mid) {
            // если письмо находится в папке "Удаленные"
            // то вместо аватарки показываем заглушку
            var message = Jane.$H('message').getCache(this.mid);
            if (message && message.fid) {
                if (Jane.$H('folders').isFolder(message.fid, [ 'trash' ])) {
                    throw new Error('Smoking folder');
                }
            }
        }
    };

    /**
     * Получение ссылки на корпоративную аватарку
     * @return {String}
     */
    Daria.SocialAvatars2.Avatar.prototype.getUrlCorp = function() {
        if (!this.isCorp) {
            return;
        }

        return Daria.supplant(Daria.SocialAvatars2.SRC_CORP, {
            protocol: location.protocol,
            login: this.login,
            size: this.size
        });
    };

    /**
     * Получение ссылки на монограмм3
     * @return {String}
     */
    Daria.SocialAvatars2.Avatar.prototype.getUrlMonogram = function() {
        if (!this.monogram) {
            return;
        }

        return Jane.Config.XSL['monograms-url'] + '/double/' + this.monogram + '.png';
    };

    /**
     * Получение ключа доступа для загрузки ссылки на аватарку по email
     * @return {String}
     */
    Daria.SocialAvatars2.Avatar.prototype.getRef = function() {
        if (!this.mid || !this.email) {
            return;
        }

        var ref = Jane.$H('message').getEmailRef(this.mid, this.email);

        if (!ref) {
            ref = Jane.$H('message-body').getEmailRef(this.mid, this.email);
        }

        return ref;
    };

})();


/* ../../js/components/social-avatars/avatar.js end */

    /* ../../js/components/social-avatars/cache.js begin */
(function() {
    /* global CACHE */

    /**
     * Объект для работы с кэшэм
     * @namespace Daria.SocialAvatars2.Cache
     */
    Daria.SocialAvatars2.Cache = {};

    /**
     * Получить текущее значение кэша
     * @return {Object}
     */
    Daria.SocialAvatars2.Cache.getData = function() {
        return CACHE;
    };

    /**
     * Проверка наличия данных в кэшэ
     * @param {Daria.SocialAvatars2.Avatar} avatar
     * @return {Boolean}
     */
    Daria.SocialAvatars2.Cache.isset = function(avatar) {
        if (!avatar.email) {
            return;
        }

        if (avatar.isCorp) {
            return CACHE.hasOwnProperty(avatar.login);
        }

        return CACHE.hasOwnProperty(avatar.email);
    };

    /**
     * Получение ссылки на аватарку по данным кэша
     * @param {Daria.SocialAvatars2.Avatar} avatar
     * @return {{ url: string, type: string }}
     */
    Daria.SocialAvatars2.Cache.get = function(avatar) {
        var out = {
            url: undefined,
            type: undefined
        };

        if (Daria.SocialAvatars2.Cache.isset(avatar)) {
            if (avatar.isCorp) {
                if (CACHE[avatar.login]) {
                    out.url = avatar.getUrlCorp();
                    out.type = 'corp';
                }

            } else {
                if (CACHE[avatar.email] && CACHE[avatar.email].url !== 'noavatar') {
                    out.url = CACHE[avatar.email].url + '/face-contact';
                    out.type = 'social';
                }
            }
        }

        if (!out.type && avatar.monogram) {
            if (avatar.monogram) {
                out.url = avatar.getUrlMonogram();
                out.type = 'monogram';

            } else {
                out.type = 'noavatar';
            }
        }

        return out;
    };


})();


/* ../../js/components/social-avatars/cache.js end */

    /* ../../js/components/social-avatars/queue.js begin */
(function() {

    /**
     * Объект для работы с очередью загрузки аватарок
     * @namespace Daria.SocialAvatars2.Queue
     */
    Daria.SocialAvatars2.Queue = {};

    /**
     * Добавить аватарку в очередь
     * Добавляются только те, которые имеет смысл загружать
     * @param {Daria.SocialAvatars2.Avatar} avatar
     * @return {Boolean}
     */
    Daria.SocialAvatars2.Queue.add = function(avatar) {
        if (!avatar.mid || !avatar.email || Daria.SocialAvatars2.Cache.isset(avatar)) {
            return false;
        }

        Daria.SocialAvatars2._queue.push(avatar);
        return true;
    };


})();


/* ../../js/components/social-avatars/queue.js end */

    /* ../../js/components/social-avatars/view.js begin */
(function() {

    /**
     * Объект вывода шаблона аватарки
     * @namespace Daria.SocialAvatars2.View
     */
    Daria.SocialAvatars2.View = {};

    /**
     * Получение html шаблона аватарки
     * @param {Daria.SocialAvatars2.Avatar} avatar
     * @return {String}
     */
    Daria.SocialAvatars2.View.toString = function(avatar) {
        var cacheData = Daria.SocialAvatars2.Cache.get(avatar);
        var tmpl;

        switch (cacheData.type) {
        case 'noavatar':
            tmpl = Daria.SocialAvatars2.TMPL.NOAVATAR;
            break;
        case 'monogram':
            tmpl = Daria.SocialAvatars2.TMPL.MONOGRAM;
            break;
        case 'corp':
        case 'social':
            tmpl = Daria.SocialAvatars2.TMPL.EMAIL;
            break;
        default:
            tmpl = Daria.SocialAvatars2.TMPL.DEFAULT;
        }

        return tmpl({
            uid: avatar.uid,
            url: cacheData.url,
            href: avatar.href
        });
    };

    /**
     * Обновление шаблона после обновления данных в кэшэ
     * @param {Daria.SocialAvatars2.Avatar} avatar
     * @return {Boolean}
     */
    Daria.SocialAvatars2.View.update = function(avatar) {
        var cacheData = Daria.SocialAvatars2.Cache.get(avatar);

        if (cacheData.type === 'corp' || cacheData.type === 'social') {
            var className = '.js-social-avatar_' + avatar.uid;
            var $node = $(className);
            if ($node.length) {
                $node.replaceWith(Daria.SocialAvatars2.View.toString(avatar));
                return true;
            }
        }

        return false;
    };

})();


/* ../../js/components/social-avatars/view.js end */



    /**
     * Реакция на ошибку загрузки картинки
     * @param {Node} node
     */
    Daria.SocialAvatars2.onerror = function(node) {
        node.onerror = null;
        Jane.ErrorLog.sendException('socialavatars.error.noimg');
        $(node).closest('.js-social-avatar2').replaceWith(Daria.SocialAvatars2.TMPL.NOAVATAR({href: ''}));
    };

    /**
     * Регистрация аватарки на загрузку в очереди.
     * Вывод заглушки, либо сразу аватарки, если есть данные.
     * @param {Object} params
     * @param {String} [params.mid] MID письма, в котором можно получить ключ для загрузки аватарки по email
     * @param {String} [params.email] адрес для загрузки аватарки
     * @param {String} [params.name] имя объекта для вывода монограммы
     * @param {String} [params.size] размер аватарки
     * @return {String}
     */
    Daria.SocialAvatars2.register = function(params) {
        try {
            var avatar = new Daria.SocialAvatars2.Avatar(params);
            Daria.SocialAvatars2.Queue.add(avatar);
            return Daria.SocialAvatars2.View.toString(avatar);

        } catch(e) {
            return Daria.SocialAvatars2.TMPL.DEFAULT({ uid: 'undefined', href: '' });
        }
    };

    /**
     * Запуск обработки очереди
     */
    Daria.SocialAvatars2.run = function() {
        var queue = $({});

        queue.queue(Daria.SocialAvatars2._runQueueBefore);
        queue.queue(Daria.SocialAvatars2._runQueueGetUnload);
        queue.queue(Daria.SocialAvatars2._runQueueCreateLoadLists);
        queue.queue(Daria.SocialAvatars2._runQueueUploadCorp);
        queue.queue(Daria.SocialAvatars2._runQueueUploadSocial);

    }.lazy(16);


    /**
     * Предзагрузка необходимых данных
     * @this jQuery.queue
     * @private
     */
    Daria.SocialAvatars2._runQueueBefore = function(next) {
        Jane.Handler.getAll([ 'service-emails', 'second-level-zones' ], {}, function() {
            next();
        });
    };

    /**
     * Удаление ранее загруженных аватарок из очереди
     * Формирование актуальной очереди
     * @this jQuery.queue
     * @private
     */
    Daria.SocialAvatars2._runQueueGetUnload = function(next) {
        // если с момента запуска экш обновился
        this.queue = $.grep(Daria.SocialAvatars2._queue, function(avatar) {
            return !Daria.SocialAvatars2.View.update(avatar);
        });

        Daria.SocialAvatars2._queue = [];
        next();
    };

    /**
     * Составление списокв загрузки отдельно для корпа и социальных
     * @this jQuery.queue
     * @private
     */
    Daria.SocialAvatars2._runQueueCreateLoadLists = function(next) {
        var hServiceEmails = Jane.$H('service-emails');

        this.corp = {};
        this.social = {};

        this.queue.forEach(function(avatar) {
            var item;
            var key;

            if (avatar.isCorp) {
                key = avatar.getUrlCorp();
                if (key) {
                    item = this.corp[key] ? this.corp[key] : this.corp[key] = [];
                }

            } else if (!hServiceEmails.is(avatar.email)) {
                key = avatar.getRef();
                if (key) {
                    key = key + ':' + avatar.email;
                    item = this.social[key] ? this.social[key] : this.social[key] = [];
                }
            }

            if (item) {
                item.push(avatar);
            }

        }, this);

        next();
    };

    /**
     * Загрузка корп. аватаров в кэш и обновление вывода
     * @this jQuery.queue
     * @private
     */
    Daria.SocialAvatars2._runQueueUploadCorp = function(next) {
        $.each(this.corp, function(url, avatars) {
            var img = new Image();

            img.onload = function() {
                $.each(avatars, function(idx, avatar) {
                    CACHE[avatar.login] = true;
                    Daria.SocialAvatars2.View.update(avatar);
                });
            };

            img.onerror = function() {
                $.each(avatars, function(idx, avatar) {
                    CACHE[avatar.login] = false;
                });
            };

            img.src = url;
        });

        next();
    };

    /**
     * Загрузка соц. аватарок в кэш и обновление вывода
     * @this jQuery.queue
     * @private
     */
    Daria.SocialAvatars2._runQueueUploadSocial = function() {
        if (!$.isEmptyObject(this.social)) {
            var hSocialAvatars = Jane.$H('social-avatars');
            var paramsLoadSocialAvatars = hSocialAvatars.uniq({
                refs: Object.keys(this.social)
            }, {});

            Jane.Handler.getAll(['social-avatars'], paramsLoadSocialAvatars, function() {
                var data = hSocialAvatars.getCacheByParams(paramsLoadSocialAvatars);
                if (!$.isEmptyObject(data)) {
                    $.each(data.avatar, function(i, avatar) {
                        CACHE[avatar.email] = {'url': avatar.url};
                    });

                    $.each(this.social, function(idx, avatars) {
                        var l = avatars.length;
                        while (l--) {
                            Daria.SocialAvatars2.View.update(avatars[l]);
                        }
                    });
                }
            }.bind(this), { loader: null });
        }
    };

})();


/* ../../js/components/social-avatars2.js end */


    /* --------------------------------------------------------------------- */

})(Daria, Jane);

/* ../../js/components/social-avatars.js end */

    /* ../../js/components/messages-pager.js begin */
(function() {

    /**
     * Функции для обработки событий пейджера
     */
    function mousedown(event) {
        var _this = event.data.obj;
        Daria.MessagesPager.active = _this;
        _this.isDragging = true;
        _this.slider.addClass("b-mail-paginator_scrolling");

        $(document).on("mousemove", {obj: _this}, mousemove);
        $(document).on("mouseup", {obj: _this}, mouseup);

        event.preventDefault();
        return false;
    }

    function mouseup(event) {
        var _this = event.data.obj;

        delete Daria.MessagesPager.active;

        _this.isDragging = false;
        _this.slider.removeClass("b-mail-paginator_scrolling");

        $(document).off("mousemove", {obj: _this}, mousemove);
        $(document).off("mouseup", mouseup);
    }

    function mousemove(event) {
        var _this = event.data.obj;

        if (!_this.isDragging) {
            return;
        }

        if (!_this.dragged) {
            _this.dragged = true;
        }

        var left = Math.floor(event.pageX - _this.sliderWidth / 2 - _this.$container.offset().left);

        _this._setSliderPosition(left);

        event.preventDefault();
        return false;
    }

    function scroll(event) {
        var _this = event.data.obj;

        if (_this.scrolling) {
            return;
        }
        _this._setSliderPositionByScroll(_this.$container.scrollLeft(), false);
    }

    // Если окно теряет фокус, то надо завершать скролл
    Jane.events.bind(
        "pageVisible.change",
        function() {
            if (Daria.MessagesPager.active) {
                mouseup({data: {obj: Daria.MessagesPager.active}});
            }
        }
    );

    function clickLink(event) {
        var $target = $(event.currentTarget);
        var params = Jane.Actions.getParams($target[0]);
        event.data.obj.updateScroll(params, true);
        return true;
    }

    /** -------------------------------------------------------------------------------- */

    /**
     * Конструктор объекта для работы с пейджерам по датам
     *
     * @param {DOMElement} node — корневой узел компонента
     * @param {Boolean} float — задипающий ли это пейджер
     */

    Daria.MessagesPager = function(node, isFloat) {
        this.$node = $(node);
        this.isFloat = isFloat;
        this.init();
    };

    /* -------------------------------------------------------------------------------- */

    /**
     * Увеличение даты
     *
     * @param {String} year — строка с годом в формате YYYY. Например "1812"
     * @param {String} month — строка с месяцем в формате MM. Например "08"
     * @return {Array} Массив с датой в формате ["YYYY", "MM"]
     */
    Daria.MessagesPager.incDate = function(year, month) {
        var n = Jane.Common.n;
        year = Number(year);
        month = Number(month);

        if (month == 12) {
            year++;
            month = 1;
        } else {
            month++;
        }

        return [String(year), String(n(month))];
    };

    /**
     * Уменьшение даты
     *
     * @param {String} year — строка с годом в формате YYYY. Например "1812"
     * @param {String} month — строка с месяцем в формате MM. Например "08"
     * @return {Array} Массив с датой в формате ["YYYY", "MM"]
     */
    Daria.MessagesPager.decDate = function(year, month) {
        var n = Jane.Common.n;
        year = Number(year);
        month = Number(month);

        if (month == 1) {
            year--;
            month = 12;
        } else {
            month--;
        }

        return [String(year), String(n(month))];
    };

    /* -------------------------------------------------------------------------------- */

    Daria.MessagesPager.prototype = {

        /**
         * Инициализация пейджера
         */
        init: function() {

            this.slider = this.$node.find(".js-messages-pager-slider");

            /**
             * Стрелка для скролла влево
             * @type jQuery
             * @private
             */
            this.$scrollLeft = this.$node.find(".b-link_scroll-left");

            /**
             * Стрелка для скролла вправо
             * @type jQuery
             * @private
             */
            this.$scrollRight = this.$node.find(".b-link_scroll-right");

            // Если нет , то завершаем
            if (this.slider.size() === 0) {
                this.$scrollRight
                    .add(this.$scrollLeft)
                    .addClass('b-link_disabled');
                this._showPager();
                return;
            }

            this.$container = this.$node.find(".js-messages-pager-container");
            this.scrollContainer = this.$node.find(".js-messages-pager-scroll");
            this.tooltip = this.$node.find(".js-tooltip");

            // Ползунок уже таскали?
            this.dragged = false;

            // Рассчет позиций годов для последующего обновляние тултипа
            var years = [];
            this.$node.find(".js-year").each(
                function(i, elem) {
                    years.push({left: elem.offsetLeft, year: Jane.Actions.getParams(elem)['year']});
                }
            );

            this.years = years;

            // Рассчет констант

            this.$containerWidth = this.$container.width();
            this.scrollWidth = this.scrollContainer.width();
            this.sliderWidth = this.$containerWidth / this.scrollWidth * this.$containerWidth;

            // Границы для слайдера
            this.minSliderX = 0;
            this.maxSliderX = Math.floor(this.$containerWidth - this.sliderWidth);

            // Границы для скролла
            this.minScroll = 0;
            this.maxScroll = this.scrollWidth - this.$containerWidth;

            // Инициализация HTML компонентов
            this.slider.css("width", Math.ceil(this.sliderWidth));
            this.isDragging = false;

            this.bindEvents();

            if (!this.isFloat) {
                this.updateScroll();
            }
        },

        /**
         * Показывает пейджер, который изначально скрыт через visibility:hidden
         */
        _showPager: function() {
            if (!this._visible) {
                this.$node.find('.b-mail-pager__right').css('visibility', 'visible');
                this._visible = true;
            }
        },

        /**
         * lazy-вычислятор месяцев и их сдвигов
         * @private
         * @returns Array
         */
        _getItems: function() {
            if (!this._months) {
                var currentScroll = this.$container.scrollLeft();
                var months = this._months = [];
                this.$node.find('.b-mail-paginator__item').each(function() {
                    // из-за IE<9 не можем использовать elem.offsetLeft
                    months.push($(this).position().left + currentScroll);
                });
            }

            return this._months;
        },

        /*
         *
         */
        updateScroll: function(params, animate) {

            params = params || Daria.Page.params;

            var date;
            if (params.datePager) {
                date = params.datePager;
                date = date.replace(/\./g, '');
            }

            if (date) {
                this.setCurrentItem(date);
            }

            // Если слайдера нет, то ничего не делаем
            if (!this.$container) {
                return;
            }

            if (date) {
                this.setPagerToDate(date, animate);
            } else {
                this._setSliderPosition(this.maxSliderX);
            }
        },

        /**
         * Обновить тултип с годом в пейджере
         */
        updateTooltip: function(x, scroll) {
            var i = 0;

            while (i < this.years.length && (this.years[i].left - scroll) < x) {
                i++;
            }

            i--;

            if (i < 0) {
                i = 0;
            }

            if (this.tooltipYear != this.years[i].year) {
                this.tooltipYear = this.years[i].year;
                this.tooltip.html(this.tooltipYear);
            }

        },

        /**
         * Выделяет текущую дату в пейджере
         *
         * @param {String} date — Дата в формате YYYY или MM.YYYY
         */

        setCurrentItem: function(date) {
            var $item = this.$node.find(".item-" + date);

            if ($item.size() === 0) {
                return;
            }

            $item
                .closest(".js-messages-pager-container")
                .find(".b-mail-paginator__item_current")
                .removeClass("b-mail-paginator__item_current")
                .find(".b-mail-paginator__link_current")
                .removeClass("b-mail-paginator__link_current");

            $item
                .closest(".b-mail-paginator__item")
                .addClass("b-mail-paginator__item_current")
                .find(".b-mail-paginator__link")
                .addClass("b-mail-paginator__link_current");
        },

        /**
         * Переместить пейджер на указанную дату
         *
         * @param {String} date — Дата в формате ddmmyy
         */
        setPagerToDate: function(date, animate) {
            var $item = this.$node.find(".item-" + date);

            if ($item.size() === 0) {
                return;
            }

            // offsetLeft не используем из-за того, что он плохо рабоатет в IE
            var left = $item.position().left + this.$container.scrollLeft();

            // 25px - половина средней длины контейнера с месяцем
            var scroll = left - (this.$containerWidth / 2) + 25;

            this._setSliderPositionByScroll(scroll, animate);
        },

        /**
         * Ставит позицию скролла.
         * @param {Number} left
         * @param {Number} [scroll] Если не указан, то рассчитывается автоматически
         */
        _setSliderPosition: function(left, scroll, animate) {
            var that = this;

            left = Math.floor(left);
            if (left > this.maxSliderX) {
                left = this.maxSliderX;
            }

            if (left < this.minSliderX) {
                left = this.minSliderX;
            }

            scroll = scroll || Math.floor((left / this.maxSliderX) * (this.scrollWidth - this.$containerWidth));

            var arrowWidth = 54;
            var handlerPosition = left + this.sliderWidth / 2;

            // не мучаем IE
            if (animate && document['documentMode'] && document['documentMode'] < 9) {
                animate = false;
            }

            var allowLeftArrow = left > this.minSliderX;
            var allowRightArrow = left < this.maxSliderX;
            // ползунок не находится у границы и правый уголок стрелки не выходит за пределы
            var showRightArrow = allowRightArrow && (handlerPosition + arrowWidth < this.$containerWidth);
            // ползунок не находится у границы и левый уголок стрелки не выходит за пределы
            var showLeftArrow = allowLeftArrow && (handlerPosition - arrowWidth > 0);

            if (animate) {
                this.slider.stop().animate({left: left}, 'fast');
            } else {
                this.slider.stop().css({'left': left});
            }

            if (showRightArrow != this.showRightArrow) {
                this.showRightArrow = showRightArrow;
                this.slider.toggleClass('b-mail-paginator__slider_arrow_right', showRightArrow);
            }

            if (showLeftArrow != this.showLeftArrow) {
                this.showLeftArrow = showLeftArrow;
                this.slider.toggleClass('b-mail-paginator__slider_arrow_left', showLeftArrow);
            }

            if (animate) {
                this.scrolling = true;
                this.$container.stop().animate({scrollLeft: scroll}, 'fast', function() {that.scrolling = false;});
            } else {
                this.$container.stop().scrollLeft(scroll);
            }

            if (allowRightArrow != this.allowRightArrow) {
                this.$scrollRight.toggleClass('b-link_disabled', !allowRightArrow);
                this.allowRightArrow = allowRightArrow;
            }

            if (allowLeftArrow != this.allowLeftArrow) {
                this.$scrollLeft.toggleClass('b-link_disabled', !allowLeftArrow);
                this.allowLeftArrow = allowLeftArrow;
            }

            this.updateTooltip(left + this.sliderWidth / 2, scroll);
            this._showPager();
        },

        _setSliderPositionByScroll: function(scroll, animate) {
            if (scroll < this.minScroll) {
                scroll = this.minScroll;
            } else if (scroll > this.maxScroll) {
                scroll = this.maxScroll;
            }

            var sliderLeft = scroll / (this.scrollWidth - this.$containerWidth) *
                (this.$containerWidth - this.sliderWidth);
            this._setSliderPosition(sliderLeft, scroll, animate);
        },

        /**
         * Смещает позицию слайдера.
         * @param {Number} dir Направление: -1 – влево, 1 – вправо
         */
        _adjustSliderPosition: function(dir) {
            var currentScroll = this.$container.scrollLeft();
            if (dir > 0) {
                //если направление право, то берем правую границу
                currentScroll += this.$containerWidth;
            }
            var newScroll;
            var months = this._getItems();
            for (var i = 0, j = months.length; i < j; i++) {
                if (months[i] >= currentScroll) {
                    if (dir > 0) {
                        newScroll = months[i - 1];
                    } else {
                        newScroll = months[i] - this.$containerWidth;
                    }

                    break;
                }
            }

            // если не нашли куда поставить, то ставим просто вправо
            if (!newScroll) {
                newScroll = this.maxScroll;
            }

            this._setSliderPositionByScroll(newScroll, true);
        },

        /**
         * Обрабтчик кликов по стрелкам влево-вправо
         * @param {Event} e
         * @private
         */
        _moveScroll: function(e) {
            var className = e.currentTarget.className;
            // стрелка задисейблена
            if (className.indexOf('b-link_disabled') > -1) {
                return false;
            }

            this._adjustSliderPosition(className.indexOf('left') > -1 ? -1 : 1);

            return false;
        },

        bindEvents: function() {
            this.slider.on("mousedown", {obj: this}, mousedown);
            this.$container.on("scroll", {obj: this}, scroll);

            if (this.isFloat) {
                this.$container
                    .find(".b-mail-paginator__link")
                    .on("click", {obj: this}, clickLink);
            }

            this.$scrollLeft
                .add(this.$scrollRight)
                .on('click', this._moveScroll.bind(this));
        },

        unbindEvents: function() {
            this.slider.off("mousedown", mousedown);

            if (this.isFloat && this.$container) {
                this.$container
                    .find(".b-mail-paginator__link")
                    .off("click", clickLink);
            }

            if (this.$container) {
                this.$container.off("scroll");
            }

            if (this.$scrollLeft) {
                this.$scrollLeft
                    .add(this.$scrollRight)
                    .off('click');
            }
        }
    };
})();

/* ../../js/components/messages-pager.js end */

    /* ../../js/components/sound.js begin */
Daria.Sound = {
    soundsPath: Jane.getEntity('mail-static') + '/sound/',

    preload: function(fname) {
        this._getPlayer(fname);
    },

    play: function(fname) {
        this._getPlayer(fname)();
    },


    _cache: {},

    _getPlayer: function(fname) {
        if (!this._cache[fname]) {

            var filename = this.soundsPath + fname;
            if ('src' in document.createElement('audio')) {
                var audioEl = this._createAudioEl(filename);
                this._cache[fname] = function() {
                    audioEl.play();
                };
            } else if ('src' in document.createElement('bgsound')) {
                var bgsoundEl = document.createElement('bgsound');
                document.getElementsByTagName('head')[0].appendChild(bgsoundEl);
                this._cache[fname] = function() {
                    bgsoundEl.src = filename + '.mp3';
                };
            } else {
                this._cache[fname] = function() {};
            }
        }
        return this._cache[fname];
    },

    _createAudioEl: function(filename) {
        var audioContainer = document.createElement('div');
        audioContainer.innerHTML =
            '<audio preload="auto">' +
                '<source src="' + filename + '.ogg" type="audio/ogg"></source>' +
                '<source src="' + filename + '.mp3" type="audio/mpeg"></source>' +
                '<source src="' + filename + '.wav" type="audio/wav"></source>' +
            '</audio>';
        var audioEl = audioContainer.firstChild;
        document.body.appendChild(audioEl);
        return audioEl;
    }
};

/* ../../js/components/sound.js end */

    /* ../../js/components/search-precise.js begin */
/**
 * Форма расширенного поиска.
 */
Daria.SearchPrecise = {
    inited: false,
    toggle: function(o) {
        this.$outerSearch = $('.jane-search', Jane.$B('toolbar-box').getActive().getBlockByName('search').getCacheNode());
        this.$outerInput = this.$outerSearch.find('.js-search-input input');
        this.nbOuterInput = nb.block(this.$outerInput[0]);

        this.$target = o.event ? $(o.event.currentTarget) : o.params.$target;
        if (!this.$target.hasClass('.js-dropdown-handle')) {
            this.$target = Daria.Dropdown.getHandleNode(this.$outerSearch);
        }

        var hFolders = Jane.$H('folders');

        if (!this.inited) {
            // Генерим хтмл формы.
            var form = Jane.tt("mail-common:search-precise", { "page-params": Page.params }, ["folders", "labels", "settings"]);

            this.$form = $(form);
            this.$innerInput = this.$form.find('.js-kbd-search');
            this.nbInnerInput = nb.block(this.$innerInput[0]);

            this.bindEvents();
            this.inited = true;
        }
        var $form = this.$form;
        Daria.Dropdown.toggle(this.$target, {
            content: $form,

            // .b-mail-calendar__table__i указываю отдельно, несмотря на .b-mail-calendar *,
            // т.к. при клике на число соседнего месяца (тоже показываются в календаре)
            // происходит перерисовка календаря и parent'ов у event.target больше нет
            selectors: '.jane-search input, .b-mail-calendar, .b-mail-calendar *, .b-mail-calendar__table__i'
        });
        var shown = this.shown = !!Daria.Dropdown.getCurrent();
        if (shown) {
            // Увеличиваем ширину инпута
            Jane.$B('search').toggleActive(true);
        } else {
            this.hideCalendars();
        }

        // Обновляем текст поиска в инпутах
        this.syncRequests(shown);

        if (shown) {
            // Подстраиваем позицию попапа, чтобы текстовые инпуты наложились друг на друга (DARIA-8274)
            this.updatePosition();

            // Устанавливаем текущую папку в поиске при поиске непосредственно из папки, если галка на поиске по папке еще не стоит (DARIA-15069)
            // Если галка стоит, папка берётся из параметра fid
            if (!this.nbFoldersCheckbox.isChecked()) {
                if (Daria.Page.params.current_folder) {
                    this.preventBinding = true;

                    var folderToSet = Daria.Page.params.current_folder;
                    if (['outbox', 'spam'].indexOf(hFolders.symbols[Daria.Page.params.current_folder]) > -1) {
                        folderToSet = hFolders.ids['inbox'];
                    }
                    this.nbFoldersSelect.setState({ value: folderToSet });

                    this.preventBinding = false;
                }
            }
        }

        // FIXME: унести в прототип nbInput
        function cursorToEnd() {
            if (this.getType() === 'input') {
                this.focus();
                // Хак, устанавливающий курсор в конец инпута
                var val = this.getValue();
                this.setValue('');
                this.setValue(val);
            }
        }

        // Ставим фокус в строку поиска
        cursorToEnd.apply(this[shown ? 'nbInnerInput' : 'nbOuterInput']);
    },

    updatePosition: function() {
        var box = Daria.Dropdown.getBox();
        var outerInputRect = this.$outerInput.rect();
        var innerInputRect = this.$innerInput.rect();
        var topPos = box.rect().top + outerInputRect.top - innerInputRect.top;
        var newPos = {
            left: '+=' + (outerInputRect.right - innerInputRect.right),
            top: (topPos >= 0) ? topPos + 'px' : '0'
        };
        box.css(newPos);
    },

    /**
     * Синхронизирует строку запроса между простым и расширенным поисками.
     * @param {Boolean} [getFromSimpleSearch=false]  Если true, то в качестве актуального возьмется запрос из простого поиска.
     */
    syncRequests: function(getFromSimpleSearch) {
        var request = (getFromSimpleSearch ? this.nbOuterInput : this.nbInnerInput).getValue();
        this.nbOuterInput.setValue(request);
        this.nbInnerInput.setValue(request);
    },

    bindAutocompleter: function(input, options) {
        var autocompleter = Daria.Autocompleter.getSearch();
        autocompleter.sections[1].dontShow = Jane.$H('settings').isSet('dont_save_history');
        autocompleter.setOptions(options);
        autocompleter.bindField({ field: input, focus: 1 });
        return autocompleter;
    },

    clearFields: function() {
        // разрубаем зависимость чекбоксов от селектов
        this.preventBinding = true;

        var hFolders = Jane.$H('folders');

        var nbField;
        var fieldType;
        this.$form.find('input, select').each(function() {
            var $field = $(this);
            nbField = nb.$block($field.closest('._init'));
            fieldType = nbField.getType();

            if (fieldType === 'checkbox') {
                nbField.uncheck();
            } else if (fieldType === 'select') {

                if (Daria.IS_CORP && nbField.getName() == 'fid' && Daria.Page.params.current_folder) {
                    var folderToSet = Daria.Page.params.current_folder;
                    if (['outbox', 'spam'].indexOf(hFolders.symbols[Daria.Page.params.current_folder]) > -1) {
                        folderToSet = hFolders.ids['inbox'];
                    }
                    nbField.setState({ value: folderToSet });
                } else {
                    var source = nbField.getSource();
                    nbField.setState({ value: source[0].value });
                }
            } else {
                // input
                nbField.reset();
            }

            if (Daria.IS_CORP && nbField.getName() == "fid_guard") {
                nbField.check();
            }
        });

        // восстанавливаем эту зависимость
        this.preventBinding = false;
    },

    reset: function() {
        if (this.inited) {
            this.unbindEvents();
            this.$form.remove();
            this.inited = false;
        }
    },

    focusCallback: function(nbCheckbox) {
        // если зависимость явно не разрушена, то чекаем соответствующий контрол
        if (!Daria.SearchPrecise.preventBinding) {
            nbCheckbox.check();
        }
    },

    bindEvents: function() {
        var that = this;
        var stringToDate = function(string) {
            var matches = string.match(/^(\d{2,2})\-(\d{2,2})\-(\d{2,4})$/);
            if (matches) {
                return new Date(matches[3], matches[2] - 1, matches[1]);
            } else {
                return null;
            }
        };
        var dateToString = function(date) {
            return Jane.Common.n(date.getDate()) + '-' + Jane.Common.n(date.getMonth() + 1) + '-' + date.getFullYear().toString();
        };
        var dateInputOpts = {
            zIndex: 1001,
            dateToString: dateToString,
            stringToDate: stringToDate,
            maxDate: new Date(),
            minDate: (function() {
                var dt = new Date();
                dt.setFullYear(dt.getFullYear() - 10);
                return dt;
            }()),
            onSelect: function(value) {
                var nbField = nb.$block(this.input);
                nbField.setValue(value);
            },
            keydownHandler: function() { return false; }
        };

        var $form = this.$form;
        // Поиск
        $form.find('form').on('submit', this.search.bind(this, false));
        this.$outerSearch.off('submit').on('submit', this.search.bind(this, true));

        // Автокомплитер
        this.$innerInput.on({
            focus: function() {
                var rect = that.$innerInput.rect();
                var padding = 165;

                that.bindAutocompleter(this, {
                    position: { right: 'auto', left: rect.left - padding },
                    width: rect.width + padding,
                    additionalClass: 'b-mail-suggest_search-precise',
                    doubleOrient: false
                });
            },
            result: function(e, data, value, originalEvent) {
                if (originalEvent.type == 'mousedown') {
                    that.search();
                }
            }
        });

        this.nbFoldersSelect = nb.block($form.find('.b-search-precise__fid')[0]);
        this.nbFoldersCheckbox = nb.block($form.find('.b-search-precise__fid-guard')[0]);

        this.nbLabelsSelect = nb.block($form.find('.b-search-precise__lid')[0]);
        this.nbLabelsCheckbox = nb.block($form.find('.b-search-precise__lid-guard')[0]);

        this.nbScopeSelect = nb.block($form.find('.b-search-precise__scope')[0]);
        this.nbScopeCheckbox = nb.block($form.find('.b-search-precise__scope-guard')[0]);

        this.nbDateFrom = nb.block($form.find('.b-search-precise__date__input_from')[0]);
        this.nbDateTo = nb.block($form.find('.b-search-precise__date__input_to')[0]);
        this.nbDateCheckbox = nb.block($form.find('.b-search-precise__date-guard')[0]);

        this.nbFoldersSelect.on('nb-changed', this.focusCallback.bind(this.nbFoldersSelect, this.nbFoldersCheckbox));
        this.nbLabelsSelect.on('nb-changed', this.focusCallback.bind(this.nbLabelsSelect, this.nbLabelsCheckbox));
        this.nbScopeSelect.on('nb-changed', this.focusCallback.bind(this.nbScopeSelect, this.nbScopeCheckbox));

        this.nbDateFrom.on('nb-focused', this.focusCallback.bind(this.nbDateFrom, this.nbDateCheckbox));
        this.nbDateFrom.on('focusin', this.focusCallback.bind(this.nbDateFrom, this.nbDateCheckbox));
        this.nbDateTo.on('nb-focused', this.focusCallback.bind(this.nbDateTo, this.nbDateCheckbox));
        this.nbDateTo.on('focusin', this.focusCallback.bind(this.nbDateTo, this.nbDateCheckbox));

        // Добавляем календари
        // FIXME: здесь мы привязываемся к внутренностям нано блоков, потому что пока в nanoislands нет datepicker'ов
        $form.find('.b-search-precise__date__input').date_input(dateInputOpts);


        this._onCloseHandler = function() {
            that.shown = false;
            // Обновляем активность простого поиска
            Jane.$B('toolbar-box').getActive().getBlockByName('search').toggleActive();
            // Скрываем календари
            that.hideCalendars();
        };
        Jane.events.bind('dropdowns-closed', this._onCloseHandler);

        // Сбрасываем параметры расширенного поиска при переходе на любую страницу кроме результатов
        this._onPageUnloadHandler = function() {
            if (that.inited && !Daria.Page.params.search) {
                that.clearFields();
            }
        };
        Jane.events.bind('pageload', this._onPageUnloadHandler);
    },

    unbindEvents: function() {
        this.$form.off('focus', 'select, .b-search-precise__date__input')
            .find('form').off('submit');
        this.$innerInput.off('focus result');
        Jane.events.unbind('dropdowns-closed', this._onCloseHandler);
        Jane.events.unbind('pageload', this._onPageUnloadHandler);
    },

    hideCalendars: function() {
        $(document).trigger('hide-calendar');
    },

    /**
     * Производит расширенный поиск
     * @param {Boolean} [fromSimpleSearch=false]  Если true, то строка запроса будет браться из простого поиска.
     */
    search: function(fromSimpleSearch) {
        var request = this[fromSimpleSearch ? 'nbOuterInput' : 'nbInnerInput'].getValue();

        var params = {
            _page: "messages",
            search: "yes",
            request: encodeURIComponent(request)
        };

        var $form = this.$form;

        if (this.nbFoldersCheckbox.isChecked()) {
            params.fid = this.nbFoldersSelect.getState().value;
        }

        if (this.nbScopeCheckbox.isChecked()) {
            params.scope = this.nbScopeSelect.getState().value;
        }

        if (this.nbDateCheckbox.isChecked()) {
            var fromDate = this.nbDateFrom.getValue().replace(/\-/g, '');
            var toDate = this.nbDateTo.getValue().replace(/\-/g, '');

            if (fromDate.length == 8) {
                params.from = fromDate.substr(4) + fromDate.substring(2, 4) + fromDate.substr(0, 2);
            }

            if (toDate.length == 8) {
                params.to = toDate.substr(4) + toDate.substring(2, 4) + toDate.substr(0, 2);
            }
        }

        var nbUnreadCheckbox = nb.block($form.find('.b-search-precise__unread')[0]);
        if (nbUnreadCheckbox.isChecked()) {
            params.unread = nbUnreadCheckbox.getValue();
        }

        if (this.nbLabelsCheckbox.isChecked()) {
            params.lid = this.nbLabelsSelect.getState().value;
        }

        /* DARIA-33371 - Оторвать галочку С вложениями в расширенном поиске */
        /*
        var nbNestedCheckbox = nb.block($form.find('.b-search-precise__nested')[0]);
        if (nbNestedCheckbox.isChecked()) {
            params.nested = true;
        }
        */

        var url = Page.params2url(params);
        Jane.watcher.set("search-precise-selected", this.$form.find("input:checked").length);
        this.syncRequests(fromSimpleSearch);
        Daria.Dropdown.closeAll();
        return Jane.Actions.run("search", { currentTarget: this.$form }, {
            request: request,
            url: url
        });
    }

};

/* ../../js/components/search-precise.js end */

    /* ../../js/components/search-options.js begin */
/* ------------------------------------------------------------------------- */

var DEFAULT_VALUE = 'all';

/**
 * Форма расширенного поиска.
 * @namespace
 * @type {Object}
 */
Daria.SearchOptions = {

    _isOpened: false,

    _options: {},

    /**
     * Открывает диалог расширенных настроек поиска.
     */
    open: function() {
        if (this._isOpened) {
            return;
        }

        var that = this;

        var dialog = Jane.tt('mail-common:search-options', {
            time: this._createDatesOptions()
        }, ['folders', 'labels']);

        var $dialog = $(dialog);

        $dialog.find('.js-filter-types-placeholder')
            .replaceWith(this.$filterTypesBlock = Daria.SearchFilters.createFilterTypesBlock());

        this.nbScope  = nb.$block('.js-option-scope', $dialog);
        this.nbFolder = nb.$block('.js-option-folder', $dialog);
        this.nbLabel  = nb.$block('.js-option-label', $dialog);
        this.nbTime   = nb.$block('.js-option-time', $dialog);
        this.nbAttach = nb.$block('.js-option-attach', $dialog);

        this._fillLabelIcons();

        this._setCurrentFilterValues();

        this._bindEventListeners();

        Daria.Dialog.open({
            body: dialog,
            onTarget: {
                target: this.$anchor,
                side: 'top',
                pos: 'right',
                needTail: false
            },

            additionalClass: 'search-options-dialog',
            easyclose: false,
            hideCrossClose: true,
            dontCloseOnPageGo: true,
            onclose: function() {
                that._isOpened = false;

                Daria.SearchFilters.destroyBlock(that.$filterTypesBlock);

                Jane.events.trigger('search-options:closed');
            }
        });

        this._isOpened = true;

        Jane.events.trigger('search-options:opened');
    },

    close: function() {
        if (this._isOpened) {
            Daria.Dialog.close();
        }
    },

    isOpened: function() {
        return this._isOpened;
    },

    /**
     * Возвращает выбранные параметры поиска.
     * @return {Object}
     * @example
     *     {
     *       scope: ...,
     *       lid: ...,
     *       fid: ...,
     *       from: ...,
     *       to: ...
     *     }
     */
    getSearchOptions: function() {
        this._options.type = Daria.SearchFilters.getFilterId();

        return _.omit(this._options, function(value) {
            return (value == null || value === DEFAULT_VALUE);
        });
    },

    /**
     * @param {jQuery} $anchor
     */
    setAnchor: function($anchor) {
        this.$anchor = $anchor;
    },

    /**
     * Устанавливает текущие значения в фильтры.
     * @private
     */
    _setCurrentFilterValues: function() {
        var pageParams = Daria.Page.params;
        var diapason;

        this.nbScope.setState({
            value: pageParams.scope || DEFAULT_VALUE
        });

        this.nbFolder.setState({
            value: pageParams.fid || DEFAULT_VALUE
        });

        this.nbLabel.setState({
            value: pageParams.lid || DEFAULT_VALUE
        });

        if (pageParams.from && pageParams.to) {
            diapason = pageParams.from + '-' + pageParams.to;
        }

        this.nbTime.setState({
            value: diapason || DEFAULT_VALUE
        });

        this.nbAttach.setValue(pageParams.withatts === 'yes');
    },

    /**
     * Вешает обработчики событий.
     * @private
     */
    _bindEventListeners: function() {
        var that = this;

        this.nbScope.on('nb-changed', function() {
            that._options.scope = this.getState().value;
            that._search();
        });

        this.nbFolder.on('nb-changed', function() {
            that._options.fid = this.getState().value;
            that._search();
        });

        this.nbLabel.on('nb-changed', function() {
            that._options.lid = this.getState().value;
            that._search();
        });

        this.nbTime.on('nb-changed', function() {
            var timeDiapason = this.getState().value;

            if (timeDiapason && timeDiapason !== 'all') {
                var dates = timeDiapason.split('-');
                that._options.from = dates[0];
                that._options.to = dates[1];
            } else {
                that._options.from = null;
                that._options.to = null;
            }

            that._search();
        });

        this.nbAttach.on('nb-changed', function() {
            if (this.isChecked()) {
                that._options.withatts = 'yes';
            } else {
                that._options.withatts = null;
            }

            that._search();
        });

        $('.b-page').on('click', function(e) {
            if ($(e.target).closest('.block-toolbar').length === 0) {
                that.close();
            }
        });
    },

    /**
     * Запускает поиск в форме.
     * @private
     */
    _search: function() {
        Jane.$B('search').startSearch();
    },

    /**
     * Генерирует диапазоны поиска относительно текущей даты.
     * @private
     * @return {Array}
     */
    _createDatesOptions: function() {
        var MONTHS_ABOVE = 3;
        var YEARS_ABOVE = 3;

        var now = new Date();
        var tmpDate = new Date();
        var currentMonth = now.getMonth() + 1;
        var currentYear = now.getFullYear();

        var diaposons = [];

        while (currentMonth && diaposons.length < MONTHS_ABOVE) {
            var formatedMonth = currentMonth < 10 ? '0' + currentMonth : currentMonth;

            tmpDate.setMonth(currentMonth);
            tmpDate.setDate(-1);
            var endingDayOfMonth = tmpDate.getDate();

            diaposons.push({
                text: i18n('%Months_2', currentMonth - 1),
                // Формат: YYYYMMDD-YYYYMMDD
                value: currentYear + formatedMonth + '01-' +
                    currentYear + formatedMonth + endingDayOfMonth
            });

            currentMonth--;
        }

        for (var i = 1; i <= YEARS_ABOVE; ++i) {
            var year = currentYear - i;

            diaposons.push({
                text: year,
                value: year + '0101-' + year + '1231'
            });
        }

        return diaposons;
    },

    /**
     * Подставляет нужные цвета группам.
     * @private
     */
    _fillLabelIcons: function() {
        var defaultRender = this.nbLabel.$jUI._renderItem;

        this.nbLabel.$jUI._renderItem = function(ul, item) {
            var $item = defaultRender.apply(this, Array.prototype.slice.call(arguments));

            if (item.icon && /^[\da-f]{6}$/.test(item.icon)) {
                $item.find('.nb-icon').css('background', '#' + item.icon);
            }
            return $item;
        };
    }
};

/* ------------------------------------------------------------------------- */

/* ../../js/components/search-options.js end */

    /* ../../js/components/search-filters.js begin */
(function(Daria) {

    var currentFilterId = null;
    var FILTER_IDS = [4, 18, 5, 14];
    var $filterTypesNodes = $();

    /**
     * @namespace
     * @type {Object}
     */
    Daria.SearchFilters = {

        /**
         * Получить текущий фильтра.
         * @return {string|null}
         */
        getFilterId: function() {
            this._checkInit();

            return currentFilterId;
        },

        /**
         * Создает блок выбора фильтра.
         * @return {jQuery}
         */
        createFilterTypesBlock: function() {
            this._checkInit();

            var $body = $(Jane.tt('mail-common:search-filters-types', {
                'filter-id': FILTER_IDS
            }, ['messages-title-types-filter']));

            $body.on('mousedown.searchfilter', '.js-search-apply-filter',
                this._onMouseDown.bind(this));

            $filterTypesNodes = $filterTypesNodes.add($body);

            this._updateFilterTypeState();

            return $body;
        },

        /**
         * Уничтожает блок и снимает все события.
         * @static
         * @param {jQuery} $node
         */
        destroyBlock: function($node) {
            $filterTypesNodes = $filterTypesNodes.not($node);

            $node.off('.searchfilter');

            $node.remove();
        },

        _onMouseDown: function(e) {
            // Предотвращаем потерю фокуса.
            e.preventDefault();
            e.stopPropagation();

            var $filter = $(e.currentTarget);
            var selectedFilterId = $filter.data('filter-id');

            if (currentFilterId === selectedFilterId) {
                currentFilterId = null;
            } else {
                currentFilterId = selectedFilterId;
            }

            this._updateFilterTypeState();
        },

        /**
         * Синхронизирует состояние между всеми блоками.
         * @private
         */
        _updateFilterTypeState: function() {
            var $allFilterButtons = $filterTypesNodes.find('.js-search-apply-filter');
            $allFilterButtons.removeClass('g-active');

            if (currentFilterId) {
                $allFilterButtons
                    .filter('[data-filter-id="' + currentFilterId + '"]')
                    .addClass('g-active');
            }
        },

        /**
         * Выполняется только один раз.
         * @private
         */
        _checkInit: function() {
            currentFilterId = Jane.Page.params.type;

            this._checkInit = $.noop;
        }
    };

})(Daria);

/* ../../js/components/search-filters.js end */

    /* ../../js/components/table.js begin */
/**
 * total - количество чекбоксов
 * count - сколько зачекано в данный момент
 *
 * Есть три уровня чекбоксов:
 *  - самый верхний, который все выделяет
 *      total = писем в таблице
 *      count = зачеканных в таблице
 *  - чекбокс треда
 *      total = писем в треде
 *      count = зачеканных в треде
 *  - просто чекбокс
 *      total = 1
 *      count = 0 - не зачекан, 1 - зачекан
 *
 * Если total = count, значит все что ниже зачекано,
 * и сам этот чекбокс тоже должен быть зачекан.
 */

var CheckboxTree = function(s) {
    var checkbox = this.checkbox = s.checkbox;
    this.id = s.id;
    this.tr = s.tr;
    this.root = s.root;
    this.total = s.total || 0;
    this.checked = checkbox.checked;
    this.count = (this.checked) ? this.total : 0;
};

Daria.CheckboxTree = CheckboxTree;

CheckboxTree.addTRs = function(node, root) {
    var trs = ($.isArray(node)) ? node : node.getElementsByClassName('b-messages__message');
    var total = 0;
    if (!root.items) { root.items = {}; }

    $.each(trs, function() {
        var checkbox = this.getElementsByClassName('b-messages__message__checkbox__input')[0];
        if (checkbox) {
            var id = checkbox.value;
            var count = Number(this.getAttribute("count")) || 1;
            var s = new CheckboxTree({
                checkbox: checkbox,
                tr: this,
                id: id,
                total: count,
                root: root
            });
            if (count > 1) {
                s.items = {};

                var $tr = $(this);
                // Добавляем чекбоксы треда, если он уже раскрыт
                var $threadBlock = $tr.next(".js-thread-box");
                if (!$threadBlock.length) {
                    // сообщение может быть обернуто в виджет, там чуть иная верстка
                    $threadBlock = $tr.parent().next(".js-thread-box");
                }

                var threadBlock = $threadBlock[0];
                if (threadBlock) {
                    CheckboxTree.addTRs(threadBlock, s);
                }
            }

            total += s.total;
            root.items[id] = s;
        }
    });

    root.total = root.total || total;

    // Включаем/отключаем главный чекбокс
    if (!root.root) {
        root.checkbox.disabled = !total;
        if (!total) {
            root.checkbox.checked = false;
        }
    }
};

CheckboxTree.delTRs = function(node, root) {
    var trs = ($.isArray(node)) ? node : node.getElementsByClassName('b-messages__message');
    var total = 0;
    if (!root.items) { return; }

    $.each(trs, function() {
        var checkbox = this.getElementsByClassName('b-messages__message__checkbox__input')[0];
        if (checkbox) {
            var id = checkbox.value;
            var s = root.items[id];
            if (s) {
                total += s.total;
                delete root.items[id];
            }
        }
    });

    root.total -= total;
};

/**
 * Метод обновляет состояние checkboxTree из DOM узла.
 * Удаляет все item из checkboxTree и заново их наполняет из DOM ноды
 *
 * @param {Node} node  HTML узел
 * @param {CheckboxTree} root  дерево чекбоксов checkboxTree
 */

CheckboxTree.prototype.updateTRs = function(node, root) {
    // Очищаем node.items
    delete root.items;
    root.total = 0;
    root.count = 0;

    CheckboxTree.addTRs(node, root);

    // TODO: это точно надо?
    for (var id in root.items) {
        if (root.items[id].checked) {
            root.count += root.items[id].count;
        }
    }
};

CheckboxTree.prototype.on = function(bubble) {
    if (this.items) {
        $.each(this.items, function() {
            this.on(false);
        });
    }
    this.shift(this.total - this.count, bubble);
};

/**
 * Снимает выделение с ветки CheckboxTree
 * @param {Number} bubble
 * @param {String} exceptId  ID чекбокса, который нужно оставить включенным
 */
CheckboxTree.prototype.off = function(bubble, exceptId) {
    exceptId = exceptId || null;
    if (this.id !== exceptId) {
        var delta = this.count;
        if (this.items) {
            $.each(this.items, function(id) {
                delta -= (id === exceptId) ? 1 : this.off(false, exceptId);
            });
        }
        this.shift(-delta, bubble);
    }
    return this.count;
};

CheckboxTree.prototype.shift = function(delta, bubble) {
    if (delta) {
        var count = this.count;
        this.count += delta;
        if (this.count === this.total) { // все что ниже зачекано, надо зачекать себя
            this.check();
        } else if (this.count < this.total) { // не все, что ниже зачекано, надо себя расчекать
            this.uncheck();
            if (!this.root) {
                this.count = this.sum();
            }
        }
        if (bubble && this.root) { // баблимся вверх, чтобы родительский чекбокс тоже мог пересчитать кол-во зачекнутых в нем
            this.root.shift(this.count - count, bubble);
        }
    }
};

CheckboxTree.prototype.toggle = function(flag) {
    if (this.checked !== flag) {
        this.checked = flag;
        this.checkbox.checked = flag;
        $(this.tr).toggleClass('b-messages__message_checked', flag);
    }
};

CheckboxTree.prototype.check = function() {
    this.toggle(true);
};

CheckboxTree.prototype.uncheck = function() {
    this.toggle(false);
};

CheckboxTree.prototype.sync = function(exceptId) {
    var checked = this.checkbox.checked;
    if (checked) {
        this.on(true);
    } else {
        this.off(true, exceptId);
    }
};

CheckboxTree.prototype.sum = function() {
    if (this.items) {
        var sum = 0;
        $.each(this.items, function() {
            sum += this.count;
        });
        return sum;
    }
    return this.count;
};

/**
 * Возвращает id выделенных писем.
 * @return Array
 */
CheckboxTree.prototype.getCheckedIds = function() {
    var ids = [];
    if (this.items) {
        $.each(this.items, function(id) {
            if (this.checked) {
                ids.push(id);
            }
        });
    }
    return ids;
};

/** Таблица - реализует выделения строк мышкой и клавиатурой */
var Table = function(messagesBlock, $scrollArea) {
    var node = messagesBlock.node;
    if (!node) { return; }
    this.messagesBlock = messagesBlock;
    this.node = node;
    this.paddingTop = 30;
    this.paddingBottom = this.paddingTop * 2;
    this.$scrollArea = $scrollArea;
    this.$headline = $('.b-messages-head', node);
    this.headline = this.is3pane ? new TableHeadline(this.$headline, $scrollArea) : null;
    this.updateHeader();
    this.messages = node.getElementsByClassName('b-messages')[0];
    this.curRowIsFocused = false;
    this.checkboxTree = new CheckboxTree({
        checkbox: this.checkbox,
        total: 0
    });
    CheckboxTree.addTRs(node, this.checkboxTree);
    this.folderActionsMode = false;
    this.updateRows();
};

$.extend(Table, {
    // Варианты открытия письма при его выделении
    DENY: 1,
    ALLOW: 2,
    WITH_DELAY: 3
});

Daria.Table = Table;

Table.prototype.is3pane = (Daria.layout !== '2pane');

/**
 * Устанавливает состояние "работы со всей папкой"
 * Если режим включен, то блокируются некоторые кнопки тулбара и меняется infoline списка писем.
 * Состояние запоминается в свойстве this.folderActionsMode.
 * @param {Boolean} [flag=this.folderActionsMode]  Если не указан, то значение берется из запомненного внутреннего состояния.
 */
Table.prototype.updateFolderActionsMode = function(flag) {
    flag = (typeof flag === 'boolean') ? flag : this.folderActionsMode;
    this.folderActionsMode = flag;
    if (flag) {
        var fid = this.messagesBlock.params.current_folder;
        var hFolders = Jane.$H('folders');
        var count = hFolders.getCount(fid);
        var unread = hFolders.getUnreadCount(fid);
        var btnVisible = ['folder-delete', 'folder-mark-as-read'];
        var btnEnable = ['folder-delete'];

        //TODO исправить при создании ручки "не прочитано" для папки
        if (unread) {
            btnEnable.push('folder-mark-as-read');
            //btnVisible.push('folder-mark-as-read');
        }/* else {
            //btnVisible.push('folder-mark-as-unread');
        }
        */

        this.infoline.showMsg(i18n('%Messages_Infoline_Выбраны_все_снять_выделение', count, fid));

        Jane.watcher.set('folder-visible-actions', btnVisible.join(','));
        Jane.watcher.set('folder-enable-actions', btnEnable.join(','));
    } else {
        Jane.watcher.set('folder-visible-actions', '');
        Jane.watcher.set('folder-enable-actions', '');
        this.refreshInfoline();
    }

    Jane.watcher.set('folder-actions-mode', flag);
};

Table.prototype.updateHeader = function() {
    var cb = this.checkbox = this.$headline.find('.b-messages-head__checkbox')[0];
    this.updateInfoline();
    if (cb && this.checkboxTree) {
        var oldcb = this.checkboxTree.checkbox;
        cb.checked = oldcb.checked;
        cb.disabled = oldcb.disabled;
        this.checkboxTree.checkbox = cb;
        this.refreshInfoline();
    }
};

Table.prototype.updateInfoline = function() {
    this.infoline = new Daria.Infoline(this.node.getElementsByClassName('js-infoline')[0]);
};

Table.prototype.refreshInfoline = function() {
    var count = this.getCount();

    // надо скрывать инфолайн, если ничего не выбрано
    var clearInfoline = (count === 0);

    var selectionMode = !clearInfoline;
    // if (selectionMode && count == 1) {
    //     var selected = this.getIDs();
    //     var pageParams = Jane.Page.params;
    //     // режим выделения включается, если есть выбранное письмо и оно не текущее
    //     selectionMode = (pageParams.ids && selected.mids[0] != pageParams.ids) || (pageParams.thread_id && selected.tids[0] != pageParams.thread_id);
    // }
    Jane.watcher.set('daria:selection-mode', selectionMode);

    // в 3pane эта плашка скрыта
    if (Daria.layout != '2pane') {
        return;
    }

    this.toggleHeadline(!clearInfoline);

    if (clearInfoline) {
        this.infoline.clear();
    } else {

        var total = this.getTotal();
        var fid = this.messagesBlock.params.current_folder;

        var body = i18n('%Выбрано_N_писем', count);

        if (!this.is3pane) {
            if (count === 1) {
                body += ' · <a class="b-messages-head__infoline__link daria-action" data-action="reply">' + i18n('%Messages_Infoline_Ответить') + '</a>';
            }

            body += ' · <a class="b-messages-head__infoline__link daria-action" data-action="messages.deselect">' + i18n('%Messages_Infoline_Снять_выделение') + '</a>';

            // Если выделены все чекбоксы, то предлагаем пометить прочитаными или удалить все письма в папке.
            if (fid && count === total && count > 1) {
                body += ' · <a class="b-messages-head__infoline__link daria-action" data-action="messages.select-all" data-params="fid=' + fid + '">' +
                        i18n('%Messages_Infoline_Выбрать_все') + '</a>';
            }
        }

        this.infoline.showMsg(body);
    }
};

Table.prototype.toggleHeadline = function(flag) {
    if (this.headline) {
        this.headline.toggleAllowFixedState(flag);
    }
};

Table.prototype.hasVerticalScroll = function() {
    var scrollArea = this.getScrollArea()[0];
    return scrollArea.scrollHeight > scrollArea.offsetHeight;
};

Table.prototype.getScrollArea = function() {
    return this.$scrollArea;
};

/** Вещает событие о том, что изменилось количество зачеканных чекбоксов */
Table.prototype.onCountChange = function() {
    var count = this.getCount();
    var total = this.getTotal();

    // Отключаем режим работы со всеми сообщениями в папке в 2pane если снимается выделение хотя бы с одного письма
    // либо если в папке вообще нет писем
    var folderActionMode = (!total || count < total) ? false : null;
    this.updateFolderActionsMode(folderActionMode);
    Jane.watcher.set('selectedCount', count);
};

/** Возвращает количество зачеканных в таблице */
Table.prototype.getCount = function() {
    return this.checkboxTree.count;
};

/** Возвращает количество писем в таблице */
Table.prototype.getTotal = function() {
    return this.checkboxTree.total;
};

/** Обновление данных тейбла (чекбоксы и ряды) из DOM ноды */
Table.prototype.update = function() {
    this.updateRows();
    this.checkboxTree.updateTRs(this.node, this.checkboxTree);
    // Прочекиваем добавленные сообщения, если выбран главный чекбокс
    if (this.checkboxTree.checked) {
        this.checkboxTree.sync();
    }
    this.onCountChange();
};

/** Обновление данных с сохранением визуального фокуса на элементе */
Table.prototype.updateWithFocus = function() {
    var needToSaveFocus = false;

    if (this.curRowId && this.isCurrentFocused()) {
        needToSaveFocus = true;
    }

    this.update();

    if (needToSaveFocus) {
        this.setCurrent(this.curRowId);
    }
};

/** Обновляет массив this.rows, служащий для хранения порядка строк. */
Table.prototype.updateRows = function() {
    var rows = [];
    // Оптимизация для поиска строк
    var rowsHash = {};
    var allTRs = this.node.getElementsByClassName('b-messages__message');

    $.each(allTRs, function(i, v) {
        var checkbox = v.getElementsByClassName('b-messages__message__checkbox__input')[0];
        if (checkbox) {
            var id = checkbox.value;
            rows.push({id: id, tr: v});
            // Запоминаем индекс для ускорения поиска следующего/предыдущего элемента
            rowsHash[id] = i;
        }
    });
    this.rows = rows;
    this.rowsHash = rowsHash;
    Jane.events.trigger('table.updaterows', this);
};

/**
 * Методы getRow, getPrevRow и getNextRow возвращают объект со свойствами:
 *     id - id строки
 *     tr - нода строки
 */

Table.prototype.getRow = function(id) {
    return this.rows[this.rowsHash[id]] || null;
};

Table.prototype.getPrevRow = function(id) {
    var bMessages = Jane.$B('messages-list-box').active;
    var prevRow = this.rows[this.rowsHash[id] - 1];

    // Это защита, чтобы курсор не проваливался в закрытый загруженный тред
    if (prevRow && bMessages) {
        var tree = this.getCheckboxTree(prevRow.id);
        var thread = tree && tree.root;
        // Если мы в треде (есть thread и есть thread.tr) и тред закрытый
        if (thread && thread.tr && !bMessages.isThreadOpen(thread.id)) {
            prevRow = this.getRow(thread.id);
        }
    }
    return prevRow || null;
};

Table.prototype._getNextRow = function(nextTr) {
    var nextRow = null;

    if (nextTr) {
        var nextId = /(tid|mid)-(\d+)/.exec(nextTr.className);
        if (nextId) {
            nextRow = this.getRow((nextId[1] == 'tid' ? 't' : '') + nextId[2]);
        }
    }

    return nextRow;
};

Table.prototype.getNextRow = function(id) {
    /*var bMessages = Jane.$B('messages-list-box').active,
        nextRow = this.rows[this.rowsHash[id] + 1];
    // Это защита, чтобы курсор не проваливался в закрытый загруженный тред
    if (nextRow && bMessages) {
        var tree = this.getCheckboxTree(nextRow.id),
            thread = tree && tree.root;
        // Если мы в треде (есть thread и есть thread.tr) и тред закрытый
        if (thread && thread.tr && !bMessages.isThreadOpen(thread.id)) {
            // Получаем индекс треда в списке и прабавляем к нему кол-во писем в нем
            var threadInd = this.rowsHash[thread.id];
            nextRow = this.rows[threadInd + thread.total + 1];
            */
    var bMessages = Jane.$B('messages-list-box').active;
    var nextRow;
    for (var i = 0, len = this.rows.length; i < len; i += 1) {
        if (this.rows[i].id === id) {
            nextRow = this.rows[i + 1];

            // это защита, чтобы курсор не проваливался в закрытый загруженный тред
            if (nextRow && bMessages) {
                var tree = this.getCheckboxTree(nextRow.id);
                // если мы в треде (есть root и есть root.tr) и тред закрытый
                if (tree && tree.root && tree.root.tr && !bMessages.isThreadOpen(tree.root.id)) {
                    // т.к. мы не знаем сколько надо прибавить, то идем ближайший b-message__message
                    var nextTr = $(tree.root.tr).nextAll('.b-messages__message:first')[0];
                    if (nextTr) {
                        nextRow = this._getNextRow(nextTr);
                    } else {
                        // это, возможно, виджет, обернутый в контайнер .block-messages-item
                        var $messagesItem = $(tree.root.tr).closest('.block-messages-item');
                        nextTr = $messagesItem.nextAll('.b-messages__message,.block-messages-item')[0];
                        if (nextTr) {
                            if (nextTr.className.indexOf('block-messages-item') > -1) {
                                // это block-messages-item обертка
                                nextTr = nextTr.childNodes[0];
                            }
                            nextRow = this._getNextRow(nextTr);
                        } else {
                            nextRow = null;
                        }
                    }
                }
            }

            return nextRow;
        }
    }
    return nextRow || null;
};

Table.prototype.getCheckboxTree = function(id) {
    return this.checkboxTree.items[id];
};

Table.prototype.getIDsRange = function(rowId1, rowId2) {
    var ids = {};
    var rowInRange = false;

    $.each(this.rows, function(i, v) {
        var id = v.id;
        if (id === rowId1 || id === rowId2) {
            if (id === rowId1) { rowInRange = !rowInRange; }
            if (id === rowId2) { rowInRange = !rowInRange; }
            ids[id] = 1;
            if (!rowInRange) { return ids; }
        } else if (rowInRange) {
            ids[id] = 1;
        }
    });

    return ids;
};

// Прочекивает или расчекивает строки по массиву ids
//  ids - Array | Object
Table.prototype.syncRows = function(ids, flag) {
    var that = this;
    var is_arr = $.isArray(ids);

    $.each(ids, function(k, v) {
        that.syncRow(is_arr ? v : k, flag);
    });
};

Table.prototype.syncRow = function(id, flag) {
    var checkboxTree = this.getCheckboxTree(id);

    // Если чекбокс строки уже в нужном состоянии, то ничего делать не надо
    if (!checkboxTree || checkboxTree.checked === flag) { return; }

    if (flag) {
        checkboxTree.on(true);
    } else {
//        var exceptId = this.is3pane ? this.curRowId : null;
        checkboxTree.off(true/*, exceptId*/);
    }
};

/**
 * Выбирает элемент по ID.
 * @param {String} id ID-строки.
 * @private
 */
Table.prototype.selectRow = function(id, flag) {
    var checkboxTree = this.getCheckboxTree(id);

    if (typeof flag === 'undefined') {
        flag = !checkboxTree.checked;
    }

    if (checkboxTree) {
        this.syncRow(id, flag);
        this.onCountChange();
    }
};

Table.prototype.check = function(e, checkbox) {
    var id = checkbox.value;
//    var exceptId = this.is3pane ? this.curRowId : null;

    if (id && (id != "0")) { // У главного чекбокса выставлен не пустой value, а value="0". Есть ощущение, что пустой value приводит к неправильному наложению xsl'я в Хроме.
        var tree = this.getCheckboxTree(id);
        // Не даем снять чекбокс с текущего элемента в 3pane
        /*if (this.is3pane && id === this.curRowId && tree.checked) {
            e.preventDefault();
        }*/

        // Если был зажат shift и образовался диапазон
        if (e.shiftKey && this.startRowId !== id) {
            this.startRowId = this.startRowId || this.curRowId || this.rows[0].id;
            var newIDs = this.getIDsRange(this.startRowId, id); // Получаем новый диапазон
            this.syncRows(newIDs, checkbox.checked); // Прочекиваем новый диапазон
        // Тут почему-то иногда не бывает CheckboxTree
        } else if (tree) {
            tree.sync();
        }

        if (!this.curRowId) {
            this.curRowId = id;
            this.curRowIsFocused = false;
        }
        this.startRowId = id;

        // TODO: грохнуть это условие при удалении промо хоткеев
        // если мышкой накликали 3 и более писем, то показывает промо хоткеев
        //@hotkeys
        if (this.getCount() >= 3) {

            if (this.promoHotkeysTimeout) {
                clearTimeout(this.promoHotkeysTimeout);
            }

            this.promoHotkeysTimeout = setTimeout(function() {
                Jane.Actions.run('trigger-hotkeys-promo-bubble', {
                    eventName: 'messages-check'
                });
                this.promoHotkeysTimeout = null;
            }, 10);
        }

    } else {
        this.checkboxTree.sync();
        this.startRowId = null;
    }
    this.onCountChange();
};

Table.prototype.toggleSelectAll = function() {
//    var exceptId = this.is3pane ? this.curRowId : null;
    this.checkbox.checked = !this.checkbox.checked;
    this.checkboxTree.sync(/*exceptId*/);
    this.startRowId = null;
    this.onCountChange();
};

Table.prototype.deselect = function() {
//    var exceptId = (this.is3pane && !force) ? this.curRowId : null;
    this.checkboxTree.off(false/*, exceptId*/);
    this.startRowId = null;
    this.onCountChange();
};

/**
 * Ищет ближайшее письмо от event.target и возвращает его ID.
 * @param {Event} e
 * @private
 */
Table.prototype._getId = function(e) {
    return $(e.target)
        .closest('.js-message')
        .attr('data-id');
};

Table.prototype.startMouseSelection = function(e, isDndEnabled) {
    var that = this;
    var id = this._getId(e);
    if (!id) {
        return;
    }

    // Запоминаем Y-координату где было начато выделение
    this.mouseMoveStartY = e.pageY;
    this.mouseMoveStartX = e.pageX;
    this.mouseMoveStartEvent = e;

    // id начальной строки выделения
    this.mouseMoveStartRowId = id;
    // Запоминаем прочекивать или расчекивать строки
    this.mouseMoveFlag = !this.getCheckboxTree(id).checked;
    // Обнуляем диапазон выделенных строк
    this.mouseMoveIDs = null;

    this.$document
        .on("mousemove.table", function(e) { that._onMousemove(e, isDndEnabled); })
        .on("mouseup.table", this.stopMouseSelection.bind(this));
};

Table.prototype._onMousemove = function(e, isDndEnabled) {
    //катет по Y
    var cathetusA = Math.abs(e.pageY - this.mouseMoveStartY);
    //катет по X
    var cathetusB = Math.abs(e.pageX - this.mouseMoveStartX);
    var hypotenuse = Math.sqrt(Math.pow(cathetusA, 2) + Math.pow(cathetusB, 2));
    var limit = 14;

    if (hypotenuse > limit) {
        this.stopMouseSelection();

        var tagB = cathetusB / cathetusA;

        // угол больше 45 градусов
        if (tagB > 1 && isDndEnabled) {
            // имитируем dnd
            Jane.DragNDrop.setDragData(
                new Daria.DragMessage()
                    .init(this.mouseMoveStartEvent, $(e.target).closest('.js-message'))
            );
            Jane.DragNDrop.bindDragEvents();

        } else {
            this.$document
                .on("mousemove.table", this.doMouseSelection.bind(this))
                .on("mouseup.table", this.stopMouseSelection.bind(this));
        }
    }

    return false;

};

Table.prototype.doMouseSelection = function(e) {
    // Получаем строку над которой в данный момент находится мышка
    var id = this._getId(e);
    // если строки нет (мышка не над списком), то ничего не делаем
    if (id) {
        var newIDs = this.getIDsRange(this.mouseMoveStartRowId, id); // Получаем новый диапазон

        if (this.mouseMoveIDs) {
            // Нужно найти все id из this.mouseMoveIDs которых нет в newIDs
            // и отменить выделение для соответствующих строк
            var diff = {};
            $.each(this.mouseMoveIDs, function(k) {
                if (!newIDs[k]) { diff[k] = 1; }
            });
            this.syncRows(diff, !this.mouseMoveFlag);
        }

        this.syncRows(newIDs, this.mouseMoveFlag); // Прочекиваем новый диапазон
        this.mouseMoveIDs = newIDs;
        this.startRowId = id;
        this.onCountChange();
    }

    return false;
};

Table.prototype.stopMouseSelection = function() {
    this.$document.off(".table");
    // чтобы не случился click, убиваем событие
    return false;
};

/**
 * Добавляет элемент из события в текущее выделение.
 * Этот метод программно эмулирует поведение, которое бы произошло при выделении элемента.
 * @param {Event} e
 */
Table.prototype.addToSelection = function(e) {
    var id = this._getId(e);
    if (id) {
        // выделение с shift
        if (e.shiftKey) {
            if (this.startRowId !== id) {
                // это копипаст из check
                this.startRowId = this.startRowId || this.curRowId || this.rows[0].id;
                var newIDs = this.getIDsRange(this.startRowId, id); // Получаем новый диапазон
                var checkboxTree = this.getCheckboxTree(id);
                this.syncRows(newIDs, !checkboxTree.checked); // Прочекиваем новый диапазон
                this.onCountChange();
            }
        } else {
            this.selectRow(id);
        }
    }
};

Table.prototype.startKeyboardSelect = function() {
    if (this.rows.length) {
        this.keyboardStartRowId = this.curRowId || this.rows[0].id;

        var checkboxTree = this.getCheckboxTree(this.keyboardStartRowId);
        this.keyboardFlag = !!(checkboxTree && !checkboxTree.checked);

        /*
        //aandrosov: не знаю зачем это надо
        if (this.is3pane && this.keyboardStartRowId === this.curRowId) {
            this.keyboardFlag = !this.keyboardFlag;
        }
        */

        this.keyboardIDs = null;
    }
};

Table.prototype.moveCurrentUp = function(isSelect) {
    if (this.curRowId) {
        var prevRow = this.getPrevRow(this.curRowId);
        if (prevRow) {
            this.moveCurrentTo(prevRow.id, isSelect, Table.WITH_DELAY);
            return;
        }
    }

    if (this.rows.length) {
        this.moveCurrentTo(this.rows[0].id, isSelect, Table.WITH_DELAY);
    }
};

Table.prototype.moveCurrentDown = function(isSelect) {
    if (this.curRowId) {
        var nextRow = this.getNextRow(this.curRowId);
        if (nextRow) {
            this.moveCurrentTo(nextRow.id, isSelect, Table.WITH_DELAY);
            return;
        }
    }

    if (this.rows.length && Daria.layout === '2pane') {
        Jane.events.trigger('last-email-focused');
    }
};

Table.prototype.moveCurrentHome = function(isSelect) {
    if (this.rows.length) {
        this.moveCurrentTo(this.rows[0].id, isSelect);
    }
};

Table.prototype.moveCurrentEnd = function(isSelect) {
    if (this.rows.length) {
        this.moveCurrentTo(this.rows[this.rows.length - 1].id, isSelect);
    }
};

/**
 * Выделяет сообщение как текущее (в 3pane также открывает его в соответствующей панеле)
 * @param {String} id  ID сообщения
 * @param {Boolean} [isSelect=false]  Флаг группового выделения
 * @param {Number} [showMsgMode=Table.ALLOW]  Открывать ли письмо в просмотрщике
 *                                   Возможные значения:
 *                                     Table.ALLOW - открыть
 *                                     Table.DENY - не открывать
 *                                     Table.WITH_DELAY - открыть в задержкой
 *                                   В 2pane - игнорируется.
 */
Table.prototype.moveCurrentTo = function(id, isSelect, showMsgMode) {
    showMsgMode = (this.is3pane && !isSelect) ? showMsgMode || Table.ALLOW : Table.DENY;
    var selectionMode = Jane.watcher.get('daria:selection-mode');
    if (selectionMode) {
        showMsgMode = Table.DENY;
    }

    if (!id || id === this.curRowId) { return; }

    // Снимаем выделение со всех писем
    if (this.is3pane && !isSelect && !selectionMode) {
        this.deselect(true);
    }
    if (this.curRowId) {
        this.unsetCurrent(this.curRowId);
    }
    this.setCurrent(id);
    this.curRowId = id;

    if (isSelect) {
        var newIDs = this.getIDsRange(this.keyboardStartRowId, id); // Получаем новый диапазон

        if (this.keyboardIDs) {
            var diff = {};
            $.each(this.keyboardIDs, function(k) {
                if (!newIDs[k]) { diff[k] = 1; }
            });
            this.syncRows(diff, !this.keyboardFlag);
        }

        this.syncRows(newIDs, this.keyboardFlag); // Прочекиваем новый диапазон
        this.keyboardIDs = newIDs;
        this.onCountChange();
    }

    if (showMsgMode !== Table.DENY) {
        if (showMsgMode === Table.ALLOW) {
            this.openCurrent();
        } else {
            this.openCurrentLazy();
        }
    }
};

Table.prototype.setCurrent = function(id, dontFocus) {
    var that = this;
    this.curRowIsFocused = false;

    function _scrollTop(position) {
        if (typeof position === 'undefined') {
            return that.$scrollArea.scrollTop();
        }

        if ($.isWindow(that.$scrollArea[0])) {
            that.$scrollArea.scrollTop(position);

        } else {
            that.$scrollArea.stop(true).animate({ scrollTop: position }, { duration: 300, easing: 'linear' });
        }
    }

    var row = this.getRow(id);
    if (row) {
        var $tr = $(row.tr);

        if (!dontFocus) {
            this.addVisualFocusTo($tr);
        }

        if (id === this.rows[0].id) {
            _scrollTop(0);
            return;
        }

        var scroll = _scrollTop();
        var top = $tr.offset().top;

        if (this.is3pane) {
            // отнимаем offset области
            top -= this.$scrollArea.offset().top;
            // прибавляем скролл, т.к. offset у выделенного элемента считается с ним
            top += scroll;
        }

        var height = this.$scrollArea.height();

        if (top > scroll + height - this.paddingBottom) {
            _scrollTop(top - height + this.paddingBottom);
        } else if (top < scroll + this.paddingTop) {
            _scrollTop(top - this.paddingTop);
        }
    }
};

Table.prototype.unsetCurrent = function(id) {
    var row = this.getRow(id);
    if (row) {
        this.removeVisualFocusFrom(row.tr);
    }
};

Table.prototype.selectCurrent = function(e) {
    if (!this.curRowId) { return; }

    // Убираем у чекбоксов фокус, чтобы они не выделялись при нажатии на пробел.
    if (e) {
        var $target = $(e.target);
        if ($target.hasClass('b-messages__message__checkbox__input')) { $target.blur(); }
    }

    this.selectRow(this.curRowId);
};

Table.prototype.isCurrentFocused = function() {
    return Jane.$H('settings').getSetting('enable_hotkeys') === 'on' && this.curRowIsFocused;
};

Table.prototype.openCurrentLazy = function() {
    if (this.curRowId) {
        // при открытии письма снимаем выделение
        if (Jane.watcher.get('daria:selection-mode')) {
            this.deselect();
        }
        var row = this.getRow(this.curRowId);
        if (row !== null) {
            // Событие должно отличаться от обычного клика
            // @see https://jira.yandex-team.ru/browse/DARIA-38179
            $(row.tr).trigger($.Event('click', {tableOpenCurrent: true}));
        }
    }
}.lazy(250);

Table.prototype.openCurrent = Table.prototype.openCurrentLazy.exec;

Table.prototype.moveCurrentToRoot = function() {
    if (!this.curRowId) { return; }

    var checkboxTree = this.getCheckboxTree(this.curRowId);
    if (checkboxTree) {
        var root = checkboxTree.root;
        if (root) {
            this.moveCurrentTo(root.id);
        }

    } else {
        //после удаление писем список может не инвалидировать и curRowid будет смотреть на несуществующее письмо
        this.curRowId = null;
    }
};

/** Добавляем визуальный класс для переданного элмента */
Table.prototype.addVisualFocusTo = function(node) {
    this.curRowIsFocused = true;
    $(node).addClass('b-messages__message_focus');
};

/** Убираем визуальный класс для переданного элмента */
Table.prototype.removeVisualFocusFrom = function(node) {
    this.curRowIsFocused = false;
    $(node).removeClass('b-messages__message_focus');
};

/** Убираем визуальный класс для current */
Table.prototype.removeVisualFocusFromCurrent = function() {
    var row = this.getRow(this.curRowId);
    if (row) {
        this.removeVisualFocusFrom(row.tr);
    }
};

Table.initEvents = function() {
    Table.prototype.$document = $(document);

    $("body")
        .on("click", ".b-messages-head__checkbox, .b-messages__message__checkbox__input", function(e) {
            // В 3pane главный чекбокс иногда скрыт, но его label виден.
            // При клике на label-е триггерится клик на чекбоксе, поэтому нам нужно проверять, скрыт ли он.
            /**
             * @type Daria.Table
             */
            var table = Table && Table.active;
            if (table && $(this).is(':visible')) {
                table.check(e, this);
            }
            e.stopPropagation();
        })
        .on('mousedown', '.js-message', function(e) {
            if (e.which != 1 || e.buttons == 2) {
                return false;
            }

            // у SVG className типа SVGAnimatedString
            if (typeof e.target.className === 'string' && e.target.className.indexOf('b-label') > -1) {
                // начали перетаскивание на метке - драг-н-дроп метки
                return true;

            } else {
                Table.active.startMouseSelection(e, Jane.$H('settings').isSet('dnd_enabled'));
                return false;
            }
        });
};

/* ------------------------------------------------------------------------------------------------------------- */

/**
 * Фиксированный верхний заголовок списка писем для 3pane (DARIA-11986).
 * @param {jQuery} $headline  Элемент заголовка, позиция которого будет меняться
 * @param {jQuery} $scrollArea  Контейнер списка писем (со скролом)
 */

function TableHeadline($headline, $scrollArea) {
    this.$headline = $headline;
    this.$headlineClone = $headline.clone();
    this.$scrollArea = $scrollArea;
    this.fixedState = false;
    this.allowFixedState = true;
    this._bindEvents();
}

$.extend(TableHeadline.prototype, {
    toggleAllowFixedState: function(flag) {
        this.allowFixedState = !!flag;
        this.updatePosition();
    },
    updatePosition: function() {
        var $headline = this.fixedState ? this.$headlineClone : this.$headline;
        var fixed = this.allowFixedState && ($headline.position().top < 0);
        this._toggleFixedState(fixed);
    },
    updateWidth: function() {
        if (this.fixedState) {
            this.$headline.css('width', this.$headlineClone.width());
        }
    },
    _modifiedCssProps: Daria.array2obj(['left', 'top', 'width'], ''),
    _toggleFixedState: function(flag) {
        if (flag !== this.fixedState) {
            var $line = this.$headline;
            var $scroll = this.$scrollArea;
            var $clone = this.$headlineClone;
            if (flag) {
                var pos = $scroll.position();
                $line.replaceWith($clone).css({
                    left: pos.left,
                    top: 0,
                    width: $clone.width()
                }).addClass('b-messages-head_fixed').insertBefore($scroll);
            } else {
                // IE9 сбрасывает скролл
                var scrollTop = $scroll[0].scrollTop;
                $line.css(this._modifiedCssProps).removeClass('b-messages-head_fixed').replaceAll($clone);
                $scroll[0].scrollTop = scrollTop;
            }
            this.fixedState = flag;
        }
    },
    _bindEvents: function() {
        this.$scrollArea.scroll(this.updatePosition.bind(this));
    }
});

$(function() {
    Table.initEvents();
});

/* ../../js/components/table.js end */

    /* ../../js/components/translate.js begin */
(function($) {

    Daria.Translate = {
        MAX_BLOCK_LEN: 1000,

        cache: {},

        getCache: function(key) {
            return this.cache[key];
        },

        setCache: function(key, val) {
            this.cache[key] = val;
        },

        clearCache: function(key) {
            delete this.cache[key];
        },

        langs: {
            "ru": { s: ["en", "uk", "tr", "pl", "de", "fr", "es", "it"], name: i18n("%русский")},
            "uk": { s: ["ru"], name: i18n("%украинский")},
            "en": { s: Daria.product == "RUS" ? ["ru", "tr"] : ["tr", "ru"], name: i18n("%английский")},
            "tr": { s: Daria.product == "RUS" ? ["ru", "en"] : ["en", "ru"], name: i18n("%турецкий")},
            "pl": { s: ["ru"], name: i18n("%польский")},
            "de": { s: ["ru"], name: i18n("%немецкий") },
            "fr": { s: ["ru"], name: i18n("%французский") },
            "es": { s: ["ru"], name: i18n("%испанский") },
            "it": { s: ["ru"], name: i18n("%итальянский") },

            "all": { s: ["ru", "uk", "en", "tr", "pl", "de", "fr", "es", "it"], name: ""}
        },

        // @see https://github.yandex-team.ru/mail/mail_getter/blob/master/include/mail_getter/recognizerWrapper.h#L139
        id2lang: {
            "1": "ru",
            "2": "en",
            "3": "pl",
            "5": "uk",
            "6": "de",
            "7": "fr",
            "12": "es",
            "13": "it",
            "44": "tr"
        },

        showInfolineDone: function(lang_from, lang_to) {
            var cont = Jane.$B("messages-box").active.cache.node;
            var uid = Jane.$H("account-information").getDataKey('uid');
            var $infoline = $('.js-translate-infoline', cont);

            $infoline.addClass("g-hidden");

            var html = Jane.tt("mail-common:translate-infoline-done", {
                "lang_to": lang_to,
                "lang_from": lang_from,
                "uid": Jane.$H("account-information").getDataKey('uid'),
                "mid": $infoline.closest('.b-message')[0].className.match(/mid-(\d+)/)[1]
            });
            $(".js-translate-infoline", cont).before(html);

            // Показ кнопки "перевести с переводчиком"
            Jane.c({ "Compose-Translate": "Показ " + (uid % 2 ? "зеленой" : "серой") +
                " кнопки 'перевести с переводчиком'" });

        },

        showInfoline: function(node, force, preventCounter) {
            var lang_to = Daria.locale;
            var cont = $(".b-message-body__content", node);
            if (!cont.length) {
                return;
            }
            var lang_from = this.getLangFromMessage(cont);

            if (!force && !(lang_from in this.langs)) {
                return;
            }

            var text = cont.html();
            var plain_text = $.trim(cont.text());

            if (force) {
                lang_from = (lang_from in this.langs) ? lang_from : "en";
                lang_to = this.langs[lang_from].s[0];
            }

            // Если связка языков для перевода не поддерживается
            if (
                !force && (
                    !this.langs[lang_from] ||
                        ($.inArray(lang_to, this.langs[lang_from].s) == -1) ||
                        lang_from == lang_to || !plain_text.length ||
                        (lang_from == "ru" && lang_to == "uk") ||
                        text.length > 200000
                    )
                ) {

                if (text.length > 200000) {
                    Jane.c(71105, 'msg.too_big');
                }
                return;
            }

            // Удаляем все предыдущие дропдауны
            $(".js-translate-infoline, .js-translate-infoline-done", Jane.$B("messages-box").active.cache.node).remove();

            var mid = cont.closest('.b-message')[0].className.match(/mid-(\d+)/)[1];
            var html = Jane.tt("mail-common:translate-infoline", {"lang_to": lang_to, "lang_from": lang_from, "mid": mid });
            var bMessageBody = $('.block-message-body', Jane.$B('messages-box').active.cache.node);
            var messageInfoline = bMessageBody.find('.js-setmesstype-infoline');
            if (bMessageBody.find('.b-message-notification_firstline').length) {
                bMessageBody.find('.b-message-notification_firstline').after(html);
            } else if (messageInfoline.length) {
                messageInfoline.after(html);
            } else {
                bMessageBody.prepend(html);
            }

            if (this.langs[lang_from].s.length == 1) {
                $(".js-lang-to", html)
                    .removeClass("b-mail-dropdown__handle b-mail-dropdown__handle_dotted daria-action");
            }

            if (!preventCounter) {
                Jane.c(71105, 'msg.show');
            }

            return true;
        },

        getLangFromMessage: function(node) {
            return this.id2lang[node.data('lang')];
        },

        getLangByMid: function(mid) {
            var cache = Jane.$H('message-body').getCacheByParams({ ids: mid });
            if (cache && $.isArray(cache.body) && cache.body.length) {
                var id = cache.body[0].lang;
                return this.id2lang[id];
            }
        },

        defineLanguage: function(text) {
            var regExps = {
                "uk": /[ґїі]/ig,
                "ru": /[а-яё]/ig,
                "pl": /[ąęł]/ig,
                "tr": /[çğş]/ig,
                "de": /[äüß]/ig,
                "es": /[ňñ]/ig,
                "fr": /[âàéêîôùûÿ]/ig
            };

            // Если письмо состоит только из цифр или пробельных символов, возвращаем текущую локаль
            if (/^(\d|\s)*$/.test(text)) {
                return Daria.locale;
            }

            for (var lang in regExps) {
                if (regExps[lang].test(text)) {
                    return lang;
                }
            }

            return "en";
        },

        /**
         * Переводит переданный текст
         *
         * @param {String} from - исходный язык
         * @param {String} to - результирующий язык
         * @param {String|Array} text - текст для перевода
         * @param {Function} cb - callback в случае успеха
         * @param {Function} error_cb - callback в случае ошибки
         */
        translate: function(from, to, text, cb, error_cb) {
            text = $.isArray(text) ? text : [text];

            var paramsObj = {
                format: "html",
                lang: (from + "-" + to),
                srv: "yamail"
            };

            var handlerArray = $.map(text, function(e) {
                return { handlers: ['translate'], params: $.extend({}, paramsObj, { text: e })};
            });

            Jane.Handler.getAll(
                handlerArray,
                function(json) {
                    var res = jpath(json, '.handlers[.name == "translate"].data.text');
                    // проверяем, что количество переведенных текстов совпадает с количеством отданным на перевод
                    if (res.length && res.length == text.length) {
                        cb(_.flatten(res));
                    } else {
                        if (error_cb) {
                            error_cb();
                        }
                    }
                },
                {
                    force: true
                }
            );
        },

        /**
         * Получаем направление перевода из селектов
         *
         * @param mode откуда идёт перевод: message / compose
         */

        getLang: function(mode) {
            var node;
            if (mode === 'message') {
                node = Jane.$B('messages-box').active.cache.node;
            } else if (mode === 'compose') {
                node = Jane.$B('compose').cache.node;
            }

            var lang_from = $('.js-lang-from', node)[0];
            var lang_to = $('.js-lang-to', node)[0];

            if (!lang_from || !lang_to) {
                return [];
            }

            lang_from = Jane.Actions.getParams(lang_from)['lang'];
            lang_to = Jane.Actions.getParams(lang_to)['lang'];

            return [lang_from, lang_to];
        },

        /**
         * Обновляет меню
         *
         * @param lang язык
         * @param mode откуда идёт перевод: message / compose
         */

        updateMenu: function(lang, mode) {

            if (!this.langs[lang]) {
                return;
            }

            // Сформируем списки языков, которые покажем и скроем
            var langs = this.langs[lang].s;

            var show = langs;
            var hide = [];

            $.each(
                this.langs,
                function(key) {
                    if ($.inArray(key, langs) < 0) {
                        hide.push(key);
                    }
                }
            );

            var node;

            // В просмотре письма
            if (mode === "message") {
                node = Jane.$B("messages-box").active.cache.node;
            } else if (mode === "compose") {
                node = Jane.$B("compose").cache.node;
            }

            var $handle = $(".js-lang-to", node);
            var $dropdown = $handle.closest(".b-mail-dropdown");

            // Заменяем во вкладке
            $handle.text(this.langs[show[0]].name);
            var dropdownParams = Jane.Actions.getParams($handle[0]);
            dropdownParams['lang'] = show[0];
            $handle.attr('data-params', $.param(dropdownParams));

            // Если есть выпадушка с выбором языков, то обновляем её контент
            if ($dropdown.data("dropdownContent")) {
                var sep = ".js-lang-";
                var hideSelector = sep + hide.join(", " + sep);
                var showSelector = sep + show.join(", " + sep);
                var dropdownMenu = $dropdown.data("dropdownContent");

                // Показываем нужные и скрываем ненужные языки
                $(hideSelector, dropdownMenu).hide();
                $(showSelector, dropdownMenu).show();

                // Выбираем первый подходящий язык
                //$(".b-mail-dropdown__item", dropdownMenu).removeClass("b-mail-dropdown__item_selected");
                //$(sep + show[0], dropdownMenu).addClass("b-mail-dropdown__item_selected");
            }

            // Убираем с хендлера псевдоссылку, если для перевода доступен только один язык
            var classes = ["daria-action", "b-mail-dropdown__handle"];

            classes.push(mode === "compose" ? "b-link_js" : "b-mail-dropdown__handle_dotted");
            $handle.toggleClass(classes.join(" "), show.length > 1);
        },

        revert: function(block, leave) {

            var mid = Daria.Page.params.ids;
            var oldText = Daria.Translate.getCache(mid);
            var node = block ? block.getCache().node : Jane.$B("messages-box").active.getCache().node;

            if (oldText) {
                var $subject = $(".js-message-subject", node);
                $subject.html(oldText[0]);

                var $body = $(".b-message-body__content", node);
                $body.html(oldText[1]);
                this.clearCache(mid);
            }

            $(".js-translate-infoline-done", node).remove();

            if (leave) {
                $(".js-translate-infoline", node).remove();
            } else {
                $(".js-translate-infoline", node).removeClass("g-hidden");
            }

        }
    };

})(jQuery);

/* ../../js/components/translate.js end */

    /* ../../js/components/upic-uploader.js begin */
Daria.upicUploader = {
    upload: function(userpicFile, callback) {
        var $userpicFile = $(userpicFile);
        // при необходимости загрузить юзер пик
        // создаётся временная форма, в которую будет добавлен input@file
        // чтобы отправить юзерпик на сервер
        if (this.$upicUploadForm) {
            // если форма уже была создана, то она чистится
            this.$upicUploadForm.empty();
        } else {
            this.$upicUploadForm =
                $('<form class="g-hidden" method="post" enctype="multipart/form-data" action="/"></form>')
                    .appendTo(document.body);
        }

        var params = {
            service: 'mail',
            _ckey: Daria.Page.ckey
        };

        // создаётся клон input@file
        if (userpicFile) {
            var $newUserpicFile = $userpicFile.clone()
                // навещивается тот же обработчик изменения значения
                // можно было бы клонировать с обработчиками, но это менее надёжно
                .change(function() {
                    Daria.upicUploader.upload(this, callback);
                })
                // обнуляется значения - работает не во всех броузерах,
                // а в тех, что не работает помогает само клонирование
                .val('');

            // клон вставляется на место старого input@file
            $userpicFile.replaceWith($newUserpicFile);
            // а старый добавляется в форму, которая сейчас засабмитится
            this.$upicUploadForm.append($userpicFile);
            // обработчики старому input@file не нужны
            $userpicFile.unbind();
        } else {
            params['clear'] = 'yes';
        }

        // сабмитися форма со старым заполненным input@file
        Daria.Libs("jQuery.Form", function() {
            this.$upicUploadForm.ajaxSubmit({
                iframe: true,
                data: params,
                dataType: 'text',
                url: Daria.handlersPrefix + '/upload.jsx',
                complete: function(xhr, statusText) {
                    if (statusText !== 'success') {
                        Daria.Statusline.showMsg({
                            body: i18n('%Произошла_ошибка'),
                            body3: i18n('%3pane_Произошла_ошибка')
                        });

                        return;
                    }

                    // reset-им соц профили
                    Jane.Handler.doAll(['social-profiles-reset'], { emails: Jane.$H('settings').getSetting('default_email') });
                    callback.apply(null, arguments);
                }
            });
        }.bind(this));
    }
};

/* ../../js/components/upic-uploader.js end */

    /* ../../js/components/wizard.js begin */
Daria.Wizard = {
    start: function(params) {
        var name = "wizard";
        var bWizard = this.bWizard = Jane.$B(name);
        var that = this;

        if (!bWizard) {
            bWizard = Block.make(name, params);
        }
        var additionalClass = 'b-popup_wizard';
        if (params.experiment) {
            additionalClass += ' b-popup_wizard_experiment';
            if (params.step == 'intro') {
                params.step = 'labels';
            }
        }

        $('.block-wizard-interface .b-color-scheme__theme').on('click', function() {
            Daria.setCookie('wizard', 'interface');
        });
        if (this.active) {
            bWizard.stepChanged(params);
        } else {
            bWizard.run(params, function() {
                Daria.Dialog.open({
                    title: i18n('%Wizard_dialog_title'),
                    body: bWizard.getCache().node,
                    width: 750,
                    additionalClass: additionalClass,
                    onopen: function() {
                        that.active = true;
                        bWizard.bindMetriks(Daria.Dialog.$dialog, params.experiment);
                        bWizard.stepChanged(params);
                    },
                    onclose: function() {
                        that.active = false;
                        bWizard.unbindMetriks();
                        bWizard.invalidate();
                        Jane.ErrorLog.send(null, "WizardClose");
                    }
                });
            });
        }
    },
    valid: function() {
        var urlParams = Daria.urlParams;
        var collectExperiment = urlParams['w'] == "2";

        if (this.step) {
            if (collectExperiment) {
                this.directInterface = true;
            }
            return this.step;
        }

        var hSettings = Jane.$H("settings");
        var isFirstLogin = hSettings.isSet("first_login");

        var wizardCookie = Daria.getCookie("wizard");
        var wizardParam = urlParams['w'] == "1";
        var step;

        if (isFirstLogin) {
            hSettings.setSettingOff('first_login');

            Jane.ErrorLog.send(null, "WizardOn");
            step = "intro";
        }

        if (wizardParam) {
            step = urlParams['wizard-step'] || "intro";
        }

        if (collectExperiment && isFirstLogin) {
            step = "collector";
        }

        if (wizardCookie) {
            step = wizardCookie;
            Daria.delCookie("wizard");
        }

        this.step = step;
        return step;
    },
    getParams: function() {
        var params = {};

        var step = this.valid();
        var order = [
            'labels',
            'collector',
            'sender',
            'interface',
            'done'
        ];

        // Специальный визард без меток для эксперимента с коллектом DARIA-22470
        if (step == 'collector' || this.directInterface) {
            // убираем метки
            order = [
                'collector',
                'sender',
                'interface',
                'done'
            ];
            // нужно для подстановки правильной метрики на визард
            params['coollect-experiment'] = true;
        }

        params['experiment'] = 1;
        params['step'] = step;
        params['order'] = order;

        return params;
    }
};

/**
 * Визард под списком писем
 **/
Daria.InlineWizard = {
    interval: 500,
    max: 5,
    currentStep: 1,
    footerHeight: 50,
    height: 480,
    minHeight: 5,
    labelHeight: 49,
    /**
     * Начальные настройки для визарда
     **/
    start: function(node) {
        var that = this;
        this.$node = $(node);
        this.currentStep = parseInt(Jane.$H('settings').getSetting('inline-wizard-step'), 10) || 1;
        if (this.currentStep > this.max || this.currentStep < 1) {
            Jane.$H('settings').setSettings({'inline-wizard-step': 1});
            this.currentStep = 1;
        }
        this.writeStepNumber(1);
        if (this.currentStep === 4) {
            that.step('check');
            that.openBeforeRender();
        } else if (this.currentStep) {
            this.step('check');
        }

        Jane.events.bind('pageload', function() {
            if (Daria.Page.type !== 'messages') {
                that.forceClose();
            }
        });
        Jane.events.bind('minify', this.onResizeWizard);
        var parentElement = this.$node.find('.js-inline-wizard-parent');
        // запрещаем несанкционированные скроллы, чтобы ничего не съезжало из-за фокуса на формах и прочих неожиданностей
        parentElement.on('scroll', function() {
            parentElement.scrollLeft(0);
        });
        // лечим проблемы при ресайзе страницы
        $(window).resize(this.onResizeWizard);

        var hSettings = Jane.$H('settings');
        if (hSettings.isSet('first_login')) {
            hSettings.setSettingOff('first_login');
        }
        this.initStepFive();
    },
    /**
     * Меняем прокрутку визарда при ресайзе окна
     **/
    onResizeWizard: function() {
        Daria.InlineWizard.step('check');
    },
    /**
     * Проверка на нового пользователя
     **/
    needToShowOpenWizard: function() {
        return Daria.getAccountAgeInDays() <= 3 &&
            !Jane.$H('settings').isSet('inline-wizard-close');
    },
    /**
     * Прописываем в верстку номер шага
     **/
    writeStepNumber: function(step) {
        this.$node.find('.js-inline-wizard-step-' + step + ' .js-wizard-step__number').text(i18n('%Wizard_step', step <= this.max ? step : this.max, this.max));
    },
    /**
     * Удаление визарда со страницы
     **/
    removeWizard: function() {
        var parentElement = this.$node.find('.js-inline-wizard-parent');
        parentElement.css({
            height: 0,
            minHeight: 0
        });
        parentElement.on('webkitTransitionEnd oTransitionEnd transitionend mozTransitionEnd', function() {
            parentElement.remove();
        });
    },
    /**
     * Закончить прохождение визарда
     **/
    end: function() {
        this.removeWizard();
        // ставим настройку, что визард пройден
        Jane.$H('settings').setSettings({'inline-wizard': Daria.now()});
        // удаляем куки с номером шага
        this.metriks(this.getCurrentStep(), 'Свернуть');
        Jane.$H('settings').setSettingOff('inline-wizard-step');
        $(window).off('resize', this.onResizeWizard);
    },
    /**
     * Метод для получения высоты документа с учетом футера и визард, которая используется в анимации прокрутки страницы
     **/
    getPageHeight: function(currentElement) {
        return this.$node.find('.js-inline-wizard-parent').offset().top + currentElement.height() - this.footerHeight;
    },
    /**
     * Метод для обработки событий анимации с учетом браузеров, не поддерживающих Modernizr.cssanimations
     **/
    onTransitionEnd: function(node, callback) {
        if (!Modernizr.cssanimations) {
            callback();
        } else {
            node.one('webkitTransitionEnd oTransitionEnd transitionend mozTransitionEnd', callback);
        }
    },
    /**
     * Открыть визард
     **/
    open: function() {
        Jane.$H('settings').setSettings({'inline-wizard-step': this.currentStep || '1'});
        var parentElement = this.$node.find('.js-inline-wizard-parent');
        var currentElement = this.$node.find('.js-inline-wizard-current');
        var pageHeight = this.getPageHeight(currentElement);
        parentElement
            .addClass('inline-wizard-wrapper-small')
            .addClass('inline-wizard-wrapper-open')
            .css({
                height: this.minHeight,
                minHeight: this.minHeight
            });
        Daria.forceNodeReflow(parentElement[0]);
        parentElement.removeClass('inline-wizard-wrapper-small');
        this.onTransitionEnd(parentElement, this.afterOpenAnimation.bind(this, parentElement, pageHeight));
        this.metriks(0, 'Развернули');

        this.metriks(this.getCurrentStep(), 'Показ');
    },
    /**
     * Метод для действий после первой анимации в open
     **/
    afterOpenAnimation: function(parentElement, pageHeight) {
        Daria.forceNodeReflow(parentElement[0]);
        this.$node.find('.js-inline-wizard-label').addClass('g-hidden');
        this.$node.find('.js-inline-wizard-steps-wrapper').removeClass('g-hidden');
        parentElement.css({
            height: this.height,
            minHeight: this.height
        });
        $('body').stop().animate({
            'scrollTop': pageHeight
        }, this.interval);
    },
    /**
     * Метод для открытия визарда новому пользователю перед отрисовкой из htmlinit блока
     **/
    openBeforeRender: function() {
        var parentElement = this.$node.find('.js-inline-wizard-parent');

        this.$node.find('.js-inline-wizard-label').addClass('g-hidden');
        this.$node.find('.js-inline-wizard-steps-wrapper').removeClass('g-hidden');
        parentElement
            .css({
                height: 'auto',
                minHeight: this.height
            });
    },

    /**
     * Получить номер текущего шага.
     * @return {number}
     */
    getCurrentStep: function() {
        return parseInt(this.currentStep, 10);
    },
    /**
     * Свернуть визард
     **/
    close: function() {
        Jane.$H('settings').setSettingOn('inline-wizard-close');
        var parentElement = this.$node.find('.js-inline-wizard-parent');
        var labelHeight = this.labelHeight;
        var pageHeight = this.$node.find('.js-inline-wizard-parent').offset().top + labelHeight - this.footerHeight;
        parentElement.stop();
        parentElement.addClass('inline-wizard-wrapper-close');
        parentElement.css({
            height: this.minHeight,
            minHeight: this.minHeight
        });

        this.onTransitionEnd(parentElement, this.afterCloseAnimation.bind(this, parentElement, pageHeight, labelHeight));

        this.metriks(this.getCurrentStep(), 'Свернуть');
    },
    /**
     * Действия после первой анимации в close
     **/
    afterCloseAnimation: function(parentElement, pageHeight, labelHeight) {
        this.$node.find('.js-inline-wizard-label').removeClass('g-hidden');
        this.$node.find('.js-inline-wizard-steps-wrapper').addClass('g-hidden');
        parentElement.css({
            height: labelHeight,
            minHeight: labelHeight
        });
        $('body').stop().animate({
            'scrollTop': pageHeight - this.footerHeight
        }, this.interval);
    },
    /**
     * Насильно быстро свернуть визард
     **/
    forceClose: function() {
        var that = this;
        var parentElement = this.$node.find('.js-inline-wizard-parent');
        parentElement
            .addClass('inline-wizard-steps-no-transition')
            .css({height: that.labelHeight, minHeight: that.labelHeight});
        Daria.forceNodeReflow(parentElement[0]);
        parentElement.removeClass('inline-wizard-steps-no-transition');
        this.$node.find('.js-inline-wizard-label').removeClass('g-hidden');
        this.$node.find('.js-inline-wizard-steps-wrapper').addClass('g-hidden');
    },
    /**
     * Перейти на следующий шаг в визарде
     * @param {String} where Куда нужно сделать шаг, возможные значения: 
     * 'next' - следующий шаг, 'prev' - предыдущий шаг, 'check' - открытие на указанном в куки шаге
     **/
    step: function(where) {
        if (this.noScrollWhileIDo) {
            return false;
        }
        this.noScrollWhileIDo = true;

        var parentElement = this.$node.find('.js-inline-wizard-parent');
        // ставим высоту auto на случай, если вдруг во время шага, что-то разъедется вниз
        parentElement.css({height: 'auto'});
        // +1 - погрешность при прокрутке
        var parentWidth = parentElement.outerWidth() + 2;
        var elementForScrolling = this.$node.find('.js-inline-wizard-scrolling-element');
        switch (where) {
            case 'next':
                this.nextStep(parentElement, elementForScrolling, parentWidth);
                break;
            case 'prev':
                this.prevStep(parentElement, elementForScrolling, parentWidth);
                break;
            case 'check':
                this.checkStep(parentElement, elementForScrolling, parentWidth);
                break;
        }
    },
    /**
     * Изменение текущего шага
     **/
    changeStep: function(step) {
        this.currentStep = step;
        Jane.$H('settings').setSettings({'inline-wizard-step': step});
    },
    /**
     * Шаг вперед
     **/
    nextStep: function(parentElement, elementForScrolling, parentWidth) {
        var that = this;
        var step;
        // берем шаг из куки и прибаляем 1
        var wizardCookie = parseInt(this.currentStep, 10);
        if (wizardCookie === that.max) {
            // не позволяем визарду идти дальше последнего шага, на экстренный случай (на пример проставления куки не правильной вручную)
            that.step('check');
            return;
        } else {
            step = parseInt(this.currentStep, 10) + 1;
        }
        that.writeStepNumber(step);
        that.metriks(step - 1, 'Далее');
        if (step === 2) {
            that.$node.find('.b-notification_error').addClass('g-hidden');
            // запускаем добавление меток через блок меток
            Jane.Block.trigger("wizard-labels", "addLabels");
        } else if (step === 5) {
            that.initStepFive();
        }
        elementForScrolling.css({
            marginLeft: parseInt(elementForScrolling.css('margin-left'), 10) - parentWidth
        });
        this.onTransitionEnd(parentElement, this.onTransitionEndStep.bind(this, step));
        that.changeStep(step);

        this.metriks(step, 'Показ');
    },
    /**
     * Шаг назад
     **/
    prevStep: function(parentElement, elementForScrolling, parentWidth) {
        var that = this;
        var step;
        // берем шаг из куки и вычитаем 1
        step = parseInt(this.currentStep, 10) - 1;
        that.writeStepNumber(step);
        if (step === 2) {
            that.$node.find('.b-notification_error').addClass('g-hidden');
        } else if (step === 5) {
            that.initStepFive();
        }
        elementForScrolling.css({
            marginLeft: parseInt(elementForScrolling.css('margin-left'), 10) + parentWidth
        });
        this.onTransitionEnd(parentElement, this.onTransitionEndStep.bind(this, step));
        that.changeStep(step);

        this.metriks(step, 'Показ');
    },
    /**
     * Функуция для проставления класса текущего шага
     **/
    onTransitionEndStep: function(step) {
        this.$node.find('.js-inline-wizard-current').removeClass('js-inline-wizard-current');
        this.$node.find('.js-inline-wizard-step-' + step).addClass('js-inline-wizard-current');
        this.noScrollWhileIDo = false;
    },
    /**
     * Переходим на шаг, который записан в куки
     **/
    checkStep: function(parentElement, elementForScrolling, parentWidth) {
        var that = this;
        var step;
        step = parseInt(this.currentStep, 10) || 1;
        that.writeStepNumber(step);
        if (step === 5) {
            that.initStepFive();
        }

        elementForScrolling
            .addClass('inline-wizard-steps-no-transition')
            .css({marginLeft: - parentWidth * (step - 1)});
        Daria.forceNodeReflow(elementForScrolling[0]);
        elementForScrolling.removeClass('inline-wizard-steps-no-transition');

        that.$node.find('.js-inline-wizard-current').removeClass('js-inline-wizard-current');
        that.$node.find('.js-inline-wizard-step-' + step).addClass('js-inline-wizard-current');
        that.noScrollWhileIDo = false;
        that.changeStep(step);
    },
    initStepFive: function() {
        var that = this;
        Daria.Validator.getUserPhones(true).done(function(phones) {
            var phonesArray = phones.getAllValid();
            if (phonesArray.length !== 0 || Daria.pddPrefix) {
                that.writeStepNumber(6);
                that.$node.find('.js-inline-wizard-step-5').remove();
            } else {
                that.$node.find('.g-error').addClass('g-hidden');
                that.$node.find('.js-inline-wizard-step-6').remove();
                // обарабатываем форму телефона
                Daria.phoneRegistrationInWizard();
            }
        });
    },
    notifyMetriks: function(message, e) {
        var msg = [];
        msg.push('Новый Визард');

        if (Daria.now() - Jane.$H('account-information').getData().reg_date <= 3 * Jane.Date.DAY) {
            msg.push('Показы новым пользователям');
        } else {
            msg.push('Показы старым пользователям');
        }

        if (typeof message == 'function') {
            msg = msg.concat(message(e));
        } else {
            if (message.length) {
                msg.push(message);
            }
        }

        Jane.c.apply(null, msg);
    },
    metriks: function(step, act) {
        var metriks = [
            'Метки',
            'Сборщики',
            'Информация об отправителе',
            'Темы',
            'Валидация',
            'Done'
        ];
        if (step) {
            Daria.InlineWizard.notifyMetriks([metriks[step - 1], act]);
        } else {
            Daria.InlineWizard.notifyMetriks([act]);
        }
    }
};

Jane.Promo.add(
    {
        name: 'wizard-promo',
        params: {
            ignoreInboxMessages: true,
            ignoreStartPromoDelay: true,
            ignorePromoDelay: true
        },
        priority: (Daria.urlParams['w'] == 2) ? 5 : 20,
        check: function() {
            var step = Daria.Wizard.valid();
            return !!step &&
                    Daria.uidEnds([0, 1, 2, 3, 4]) &&
                    !Daria.IS_CORP;
        },
        callback: function() {
            var step = Daria.Wizard.valid();
            var params = Daria.Wizard.getParams();
            if (step) {
                setTimeout(function() {
                    Daria.Wizard.start(params);
                }, 0);
            }
        }
    }
);

/* ../../js/components/wizard.js end */

    /* ../../js/components/yabble.js begin */
(function(Helpers, undefined) {
    /* jshint unused: false */

    // коды клавиш
    var KEY = {
        UP: 38,
        LEFT: 37,
        RIGHT: 39,
        DOWN: 40,
        DEL: 46,
        TAB: 9,
        RETURN: 13,
        ESC: 27,
        COMMA: 44,
        PAGEUP: 33,
        PAGEDOWN: 34,
        BACKSPACE: 8,
        SHIFT: 16,
        SEMI: 59,
        SPACE: 32,
        META: 91,
        END: 35,
        HOME: 36,
        C: 67,
        X: 88,
        V: 86,
        A: 65,
        Z: 90,
        ALT: 18
    };

    // идентификатор ябла
    var ID = 0;

    // YabbleClassNames
    var YC = {
        contact: 'b-yabble_contact',
        group: 'b-yabble_group',
        unreachable: 'b-yabble_unreachable',
        external: 'b-yabble_external',

        selected: 'b-yabble_selected',
        focused: 'b-yabble_focused'
    };
    /**
     * Один ябл
     * @class Yabble
     */
    var Yabble = function(val) {
        var that = this;

        this.id = ID++;

        this.value = {};

        // установка значения
        if (val) {
            this.val(val);
        }

        this.root = $(Yabble.getHTML());
        this.text = this.root.find('.b-yabble__text__content');
        this.input = this.root.find('.b-yabble__input');
        this.arrow = this.root.find('.b-yabble__arrow');

        // DARIA-16394 - IE: выделяя яблы через SHIFT+click выделяется содержимое всего окна.
        if (Modernizr.msie) {
            this.root.on('selectstart', function(e) {
                if (!that.focused) {
                    e.preventDefault();
                }
            });
        }

        if (!$.isEmptyObject(this.value)) {
            this.pasteValue();
        }
    };

    /**
     * Simple transform в хроме генерит каждый ябл по 89ms
     * а значит 35 яблов за 3 секунды, что не айс,
     * поэтому будем кэшировать вёрстку
     */
    Yabble.getHTML = function() {
        if (!Yabble.template) {
            Yabble.template = $('<div></div>').html(Jane.tt('mail-compose:yabble', {}));
        }

        return Yabble.template.html();
    };
    Yabble.template = null;

    /**
     * Дополняет origin всеми недостающими значениями из value
     * @param {Object} origin
     * @param {Object} value
     */
    Yabble.mergeContact = function(origin, value) {
        if (typeof origin === 'string') {
            origin = Helpers.contact2obj(origin);
        }
        if (typeof value === 'string') {
            value = Helpers.contact2obj(value);
        }

        // в случае, если email изменился - это совсем другой контакт
        if (value.email != origin.email) {
            return $.extend({}, value);
            // иначе нужно просто переписать изменившиеся поля
        } else {
            return $.extend({}, origin, value);
        }
    };

    Yabble.prototype = {

        /**
         * Значение, которое будет отправлено на сервре
         * и которое будет при редактировании инпута
         * @private
         * @type String|Object
         */
        value: null,

        /**
         * Ябл в режиме редактирования
         * @type Boolean
         */
        focused: false,

        /**
         * Ябл выделен
         * @type Boolean
         */
        selected: false,

        /**
         * Ябла распознан, как контакт из абука
         * @type Boolean
         */
        isContact: false,

        /**
         * Ябл распознан, как группа из абука
         * @type Boolean
         */
        isGroup: false,

        /**
         * В ябле невалидный имейл
         * @type Boolean
         */
        isUnreachable: false,

        /**
         * В ябле внешний email (не из ya-team)
         * @type Boolean
         */
        isExternal: true,

        /**
         * Манипулятор над инпутом яба, умеет делать его enable, disable, focus
         * @param {String} what
         * @param {Boolean} force иногда нам не нужны лишние фокусы, иногда надо сфокусироваться во что бы то ни стало
         * @private
         */
        doInput: function(what, force) {
            var input = this.input[0];

            switch (what) {
            case 'focus':
                try {
                    //document.activeElement - иногда кидает NS_ERROR_FAULURE в Fx
                    if (force || document.activeElement != input) {
                        // +10 к фокусирующей силе IE
                        // к сожалению в ие селект без фокуса не фокусит
                        // и фокус без селекта тоже(
                        // а нам селект нужен для CTRL+C
                        input.focus();
                        input.select();
                    }
                } catch(e) {
                    Jane.ErrorLog.sendException('activeElement', e);
                }
                break;

            case 'enable':
                input.removeAttribute('disabled');
                break;

            case 'disable':
                input.setAttribute('disabled', 'disabled');
                break;
            }
        },

        /**
         * Начать редактирование ябла
         */
        focus: function() {
            // не даём редактировать группы
            if (this.focused || this.isGroup) {
                return;
            }

            //   console.log(this.id, 'Yabble.focus');

            this.deselect(true);

            this.focused = true;

            var val = Helpers.obj2contact(this.value);
            var name = this.value.name;

            this.doInput('enable');
            this.doInput('focus');

            if (val) {
                this.text.text(val);
                this.input.val(val);

                Daria.setSelection(this.input[0], name ? 1 : 0, name ? name.length + 1 : val.length);
            }

            if (this.root && this.root.length) {
                // яблы в IE нужно растягивать по всей доступной ширине
                if (Modernizr.msie) {
                    this.root.css('min-width', this.root.parent().width() - this.root.position().left - 20);
                }

                this.root.attr('draggable', '');
                this.root.addClass(YC.focused);
            }
        },

        /**
         * Закончить редактирование ябла
         * @param {Boolean} keep не трогать инпут
         */
        blur: function(keep) {
            if (!this.focused) {
                return;
            }

            // console.log(this.id, 'Yabble.blur', keep);

            // мёрджим
            this.val(Yabble.mergeContact(this.value, this.getValue()));

            this.pasteValue();

            if (!keep) {
                this.doInput('disable');
            }

            this.root.attr('draggable', 'true');

            // после того, как растянули по всей ширине - нужно обратно стянуть по контенту
            if (Modernizr.msie) {
                this.root.removeAttr('style');
            }

            this.focused = false;
        },

        /**
         * Выделить яббл
         */
        select: function() {
            if (this.selected) {
                // селект дело такое - можно несколько раз нажать на ябл
                // он будет selected, но так как кликается на div
                // то он будет блюриться, надо каждый раз возвращать фокус
                this.doInput('focus');
                return;
            }

            // console.log(this.id, 'Yabble.select');

            this.blur(true);

            this.selected = true;

            this.root.addClass(YC.selected);

            this.doInput('enable');
            this.doInput('focus');
        },

        /**
         * Снять выделение с ябла
         * @param {Boolean} keep не трогать инпут
         */
        deselect: function(keep) {
            if (!this.selected) {
                return;
            }

            // console.log(this.id, 'Yabble.deselect', keep);

            if (!keep) {
                this.doInput('disable');
            }

            // в IE по disable вызывается blur
            // и к этому моменту ябл может быть удалён
            if (this.root) {
                this.root.removeClass(YC.selected);
                this.selected = false;
            }
        },

        /**
         * Валидация введённого в ябл имейла
         * @private
         */
        validate: function() {
            if (!this.value.email) {
                this.isUnreachable = false;
            } else {
                this.isUnreachable = !Helpers.checkEmail(this.value.email);
                this.root.toggleClass(YC.unreachable, this.isUnreachable);

                this.isExternal = Helpers.checkExternalEmail(this.value.email);
                this.root.toggleClass(YC.external, this.isExternal);
            }
        },

        /**
         * Визуализирует значение в ябле
         */
        pasteValue: function() {
            var vizValue = this.value.name || this.value.email;

            this.input.val(this.val());
            this.text.text(vizValue);

            this.root.removeClass(YC.focused);

            this.isContact = !!this.value.cid;
            this.isGroup = !!this.value.tid;

            this.root.toggleClass(YC.contact, this.isContact);
            this.root.toggleClass(YC.group, this.isGroup);

            this.validate();
        },

        /**
         * Получить непосредственно то, что пользователь ввёл в инпут
         * @type String
         */
        userVal: function() {
            return this.input.val();
        },

        /**
         * Получить значение, введённое пользователем в ябл
         * либо значение, полученное из саджеста
         * @private
         * @type String
         */
        getValue: function() {
            var input = this.input;
            var value = input.data('suggest') || $.trim(this.userVal()).replace(/(?:,|;)$/, '');
            input.removeData('suggest');

            return value;
        },

        /**
         * Возвращает либо устанавлиеет реальное значение
         * то, которое будет отправлено на сервер
         * @param {String|Object} val
         * @type String
         */
        val: function(val) {
            // если val не передали - нужно вернуть значение ябла
            if (val === undefined) {
                // это либо группа
                if (this.value.tid) {
                    return $.map(this.value.contacts,function(contact) {
                        return !contact.ignored && Helpers.obj2contact(contact) || null;
                    }).join(', ');
                    // либо один контакт
                } else {
                    return Helpers.obj2contact(this.value);
                }
                // если передали объект
            } else if (typeof val === 'object') {
                // это либо один контакт из абуа, либо группа
                // правильность формирования объекта в этом случае
                // остаётся на передающей стороне
                this.value = val;
                // либо это строка, которую нужно распарсить в объект
            } else {
                this.value = Helpers.contact2obj(val);
            }
        },

        /**
         * Уничтожить ябл
         */
        destroy: function() {
            this.root.remove();

            this.root = this.text = this.input = null;
        },

        onkeypress: function() {
            if (this.focused) {
                this.text.text(this.userVal());
            }
        },

        onkeyup: function() {
            if (this.focused) {
                this.text.text(this.userVal());
            }
        }

    };

    /* ../../js/components/yabble.phone.js begin */
/* global Yabble, YC */
var YabblePhone = function() {
    Yabble.apply(this, arguments);
};

Jane.extend(YabblePhone, Yabble);


/**
 * Валидация введённого в ябл телефона
 * @private
 */
YabblePhone.prototype.validate = function() {
    if (!this.value.email) {
        this.isUnreachable = false;
    } else {
        var phone = this.value.email.replace(/^\+\s?(\d)/, '$1').replace(/\s|\D/g, '');
        this.isUnreachable = !(phone.length == 11 || phone.length == 12);
        this.root.toggleClass(YC.unreachable, this.isUnreachable);
    }
};

    /**
     * Визуализирует значение в ябле
     */
YabblePhone.prototype.pasteValue = function() {
        var vizValue = this.value.name || this.value.email;

        this.input.val(this.val());
        this.text.text(vizValue);

        this.root.removeClass(YC.focused);

        this.isContact = true;
        this.isPhone = true;
        this.isGroup = false;

        this.root.toggleClass(YC.contact, this.isContact);
        this.root.toggleClass(YC.group, this.isGroup);

        this.validate();
    };

Daria.YabblePhone = YabblePhone;

/* ../../js/components/yabble.phone.js end */

    /* ../../js/components/yabble.set.js begin */
/* global Helpers, ID, isCtrlPressed, KEY, Yabble, YabbleDropdown, YabbleHistory, YabbleMulti */
var abookFlags = {onlyFirstEmail: true, joinName: true};

/**
 * В мышиных событиях будем обрабатывать только левую кнопку мыши
 * @private
 * @param {Event} e
 */
var isLeftButton = function(e) {
    // левая кнока (which == 1)
    // на маке клик левой кнопкой + ctrl === правой кнопке
    return (e.which === 1 && (!Modernizr.mac || !e.ctrlKey)) || Modernizr.msie && e.type === 'click' && e.which === 0;
};
/**
 * Набор яблов
 * @class YabbleSet
 */
var YabbleSet = function(root, params) {
    this.options = $.extend({}, {
        maxItems: Number.MAX_VALUE
    }, params || {});

    this.id = ID++;

    this.ids = {};
    // яблы набора
    this.yabbles = [];
    // строковое значение, хранящееся в наборе
    this.strVal = '';

    // корневой элемент набора
    this.root = root;
    // враппер, куда вставляются яблы
    this.wrapper = root.find('.b-mail-input__yabbles');
    this.input = root.find('.b-mail-input_yabbles__focus');

    // инициализация обработчиков событий
    this.init();

    this.multi = new YabbleMulti(this);

    YabbleHistory.start(this);
};

YabbleSet.actions = ['yabble.change-email', 'yabble.change-group', 'yabble.edit', 'yabble.remove', 'yabble.add-to-abook'];
YabbleSet.yabbleEvents = ['dblclick', 'paste', 'keydown', 'keypress', 'keyup', 'blur', 'focus'];
YabbleSet.directEvents = ['mousedown', 'mouseup', 'click'];

YabbleSet.prototype = {

    /**
     * Получение/установка значения настройки
     * @param {String} name
     * @param {*} [value]
     */
    option: function(name, value) {
        var l = arguments.length;
        if (l === 1) {
            return this.options[name];

        } else if (l === 2) {
            this.options[name] = value;
        }
    },

    /**
     * Массив email набора яблов
     */
    getEmails: function() {
        return _.uniq($.map(this.yabbles,function(e) {
            return e.value.email;
        }).sort());
    },

    /**
     * Извлекает из набора строковое представление значение,
     * т.е. список адресов, на который будет отправлено письмо
     * @private
     * @type String
     */
    recalcStrVal: function() {
        var res = [];

        $.each(this.yabbles, function(i, yabble) {
            res.push(yabble.val());
        });

        this.strVal = $.map(res,function(c) {
            return c || null;
        }).join(', ');
        this.root.find('input[type=hidden]').val(this.strVal);

        if ($.isFunction(this.onChange)) {
            this.onChange();
        }
    },

    /**
     * Обработчики событий
     * @private
     */
    init: function() {
        var that = this;

        this.input.focus(function() {
            that.focus();
        });

        // директ эвенты
        $.each(YabbleSet.directEvents, function(i, type) {
            if (that['ondirect' + type ]) {
                that.root.bind(type, function(e) {
                    that.e = e;
                    that['ondirect' + type].apply(that, arguments);
                });
            }
        });
        // делегирование событий на яблах
        $.each(YabbleSet.yabbleEvents, function(i, type) {
            that.on(type);
        });

        this.onactionRef = function() {
            that.onaction.apply(that, arguments);
        };

        $.each(YabbleSet.actions, function(i, event) {
            Jane.events.bind(event, that.onactionRef);
        });
    },

    /* ------------------------------------------------------------------------------------------------------------- */
    /**
     * Нужно унифицировать поведение броузеров в плане кликов
     * а заобдно и сделать как нам удобней
     * дело в том, что если из под мыши на каком-либо этапе ушёл ябл
     * то на нём произойдут не все события, а часть из них произойдёт
     * на других яблах или на пустом поле, что нам совсем не нужно
     *
     * Jquery-делегирование не подходит, так как очень честное
     */


    /**
     * Обработка  mousedown - здесь можно стригерить mousedown ябле в случае необходимости
     * и запомнить ябл на котром произошёл mousedown
     * @private
     * @type {Event}
     */
    ondirectmousedown: function(e) {
        if (!isLeftButton(e)) {
            e.preventDefault();

            // зедержка чинит вставку контакта колечиком в FF12
            // в хроме 28 чинит съябливание контакта при вставке
            // обязательно не меньше 200ms, эмпирический подбор
            // в опере и ИЕ заметно
            if (Modernizr.opera || Modernizr.msie) {
                this.add().focus();
            } else {
                setTimeout(function() {
                    this.add().focus();
                }.bind(this), 200);
            }

            return;
        }

        // был ли клик по яблу
        var yabble = this.find('fromEvent', e);

        // инициалиируем флаги
        this.clicked = false;
        this.mousedownId = null;

        if (yabble) {
            // запоминаем id на котором произошёл mousedown
            this.mousedownId = yabble.id;
            // тригерм mousedown для ябла
            if (this.onmousedown) {
                this.onmousedown(e, yabble);
            }
        }
    },

    /**
     * Обработка mouseup - здесь можно стригерить и mouseup и click
     * если ябл ушёл из под курсора - на новом ябле или на пустом месте
     * стригерится mouseup, а на старом нет
     * А если mouseup и mousedown произошли на разных элементах,
     * то клик не стригерится везде кроме IE
     * @private
     * @type {Event}
     */
    ondirectmouseup: function(e) {
        if (!isLeftButton(e)) {
            return;
        }

        // mouseup-ы без mousedown-a игнорируем
        if (this.mousedownId) {
            var yabble = this.find('fromEvent', e);
            var stored = this.find('id', this.mousedownId);

            // тригерим mouseup
            if (this.onmouseup) {
                this.onmouseup(e, stored);
            }
            // если mousedown стригерился вне яблов или на новом ябле,
            // то надо дотригерить у старого всё необходимое, тоесть click
            if (stored != yabble) {
                if (this.onclick) {
                    this.onclick(e, stored);
                }
                this.clicked = true;
                // отработали по яблу, забываем про него
                this.mousedownId = null;
            }
        }

    },

    /**
     * Обработчик клика
     * Здесь можно дотригерить mouseup и стригерит click
     * @private
     * @param {Event} e
     */
    ondirectclick: function(e) {
        if (!isLeftButton(e)) {
            return;
        }

        var yabble = this.find('fromEvent', e);

        // если в клике мы ещё помним про ябл
        if (this.mousedownId) {
            var stored = this.find('id', this.mousedownId);

            // либо не стригерился mouseup
            if (stored != yabble) {
                if (this.onmouseup) {
                    this.onmouseup(e, stored);
                }
            }
            // либо всё прошло хорошо и события тригерились по порядку
            // но это уже не важно, просто дотригиваем клик
            if (this.onclick) {
                this.onclick(e, stored);
            }
            this.clicked = true;

            // и забываем про ябл
            this.mousedownId = null;

            // если это честный клик в не ябла, то
            // единсвенная цель данного обработчика -
            // новый свежий ябл
        }

        if (!yabble && !this.clicked) {
            // кошмар внутри полей для яблов лежит не ябл
            // и его цель не новый ябл
            if (!$(e.target).hasClass('js-sms-open-link')) {
                this.directclick = true;
            }
            this.add().focus();
            this.directclick = false;
        }
    },
    /* ------------------------------------------------------------------------------------------------------------- */

    /**
     * Обработка Jane.events.trigger, посылаемых акшенами
     * @private
     * @param {String} e
     * @param {Object} data
     */
    onaction: function(e, data) {
        if (data.id in this.ids) {
            var yabble = this.find('id', data.id);

            switch (e) {
            case 'yabble.change-email':
                yabble.value.email = data.email;
                yabble.pasteValue();
                this.recalcStrVal();
                yabble.select();
                break;
            case 'yabble.change-group':
                $.each(yabble.value.contacts, function(i, c) {
                    if (c.cid == data.cid && c.email == data.email) {
                        c.ignored = !c.ignored;
                    }
                });
                this.recalcStrVal();
                break;
            case 'yabble.edit':
                yabble.focus();
                break;
            case 'yabble.remove':
                this.remove(yabble);
                break;
            case 'yabble.add-to-abook':
                this.update(yabble, data.cid);
                break;
            }
        }
    },

    /* ------------------------------------------------------------------------------------------------------------- */

    /**
     * Мышь опустилась на ябл
     * @private
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onclick: function(e, yabble) {
        // если ябл редактируется, то игнорировать
        if (yabble.focused) {
            return;
        }

        // выделить/перевыделить ябл
        var ignoreDD = yabble.select();
        if (!ignoreDD) {
            YabbleDropdown.toggle(yabble);
        }
    },

    /**
     * Обработчик даблклика по яблу
     * @param {Event} e
     * @param {Yabble} yabble
     */
    ondblclick: function(e, yabble) {
        YabbleDropdown.close();
        // по дабл клику редактируем ябл
        yabble.focus();
    },

    /**
     * Обработка фокуса на ябл
     * @private
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onfocus: function(e, yabble) {
        var that = this;

        if (Daria.composeParams) {
            var isFieldTo = this.input.closest('.js-compose-mail-input_to').length > 0;
            Daria.composeParams['field-to-focused'] = isFieldTo;
        }

        if (!this.contactsSuggest) {
            this.contactsSuggest = new Daria.Suggest.Contacts(yabble.input[0], {
                multiple: true,
                position: {
                    my: "left top",
                    at: "left+1px bottom",
                    collision: "none",
                    of: this.wrapper.parent()
                },
                select: function(event, ui) {
                    var $input = $(this);
                    var nbSuggest = nb.block(this);
                    var suggestItem = ui.item;

                    // Формирование данных для yabble
                    switch (suggestItem.type) {
                        // Группы
                        case 'group':
                            $input.data('suggest', {
                                tid: suggestItem.id,
                                name: suggestItem.title,
                                contacts: $.map(suggestItem.contacts, function(c) {
                                    return $.extend({}, c);
                                })
                            });
                            nbSuggest.setValue(suggestItem.title);
                            break;
                        // Контакт
                        case 'contact':
                            $input.data('suggest', $.extend({}, suggestItem));
                            nbSuggest.setValue(suggestItem.email);
                            break;
                        // Популярный домен
                        case 'popdom':
                            $input.data('suggest', $.extend({name: suggestItem.name, email: suggestItem.email}));
                            nbSuggest.setValue(suggestItem.email);
                            break;
                    }

                    // Уход из поля при выборе. Таймаут отложить действие по стеку событий
                    // Без таймаута обойтись нельзя, потому что клик мышью возвращает фокус на поле ввода, а
                    // нажатие на клавишу Enter или Tab вызвает blur с поля ввода. Унифицированного события после blur
                    // или focus по клику не создано в саджесте.
                    Daria.setZeroTimeout(function() {
                        // Попытка добавления нового yabble
                        var addedYable = that.add();
                        if (addedYable) {
                            addedYable.focus();
                        } else {
                            that.contactsSuggest.options.yabble.blur();
                        }
                    });

                    // Остановка дефолтного поведения Suggest.Contacts
                    event.preventDefault();
                }
            });
        } else {
            // Смена текстового поля на связанное с yabble
            this.contactsSuggest.changeInputField(yabble.input[0]);
        }

        if (yabble.focused) {
            this.contactsSuggest.setOptions({
                hide: function() {
                    that.contactsSuggest.options.yabble.blur();
                },
                disabled: false,
                timeoutOfCopyToSms: true,
                yabble: yabble,
                // Установка предыдущих значений
                previousValues: that.val().split(/,\s*/)
            });

            // показываем suggest по клику
            if (this.directclick) {
                this.contactsSuggest.show('');
            }
        } else {
            // Отключение появления автокомплита, если в yabble не отобразилось поле ввода
            this.contactsSuggest.setOptions({
                disabled: true,
                // Сброс опции hide, т.к. метод скрытия саджеста её вызывает
                hide: Daria.nop
            });
        }

        // если фокус произошёл в рамках клика,
        // то принудительно скрывать дропдаун не нужно
        // им управляет кликовый обработчик
        if (yabble.id != this.mousedownId) {
            YabbleDropdown.close();
        }

        this.input.attr('disabled', 'disabled');
    },

    /**
     * Обработка блура с ябла
     * @private
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onblur: function(e, yabble) {
        var that = this;

        // если blur произошёл в рамках клика
        // т.е. кликнули на уже выделенный ябл
        if (this.mousedownId == yabble.id) {
            // то ничего делать не надо
            return;
        }

        if (this.contactsSuggest) {
            if (this.contactsSuggest.dontClose) {
                return;
            } else {
                // Сброс опции hide, т.к. метод скрытия саджеста её вызывает
                this.contactsSuggest.setOptions({
                    hide: Daria.nop
                });
                // для пользователей, владеющих методом слепого десятипальцевого ввода зааобртим автокомплит
                this.contactsSuggest.hide();
            }
        }

        // обрезаем пробелы по краям и последнюю запятую, если разделяли запятой
        var userValue = $.trim(yabble.userVal()).replace(/(?:,|;)$/, '');

        if (!userValue && !yabble.input.data('suggest')) {
            this.remove(yabble);
        } else if (yabble.focused) {
            YabbleHistory.push(that);
            YabbleHistory.ignore = true;
            // если пользователь ввёл в ябл больше одного значения
            // нужно его расчленить на несколько
            if (userValue.indexOf(',') > -1 || userValue.indexOf(';') > -1) {
                var contacts = Helpers.splitContacts(userValue);
                var yabbles = [];
                $.each(contacts, function(i, contact) {
                    yabbles.push(that.add(contact, yabble));
                });
                // recalc происходит за счёт remove
                this.remove(yabble);
                this.resolveContacts(contacts, yabbles);
            } else {
                yabble.blur();
                this.recalcStrVal();
                if (!yabble.isContact && !yabble.isGroup && !yabble.isUnreachable) {
                    this.resolveContacts([yabble.value], [yabble]);
                }
            }
            YabbleHistory.ignore = false;

        } else if (yabble.selected) {
            yabble.deselect();
        }

        this.input.removeAttr('disabled');
    },

    /**
     * Обработчик keydown
     * @private
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onkeydown: function(e, yabble) {
        var that = this;

        switch (e.which) {

            // по табу - на пустом - переход в след поле
            // на заполненном - создание нового ябла
        case KEY.TAB:
            if (!e.shiftKey && this.options.maxItems > this.yabbles.length && (yabble.focused && $.trim(yabble.userVal()) || yabble.selected)) {
                e.preventDefault();
                this.add().focus();
            }
            break;

        case KEY.RETURN:
            if (!isCtrlPressed(e)) {
                e.preventDefault();
            }

            if (this.multi.history.length > 1) {
                this.add().focus();
            } else if ($.trim(yabble.userVal())) {
                if (yabble.focused) {
                    this.add().focus();
                } else {
                    yabble.focus();
                    // с выбранного ябла при фокусе не убирается фокус
                    // поэтому надо руками дёрнуть обработчик
                    this.onfocus({}, yabble);
                }
            }
            break;

            // удаление яблов
        case KEY.BACKSPACE:
        case KEY.DEL:

            if (this.multi.history.length > 1) {
                // удалению быть, а значит символы стирать не надо
                e.preventDefault();
                this.multi.remove();
            } else {

                // delete-ом принято удалять вправо
                // backspace-ом принято удалять влево
                var fwd = this.find(e.which == KEY.DEL ? 'next' : 'prev', yabble);
                var bwd = this.find(e.which == KEY.DEL ? 'prev' : 'next', yabble);

                if (yabble.focused && !$.trim(yabble.userVal()) && (fwd || bwd) || yabble.selected) {
                    // удалению быть, а значит символы стирать не надо
                    e.preventDefault();

                    // удаляем выбранный
                    this.remove(yabble);

                    if (fwd) {
                        fwd.select();
                    } else if (bwd) {
                        bwd.select();
                    } else {
                        this.add().focus();
                    }
                }
            }
            break;

        case KEY.LEFT:
            if (yabble.selected || yabble.focused && !$.trim(yabble.userVal())) {
                e.preventDefault();
                var prev = this.find('prev', yabble);
                if (prev) {
                    prev.select();
                }
            }
            break;

        case KEY.RIGHT:
            if (yabble.selected) {
                e.preventDefault();
                var next = this.find('next', yabble);
                if (next) {
                    next.select();
                } else {
                    this.add().focus();
                }
            }
            break;

        case KEY.HOME:
            if (yabble.selected || yabble.focused && !$.trim(yabble.userVal())) {
                e.preventDefault();
                var first = this.find('first');
                if (first) {
                    first.select();
                }
            }
            break;

        case KEY.END:
            if (yabble.selected) {
                e.preventDefault();
                var last = this.find('last');
                if (last) {
                    last.select();
                }
            }
            break;

        /* falls through */
        default:
            if (!yabble.focused) {

                if (isCtrlPressed(e)) {

                    switch (e.which) {
                        // по копированию нужно похачить значение, елси выбрано несколько яблов
                    case KEY.C:
                        this.multi.onCtrlC(yabble);
                        break;
                        // также ничего не делаем, в момент нажатия CTRL или Cmd
                    case 17:
                    case 91:
                    case 224: // Meta ff@Mac
                        break;

                        // вставляем сразу в новый ябл
                    case KEY.V:
                        that.add().focus();
                        break;

                        // а вырезаем из старого
                    case KEY.X:

                        if (that.multi.history.length) {
                            that.multi.onCtrlX(yabble);
                            setTimeout(function() {
                                that.multi.remove();
                            }, 16);
                        }

                        break;

                    case KEY.A:
                        this.multi.selectAll();
                        break;

                    case KEY.Z:
                        YabbleHistory.pop(this);
                        break;

                        // елси не обрабатываем клавишу, то пусть всё, что произойдёт
                        // происходит с новым пустым яблом
                    default:
                        that.add().focus();
                        break;
                    }
                } else if (e.which != KEY.SHIFT) {
                    this.add().focus();
                }
                // на пустом ябле тоже можно с помощью CTRL+A выделить все остальные
                // или с помощью CTRL+Z отменить изменение
            } else if (isCtrlPressed(e) && !$.trim(yabble.val())) {
                if (e.which == KEY.A) {
                    this.multi.selectAll();
                } else if (e.which == KEY.Z) {
                    YabbleHistory.pop(this);
                }
            }
            break;
        }
    },

    /**
     * Проверяем запятую
     * @private
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onkeypress: function(e, yabble) {
        var that = this;

        switch (e.which) {
            // запятая (и точка с запятой) дело такое - раскладкозависимое,
            // поэтому в keydown-е может иметь разные коды
            // а в keypress одинаковая
        case KEY.SEMI:
        case KEY.COMMA:
            if (yabble.focused && yabble.userVal().replace(/,|;/g, '')) {
                // ждём пока вставится запятая и добавляем пустой ябл
                setTimeout(function() {
                    that.add().focus();
                }, 0);
            } else {
                e.preventDefault();
            }
            break;
        }
    },

    /**
     * Обработка вставки значения
     * @param {Event} e
     * @param {Yabble} yabble
     */
    onpaste: function(e, yabble) {
        var that = this;
        // ждём пока вставится значеие и блюрим
        setTimeout(function() {
            that.add().focus();
            // DARIA-13017 - При копи-пасте текста Ябл создается автоматически, не давая пользователю "доввести" адрес
            if (yabble.isUnreachable) {
                yabble.focus();
                Daria.setSelection(yabble.input[0], 9999);
            }
        }, 0);
    },

    /* ------------------------------------------------------------------------------------------------------------- */

    /**
     * Добавить ябл с заданными именем и имейлом,
     * если не заданы, то пустой ябл
     * @private
     * @param {String|Object} val
     * @param {Yabble} before
     * @type Yabble
     */
    add: function(val, before) {
        // количество яблов достигло макс предела
        // клик на сете вызывает фокус на последнем ябле
        if (this.options.maxItems <= this.yabbles.length) {
            var last = this.find('last');

            // DARIA-30339
            // в инпут ябла что-то введено, значит это не фейковый пустой ябл, который редактируется в данный момент
            if (last && last.input && last.input.val()) {
                last.select();
                // если не работает саджест, то после подстановки ябла не обновляет значение поля формы
                // принудительно запускаем обновление
                this.recalcStrVal();

            // фейковый пустой ябл необходимо фокусить, чтобы удалить лишнее
            } else if (last) {
                last.focus();
            }

            return { focus: $.noop };
        }

        var yabble = this.multi.wrap(new Yabble(val));
        var index = before && $.inArray(before, this.yabbles);

        this.ids[yabble.id] = true;

        // добавление пустых яблов не пишем в историю, так как они только для фокуса
        if (val) {
            YabbleHistory.push(this);
        }

        if (index > -1) {
            yabble.root.insertBefore(before.root);
            this.yabbles.splice(index, 0, yabble);
        } else {
            this.wrapper.append(yabble.root);
            this.yabbles.push(yabble);
        }

        return yabble;
    },

    /**
     * Так случается, что мы начинаем обладать большей информацией о ябле,
     * чем раньше в связи с этим надо обновить его представление
     * @param {Yabble} yabble
     * @param {String} cid
     */
    update: function(yabble, cid) {
        Jane.Handler.getAll(['abook-contact'], {cid: cid}, function() {
            var value = Jane.$H('abook-contact').getContactInfo(cid, abookFlags);
            if (!$.isEmptyObject(value)) {
                yabble.val(value);
                yabble.pasteValue();
            }
            yabble.select();
        });
    },

    /**
     * Вырезает ябл из массива яблов и удаляет его
     * @private
     * @param {Yabble} yabble
     */
    remove: function(yabble) {
        var index = $.inArray(yabble, this.yabbles);

        if (index > -1) {
            YabbleHistory.push(this);

            this.yabbles.splice(index, 1);
            delete this.ids[yabble.id];
            YabbleDropdown.close(yabble);

            yabble.destroy();

            if (this.contactsSuggest) {
                this.contactsSuggest.destroy();
            }

            this.recalcStrVal();
        }
    },

    /* ------------------------------------------------------------------------------------------------------------- */

    /**
     * Найти ябл в массиве яблов исходя из определённых условий
     * например focused, selected, target, prev, next, id, fromEvent
     * @private
     * @param {String} which
     * @param {Element|Yabble|String|Event} target (target|prev,next|e)
     */
    find: function(which, target) {

        var yabble;
        if (which == 'fromEvent') {
            yabble = $(target.target).closest('.b-yabble', this.wrapper[0])[0];
            return yabble && this.find('target', yabble);
        }

        if (which == 'first') {
            return this.yabbles[0];
        }

        if (which == 'last') {
            return this.yabbles[this.yabbles.length - 1];
        }

        for (var i = 0; i < this.yabbles.length; i++) {
            yabble = this.yabbles[i];

            // ищем по DOM-элементу
            if (which === 'target') {
                if (yabble.root[0] === target) {
                    return yabble;
                }
                // ищем по относительному расположению
            } else if (which === 'prev' || which === 'next') {
                if (yabble === target) {
                    if (which === 'prev') {
                        return this.yabbles[i - 1];
                    }
                    if (which === 'next') {
                        return this.yabbles[i + 1];
                    }
                }
            } else if (which === 'id') {
                if (yabble.id == target) {
                    return yabble;
                }
                // ищем по флагам яблов
            } else if (yabble[which]) {
                return yabble;
            }
        }
    },

    /**
     * Хэлпер для делегирования событий с набора на ябл
     * @private
     * @param {String} type
     * @param {Function} fn
     */
    on: function(type, fn) {
        var that = this;
        fn = fn || this['on' + type];

        this.root.on(type, '.b-yabble', function(e) {
            // ссылка на каждый эвент будет храниться в инстансе объекта
            that.e = e;
            // в IE и Opera блюрятся неинпуты (а выделенный текст),
            // что вообще говоря излишне для нашей стройной структуры
            if (type == 'blur' && e.target.tagName.toLowerCase() != 'input') {
                return;
            }

            var yabble = that.find('target', e.currentTarget);

            if (yabble) {
                // console.log(yabble.id +' on' + type);

                // вызываем переданный обработчик
                if (fn) {
                    fn.call(that, e, yabble);
                }
                // если у ябла есть обработчик такого события - вызываем его
                if (yabble['on' + type]) {
                    yabble['on' + type].call(yabble, e);
                }
            }
        });
    },

    /**
     * Сверяет переданные контакты с абуком и раскрашивает яблы
     * @param {Array} contacts
     * @param {Array} yabbles
     */
    resolveContacts: function(contacts, yabbles) {
        var that = this;
        yabbles = yabbles || this.yabbles;

        /**
         * В связи с ограничением длины GET запросов бьем на серию запросов по 256 юникод символов.
         * Важно: русские символы после кодирования превратятся в %D1, что занимает 3 байта.
         */
        var emailsStringLength = Infinity;
        var queries = [];
        var emails;

        contacts.forEach(function(contact) {
            if (contact.email.length < 256) {
                emailsStringLength += contact.email.length + 1;
                if (emailsStringLength > 256) {
                    emailsStringLength = 0;
                    emails = [];
                    queries.push(emails);
                }
                emails.push(contact.email);
            }
        });

        queries.forEach(function(emails) {
            // пробуем зарезолвить в абуке переданные строкой аттачи
            Jane.Handler.getAll(['abook-contacts'], { emails: emails.join(',') }, function() {
                var resolved = false;
                var abookContacts = Jane.$H('abook-contacts').getContactsInfoByEmails(emails, abookFlags);

                // сливаем контакты
                $.each(contacts, function(i, contact) {
                    var email = contact.email;
                    var yabble = yabbles[i];
                    // по идее яблы должны присутсвовать,
                    // т.к. они из тех же contacts создавались,
                    // но на всяк проверим
                    if (yabble && yabble.value.email == email) {
                        // смотрим что удалось зарезолвить
                        for (var j = abookContacts.length; j--;) {
                            if (email == abookContacts[j].email) {
                                resolved = true;
                                yabble.val(Yabble.mergeContact(abookContacts[j], yabble.value));
                                yabble.pasteValue();
                                return true;
                            }
                        }
                    }
                });

                if (resolved) {
                    that.recalcStrVal();
                }
            });
        });
    },

    /* ------- Публичный интерфейс --------------------------------------------------------------------------------- */

    /**
     * Получение/установка значения ябла
     * @param {String} value
     * @type {String}
     */
    val: function(value) {
        var that = this;
        // получить значение
        if (value === undefined) {
            return this.strVal;
            // установить значение
        } else {
            // сначала нужно удалить все старые яблы
            while (this.yabbles[0]) {
                this.remove(this.yabbles[0]);
            }

            if (typeof value === 'string' && value) {

                var contacts = Helpers.splitContacts(value);
                $.each(contacts, function(i, contact) {
                    that.add(contact);
                });

                that.recalcStrVal();
                that.resolveContacts(contacts);

            } else if ($.isArray(value)) {
                $.each(value, function(i, val) {
                    that.add(val);
                });

                that.recalcStrVal();
                that.resolveContacts(value);
            }

            // если вставляется значение из вне,
            // то нужно перезапустить историю
            if (!YabbleHistory.ignore) {
                YabbleHistory.start(this);
            }

        }
    },

    /**
     * Ставит фокус в набор яблов, создаёт свежий ябл, если нужно
     */
    focus: function() {
        this.add().focus();
    },

    /**
     * Провалидировать все яблы в наборе, false, елси хотябы один невалидный
     * @type Boolean
     */
    validate: function() {
        for (var i = this.yabbles.length; i--;) {
            if (this.yabbles[i].isUnreachable) {
                return false;
            }
        }

        return true;
    },

    /**
     * Очищает ябблсет, удаляет все биндинги
     */
    destroy: function() {
        var that = this;

        // удаляем все яблы
        this.val('');
        // анбиндим события
        $.each(YabbleSet.actions, function(i, event) {
            Jane.events.unbind(event, that.onactionRef);
        });
        // удалить ноду мы не можем - не мы её создавали
        // снимем эвенты, которые вешали
        this.root.unbind();
        this.input.unbind();

        this.multi.destroy();

        YabbleHistory.stop(this);

        // Уничтожение саджеста контактов
        if (this.contactsSuggest) {
            this.contactsSuggest.destroy();
        }
    }
};

Daria.Yabbles = YabbleSet;

/* ../../js/components/yabble.set.js end */

    /* ../../js/components/yabble.dropdown.js begin */
// префикс селектора дропдауна по id
var dds = '.b-mail-dropdown__box__content_yabble-';

/**
 * Дропдауны для ябла
 */
var YabbleDropdown = {

    /**
     * Таймаут открытия дропдауна
     * @private
     * @type Number
     */
    timeout: null,

    /**
     * Запрос к абуку для дропдауна
     * @private
     * @type Jane.Handler.Request
     */
    request: null,

    /**
     * Задержка для даблклика
     * @private
     * @type Number
     */
    delay: 150,

    /**
     * Имя шаблона для дропдауна
     * @private
     * @type String
     */
    template: 'mail-compose:yabble-dropdown',

    /**
     * Данные для шаблона дропдауна
     * @private
     * @type Object
     */
    json: {},

    /**
     * Открывает дропдаун для ябла
     * @param {Yabble} yabble
     */
    toggle: function(yabble) {
        var isVisible = $(dds + yabble.id).is(':visible');

        YabbleDropdown.close(yabble);

        if (!isVisible) {
            YabbleDropdown.remove(yabble);
            this.yabble = yabble;
            this.getParams();
            this.load();
        }
    },

    /**
     * Закрывает все открыте дропдауны
     * @param {Yabble} yabble
     */
    close: function(yabble) {
        // если только собирается показаться - не показывать
        if (typeof this.timeout == 'number') {
            clearTimeout(this.timeout);
            this.timeout = null;
            // если на стадии запроса к абуку
        } else if (this.request) {
            this.request.xhr.abort();
            this.request = null;
            // если уже показан - закрыть
        } else {
            Daria.Dropdown.closeCurrent();
            if (yabble) {
                YabbleDropdown.remove(yabble);
            }
        }
    },

    /**
     * Удаляет дропдаун ябла, если он был
     * @param {Yabble} yabble
     */
    remove: function(yabble) {
        $(dds + yabble.id).remove();
    },

    /**
     * Определяет хэндлеры и параметры для дропдауна ябла
     * @private
     */
    getParams: function() {
        var yabble = this.yabble;
        var id = yabble.id;
        var value = yabble.value;

        var name = _.escape(value.name || '');
        var email = _.escape(value.email || '');

        switch (true) {
        case yabble.isPhone:
            this.params = null;
            this.handlers = null;
            this.template = 'mail-compose:yabble-dropdown-phone';
            this.json = { email: email, id: id };
            break;

        case yabble.isContact:
            this.params = {cid: value.cid};
            this.handlers = ['abook-contact'];
            this.template = 'mail-compose:yabble-dropdown-contact';
            this.json = { email: email, id: id };
            break;

        case yabble.isGroup:
            this.params = {tid: value.tid};
            this.handlers = ['abook-contacts'];
            this.template = 'mail-compose:yabble-dropdown-group';
            this.json = {
                id: id,
                email: $.map(value.contacts, function(contact) {
                    return !contact.ignored && contact.email || null;
                })
            };
            break;

        case yabble.isUnreachable:
            this.params = null;
            this.handlers = null;
            this.template = 'mail-compose:yabble-dropdown';
            this.json = { id: id, name: name, email: email };
            break;

        case yabble.fromMessage:
            this.params = null;
            this.handlers = null;
            this.template = 'mail-message:dropdown-contact';
            this.json = { id: id, email: email, name: name, my: yabble.my, cid: yabble.cid };
            break;

        default:
            this.params = null;
            this.handlers = null;
            this.template = 'mail-compose:yabble-dropdown';
            this.json = { id: id, email: email, name: name };
            break;
        }
    },

    /**
     * Загрузка данных, необходимых для отображения дропдауна
     * @private
     */
    load: function() {
        var delay = this.delay;

        // если нужно что-то грузить
        if (this.handlers) {
            var start = $.now();
            var resolved;
            this.request = Jane.Handler.getAll(this.handlers, this.params, function() {
                delay -= $.now() - start;
                resolved = true;
                this.request = null;
                this.open(delay < 0 ? 0 : delay);
            }.bind(this));

            if (resolved) {
                this.request = null;
            }

        } else {
            this.open(delay);
        }

    },

    initializeNanoislands: function(rootNode) {
        nb.init(rootNode);
    },

    /**
     * Попап открывается
     * @private
     * @param {Number} delay
     */
    open: function(delay) {
        var that = this;
        var yabble = this.yabble;
        var cc = dds + yabble.id;
        var arrow = yabble.arrow;
        var content = $(Jane.tt(this.template, this.json, this.handlers, this.params));
        delay = 'delay' in yabble ? yabble.delay : delay;

        this.initializeNanoislands(content);

        // удаляем старый дропдаун, если он есть
        $(cc).remove();

        var open = function() {
            that.timeout = null;
            Daria.Dropdown.toggle(null, {content: $(content).find(cc), dropdown: that.yabble.root, handle: arrow});

            if (yabble.value && yabble.value.email) {
                Actions.run("common.copy", { container: cc, text: yabble.value.email, onmouseup: function() {
                    $(document).trigger('b-mail-dropdown-closeall');
                }});
            }
        };

        // вставляем новый
        if (delay < 0) {
            open();
        } else {
            this.timeout = setTimeout(open, delay);
        }
    }

};

Daria.YabbleDropdown = YabbleDropdown;

/* ../../js/components/yabble.dropdown.js end */

    /* ../../js/components/yabble.multi.js begin */
/* global KEY, Yabble, YabbleHistory */

// нужно обрабатывать [CTRL|Command] + [C|V|X]
// чтобы копировать/вставлять/вырезать
// в виндах это CTRL, в маках Command
// но Opera на маке, ведёт себе виндовенько
// и когда нажимаешь Command она почылает CTRL
// но и это ещё не всё, также она не посылает флагов ctrlKey/metaKey
// когда просто нажимаешь эти кнопки, а флаги появляются только,
// когда с зажатым Ctrl/Command жмёшь обычную букву
// но и это ещё не всё! если в опере зажать ctrl и потом
// нажать V, то на V никаких key-событий не будет в Маке
// добро пожаловать в Оперу, сынок
// Хром под убунтой тоже не ставит флаг ctrlKey, когда просто зажимаем CTRL
// зато keyIdentifier === 'Control' - и он нормально ловит V во время зажатого CTRL
// а в opere keyIdentifier нет, поэтому поддержим ещё и хроп под убунтой не трогая оперу под мак
var isCtrlPressed = function(e) {
    if (!e) {return false;}
    var keyIdentifier = e.originalEvent && e.originalEvent.keyIdentifier;
    return e.ctrlKey || e.metaKey || keyIdentifier === 'Control'; //|| e.which === KEY.META;
};

var yap = Yabble.prototype;

/**
 * На каждый YabbleSet создаётся YabbleMulti,
 * который следит за выделением нескольких яблов
 */
var YabbleMulti = function(set) {
    this.set = set;

    this.clear();

    // предзагружаем картнку, которую будем показывать, когда тянем несколько яблов
    new Image().src = Jane.getEntity('b-yabble-dnd.png');
};

YabbleMulti.prototype = {

    /**
     * Массив, куда складываются яблы, которые мы выделяли
     * в том порядке, в котором мы их выделяли,
     * но в массиве они присутсвуют только один раз, последний
     * @type Array
     */
    history: null,

    /**
     * Добавить ябл в историю
     * @param {Yabble} yabble
     */
    push: function(yabble) {
        // удаляем все предыдущие упоминаня ябла в истории
        this.pop(yabble);

        this.history.push(yabble);
        // если что-нибудь заселектили, то focus уже не нужен
        this.focusLast = undefined;

    },

    /**
     * Удалить ябл из истори
     * @param {Yabble} yabble
     */
    pop: function(yabble) {
        for (var i = this.history.length; i--;) {
            if (this.history[i] == yabble) {
                this.history.splice(i, 1);
            }
        }
    },

    /**
     * Очистить историю - удалить все яблы из истории
     */
    clear: function() {
        this.shiftFirst = undefined;
        this.focusLast = undefined;
        this.history = [];
    },

    /**
     * Возвращает первый выделенный ябл
     * @type Yabble
     */
    first: function() {
        return this.history[0];
    },

    /**
     * Возвращает последний выделенный ябл
     * @type Yabble
     */
    last: function() {
        return this.history[this.history.length - 1];
    },

    /**
     * Получить значение яблов из истории
     * @type String
     */
    val: function() {
        return $.map(this.history, function(yabble) { return yabble.val(); }).join(', ');
    },

    /**
     * Возвращает id выделенных яблов
     * @type Array
     */
    ids: function() {
        return $.map(this.history, function(yabble) { return yabble.id; });
    },

    /**
     * Оборачивает ябл в мульти обёртку, чтобы переопределить его поведение
     * @param {Yabble} yabble
     */
    wrap: function(yabble) {
        var that = this;

        yabble.deselect = function() {

            var id = that.set.mousedownId;
            // если кликаем по одному и тому же яблу, то обработка произойдёт в select
            // если кликаем по яблу из набора с зажатым шифтом или контролом
            // то обработка произойдёт в select
            if (that.set.find('id', id)) {
                return;
            }

            // но mouseId катит только для кликов мыши, а для стрелок
            // меняем порядок blur и focus таймаутом и сравниваем ключи
            // NOTE: так нельзя сравнивать клики, так как select происходит после
            // onclick, а deselect после mousedown и между ними может быть сколько
            // угодно времени, а в случае со стреками select по keydown
            //
            // также этот таймаут помогает диселектить, если кликнули вне сета
            var key = that.ids().join(',');
            setTimeout(function() {

                // если клик произошёл, а ключ не изменился, то нужно задиселектить всё
                // потомучто при мультяшных кликах и передвижениях ключ меняется обычно
                if (key == that.ids().join(',')) {
                    that.deselectAll();
                }

            }, 0);
        };

        yabble.select = function() {
            var e = that.set.e || {};
            var ctrl = isCtrlPressed(e);
            var shift = e.shiftKey;
            var arrow = $.inArray(e.which, [KEY.LEFT, KEY.RIGHT]) > -1;

            if ((!shift || arrow && that.history.length === 0) && (!ctrl || arrow)) {
                that.deselectAll();
                that.push(yabble);
                yap.select.apply(this, arguments);
            } else {

                if (shift) {
                    that.selectTo(yabble);

                } else {
                    if (yabble.selected) {
                        that.pop(yabble);
                        yap.deselect.apply(yabble);
                        if (that.last()) {
                            yap.select.apply(that.last());
                        }
                    } else {
                        yap.select.apply(yabble, arguments);
                        that.push(yabble);
                    }
                }

                // при мультикликах не показываем дропдаун
                return true;
            }
        };

        yabble.focus = function() {
            var prev = that.set.find('prev', yabble);
            that.deselectAll();
            setTimeout(function() {
                that.focusLast = prev;
            }, 16);
            yap.focus.apply(yabble, arguments);
        };

        yabble.destroy = function() {
            that.pop(yabble);
            yap.destroy.apply(yabble, arguments);
        };

        return yabble;
    },

    /**
     * Если выделено больше одного ябла,
     * то нужно подхачить значение последнего выделенного на момент Ctrl+C
     * @param {Yabble} yabble
     */
    onCtrlC: function(yabble) {
        if (this.history.length > 1) {
            var value = this.val();

            yabble.input.val(value);
            yabble.doInput('focus', true);

            yabble.input.one('keyup blur', function() {
                if (yabble.root) {
                    yabble.doInput('focus', true);
                }
            });
        }
    },

    /**
     * Удаляет все выделенные яблы
     */
    remove: function() {
        var that = this;

        YabbleHistory.push(this.set);
        YabbleHistory.ignore = true;

        $.each(this.history.slice(), function(i, yabble) {
            that.set.remove(yabble);
        });

        var y = that.set.add();
        if (y) {
            y.focus();
        }

        YabbleHistory.ignore = false;
    },

    /**
     * Выделить все яблы в наборе
     */
    selectAll: function() {
        var that = this;
        var notSelected = $.map(this.set.yabbles, function(yabble) {
            return yabble.selected ? null : yabble;
        });

        $.each(notSelected, function(i, yabble) {
            if (yabble && !yabble.focused) {
                yap.select.apply(yabble);
                that.push(yabble);
            }
        });
    },

    /**
     * Выбирает все яблы с первого выделенного до указанного
     * если первого выбранного нет, то с первого имеющигося (как в MacOS)
     * @param {Yabble} yabble
     */
    selectTo: function(yabble) {
        var that = this;
        var first = this.shiftFirst || this.focusLast || this.last() || this.set.yabbles[0];
        this.deselectAll();
        this.shiftFirst = first;

        // нужно правильно выделять - от first к yabble
        var firstIndex = $.inArray(first, this.set.yabbles);
        var yabbleIndex = $.inArray(yabble, this.set.yabbles);

        // выделяем вся яблы [first, yabble)
        var dir = firstIndex > yabbleIndex ? 'prev' : 'next';
        while (first && first != yabble) {
            yap.select.apply(first);
            that.push(first);
            first = this.set.find(dir, first);
        }

        // выделяем yabble
        yap.select.apply(yabble);
        that.push(yabble);
    },

    /**
     * Снять выделение со всех яблов в наборе
     */
    deselectAll: function() {
        this.clear();
        $.each(this.set.yabbles, function(id, yabble) {
            yap.deselect.apply(yabble);
        });
    },

    /**
     * Удалить мульти обёртку с ябла
     * @param {Yabble} yabble
     */
    unwrap: function(yabble) {
        /* jshint unused: false */
        // кажется, что сейчас нет нужды возвращать яблы
        // к нормальному состоянию
        // но если появится - надо помнить,
        // что в yabble.destroy вызывается нужный history.pop()
    },

    /**
     * Уничтожить мультинабор
     */
    destroy: function() {
        this.clear();
    }

};


/**
 * Если выделено больше одного ябла,
 * то нужно подхачить значение последнего выделенного на момент Ctrl+X
 * @param {Yabble} yabble
 */
YabbleMulti.prototype.onCtrlX = YabbleMulti.prototype.onCtrlC;

/* ../../js/components/yabble.multi.js end */

    /* ../../js/components/yabble.history.js begin */
/* exported YabbleHistory */
/**
 * CTRL+Z для наборов яблов
 */
var YabbleHistory = {

    /**
     * Хэш с наборами, которые обрабатывает история
     * id -> YabbleSet
     * @param Object
     */
    sets: {},

    /**
     * Хэш с итсторией по наборам
     * set.id -> [
     *      key -> String (характеризует состояние сета, чтобы не добавлять в историю дубли)
     *      values -> [ Yabble.value, Yabble.value, ... ] (масив по которому можно развернуть яблы)
     *      link -> Any (ссылка на другой айтем истории, чтобы извлекать вместе)
     * ]
     * @param Object
     */
    history: {},

    /**
     * Временно не обрабатывать изменеия в наборах
     * используется, когда мы сами их меняем или меняем балково
     * @type Boolean
     */
    ignore: false,

    /**
     * Следить за набором яблов
     * @param {YabbleSet} set
     */
    start: function(set) {
        this.history[set.id] = [];
        this.sets[set.id] = set;
    },

    /**
     * Перестать следить за набором яблов
     * @param {YabbleSet} set
     */
    stop: function(set) {
        delete this.history[set.id];
    },

    /**
     * Созадёт ключ, характеризующий состояние набора
     * @param {Array} values
     */
    key: function(values) {
        return $.map(values, function(v) { return v.email || ''; }).join(',');
    },

    /**
     * Копирует текущие значения набора
     * @param {YabbleSet} set
     */
    values: function(set) {
        return $.map(set.yabbles, function(yabble) {
            return !$.isEmptyObject(yabble.value) && $.extend({}, yabble.value) || null;
        });
    },

    /**
     * Запоминает состояние набора
     * @param {YabbleSet} set набор
     * @param {String} link
     */
    push: function(set, link) {
        if (this.ignore || !this.history[set.id]) {
            return;
        }

        var history = this.history[set.id];
        var last = history[history.length - 1];

        var values = this.values(set);
        var key = this.key(values);

        // если значение с таким ключём уже сохранено,
        // но у него нет линка, а сейча линк пришёл
        if (last && last.key == key) {
            if (link) {
                last.link = link;
            }
        } else {

            var value = {
                values: values,
                key: key
            };

            if (link) {
                value.link = link;
            }

            history.push(value);
        }
    },

    /**
     * Извлекает последнее сохранённое значение для набора
     * @param {YabbleSet} set набор
     */
    pop: function(set) {
        // временно приостанавливаем историю, пока сами вставляем
        this.ignore = true;

        var history = this.history[set.id];

        if (history && history.length) {

            var value = history.pop();
            set.val(value.values);
            var y = set.add();
            if (y) {
                y.focus();
            }

            // если есть ссылка, то поищем
            // её в последнем шагу соседних историй
            if (value.link) {
                for (var id in this.history) {
                    var hs = this.history[id];
                    if (hs.length && value.link == hs[hs.length - 1].link) {
                        this.pop(this.sets[id]);
                    }
                }
            }
        }

        this.ignore = false;
    }
};

/* ../../js/components/yabble.history.js end */

    /* ../../js/components/yabble.dragndrop.js begin */
(function() {
    /* global Helpers, YabbleHistory, YabbleSet */

    // дополняем обработчики для DND
    YabbleSet.yabbleEvents.push('dragstart', 'drag', 'dragend');
    YabbleSet.directEvents.push('dragover', 'dragenter', 'dragleave', 'drop');

    var data = {};
    var dataTransfer = function(e) {
        return e.originalEvent.dataTransfer;
    };
    var dropped;

    // dragleave и dragenter такиеже надёжные как mouseover и mouseout
    var leave = {
        timeouts: {},
        on: function(id, onleave) {
            if (!this.timeouts[id]) {
                this.timeouts[id] = setTimeout(function() {
                    onleave();
                    this.timeouts[id] = null;
                }.bind(this), 100);
            }
        },
        clear: function(id) {
            if (this.timeouts[id]) {
                clearTimeout(this.timeouts[id]);
                this.timeouts[id] = null;
            }
        }
    };

// запускаем драгндроп в ие
    if (Modernizr.msie) {
        var onmousedown = YabbleSet.prototype.onmousedown;
        var onmouseup = YabbleSet.prototype.onmouseup;
        YabbleSet.prototype.onmousedown = function(e, yabble) {
            if (onmousedown) {
                onmousedown.apply(this, arguments);
            }

            if (yabble.focused) {
                return;
            }

            this.root.one('mousemove.iemousemove', function(e) {
                // форсируем DnD в IE
                if ((e.button === 0 || e.button === 1) && yabble.root[0].dragDrop) {
                    yabble.root[0].dragDrop();
                }
            });
        };
        YabbleSet.prototype.onmouseup = function() {
            if (onmouseup) {
                onmouseup.apply(this, arguments);
            }

            this.root.off('.iemousemove');
        };
    }

    $.extend(YabbleSet.prototype, {

        /* ------------------------------------------------------------------------------------------------------------- */

        /**
         * Начали перетаскивать ябл
         * @private
         * @param {Event} e
         * @param {Yabble} yabble
         */
        ondragstart: function(e, yabble) {
            if (yabble.focused) {
                return;
            }
            // открываем поля, в которые можно драгать
            // но сначала надо выдрагать ябл из поля
            setTimeout(function() {
                var type = Daria.Page.type == 'compose' ? 'compose' : 'quick-reply';
                $.each(['cc', 'bcc'], function(i, f) {
                    Jane.Actions.run(type + '.add-' + f, {focus: false});
                });
            }, 50);

            var multi = this.multi;

            // готовимся драгать
            dropped = false;

            if (multi.history.length > 1) {
                $.each(multi.history, function(i, yabble) {
                    data[yabble.id] = $.extend({}, yabble.value);
                });
                // IE не поддерживет setDragImage
                if ('setDragImage' in dataTransfer(e)) {
                    dataTransfer(e).setDragImage($('<img src="' + Jane.getEntity('b-yabble-dnd.png') + '"/>')[0], 30, 10);
                }
                dataTransfer(e).setData('Text', multi.val()); // IE требует чётко строку
            } else {
                data[yabble.id] = $.extend({}, yabble.value);
                dataTransfer(e).setData('Text', yabble.val()); // IE требует чётко строку
            }

            dataTransfer(e).effectAllowed = 'all';
        },

        /**
         * Тащим ябл
         * @private
         * @param {Event} e
         * @param {Yabble} yabble
         */
        ondrag: function(e, yabble) {
            /* jshint unused: false */
        },

        /**
         * Закончили перетаскивать ябл
         * @private
         * @param {Event} e
         * @param {Yabble} yabble
         */
        ondragend: function(e, yabble) {
            /* jshint unused: false */
            var that = this;

            // говорят drop и dragend в разных броузерах вызывается в разной последовательности,
            // поэтому на всяк обернём в setTimeout
            setTimeout(function() {
                // если ябл бросили успешно, то нужно удалить его из набора,
                // в котором он был
                if (dropped) {
                    YabbleHistory.push(that, Object.keys(data).join(','));
                    YabbleHistory.ignore = true;
                    $.each(data, function(id) {
                        that.remove(that.find('id', id));
                    });
                    YabbleHistory.ignore = false;
                } else {
                    // или никуда не дропнули - восстанавливаем фокусы
                    that.multi.deselectAll();
                }
                that.mousedownId = null;
                // очишаем dropped
                dropped = false;
                // очищаем дату в любом случае
                data = {};
            }, 0);
        },

        /* ------------------------------------------------------------------------------------------------------------- */

        /**
         * Ябл вошёл в зону яблосета
         * @private
         */
        ondirectdragenter: function() {
            leave.clear(this.id);
            this.root.addClass('b-mail-input_focus-yabbles');
        },

        /**
         * Ябл на яблосетом
         * @private
         * @param {Event} e
         */
        ondirectdragover: function(e) {
            e.preventDefault();
            leave.clear(this.id);

            // если драгаем ябл - то он должен мувнуться
            if (!$.isEmptyObject(data)) {
                dataTransfer(e).dropEffect = 'move';
                // всё остальное будем копировать
            } else {
                dataTransfer(e).dropEffect = 'copy';
            }
        },

        /**
         * Ябл покинул зону яблосета
         * @private
         */
        ondirectdragleave: function() {
            leave.on(this.id, function() {
                this.root.removeClass('b-mail-input_focus-yabbles');
            }.bind(this));
        },

        /**
         * Ябл брошен в яблосет
         * @private
         * @param {Event} e
         */
        ondirectdrop: function(e) {
            var that = this;
            e.preventDefault();

            YabbleHistory.push(that, Object.keys(data).join(','));
            YabbleHistory.ignore = true;
            // если перетаскиваем ябл и
            // такого ябла в сете ещё нет, то бросаем
            var yabbles;
            var y;
            if (!$.isEmptyObject(data)) {
                yabbles = [];
                $.each(data, function(id, value) {
                    if (!that.find('id', id)) {
                        dropped = true;
                        var y = that.add(value);
                        if (y) {
                            yabbles.push(y);
                        }
                    }
                });
                if (dropped) {
                    that.recalcStrVal();
                    that.resolveContacts(data, yabbles);
                    y = that.add();
                    if (y) {
                        y.focus();
                    }
                }
                // если перетаскиваем просто какую-то строчку текста
            } else {
                var value = $.trim(dataTransfer(e).getData('Text') || '');

                if (value) {
                    value = value.replace(/\n/g, ',');
                    if (value.indexOf(',') > -1 || value.indexOf(';') > -1) {
                        var contacts = Helpers.splitContacts(value);
                        yabbles = $.map(contacts, function(v) {
                            return that.add(v) || null;
                        });
                        that.recalcStrVal();
                        that.resolveContacts(contacts, yabbles);
                    } else {
                        var raw = this.add(value);
                        if (raw) {
                            that.recalcStrVal();
                            that.resolveContacts([raw.value], [raw]);
                        }
                    }
                    // добавляем новый ябл
                    // также это гарантирует! recalcValue в дальнейшем
                    y = this.add();
                    if (y) {
                        y.focus();
                    }
                }
            }
            YabbleHistory.ignore = false;

            this.root.removeClass('b-mail-input_focus-yabbles');
        }

    });

})();

/* ../../js/components/yabble.dragndrop.js end */

    /* ../../js/components/yabble.touch.js begin */
// немножко похачим для тачевых устройств для iPad/iPhone
(function() {
    /* global KEY, YabbleSet */
    if (!(('ontouchend' in window) && /iPad|iPhone/.test(navigator.userAgent))) {
        return;
    }

    // будем только клик обрабатывать и то по touchend
    YabbleSet.directEvents = ['touchend'];
    // сохраним оригинальный keydown
    var onkeydown = YabbleSet.prototype.onkeydown;

    $.extend(YabbleSet.prototype, {
        /**
         * Роль onclick в тачах будет выполнять ontouchend
         * @param {Event} e
         */
        ondirecttouchend: function(e) {
            var yabble = this.find('fromEvent', e);
            // проблема - элемент сфокусирован, а фокуса нет - нужно пересоздать
            if (yabble && this.onclick && !(yabble.focused && !yabble.userVal())) {
                this.onclick(e, yabble);
            } else {
                var y = this.add();
                if (y) {
                    y.focus();
                }
            }
        },

        /**
         * Переопределим onkeypress,
         * чтобы по бэкспэйсу в пустом ябле сразу удалялся предыдуший
         * @param {Event} e
         * @param {Yabble} yabble
         */
        onkeydown: function(e, yabble) {

            if (e.which == KEY.BACKSPACE || e.which == KEY.DEL) {
                // delete-ом принято удалять вправо
                // backspace-ом принято удалять влево
                var fwd = this.find(e.which == KEY.DEL ? 'next' : 'prev', yabble);
                var bwd = this.find(e.which == KEY.DEL ? 'prev' : 'next', yabble);

                // на пустом ябле не убираю фокус удаляем предыдущий
                if (yabble.focused && !$.trim(yabble.userVal()) && (fwd || bwd)) {
                    // удалению быть, а значит символы стирать не надо
                    e.preventDefault();

                    if (fwd) {
                        this.remove(fwd);
                    } else if (bwd) {
                        this.remove(bwd);
                    }

                    // на заселекченном удаляем текущий и выбираем предыдущий
                } else if (yabble.selected) {
                    // удалению быть, а значит символы стирать не надо
                    e.preventDefault();

                    // удаляем выбранный
                    this.remove(yabble);

                    if (fwd) {
                        fwd.select();
                    } else if (bwd) {
                        bwd.select();
                    } else {
                        var y = this.add();
                        if (y) {
                            y.focus();
                        }
                    }
                }
            } else {
                // вызываем оригинальный обработчик
                onkeydown.apply(this, arguments);
            }
        }
    });

})();

/* ../../js/components/yabble.touch.js end */

    /* ../../js/components/yabble.set2.js begin */
/* global Helpers, isCtrlPressed, isLeftButton, KEY, Yabble, YabbleHistory, YabbleSet */

var YabbleSet2 = function(o) {
    this.options = $.extend({}, YabbleSet2.defaultOptions, $.isPlainObject(o) ? o : {root: o});
    Daria.Yabbles.call(this, this.options.root, this.options);

    // TODO переработать драг и вынести отсюда
    if (!this.options.draggable) {
        this.root
            .off('dragstart', '.b-yabble')
            .off('drag', '.b-yabble')
            .off('dragend', '.b-yabble')
            .unbind('dragover')
            .unbind('dragenter')
            .unbind('dragleave')
            .unbind('drop');
    }
};

Jane.extend(YabbleSet2, Daria.Yabbles);

YabbleSet2.defaultOptions = {
    root: null,
    autocomplete: false,
    draggable: true,
    dropdown: Daria.YabbleDropdown,
    yabble: Yabble,
    maxItems: Number.MAX_VALUE,
    placeholder: false
};

YabbleSet2.prototype.disabled = function(dis) {
    dis = typeof dis == 'boolean' ? dis : true;
    this.root.toggleClass('b-mail-input_yabbles__disabled', dis);
};

YabbleSet2.prototype.isDisabled = function() {
    return this.root.hasClass('b-mail-input_yabbles__disabled');
};

YabbleSet2.prototype.placeholder = function(action/*, args*/) {
    if (!this.options.placeholder) {
        return false;
    }

    switch (action) {
    case 'show':
        if (this.yabbles.length) {
            return;
        }

        $('<span class="js-yabbles-placeholder b-mail-input_yabbles__placeholder"></span>')
            .text(this.root.data('placeholder') || this.options.placeholder)
            .appendTo(this.wrapper);
        break;
    case 'hide':
        if (!this.yabbles.length) {
            return;
        }

        this.wrapper.find('.js-yabbles-placeholder').remove();
        break;
    }
};

YabbleSet2.prototype.dropdown = function(action/*, args*/) {
    if (!this.options.dropdown) {
        return false;
    }

    var args = Array.prototype.slice.call(arguments, 1);

    this.options.dropdown[action].apply(this.options.dropdown, args);
};

YabbleSet2.prototype.autocomplete = function(action/*, args*/) {
    var that = this;
    var isAutocompleter = this.options.autocomplete instanceof Daria.Autocompleter;
    var isSuggest = this.options.autocomplete instanceof Daria.Suggest;

    if (typeof this.options.autocomplete === 'boolean' && !this.options.autocomplete) {
        return false;
    }

    if (typeof this.options.autocomplete !== 'object') {
        return false;
    }

    var autocompleter;
    if (isAutocompleter || isSuggest) {
        autocompleter = this.options.autocomplete;

        // подумать как лучше создавать объект автокомплита, если переданы настройки
    } else {
        return false;
    }

    var args = Array.prototype.slice.call(arguments, 1);

    switch (action) {
    case 'start':
        start.apply(this, args);
        break;

    case 'stop':
        stop.apply(this, args);
        break;

    case 'get':
        return isAutocompleter ? autocompleter : false;
    }

    function start(yabble) {
        if (yabble.input.__autocompleter) {
            return;
        }
        yabble.input.__autocompleter = true;

        if (isAutocompleter) {
            autocompleter.bindField({
                field: yabble.input,
                focus: 1,
                currentValue: this.val()
            });
        }

        if (isSuggest){
            autocompleter
                .changeInputField(yabble.input[0])
                .setOptions({
                    yabble: yabble,
                    timeoutOfCopyToSms: true,
                    hide: function() {
                        yabble.blur();
                    },
                    select: function() {
                        // Уход из поля при выборе. Таймаут отложить действие по стеку событий
                        // Без таймаута обойтись нельзя, потому что клик мышью возвращает фокус на поле ввода, а
                        // нажатие на клавишу Enter или Tab вызвает blur с поля ввода. Унифицированного события после blur
                        // или focus по клику не создано в саджесте.
                        Daria.setZeroTimeout(function() {
                            // Попытка добавления нового yabble
                            var addedYable = that.add();
                            if (addedYable) {
                                addedYable.focus();
                            } else {
                                yabble.blur();
                            }
                        });
                    },
                    previousValues: this.val().split(/,\s*/)
                });
        }
    }

    function stop(yabble) {
        if (!yabble.input.__autocompleter) {
            return;
        }

        delete yabble.input.__autocompleter;

        autocompleter.abort();
        autocompleter.destroy();
    }
};

/**
 * Обработчики событий
 * @private
 */
YabbleSet2.prototype.init = function() {
    var that = this;

    this.input.focus(function() {
        that.focus();
    });

    // директ эвенты
    $.each(YabbleSet.directEvents, function(i, type) {
        if (that['ondirect' + type ]) {
            that.root.bind(type, function(e) {
                if (that.isDisabled()) {
                    return;
                }

                that.e = e;
                that['ondirect' + type].apply(that, arguments);
            });
        }
    });
    // делегирование событий на яблах
    $.each(YabbleSet.yabbleEvents, function(i, type) {
        that.on(type);
    });

    this.onactionRef = function() {
        if (that.isDisabled()) {
            return;
        }

        that.onaction.apply(that, arguments);
    };

    $.each(YabbleSet.actions, function(i, event) {
        Jane.events.bind(event, that.onactionRef);
    });

    this.placeholder('show');
};

/**
 * Хэлпер для делегирования событий с набора на ябл
 * @private
 * @param {String} type
 * @param {Function} fn
 */
YabbleSet2.prototype.on = function(type, fn) {
    var that = this;
    fn = fn || this['on' + type];

    this.root.on(type, '.b-yabble', function(e) {
        if (that.isDisabled()) {
            return;
        }

        // ссылка на каждый эвент будет храниться в инстансе объекта
        that.e = e;
        // в IE и Opera блюрятся неинпуты (а выделенный текст),
        // что вообще говоря излишне для нашей стройной структуры
        if (type == 'blur' && e.target.tagName.toLowerCase() != 'input') {
            return;
        }

        var yabble = that.find('target', e.currentTarget);

        if (yabble) {
            // console.log(yabble.id +' on' + type);

            // вызываем переданный обработчик
            if (fn) {
                fn.call(that, e, yabble);
            }
            // если у ябла есть обработчик такого события - вызываем его
            if (yabble['on' + type]) {
                yabble['on' + type].call(yabble, e);
            }
        }
    });
};

/**
 * Добавить ябл с заданными именем и имейлом,
 * если не заданы, то пустой ябл
 * @private
 * @param {String|Object} val
 * @param {Yabble} before
 * @type Yabble
 */
YabbleSet2.prototype.add = function(val, before) {
    // количество яблов достигло макс предела
    // клик на сете вызывает фокус на последнем ябле
    if (this.options.maxItems <= this.yabbles.length) {
        var last = this.find('last');
        if (last) {
            last.focus();
        }
        return false;
    }

    var yabble = this.multi.wrap(new this.options.yabble(val));
    var index = before && $.inArray(before, this.yabbles);

    this.ids[yabble.id] = true;

    // добавление пустых яблов не пишем в историю, так как они только для фокуса
    if (val) {
        YabbleHistory.push(this);
    }

    if (index > -1) {
        yabble.root.insertBefore(before.root);
        this.yabbles.splice(index, 0, yabble);
    } else {
        this.wrapper.append(yabble.root);
        this.yabbles.push(yabble);
    }

    this.placeholder('hide');

    return yabble;
};

/**
 * Вырезает ябл из массива яблов и удаляет его
 * @private
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.remove = function(yabble) {
    var index = $.inArray(yabble, this.yabbles);

    if (index == -1) {
        return;
    }

    YabbleHistory.push(this);

    this.yabbles.splice(index, 1);
    delete this.ids[yabble.id];

    this.dropdown('close', yabble);

    yabble.destroy();

    this.recalcStrVal();

    this.placeholder('show');
};

/**
 * Обработка фокуса на ябл
 * @private
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.onfocus = function(e, yabble) {
    if (yabble.focused) {
        this.autocomplete('start', yabble);
    }

    // если фокус произошёл в рамках клика,
    // то принудительно скрывать дропдаун не нужно
    // им управляет кликовый обработчик
    if (yabble.id != this.mousedownId) {
        this.dropdown('close');
    }

    this.input.attr('disabled', 'disabled');
};

/**
 * Обработка блура с ябла
 * @private
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.onblur = function(e, yabble) {
    var that = this;

    // если blur произошёл в рамках клика
    // т.е. кликнули на уже выделенный ябл
    if (this.mousedownId == yabble.id) {
        // то ничего делать не надо
        return;
    }

    // для пользователей, владеющих методом слепого десятипальцевого ввода зааобртим автокомплит
    this.autocomplete('stop', yabble);

    // обрезаем пробелы по краям и последнюю запятую, если разделяли запятой
    var userValue = $.trim(yabble.userVal()).replace(/(?:,|;)$/, '');

    if (!userValue) {
        that.remove(yabble);
    } else if (yabble.focused) {
        YabbleHistory.push(that);
        YabbleHistory.ignore = true;
        // если пользователь ввёл в ябл больше одного значения
        // нужно его расчленить на несколько
        if (userValue.indexOf(',') > -1 || userValue.indexOf(';') > -1) {
            var contacts = Helpers.splitContacts(userValue);
            var yabbles = [];
            $.each(contacts, function(i, contact) {
                var y = that.add(contact, yabble);
                if (y) {
                    yabbles.push(y);
                }
            });
            // recalc происходит за счёт remove
            this.remove(yabble);
            this.resolveContacts(contacts, yabbles);
        } else {
            yabble.blur();
            this.recalcStrVal();
            if (!yabble.isContact && !yabble.isGroup && !yabble.isUnreachable) {
                this.resolveContacts([yabble.value], [yabble]);
            }
        }
        YabbleHistory.ignore = false;

    } else if (yabble.selected) {
        yabble.deselect();
    }
    this.input.removeAttr('disabled');
};

/**
 * Мышь опустилась на ябл
 * @private
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.onclick = function(e, yabble) {
    // если ябл редактируется, то игнорировать
    if (yabble.focused) {
        return;
    }

    // выделить/перевыделить ябл
    var ignoreDD = yabble.select();
    if (!ignoreDD) {
        this.dropdown('toggle', yabble);
    }
};

/**
 * Обработчик даблклика по яблу
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.ondblclick = function(e, yabble) {
    this.dropdown('close');
    // по дабл клику редактируем ябл
    yabble.focus();
};

/**
 * Обработчик клика
 * Здесь можно дотригерить mouseup и стригерит click
 * @private
 * @param {Event} e
 */
YabbleSet2.prototype.ondirectclick = function(e) {
    if (!isLeftButton(e)) {
        return;
    }

    var yabble = this.find('fromEvent', e);

    // если в клике мы ещё помним про ябл
    if (this.mousedownId) {
        var stored = this.find('id', this.mousedownId);

        // либо не стригерился mouseup
        if (stored != yabble) {
            if (this.onmouseup) {
                this.onmouseup(e, stored);
            }
        }
        // либо всё прошло хорошо и события тригерились по порядку
        // но это уже не важно, просто дотригиваем клик
        if (this.onclick) {
            this.onclick(e, stored);
        }
        this.clicked = true;

        // и забываем про ябл
        this.mousedownId = null;

        // если это честный клик в не ябла, то
        // единсвенная цель данного обработчика -
        // новый свежий ябл
    }

    if (!yabble && !this.clicked) {
        var y = this.add();
        if (y) {
            y.focus();
        }
    }
};

/**
 * Обработчик keydown
 * @private
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.onkeydown = function(e, yabble) {
    var that = this;
    var y;

    if (e.altKey) {
        if (e.stopPropagation) {
            e.stopPropagation();
        }
        e.preventDefault();
        return false;
    }

    switch (e.which) {
        // по табу - на пустом - переход в след поле
        // на заполненном - создание нового ябла
    case KEY.TAB:
        if (!e.shiftKey && this.options.maxItems > this.yabbles.length && (yabble.focused && $.trim(yabble.userVal()) || yabble.selected)) {
            e.preventDefault();
            y = this.add();
            if (y) {
                y.focus();
            }
        }
        break;

    case KEY.RETURN:
        if (!isCtrlPressed(e)) {
            e.preventDefault();
        }

        if (this.multi.history.length > 1) {
            y = this.add();
            if (y) {
                y.focus();
            }
        } else if ($.trim(yabble.userVal())) {
            if (yabble.focused) {
                y = this.add();
                if (y) {
                    y.focus();
                }
                if (!y) {
                    yabble.blur();
                    setTimeout(function() {
                        yabble.select();
                    }, 10);
                    this.recalcStrVal();
                }
            } else {
                yabble.focus();
                // с выбранного ябла при фокусе не убирается фокус
                // поэтому надо руками дёрнуть обработчик
                this.onfocus({}, yabble);
            }
        }
        break;

        // удаление яблов
    case KEY.BACKSPACE:
    case KEY.DEL:
        if (this.multi.history.length > 1) {
            // удалению быть, а значит символы стирать не надо
            e.preventDefault();
            this.multi.remove();
        } else {

            // delete-ом принято удалять вправо
            // backspace-ом принято удалять влево
            var fwd = this.find(e.which == KEY.DEL ? 'next' : 'prev', yabble);
            var bwd = this.find(e.which == KEY.DEL ? 'prev' : 'next', yabble);

            if (yabble.focused && !$.trim(yabble.userVal()) && (fwd || bwd) || yabble.selected) {
                // удалению быть, а значит символы стирать не надо
                e.preventDefault();

                // удаляем выбранный
                this.remove(yabble);

                if (fwd) {
                    fwd.select();
                } else if (bwd) {
                    bwd.select();
                } else {
                    y = this.add();
                    if (y) {
                        y.focus();
                    }
                }
            }
        }
        break;

    case KEY.LEFT:
        if (yabble.selected || yabble.focused && !$.trim(yabble.userVal())) {
            e.preventDefault();
            var prev = this.find('prev', yabble);
            if (prev) {
                prev.select();
            }
        }
        break;

    case KEY.RIGHT:
        if (yabble.selected) {
            e.preventDefault();
            var next = this.find('next', yabble);
            if (next) {
                next.select();
            } else {
                y = this.add();
                if (y) {
                    y.focus();
                }
            }
        }
        break;

    case KEY.HOME:
        if (yabble.selected || yabble.focused && !$.trim(yabble.userVal())) {
            e.preventDefault();
            var first = this.find('first');
            if (first) {
                first.select();
            }
        }
        break;

    case KEY.END:
        if (yabble.selected) {
            e.preventDefault();
            var last = this.find('last');
            if (last) {
                last.select();
            }
        }
        break;

    case KEY.SPACE:
        // яблит результат саджеста по пробелу, если найдено только 1 совпадение
        var autocompleter = this.autocomplete('get');
        if (autocompleter && autocompleter.results.length == 1) {
            e.which = KEY.SEMI;
            this.onkeypress(e, yabble);
            break;
        }

    /* falls through */
    default:
        if (!yabble.focused) {

            if (isCtrlPressed(e)) {

                switch (e.which) {
                    // по копированию нужно похачить значение, елси выбрано несколько яблов
                case KEY.C:
                    this.multi.onCtrlC(yabble);
                    break;
                    // также ничего не делаем, в момент нажатия CTRL или Cmd
                case 17:
                case 91:
                case 224: // Meta ff@Mac
                    break;

                    // вставляем сразу в новый ябл
                case KEY.V:
                    y = that.add();
                    if (y) {
                        y.focus();
                    }
                    break;

                    // а вырезаем из старого
                case KEY.X:

                    if (that.multi.history.length) {
                        that.multi.onCtrlX(yabble);
                        setTimeout(function() {
                            that.multi.remove();
                        }, 16);
                    }

                    break;

                case KEY.A:
                    this.multi.selectAll();
                    break;

                case KEY.Z:
                    YabbleHistory.pop(this);
                    break;

                    // елси не обрабатываем клавишу, то пусть всё, что произойдёт
                    // происходит с новым пустым яблом
                default:
                    y = that.add();
                    if (y) {
                        y.focus();
                    }
                    break;
                }
            } else if (e.which != KEY.SHIFT) {
                y = this.add();
                if (y) {
                    y.focus();
                }
            }
            // на пустом ябле тоже можно с помощью CTRL+A выделить все остальные
            // или с помощью CTRL+Z отменить изменение
        } else if (isCtrlPressed(e) && !$.trim(yabble.val())) {
            if (e.which == KEY.A) {
                this.multi.selectAll();
            } else if (e.which == KEY.Z) {
                YabbleHistory.pop(this);
            }
        }
        break;
    }
};

/**
 * Проверяем запятую
 * @private
 * @param {Event} e
 * @param {Yabble} yabble
 */
YabbleSet2.prototype.onkeypress = function(e, yabble) {
    var that = this;
    switch (e.which) {
        // запятая (и точка с запятой) дело такое - раскладкозависимое,
        // поэтому в keydown-е может иметь разные коды
        // а в keypress одинаковая
    case KEY.SEMI:
    case KEY.COMMA:
        if (yabble.focused && yabble.userVal().replace(/,|;/g, '')) {
            // ждём пока вставится запятая и добавляем пустой ябл
            setTimeout(function() {
                var y = that.add();
                if (y) {
                    y.focus();
                }
            }, 0);
        } else {
            e.preventDefault();
        }
        break;
    }
};

/**
 * Обработка вставки значения
 */
YabbleSet2.prototype.onpaste = function() {
    var that = this;// ждём пока вставится значеие и блюрим
    setTimeout(function() {
        var y = that.add();
        if (y) {
            y.focus();
        }
    }, 0);
};

/**
 * Ставит фокус в набор яблов, создаёт свежий ябл, если нужно
 */
YabbleSet2.prototype.focus = function() {
    var y = this.add();
    if (y) {
        y.focus();
    }
};

Daria.Yabbles2 = YabbleSet2;

/* ../../js/components/yabble.set2.js end */


})(Jane.FormValidation);

/* ../../js/components/yabble.js end */

    /* ../../js/components/phoneValidation.js begin */
(function($, Daria, Jane) {
    var hAccountInfo = Jane.$H('account-information');
    var hSettings = Jane.$H("settings");
    var timify = Daria.timify;

    Daria.phoneValidation = {
        // rootNode wrapped in
        // jQuery object
        $root: null,
        // spet nodes wrapped in
        // jQuery object
        $domNodes: null,
        // время через которое
        // закроется промо
        delay: timify({seconds: 5}),
        // количество попыток
        tries: 0,
        // номер текущего шага
        currentStep: 0,
        visible: false,
        revalidateCounter: 0,

        // Этот метод запускается если
        // пользователю необходимо показать
        // плашку с просьбой ввести телефона.
        //
        // Тут мы решаем что необходимо
        // показывать с рекламой мобильной
        // яндекс почты или без, какой шаг и так
        // далее.
        build: function(number, modification) {
            var $root = this.$root;
            this.modification = modification;

            var phoneData = Jane.$H("phone-unconfirmed").data;
            if (phoneData) {
                number = jpath(phoneData, ".phone.number")[0];
                number = number || Jane.$H("phone-register").getNumber();
            }

            if (number) {
                this.phoneNumber = number;
            }

            this.tries = 3;

            if ($root) {
                // Просто возвращаем экземпляр
                // существующего блока.
                // По хорошему такого не должно быть.
                return this;
            }

            //@experiment DARIA-18449
            //var variant = (Daria.getCookie('yandexuid') || '').slice(-1);
            //var variant = Daria.uid % 10;
            // номер варианта - uids
            // 1 - 0,1,2,3
            // 2 - 4,5,6
            // 3 - 7,8,9
            // DARIA-24209 - Оставляем второй вариант
            var variant = 2;
            this.variant = variant;

            // строим html узел по xsl-ю
            $root = this.$root = $(Jane.tt('mail-common:phone', {
                // будет указывать на то нужно или нет
                // показывать мобильную яндекс почту.
                number: number,
                variant: variant,
                modification: modification
            }));

            // вызываем hook после создания дом узла
            // но перед тем как установили его в документ.
            this.afterCreate();

            this.getUserPhones(function() {
                var $container;
                // если check вернул
                // false значит ничего не показываем
                this.init();
                var $alertNode = $('[role=alert]');

                // Для 3pane устанавливаем плашку
                // в b-page
                // DARIA-17277
                if (Daria.layout !== '2pane') {
                    $(".b-page").first().prepend($root);

                    // XXX
                    // тут всё поведение
                    // свойственное только для 3pane
                    $container = $('.b-page__content');
                    this.onAnimate = function(now) {
                        $container.css('top', now);
                    };

                    // переписываем функцию hide
                    // для того чтобы вернуть значение 'top'
                    (function(phoneValidation) {
                        var hide = phoneValidation.hide;
                        phoneValidation.hide = function() {
                            hide.apply(phoneValidation, arguments);
                            $container.css('top', 0);
                        };
                    }(this));

                    return;
                }

                // устанавливаем нашу плашку в документе.
                // после алерта иначе первым элементом в body
                if ($alertNode.length) {
                    $alertNode.after($root);
                } else {
                    $("body").prepend($root);
                }
            });

        },
        afterCreate: function() {
            // получаем ссылки на узлы шагов
            this.$domNodes = this.$root.find('.b-intruder__i');
            this.visible = true;
            this.bindEvents();
        },
        bindEvents: function() {
            var $node = this.$root;
            var $step6 = $node.find('.js-step-6');
            var that = this;
            var $inputNumber = $node.find("[name=number]");
            var nButton = nb.block($step6.find('.js-phone-register')[0]);

            this.onClick = this.onClick.bind(this);
            $inputNumber.on('click', this.onClick);

            this.onKeyUp = this.onKeyUp.bind(this);
            $inputNumber.on('keyup', this.onKeyUp);

            // Метрика
            // @metrika
            $node.on('click', '.js-getAppLink', function() {
                // @metrika Клик по "получит смс"
                Jane.c(that.metrika('Клик по "получить смс"'));
            }).on('click', '.js-phone-register', function() {
                // @metrika Да, это мой номер
                if (that.currentStep === 2) {
                    Jane.c(that.metrika('Клик по "да, это мой номер"'));
                    return;
                }
                // @metrika привязать
                Jane.c(that.metrika('Клик по привязать'));
            }).on('click', '.js-phone-confirm', function() {
                // @metrika Клик по отправить
                Jane.c(that.metrika('Клик по отправить'));
            }).on('click', '.js-phone-revalidate', function() {
                // @metrika Клик по запросить код повторно
                Jane.c(that.metrika('Клики по запросить код повторно'));
            }).on("click", "[data-action='phone.faq']", function() {
                Jane.c(that.metrika('Клик по вопросику'));
            });

            // обработка ошибок
            Jane.events.bind("phone-registered-failure", function(name, params) {

                if (/(TEMPORARYBLOCK|NUMEXISTS)/.test(params.status) && that.currentStep === 6) {
                    Jane.events.trigger("phone-enable-buttons");
                    Jane.Actions.run("phone.revalidate", params.o.event, params.o.params);
                    that.step7();
                    return;
                }

                if (params.status === "NUMEXISTS" && that.tries) {
                    Jane.events.trigger('phone-revalidate');

                    Jane.Actions.run("phone.revalidate", params.o.event, params.o.params);
                    that.tries -= 1;
                    return;
                }

                Jane.events.trigger("phone-enable-buttons");
            });

            Jane.events.bind("phone.link-sent-failure", function(name, params) {
                Jane.events.trigger("phone-enable-buttons");
                that.showError(params);
            });

            Jane.events.bind("phone-confirmed-failure", this.onConfirmFailure.bind(this));
            Jane.events.bind("phone-registered-failure", this.onRevalidateFailure.bind(this));

            // Дизейблим кнопки
            Jane.events.bind("phone-disable-buttons", function() {
                $node.find(".b-round-button").addClass("b-mail-button_disabled");
            });

            Jane.events.bind("phone-enable-buttons", function() {
                $node.find(".b-round-button").removeClass("b-mail-button_disabled");
            });

            // Дизейблим кнопку для step-6
            Jane.events.bind("phone-disable-buttons-step-6", function() {
                nButton.disable();
            });

            Jane.events.bind("phone-enable-buttons-step-6", function() {
                nButton.enable();
            });

            // Подписываемся на удачную регистрацию телефона
            Jane.events.bind('phone-registered-success', $.proxy(function(evnt, data) {
                var number = data.o ? data.o.params.number : '';
                var step = this.currentStep;

                Jane.events.trigger("phone-enable-buttons");
                if (number) {
                    this.setNumber(number);
                }

                if (step === 3 || step === 7) {
                    this.runRevalidateTimer();
                    return;
                }

                // обнавляем значение счетчика
                this.revalidateCounter = 0;

                if (step === 2) {
                    this.step3();
                    return;
                }

                this.step7();
            }, this));

            Jane.events.bind("phone-confirmed-success", $.proxy(function() {

                if (this.currentStep === 3) {
                    this.step4();
                    return;
                }
                this.step8();

            }, this));

            Jane.events.bind('phone-revalidate', $.proxy(function() {
                Jane.events.trigger("phone-enable-buttons");

                if (this.currentStep === 3 && this.currentStep === 7) {
                    return;
                }

                // Если шаг не 3 и не 7 то переводим на эти шаги
                // пользователя
                if (this.currentStep > 5) {
                    this.step7();
                    return;
                }

                this.step3();
            }, this));

            // Подписываемся на событие если пользователь
            // закрыл плашку
            Jane.events.bind('phone-close', $.proxy(function() {
                // @metrika Кликл "крестик"
                Jane.c(this.metrika("Клик по крестику"));
                this.close();
            }, this));

            Jane.events.bind('phone-goBack', $.proxy(function() {
                // @metrika Клик по назад
                Jane.c(this.metrika("Клик по назад"));
                this.showStep(this.currentStep - 1);
            }, this));

            // Вызывается если пользователь нажимает
            // на получить мобильную яндекс почту.
            Jane.events.bind("phone.linkSent", $.proxy(function(name, data) {
                $node.addClass('b-intruder_phone-confirm-short');
                this.setNumber(data.number);
            }, this));
        },
        // Отвязываем события
        unbindEvents: function() {
            var events = Jane.events;
            var $node = this.$root;

            // Отвязываем Jane.events события
            $.each([
                "phone-registered-failure",
                "phone.link-sent-failure",
                "phone-confirmed-failure",
                "phone-registered-failure",
                "phone-disable-buttons",
                "phone-enable-buttons",
                "phone-registered-success",
                "phone-confirmed-success",
                "phone-revalidate",
                "phone-close",
                "phone-goBack",
                "phone.linkSent"
            ], function(index, eventName) {
                events.unbind(eventName);
            });

            // Отвязываем jQuery события 'onclick'
            $.each([
                ".js-getAppLink",
                ".js-phone-register",
                ".js-phone-confirm",
                ".js-phone-revalidate",
                "[data-action='phone.faq']"
            ], function(index, selectorName) {
                $node.off('click', selectorName);
            });
            // Отвязываем jQuery события 'keyup', 'click'
            $node.find("[name=number]").off();
        },

        /**
         * Обработчик нажатия на инпут с телефонным номером
         *
         * @param {Jquery.Event} event
         */
        onKeyUp: function(event) {
            var $inputNumber = $(event.target);
            var KEY_0 = 48;
            var KEY_9 = 57;
            var isDigit = ( KEY_0 <= event.which && event.which <= KEY_9 );

            if (isDigit) {
                $inputNumber.val(this.formatPhoneNumber($inputNumber.val()));
            }

            if ($inputNumber.hasClass('js-step-6-input')) {

                var value = $inputNumber.val();

                if (value) {
                    Jane.events.trigger("phone-enable-buttons-step-6");
                } else {
                    Jane.events.trigger("phone-disable-buttons-step-6");
                }
            }
        },

        /**
         * Форматирует инпут(российский формат), разделяя группы цифр телефона пробелами
         *
         * @static
         * @param {String} phoneNumber
         *
         * пример1: +7 812 123 12 12
         * пример2:  8 812 123 12 12
         *
         * @returns {String}
         */
        formatPhoneNumber: function(phoneNumber) {
            var RU_PHONE_GROUP_DETECT_REGEXP = /^(?:\+7|8)(?:\s\d{3}(?:\s\d{3}(?:\s\d{2})?)?)?$/;

            if (phoneNumber.match(RU_PHONE_GROUP_DETECT_REGEXP)) {
                phoneNumber =  $.trim(phoneNumber) + " ";
            }

            return phoneNumber;
        },

        /**
         * Висит на клике по инпуту, добавляет плэйсхолдер в ввод, если ничего
         * не введено
         *
         * @param {jQuery.Event} event
         *
         */
        onClick: function(event) {
            var $inputNumber = $(event.target);
            var number = $inputNumber.val();
            Daria.Validator.predictInput($inputNumber);

            // Если номера до этого не было, форматируем номер и смещаем каретку в конец
            if (!number) {
                $inputNumber.val(this.formatPhoneNumber($inputNumber.val()));
                Daria.Validator.moveCaretToEnd($inputNumber);
                if ($inputNumber.hasClass('js-step-6-input')) {
                    Jane.events.trigger("phone-enable-buttons-step-6");
                }
            }
        },

        getUserPhones: function(callback) {
            var onUnconfirmDone = $.proxy(function() {
                var data = Jane.$H("phone-unconfirmed").getCacheByParams();
                var phone = jpath(data, ".phone.number")[0];

                if (phone) {
                    this.setNumber(phone);
                }
                callback.call(this, data);
            }, this);

            callback = callback || $.noop;

            // Если телефон уже есть то
            // ручку дергать не надо.
            if (this.phoneNumber) {
                this.setNumber(this.phoneNumber);
                callback.call(this);
                return;
            }

            Jane.Handler.getAll(["phone-unconfirmed", "userphones"], {}, onUnconfirmDone);
        },

        /**
         * Переименовываем свойства настроек
         * @param {!Object} promoData объект с настройками
         * @returns {!Object}
         */
        renamePromoData: function(promoData) {
            return _.transform(promoData, function(newPromoData, value, key) {
                var rename = {
                    //'имя-настройки': 'имя-свойства-объекта в коде'
                    'phone-confirm': 'phone_confirm',
                    'phone-confirm-date': 'date'
                };
                newPromoData[rename[key] || key] = value;
            });
        },

        /**
         * Получаем объект с промо данными
         * @param {String} name Имя настройки
         * @returns {Any}
         */
        getPromoData: function(name, modification) {
            var promoData;
            if (this.modification === 'no-hint' || modification === 'no-hint') {
                promoData = hSettings.getSetting('validation-no-hint', 'json') || {};
                promoData = this.renamePromoData(promoData);
            } else {
                promoData = {
                    // p_c - on если пользователь закрыл browser
                    // или ушел со страницы
                    // не закрыл плашку по крестику.
                    phone_confirm: hSettings.getSetting('phone-confirm'),
                    date: hSettings.getSetting("phone-confirm-date"),
                    myp_show: hSettings.getSetting("myp_show"),
                    show_count: hSettings.getSetting('show_count'),
                    step_number: hSettings.getSetting('step_number')
                };
            }

            var defaults = {
                phone_confirm: false,
                // Дата последнего показа плашки
                date: 0,
                // показывали ли рекламу мобильной яндекс почты
                myp_show: false,
                // Количество показов
                show_count: 0,
                // номер предыдущего шага
                step_number: 0
            };

            promoData = _.defaults(promoData, defaults);

            promoData.date = parseInt(promoData.date, 10);
            promoData.show_count = parseInt(promoData.show_count, 10);
            promoData.step_number = parseInt(promoData.step_number, 10);

            if (name) {
                return promoData[name];
            }

            return promoData;
        },
        /**
         * Сохранение настроек
         * Если промка про контрольный вопрос, то используется отдельное имя для хранения всех настроек
         * Если плашка обычная, то используется фолбэк на единичные настройки
         *
         * @param {Object} settings
         *
         */
        savePromoData: function(settings, modification) {
            if (this.modification === 'no-hint' || modification === 'no-hint') {
                return hSettings.updateSetting('validation-no-hint', settings);
            }
            return hSettings.setSettings(settings);
        },

        /**
         * Очищает настройки плашки
         *
         * @param {String} [modification] модификация плашки
         */
        clearPromoData: function(modification) {
            if (modification === 'no-hint') {
                hSettings.setSettings({'validation-no-hint': {}});

            } else {
                hSettings.setSettings({
                    'phone-confirm-date': '',
                    'phone-confirm': '',
                    'myp_show': '',
                    'show_count': '',
                    'step_number': ''
                });
            }
        },

        /**
         * Прошло ли достаточно времени для показа плашки валидации
         *
         * @param {Number} showCount
         * @param {Number} showDate
         *
         * @returns {Boolean}
         */
        isDowntimeExpire: function(showCount, showDate, modification) {
            // Если показа не было, возращаем true
            if (showDate === 0) {
                return true;
            }

            // Интервалы показа обычной плашки, где последний элемент будет означать:
            // все последующие показы
            var downtimeIntervalsInDays = [14, 14, 90, 180];

            if (modification === 'no-hint') {
                // Интервалы плашки валидации для пользователя без КВ
                // интервал будет означать каждые три месяца
                downtimeIntervalsInDays = [90];
            }

            var downtimeIntervals = _.map(downtimeIntervalsInDays, function(dayQuantity) {
                return timify({days: dayQuantity});
            });

            var interval = downtimeIntervals[showCount] || _.last(downtimeIntervals);

            return Daria.now() - showDate > interval;
        },

        // проверяет нужно показывать
        // промо валидации или нет
        //
        // @param {Boolean} skip Doesn't send request
        // on server for unconfirmed phones and return boolean value
        //
        // @return {Deferred|Boolean} description
        check: function(skip, modification) {
            var deferred = $.Deferred();
            var that = this;
            var _check = function() {
                var promoData;

                // у пользователя появился
                // подтвержденный телефон
                if (Jane.$H('userphones').hasActiveNumber()) {
                    that.savePromoData({
                        // Убираем пользователю phone-confirm
                        'phone-confirm': false
                    });

                    deferred.reject();
                    return false;
                }

                promoData = that.getPromoData(null, modification);

                // TODO: на метод check нужные тесты!!!
                // Если плашка закрыта пользователем и не истеклo время до след. показа
                if (!promoData.phone_confirm && !that.isDowntimeExpire(promoData.show_count, promoData.date, modification)) {
                    deferred.reject();
                    return false;
                }

                deferred.resolve();
                return true;
            };

            // возвращаем boolean
            // без запроса
            if (skip) {
                return _check();
            }

            this.getUserPhones(_check);

            return deferred.promise();
        },

        /**
         * Время последнего использования плашки
         *
         * @returns {Number} 0 - если плашка не показывалась
         */
        getLastUsageTime: function() {
            return this.getPromoData('date');
        },

        /**
         * Является ли плашка закрытой пользователем
         *
         * @returns {Boolean}
         */
        isClosedByUser: function() {
            var promoData = this.getPromoData();
            return promoData.date && !promoData.phone_confirm;
        },

        // Тут мы определяем какой шаг нужно показать
        init: function() {
            var promoData = this.getPromoData();

            // пользователя либо закрыл плашку по крестику
            // либо ему не показывалась плашка подтверждения телефона,
            // но при этом он был зарегистрирован в мобильной яндекс почте
            if (!promoData.phone_confirm) {

                if (promoData.date) {
                    // увеличиваем show_count
                    this.savePromoData({
                        show_count: promoData.show_count + 1
                    });

                    this.getUserPhones(function() {
                        // если это 3-й или 7-й шаг
                        // тогда показываем 7-й шаг
                        if (promoData.step_number === 3 || promoData.step_number === 7) {
                            this.step7();
                        } else {
                            // иначе показываем 6-й шаг
                            this.step6();
                        }
                    });

                } else {
                    // увеличиваем show_count
                    this.savePromoData({
                        show_count: promoData.show_count + 1
                    });

                    this.getUserPhones(function() {
                        // показываем 6-й шаг
                        this.step6();
                    });
                }
            } else {
                // если пользователь ранее уходил
                // со странице не закрывая плашку по
                // крестику.

                // если это 3-й или 7-й шаг
                // тогда показываем 7-й шаг
                // и есть телефон
                if ((promoData.step_number === 3 || promoData.step_number === 7) && this.phoneNumber) {
                    this.step7();
                } else {
                    // иначе показываем 6-й шаг
                    this.step6();
                }
            }
        },
        // Шаги
        // форма ввода телефона для
        // получения кода
        // Показывает рекламу мобильной яндекс почты
        step1: function() {
            var that = this;
            var show_count = this.promoData('show_count');
            var onLinkSent = function() {
                // проставляем флажок что уже показывали
                // рекламу МЯП
                that.savePromoData({myp_show: true});

                // выполняем только одни раз
                Jane.events.unbind("phone.linkSent", onLinkSent);

                if (hAccountInfo.hasSid('36')) {
                    // Если у пользователя есть подтвержденный телефон
                    // тогда показываем пятый шаг.
                    that.step5();
                    return;
                }

                // обновляем счетчик
                that.savePromoData({show_count: show_count + 1});
                // иначе показываем второй шаг
                that.step2();
            };

            show_count = parseInt(show_count, 10);

            // подписываемся на событие отправки смс
            Jane.events.bind("phone.linkSent", onLinkSent);

            this.showStep(1);
        },
        step2: function() {
            if (hAccountInfo.hasSid('36')) {
                this.step5();
                return;
            }


            this.savePromoData({
                'phone-confirm-date': Daria.now(), // обновляем дату показа
                'phone-confirm': true, // говорим о том что сейчас показываем плашку
                'step_number': 2 // запоминаем номер шага
            });

            // показываем 2-й шаг
            this.showStep(2);
        },
        step3: function() {
            this.savePromoData({
                'step_number': 3 // запоминаем номер шага
            });

            this.runRevalidateTimer();

            this.showStep(3);
        },
        // Говорим пользователю что все хорошо
        step4: function() {
            this.savePromoData({
                'phone-confirm': false
            });
            // скрываем через пять минут.
            this.closeTimer = setTimeout($.proxy(function() {
                this.close();
            }, this), timify({minutes: 5}));

            this.showStep(4);
        },
        step5: function() {
            this.savePromoData({
                'phone-confirm': false
            });

            // скрываем через пять минут.
            this.closeTimer = setTimeout($.proxy(function() {
                this.close();
            }, this), timify({minutes: 5}));

            this.showStep(5);
        },
        step6: function() {
            this.savePromoData({
                'phone-confirm-date': Daria.now(), // обновляем дату показа
                'phone-confirm': true, // говорим о том что сейчас показываем плашку
                'step_number': 6 // запоминаем номер шага
            });

            // показываем 6-й шаг
            this.showStep(6);
        },
        // Показывает форму для ввода кода
        // @param {[Boolean]} skip Don't run revalidate timer
        step7: function(skip) {
            this.savePromoData({
                'phone-confirm': true, // говорим о том что сейчас показываем плашку
                'step_number': 7 // запоминаем номер шага
            });

            if (!skip) {
                this.runRevalidateTimer();
            }

            // показываем 7-й шаг
            this.showStep(7);
        },
        // показывает что все ОК
        step8: function() {
            this.savePromoData({
                'phone-confirm': false, // говорим о том что сейчас показываем плашку
                'step_number': 8 // запоминаем номер шага
            });

            // Получили ссылку в конце 8-го шага то надо закрыть
            // плашку с подтверждением
            Jane.events.bind("phone.linkSent", function() {
                this.close();
            }.bind(this));

            // скрываем через пять минут.
            this.closeTimer = setTimeout($.proxy(function() {
                this.close();
            }, this), timify({minutes: 5}));

            this.showStep(8);
        },

        // логика показа шагов
        showStep: function(num) {
            // обнуляем настройку автозакрытия если находимся на форме для ввода кода
            if (num === 7) {
                Jane.Promo.setFirstStartSettingOff('phone-validation');
            }
            var $steps = this.$domNodes;
            var $oldStep = $steps.filter(':visible');
            var $root = this.$root;
            var $newStep = $steps.eq(num - 1);
            var that = this;

            this.currentStep = num || 0;

            $root.css('display', '').css('height', '0');
            this.hideError();

            // скрываем старый шаг
            $oldStep.addClass('g-hidden');

            // Bug we can not get height of element
            // if it has display none.
            $newStep.css('position', 'absolute');
            $newStep.css('visibility', 'hidden');
            $newStep.removeClass('g-hidden');

            // Bug с chromium outerHeight = 0.
            Daria.setZeroTimeout(function() {
                var height = $newStep.outerHeight();

                // Сбрасываем значения в toolbar-е
                Jane.events.trigger('toolbar-reset-offset');

                $newStep.addClass('g-hidden');
                $newStep.css('position', '');
                $newStep.css('visibility', '');

                $root.animate({
                    height: height
                }, {
                    duration: 300,
                    // DARIA-17277
                    step: that.onAnimate,
                    complete: function() {
                        // Если скрывали блок а
                        // потом снова показали
                        // то снова подписываемся на события
                        // (в методе hide мы отписываемся от них);
                        if (!that.visible) {
                            that.bindEvents();
                        }
                        that.hideError();
                        $newStep.fadeIn().removeClass('g-hidden');
                        that.visible = true;
                        Jane.events.trigger('toolbar-reset-offset');
                    }
                });
            });

            //@metrika Показы
            Jane.c(this.metrika("показы"));
        },
        // устанавливает номер телефона
        setNumber: function(number) {
            var formatted;

            // сохраняем номер телефона
            this.phoneNumber = number;

            if (number && this.$root) {
                formatted = Jane.$H("phone-register").getFormattedNumber(number);

                this.$root.find("[name=number]").val(formatted);
                this.$root.find(".b-intruder__phone").html(formatted);
                this.$root.find('[data-action="phone.getAppLink"]').attr("data-params", "phone_full=" + number);
                this.$root.find('[data-action="phone.revalidate"]').attr("data-params", "number=" + number);
            }
        },
        tickTimer: function(timeout) {
            var timer = timeout;
            var that = this;

            if (this.revalidateTimerInterval) {
                clearInterval(this.revalidateTimerInterval);
                this.$root.find('.b-intruder__timer').html('');
            }

            // запускаем счетчик
            this.revalidateTimerInterval = setInterval(function() {
                timer = timer - 1000; // секунды

                var hours = timer / (60 * 60 * 1000);
                var min = timer / (60 * 1000);
                var sec = timer / 1000;
                var formated = "";

                hours = hours - (hours % 1);

                min = min - (min % 1) - hours * 60;
                sec = sec - (sec % 1) - min * 60;
                sec = sec - hours * 3600;

                if (hours) {
                    formated += hours + ":";
                }

                if (sec < 10) {
                    sec = '0' + sec;
                }

                formated += min + ":";
                formated += sec;

                that.$root.find('.b-intruder__timer').html(formated);

                if (!timer) {
                    clearInterval(that.revalidateTimerInterval);
                }
            }, 1000);
        },
        runRevalidateTimer: function() {
            var timeout;

            this.revalidateLinkToggle(0);

            // если пользователь
            // пришел сюда через какое-то время то не показываем счетчик
            if (!this.currentStep) {
                this.revalidateLinkToggle(1);
                return;
            }

            timeout = this.getRevalidateTimeout();

            this.tickTimer(timeout);

            this.revalidateTimeout = setTimeout($.proxy(function() {
                if (this.currentStep === 3 || this.currentStep === 7) {
                    this.hideError();
                    this.revalidateLinkToggle(1);
                }
            }, this), timeout);
        },
        // показываем ошибки
        showError: function(params, type) {
            var that = this;
            var msg;

            type = type || "register";
            msg = Jane.$H('phone-' + type).parseError(params.status, params.left);

            this.$root.find(".b-notification_error").html(msg).end().addClass("b-intruder_phone-confirm_error").find("[name=number]").one("focus", function() {
                that.hideError();
            });

            // @metrika Показ ошибок
            Jane.c(that.metrika("Показ ошибок"));
        },
        // @hook
        // Функция которая будет вызвана
        // при анимации перехода
        onAnimate: null,
        // Обработка ошибок
        onConfirmFailure: function(name, params) {
            Jane.events.trigger("phone-enable-buttons");
            this.showError(params, 'confirm');
        },
        onRevalidateFailure: function(name, params) {
            Jane.events.trigger("phone-enable-buttons");
            this.showError({
                status: params.status
            }, 'register');
        },
        // скрываем ошибки
        hideError: function() {
            this.$root.removeClass("b-intruder_phone-confirm_error").find(".b-notification_error").html('');
        },

        /**
         * Прошло меньше недели с времени показа плашки валидации(контрольный вопрос)
         *
         * @returns {Boolean}
         */
        isLessThenOneWeekAfterShow: function() {
            var date = this.getPromoData('phone-confirm-date', 'no-hint');
            return Daria.now() - date < Daria.timify({weeks: 1});
        },

        /**
         * Отправляет метричные данные для плашки валидации(контрольный вопрос)
         * Ветка счетчиков сигнализирует о том, послужила ли показ плашки мотивационным
         * толчком к тем или иным действиям
         *
         * @param {Array} extraParams
         */
        motivationMetrika: function(extraParams) {
            var metrikaBase = 'Валидация (контрольный вопрос)';
            var params = [metrikaBase, 'Мотивация'];
            Jane.c(params.concat(extraParams));
        },

        // @metrika
        metrika: function(extraParams) {
            var params;
            var variant;
            var text;
            var show_count = this.getPromoData('show_count') || 1;
            var metrikaBase = (this.modification === 'no-hint') ?
                'Валидация (контрольный вопрос)' :
                'МЯП->Валидация';

            params = [metrikaBase, 'Показ ' + show_count, 'шаг ' + this.currentStep];

            if (this.variant) {
                variant = Number(this.variant);
                text = 'Вариант ' + variant;

                if (variant === 3) {
                    text += ' (новый)';
                }

                params.splice(1, 0, text);
            }

            if (extraParams) {
                params = params.concat(extraParams);
            }

            Jane.ErrorLog.send({
                event: "phone-metrika",
                data: params.join(" | ")
            });

            return params;
        },
        // not my code
        revalidateLinkToggle: function(n) {
            this.hideError();
            if (n) {
                this.$root.addClass("b-intruder_phone-confirm_revalidate");
                this.$root.find('.js-timer').addClass('g-hidden');
            } else {
                this.$root.removeClass("b-intruder_phone-confirm_revalidate");
                this.$root.find('.js-timer').removeClass('g-hidden');
            }
        },
        getRevalidateTimeout: function() {
            var count = this.revalidateCounter;

            this.revalidateCounter += 1;
            return [timify({minutes: 3}), timify({minutes: 10}), timify({hours: 24})][count] || (timify({hours: 24}));
        },
        // по нажатию на close
        // удаляем блок с подтверждением
        // И обновляем данные пользователя
        close: function() {
            // обнуляем настройку для автозакрытия
            Jane.Promo.setFirstStartSettingOff('phone-validation');

            this.savePromoData({
                'phone-confirm-date': Daria.now(), // обновляем дату показа
                'phone-confirm': false // Пользователь закрыл плашку сам
            });

            if (this.currentStep === 1) {
                this.savePromoData({'myp_show': true});
            }

            this.hide(function() {
                // удаляем блок
                this.destroy();
            }.bind(this));
        },
        hide: function(callback) {
            this.unbindEvents();
            this.visible = false;
            this.$root.delay(200).slideUp(callback);
        },
        // удаляем блок подтверждения телефона
        // со страницы
        destroy: function() {
            clearTimeout(this.revalidateTimeout);
            clearTimeout(this.closeTimer);
            clearInterval(this.revalidateTimerInterval);
            this.visible = false;

            if (this.$root) {
                this.$root.remove();
                delete this.$root;
            }

            Jane.events.trigger('toolbar-reset-offset');
        }
    };

    // в compose и на done скрываем промо
    // на других снова показваем
    Jane.events.bind('pageload', function() {
        var phoneValidation = Daria.phoneValidation;
        var page = Daria.Page.type;
        var $root = phoneValidation.$root;
        var excepPages = ['compose', 'done'];

        // скрываем промо если есть
        if ($.inArray(page, excepPages) > -1) {

            if ($root && $root.is(':visible')) {
                $root.css('display', 'none');
                phoneValidation.hide();
            }

            return;
        }

        // показывался но закрыли при переходе в compose
        if (phoneValidation.currentStep && $root && !$root.is(':visible')) {
            phoneValidation.showStep(phoneValidation.currentStep);
            return;
        }

        // загрузили страницу в композе
        // потом перешли на другую старницу
        // необходимо проверить надо показывать промо или нет
        // TODO логика промо менеджера
        var item = Jane.Promo._queue && Jane.Promo._queue[0];
        var promise;

        if (item && item.name === 'phone-validation') {
            promise = item.check();
            if (promise) {
                promise.done(item.callback);
            }
        }
    });

}(jQuery, Daria, Jane));

/* ../../js/components/phoneValidation.js end */

    /* ../../js/components/image-viewer.js begin */
Daria.ImageViewer = {
    /**
     * Открытие ImageViewer с переданным массивом картинок
     * @param {Array} images массив данных о картинках
     * @desc Описание элемента массива картинок (images[n])
     *      {
     *          mid: <идентификатор письма картинки>, // {String} Не обязательный параметр.
     *          // Если есть, то все данные будут формироваться согласно mid изображения
     *
     *          name: <название картинки с расширением>, // {String}
     *          filename: <название картинки без расширения>, // {String}
     *
     *          // Данные, которые будут взяты, если не указан mid
     *          url: <ссылка на картинку> // {String}
     *          from: <от кого письмо, содержащее картинку> // {Object}
     *          to: <кому письмо, содержащее картинку> // {Object}
     *          date: <дата добавления> // {String}
     *          subject: <тема письма> // {String}
     *          emailUrl: <ссылка на письмо> // {String}
     *      }
     * @desc images[n].from || images[n].to
     *      {
     *          name: <имя владельца email> {String},
     *          email: <email> {String}
     *      }
     * @param {Number} [currentIndex] номер картинки, которая должна быть выбрана при открытии
     */
    openImages: function(images, currentIndex) {
        var that = this;
        var $w = $(window);

        if (!$.isArray(images)) {
            this.images = [];
        } else {
            this.images = images;
        }

        // Картинки пришли в формате ЖП
        this.ppyrus = false;

        if (!images[0].mid) {
            this.ppyrus = true;
        }

        // Подготовка данных о картинках
        this.images = $.map(this.images, function(img) {
            return that.getImageData(img);
        });

        this.imgObjects = {};
        this.$currentImage = null;
        this.$content = $(Jane.tt('mail-common:image-viewer', {
            count: this.images.length,
            attachment: this.images
        }));
        this.$title = this.$content.find('.b-image-viewer__title');
        this.$download = this.$content.find('.b-image-viewer__download');
        this.$fullsize = this.$content.find('.b-image-viewer__fullsize');
        this.$page = this.$content.find('.b-image-viewer__page');
        this.$subject = this.$content.find('.b-image-viewer__subject');
        this.$from = this.$content.find('.b-image-viewer__from');
        this.$to = this.$content.find('.b-image-viewer__to');
        this.$date = this.$content.find('.b-image-viewer__date');
        this.$print = this.$content.find('.b-image-viewer__print');
        this.$gallery = this.$content.find('.b-image-viewer__gallery-i');

        // Мета (from, to, etc) для картинок из ЖП неактуальна
        if (this.ppyrus) {
            this.$content.find('.b-image-viewer__meta').hide();
        }

        this.originalScrollTop = $w.scrollTop();

        Daria.Layer.open({
            body: this.$content,
            onclose: function() {
                that.onclose();
            }
        });
        if (this.images.length === 1) {
            this.$content.addClass('b-image-viewer_single');
        } else {
            Jane.c('Просмотрщик картинок', 'Показ стрелок');
        }
        this.$content.addClass('b-image-viewer_loading');
        this.updateLayout();

        $w.on('resize', this.onresize);
        $(document).on('click', this.ondocumentclick);
        this.$gallery.on('mousewheel', this.onmousewheel);

        $.Shortcuts.modalListOn('image-viewer');

        // Открывать картинку необходимо лишь при указанном выбранном номере из списка картинок
        if (!isNaN(currentIndex) && typeof currentIndex === 'number') {
            this.currentIndex = currentIndex;
            this.select(currentIndex);
        } else {
            this.currentIndex = 0;
        }
    },

    /**
     * Открытие ImageViewer, формируя список картинок
     * @param {String} mode тип открываемого вьювера ('history' - подгружает картинки из истории переписки)
     * @param {String} mid идентификатор письма
     * @param {String} hid идентификатор attachment письма
     * @param {String} messageHid. Происхождение параметра не известно.
     */
    open: function(mode, mid, hid, messageHid) {
        var that = this;
        var hMessageHistoryNearest = Jane.$H('message-history-nearest');
        var hMessageBody = Jane.$H('message-body');
        var messages = [];
        var mids = {};
        var images = [];
        var currentIndex = 0;

        function process() {
            if (!mids[this.mid]) {
                mids[this.mid] = true;
                messages.push(this);
            }
        }

        if (mode == 'history') {
            var params = $.extend({}, Jane.Page.params);
            while (true) {
                var cache = hMessageHistoryNearest.getCacheByParams(params);
                var messageCount = messages.length;
                if (cache && cache.message && cache.message.length) {
                    $.each(cache.message, process);
                    params.ids = messages[messages.length - 1].mid;
                }
                if (messageCount == messages.length) {
                    break;
                }
            }
        } else {
            messages = [{
                mid: mid,
                attachment: hMessageBody.getAttachments(mid, messageHid)
            }];
        }
        var messageHandlers = [];
        $.each(messages, function(i, message) {
            if (message.attachment) {
                $.each(message.attachment, function() {
                    if (this['class'] == 'image' && this['browser-supports']) {
                        messageHandlers.push({
                            handlers: ['message'],
                            params: {ids: message.mid}
                        });
                        var image = $.extend({
                            mid: message.mid
                        }, this);
                        if (message.mid == mid && this.hid == hid) {
                            currentIndex = images.length;
                        }
                        images.push(image);
                    }
                });
            }
        });

        that.openImages(images);

        Jane.Handler.getAll(messageHandlers, function() {
            that.select(currentIndex);
        });
    },

    onclose: function() {
        var $w = $(window);

        $w.off('resize', this.onresize);
        $(document).off('click', this.ondocumentclick);
        this.$gallery.off('mousewheel', this.onmousewheel);
        $.Shortcuts.modalListOff('image-viewer');

        if ('originalScrollTop' in this) {
            $w.scrollTop(this.originalScrollTop);
            delete this.originalScrollTop;
        }

        this.images = [];
        this.imgObjects = {};
        this.$currentImage = null;

        Jane.c('Просмотрщик картинок', 'Закрытие');
    },

    onresize: function() {
        var that = Daria.ImageViewer;
        that.$content.find('.b-image-viewer__container, .b-image-viewer__arrow').css({
            width: '',
            height: ''
        });
        that.updateLayout();
    },

    ondocumentclick: function(evt) {
        var $target = $(evt.target);
        if (!$target.closest('.b-image-viewer__gallery').length) {
            Daria.ImageViewer.hideGallery();
        }
        if (!$target.closest('.b-image-viewer').length) {
            Daria.Layer.close();
        }
    },

    onmousewheel: function(e) {
        var evt = e.originalEvent;
        Daria.ImageViewer.scrollGallery(-evt.wheelDelta || evt.detail, 50, true);
    },

    /**
     * Отображение выбранную картинку и подготавливает соседние с ней по списку
     */
    updateImage: function() {
        var image = this.images[this.currentIndex];

        if (this.$currentImage) {
            this.$currentImage.removeClass('b-image-viewer__image_current');
        }
        this.createImage(this.currentIndex);
        this.createImage(this.getNextIndex(this.currentIndex));
        this.createImage(this.getPrevIndex(this.currentIndex));

        this.$currentImage = this.imgObjects[this.currentIndex];
        this.$currentImage.addClass('b-image-viewer__image_current');
        if (this.$currentImage[0].complete) {
            this.$content.removeClass('b-image-viewer_loading');
        } else {
            this.$content.addClass('b-image-viewer_loading');
        }

        this.$title.html(image.name);
        this.$title.attr('title', image.name);
        this.$download.attr('href', image.downloadUrl);
        this.$page.html(this.currentIndex + 1);
        this.$subject.html(image.subject);
        this.$subject.attr('href', image.emailUrl);
        this.$from.html(image.from);
        this.$to.html(image.to);
        this.$date.html(image.date);
        this.$content.find('.b-image-viewer__preview').removeClass('b-image-viewer__preview_current');
        this.$content.find('.b-image-viewer__preview_' + this.currentIndex).addClass('b-image-viewer__preview_current');

        if (image.fullSizeUrl) {
            this.$print.attr('data-params', 'src=' + encodeURIComponent(image.fullSizeUrl));
            this.$fullsize.attr('href', image.fullSizeUrl);
            this.$print.show();
            this.$fullsize.show();
        } else {
            this.$print.hide();
            this.$fullsize.hide();
        }
    },

    /**
     * Создание Img нод по индексу картинки из списка
     * @param {Number} index номер картинки в списке доступных картинок во вьювере
     */
    createImage: function(index) {
        var that = this;
        if (!this.imgObjects[index]) {
            this.$content.addClass('b-image-viewer_loading');
            var $newImage = $('<img class="b-image-viewer__image">');
            $newImage.appendTo(this.$content.find('.b-image-viewer__container'));
            $newImage.one('load', function() {
                if (that.$currentImage[0].complete) {
                    that.$content.removeClass('b-image-viewer_loading');
                } else {
                    that.$content.addClass('b-image-viewer_loading');
                }
            });

            var image = this.images[index];

            if (image.fullSizeUrl) {
                $newImage.attr('src', image.fullSizeUrl);
            } else {
                $newImage.attr('src', image.downloadUrl);
            }

            $newImage.css({
                maxWidth: this.maxImageSize[0],
                maxHeight: this.maxImageSize[1]
            });

            this.imgObjects[index] = $newImage;
        }
    },

    /**
     * Обновление размеров вьювера
     */
    updateLayout: function() {
        var $window = $(window);
        // Вычитаем ширину и высоту «рамки»
        var maxImageWidth = $window.width() - 185;
        var maxImageHeight = $window.height() - 100;
        // Мета (from, to, etc) для картинок из ЖП неактуальна
        if (!this.ppyrus) {
            maxImageHeight -= this.$content.find('.b-image-viewer__meta').height();
        }
        this.maxImageSize = [maxImageWidth, maxImageHeight];
        var leftArrowWidth = maxImageWidth / 3;
        var rightArrowWidth = leftArrowWidth * 2;
        this.$content.find('.b-image-viewer__content').css({
            width: $window.width() - 170
        });
        this.$content.find('.b-image-viewer__container').css({
            width: maxImageWidth,
            lineHeight: maxImageHeight + 'px'
        });
        this.$content.find('.b-image-viewer__container, .b-image-viewer__arrow').css('height', maxImageHeight);
        this.$content.find('.b-image-viewer__image').css({
            maxWidth: maxImageWidth,
            maxHeight: maxImageHeight
        });
        this.$content.find('.b-image-viewer__arrow_prev').css({
            width: leftArrowWidth
        });
        this.$content.find('.b-image-viewer__arrow_next').css({
            width: rightArrowWidth,
            marginLeft: -rightArrowWidth + 'px',
            backgroundPosition: rightArrowWidth - 35 + 'px 50%'
        });
    },

    /**
     * Подготовка данных о картинке
     * @param {Object} image объект данных о картинке
     */
    getImageData: function(image) {
        var downloadUrl; // Ссылка на скачивание картинки
        var fullSizeUrl; // Ссылка на полноразмерную картинку
        var thumbUrl; // Ссылка на thumbnail картинки
        var from; // От кого письмо, в котором содержится картинка
        var to; // Кому письмо, в котором содержится картинка
        var subject; // Тема письма
        var emailUrl; // Ссылка на письмо
        var date; // Дата подключения картинки к письму

        if (typeof image !== 'object' || !image) {
            image = {};
        }

        // Если изобращение имеет mid, то данные о картинке формируются по mid письма
        if (image.mid) {
            var hMessage = Jane.$H('message');
            var emails = hMessage.getEmails(image.mid);

            downloadUrl = Daria.url.attachment(image, image.mid);
            fullSizeUrl = Daria.url.attachment(image, image.mid, {
                "no_disposition": true,
                "exif_rotate": true
            });
            thumbUrl = Daria.url.attachment(image, image.mid, {
                "no_disposition": true,
                "thumb": true,
                "exif_rotate": true
            });
            from = emails.from;
            to = emails.to;
            subject = _.escape(hMessage.getSubject(image.mid));
            emailUrl = '#message/' + image.mid;
            date = hMessage.getDate(image.mid);
        } else {
            downloadUrl = image.url;
            fullSizeUrl = image.fullSizeUrl;
            thumbUrl = image.thumbUrl;
            from = image.from || '';
            to = image.to || '';
            subject = image.subject || '';
            emailUrl = image.emailUrl || '';
            date = image.date || '';
        }

        from = this.formatEmail(from);
        to = this.formatEmail(to);

        return {
            name: _.escape(image.name),
            filename: _.escape(image.filename),
            downloadUrl: downloadUrl,
            fullSizeUrl: fullSizeUrl,
            thumbUrl: thumbUrl,
            from: from,
            to: to,
            subject: subject,
            emailUrl: emailUrl,
            date: date
        };
    },

    /**
     * Подготовка email
     * @param {Object} email данные о email
     * @returns {string}
     */
    formatEmail: function(email) {
        var result = '';
        if (email && typeof email == 'object') {
            result = _.escape(email.name || email.email);
            if (email.name && email.email) {
                result += ' &lt;' + _.escape(email.email) + '&gt;';
            }
        }
        return result;
    },

    next: function() {
        this.currentIndex = this.getNextIndex(this.currentIndex);
        this.updateImage();
    },

    getNextIndex: function(index) {
        var nextIndex = index + 1;
        if (nextIndex >= this.images.length) {
            nextIndex = 0;
        }
        return nextIndex;
    },

    prev: function() {
        this.currentIndex = this.getPrevIndex(this.currentIndex);
        this.updateImage();
    },

    getPrevIndex: function(index) {
        var prevIndex = index - 1;
        if (prevIndex < 0) {
            prevIndex = this.images.length - 1;
        }
        return prevIndex;
    },

    select: function(index) {
        if (index >= 0 && index < this.images.length) {
            this.currentIndex = index;
            this.updateImage();
        }
    },

    toggleGallery: function() {
        this.$content.toggleClass('b-image-viewer_gallery');
        this.$gallery[0].scrollLeft = (this.currentIndex + 1) * 168 - this.$gallery.width() / 2;
        this.scrollGallery(1, 0.0001, true);
    },

    hideGallery: function() {
        this.$content.removeClass('b-image-viewer_gallery');
    },

    isGalleryOpen: function() {
        return this.$content.hasClass('b-image-viewer_gallery');
    },

    scrollGallery: function(to, delta, fast) {
        delta = delta || 800;
        var gallery = this.$gallery[0];
        var newScroll = gallery.scrollLeft + (to < 0 ? -1 : 1) * delta;

        var that = this;
        var onAfterScroll = function() {
            that.$content.find('.b-image-viewer__gallery-arrow').removeClass('b-image-viewer__gallery-arrow_disabled');
            var currentScroll = gallery.scrollLeft;
            if (currentScroll === 0) {
                that.$content.find('.b-image-viewer__gallery-arrow_left').addClass('b-image-viewer__gallery-arrow_disabled');
            }
            if (currentScroll < newScroll) {
                that.$content.find('.b-image-viewer__gallery-arrow_right').addClass('b-image-viewer__gallery-arrow_disabled');
            }
        };

        if (fast) {
            gallery.scrollLeft = newScroll;
        } else {
            this.$gallery.animate({
                scrollLeft: newScroll
            }, 500, 'linear', onAfterScroll);
        }
        onAfterScroll();
    }
};

/* ../../js/components/image-viewer.js end */

    /* ../../js/components/layer.js begin */
Daria.Layer = {
    init: function() {
        this.$el = $(
            '<div class="b-layer">' +
                '<div class="b-layer__overlay"></div>' +
                '<div class="b-layer__content-wrap">' +
                    '<div class="b-layer__close daria-action" data-action="layer.close"></div>' +
                    '<div class="b-layer__content"></div>' +
                '</div>' +
            '</div>');
        this.$el.appendTo(document.body);
        this.$content = this.$el.find('.b-layer__content');
        this.$window = $(window);

        var that = this;
        this.$window.resize(function() {
            if (that.opened) {
                that.$el.css({
                    width: that.$window.width(),
                    height: that.$window.height()
                });
            }
        });
        Jane.events.bind('pageKey.change', function() {
            Daria.Layer.close();
        });
    },

    open: function(params) {
        Jane.Yabs.closeHeadStripe();
        if (this.opened) {
            this.close();
        }
        this.opened = true;
        if (!this.$el) {
            this.init();
        }
        this.onclose = params.onclose;
        this.$el.css({
            width: this.$window.width(),
            height: this.$window.height()
        });
        this.$content.empty().append(params.body);
        // и без этого всё скролится вверх, но так хоть событие посылается и тулбар не ломается.
        window.scrollTo(0, 0);
        $(document.documentElement).addClass('b-page_layer');
    },

    close: function() {
        this.opened = false;
        $(document.documentElement).removeClass('b-page_layer');
        if (typeof this.onclose == 'function') {
            this.onclose();
        }
    }
};

/* ../../js/components/layer.js end */

    /* ../../js/components/shortcuts.js begin */
/*global Focus */

Daria.Shortcuts = (function(Daria, $) {
    "use strict";

    var self = {
        // флаг, говорящий нам о том, что бинды уже были прописаны
        eventsBound: false,

        // На Mac используем специальные кнопки типа command
        altOS: (navigator.platform.toLowerCase().indexOf('mac') === 0),

        // тип страницы
        pageType: '',

        // активны ли хоткеи
        hotkeysEnabled: false

    };

    /* ../../js/components/shortcuts-list.js begin */
/*global self */

// списки горячих клавиш
self.shortcuts = [

    // Глобальные хоткеи
    {

        global: true,
        name: 'global',

        shortcuts: {

            // проверить почту
            'Check_new_mail': {
                mask: 'F9',
                altMask: 'Shift+o',
                enableInInput: !self.altOS,
                action: 'mailbox.check'
            },

            // новое письмо
            'New_mail': {
                mask: 'w, c',
                disableAt: ['compose'],
                handler: function() {
                    Jane.Actions.run('compose.go');

                    // DARIA-18715 убираем фокус с левой колонки
                    if (Daria.Focus.getCurrentCol() === 1) {
                        Daria.Focus.changeColumn('right');
                    }
                }

            },

            // перейти во входящие
            'Goto_inbox': {
                mask: 'Ctrl+i',
                altMask: 'Meta+i',
                type: 'hold',
                enableInInput: true,
                handler: function() {
                    Daria.Focus.selectInbox();
                }
            },

            // поиск (курсор в поле ввода поиска)
            'Find': {
                mask: '/,?', // так надо
                type: 'hold',
                handler: function() {
                    var bSearch = Jane.$B('search');
                    if (!bSearch || !bSearch.visible) {
                        return;
                    }

                    var $input = bSearch.$input;
                    if ($input.length) {
                        $('html,body').animate({'scrollTop': 0}, function() {
                            $input.focus();
                        });
                    }
                }
            },

            // Открываем помощь
            'Hotkeys_help': {
                mask: 'Shift+?,Shift+comma,Shift+7,7',
                type: 'hold',
                handler: function() {
                    //self.showShortcutsHelp();
                    Jane.Actions.run('show-hotkeys-list', {});
                }
            },

            // в левую колонку
            'Column_left': {
                mask: 'Left',
                type: 'hold',
                handler: function() {
                    if (Daria.Focus) {
                        Daria.Focus.changeColumn('left');
                    }
                }
            },

            // в правую колонку
            'Column_right': {
                mask: 'Right',
                type: 'hold',
                handler: function() {
                    if (Daria.Focus) {
                        Daria.Focus.changeColumn('right');
                    }
                }
            },

            // К предыдущему письму/папке/треду
            'Goto_previous': {
                mask: 'Up',
                type: 'hold',
                handler: function() {
                    Daria.Focus.move('prev');
                }
            },

            // К следующему письму
            'Goto_next': {
                mask: 'Down',
                type: 'hold',
                handler: function() {
                    Daria.Focus.move('next');
                }
            },

            // печать
            'Print': {
                mask: 'Shift+p',
                type: 'hold',
                handler: function() {
                    // Печатаем только письмо
                    if (Jane.Page.type === 'message' || Daria.layout.indexOf('3pane') === 0) {
                        var node = Daria.layout === '2pane' ? Jane.$B('message').getCacheNode() : Daria.Focus.getActiveMessageNode();
                        if (!node || Daria.Focus.activeMessageIsEmpty()) {
                            return;
                        }

                        var $link = $('.js-kbd-print', node);
                        if ($link.length) {
                            window.open($link[0].href, '_blank');
                        }
                    }
                }
            },

            // Выделить текущее письмо
            // либо свернуть/развернуть список папок
            'Set_mark': {
                mask: 'Space',
                type: 'down',
                handler: function(e) {
                    switch (Daria.Focus.getCurrentCol()) {
                    case 1:
                        Daria.Focus.toggleFolder();
                        break;

                    case 2:
                        if (self.pageType === 'messages' && Daria.Table.active) {
                            Daria.Table.active.selectCurrent(e);
                        } else {
                            return true;
                        }
                        break;
                    }
                }
            },

            // // скроллинг
            // 'Start_Space_scrolling': {
            //     mask: 'Space',
            //     type: 'hold',
            //     handler: function() {
            //         var col = Daria.Focus.getCurrentCol();

            //         // скроллим список в 2pane и в 3pane само письмо
            //         if  (col === 2 || ((Daria.layout !== '2pane') && col === 3)) {

            //             if (typeof self.spaceTimeout === 'undefined') {

            //                 self.spaceTimeout = setTimeout(function spaceTimer(){

            //                     Daria.Focus.scrollPage('down');
            //                     delete self.spaceTimeout;

            //                 }, 300);
            //             }
            //         }
            //     }
            // },

            // // отменяет скрол пробелом
            // 'Cancel_Space_scrolling': {
            //     mask: 'Space',
            //     type: 'up',
            //     handler: function() {
            //         clearTimeout(self.spaceTimeout);
            //         delete self.spaceTimeout;
            //     }
            // },

            // Открыть текущее письмо
            'Collapse_folder': {
                mask: 'Enter',
                handler: function() {
                    return Daria.Focus.open();
                }
            }
        }
    },

    // Список писем
    {

        name: 'messages',
        shortcuts: {

            // Поставить метку
            'Labels_dialog': {
                mask: 'l',
                handler: function() {
                    Daria.Focus.openDropdown('labels', 'showWarning');
                }
            },

            // Переложить в папку
            'Folders_dialog': {
                mask: 'm',
                handler: function() {
                    Daria.Focus.openDropdown('folders', 'showWarning');
                }
            },

            // Пометить, как важные
            'Label_important': {
                mask: 'i',
                handler: function() {
                    Daria.Focus.markImportant();
                }
            },

            // Пометить, как прочитанное
            'Label_read': {
                mask: 'q',
                handler: function() {
                    Daria.Focus.messagesRun('mark', 'showWarning');
                }
            },

            // Пометить, как НЕ прочитанное
            'Label_unread': {
                mask: 'u',
                handler: function() {

                    if (Daria.Table.active && Daria.Table.active.checkboxTree.count > 0) {
                        Daria.Focus.messagesRun('unmark');
                    } else {
                        Jane.Page.go($('.lid-only_new')[0].href);
                    }
                }
            },

            // Выделить все письма
            'Select_all': {
                mask: 'Ctrl+a',
                altMask: 'Meta+a',
                type: 'hold',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.toggleSelectAll();
                    }
                }
            },

            // Модификатор выделения писем
            'Select_modifier': {
                mask: 'Shift',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.startKeyboardSelect();
                    }
                }
            },

            // К предыдущему письму с выделением
            'Select_previous': {
                mask: 'Shift+Up',
                type: 'hold',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentUp(true);
                    }

                }
            },

            // К следующему письму с выделением
            'Select_next': {
                mask: 'Shift+Down',
                type: 'hold',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentDown(true);
                    }
                }
            },

            // К первому письму
            'Goto_first': {
                mask: 'Home',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentHome();
                    }
                }
            },

            // К первому письму с выделением
            'Select_till_first': {
                mask: 'Shift+Home',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentHome(true);
                    }
                }
            },

            // К последнему письму
            'Goto_end': {
                mask: 'End',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentEnd();
                    }
                }
            },

            // К последнему письму с выделением
            'Select_till_last': {
                mask: 'Shift+End',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.moveCurrentEnd(true);
                    }
                }
            },

            // Переслать
            'Forward': {
                mask: 'f',
                handler: function() {
                    Daria.Focus.messagesRun('forward', 'showWarning');
                }
            },

            // Удалить письма
            'Delete_selected': {
                mask: 'Delete',
                altMask: 'Meta+Backspace',
                type: 'hold',
                handler: function() {
                    Daria.Focus.deleteOrEmpty();
                }
            },

            // Перейти к следующей странице в пейджере
            'Goto_next_page': {
                mask: 'Ctrl+Right',
                action: 'messages.next'
            },

            // Перейти к предыдущей странице в пейджере
            'Goto_prev_page': {
                mask: 'Ctrl+Left',
                action: 'messages.prev'
            },

            // Деселект выбранных писем
            'Deselect': {
                mask: 'Esc',
                handler: function() {
                    var activeTable = Daria.Table.active;
                    if (activeTable) {
                        if (Jane.watcher.get('daria:selection-mode')) {
                            activeTable.deselect();
                        }

                        if (Daria.layout == '2pane') {
                            activeTable.unsetCurrent(activeTable.curRowId);
                        }
                    }
                }
            }
        }
    },

    // просмотр письма
    {
        name: 'message',

        shortcuts: {
            // Перейти к следующему письму
            'Goto_next': {
                mask: 'n,k',
                'action': 'message.next'
            },

            // Перейти к предыдущему письму
            'Goto_previous': {
                mask: 'p,j',
                action: 'message.prev'
            },

            // Удалить письмо
            'Delete': {
                mask: 'Delete',
                altMask: 'Meta+Backspace',
                handler: function() {
                    Daria.Focus.deleteOrEmpty();
                }
            },

            // Ответить
            'Reply': {
                mask: 'Shift+e',
                handler: function() {
                    Daria.Focus.messagesRun('reply', false, true);
                }
            },

            // Ответить всем
            'Reply_all': {
                mask: 'Shift+r',
                handler: function() {
                    Daria.Focus.messagesRun('reply-all', false, true);
                }
            },

            // Переслать
            'Forward': {
                mask: 'Shift+f',
                handler: function() {
                    Daria.Focus.messagesRun('forward');
                }
            },

            // Поставить метку
            'Labels_dialog': {
                mask: 'Shift+l',
                handler: function() {
                    Daria.Focus.openDropdown('labels');
                }
            },

            // Переложить в папку
            'Folders_dialog': {
                mask: 'Shift+m',
                handler: function() {
                    Daria.Focus.openDropdown('folders');
                }
            },

            // Пометить, как НЕ прочитанное
            'Label_unread': {
                mask: 'Shift+u',
                handler: function() {
                    Daria.Focus.messagesRun('unmark');
                }
            },

            // Пометить, как спам/не спам
            'Label_spam': {
                mask: 'Shift+s',
                handler: function() {
                    var id = Daria.Focus.getCurrentMsg();

                    // проверим, является ли письмо спамом
                    var action = (Jane.$H('message').isSpam(id)) ? 'notspam' : 'tospam';

                    // проверим, что это не спициальное яндексовое письмо, с которым ничего нельзя делать
                    if (Jane.watcher.get('toolbar-button:reply:enabled') || Daria.layout !== '2pane') {

                        // TODO FIXME
                        // в 3pane Jane.watcher.get('toolbar-button:reply:enabled') не работает
                        Jane.Actions.run(action, {}, {'message-id': id});
                    }
                }
            },

            // Пометить, как важное
            'Label_important': {
                mask: 'Shift+i',
                handler: function() {
                    Daria.Focus.markImportant('message');
                }
            },

            // Сохранить все вложения
            'Attachments_save': {
                mask: 'Ctrl+s',
                altMask: 'Meta+s',
                type: 'hold',
                handler: function() {
                    var attachmentsLink = $('.js-download-all:visible');
                    if (attachmentsLink.length > 0) {
                        window.location.href = attachmentsLink[0].href;
                        return false;
                    }
                }
            }
        }
    },

    // новое письмо (композ)
    {

        name: 'compose',
        shortcuts: {

            /*
                Важно: для WYSISYG редактора сохранение черновика и отправку
                писем пришлось забиндить отдельно в blocks/compose/compose.js
             */

            // Сохранить как черновик
            'Save_draft': {
                mask: 'Ctrl+s',
                altMask: 'Meta+s',
                type: 'hold',
                enableInInput: true,
                handler: function() {
                    Jane.Actions.run('compose.save', {}, {hotkeysUsed: true});
                }
            },

            // Отправить
            'Send': {
                mask: 'Ctrl+Enter',
                altMask: 'Meta+Enter',
                type: 'hold',
                enableInInput: true,
                handler: function() {
                    Jane.Actions.run('hotkeys-promo-sent-with-shortcuts');
                    Jane.Actions.run("compose.send", null, { hotkeysUsed: true });
                }
            },

            // Прикрепить файлы и добавить контакты
            'Attach': {
                mask: 'plus, Shift+plus',
                type: 'hold',
                // enableInInput: true,
                // filterInput: ['js-kbd-compose-textarea', 'js-kbd-search', 'js-kbd-subj', 'js-kbd-qr', 'js-kbd-sms', 'js-kbd-from', 'js-kbd-captcha', 'js-kbd-region'],
                handler: function(e) {
                    Daria.Focus.attach(e);
                }
            }
        }
    },

    // быстрый ответ
    {

        name: 'quickreply',
        shortcuts: {

            // Сохранить как черновик
            'Save_draft': {
                mask: 'Ctrl+s',
                altMask: 'Meta+s',
                enableInInput: true,
                handler: function() {
                    Jane.Actions.run('quick-reply.save', {}, { hotkeysUsed: true });
                }
            },

            // Отправить
            'Send': {
                mask: 'Ctrl+Enter',
                altMask: 'Meta+Enter',
                enableInInput: true,
                handler: function() {
                    $('.js-kbd-quicksend:visible:first').trigger('click');
                }
            },

            // Прикрепить файлы и добавить контакты
            'Attach': {
                mask: 'plus, Shift+plus',
                type: 'hold',
                // enableInInput: true,
                // filterInput: ['js-kbd-compose-textarea', 'js-kbd-search', 'js-kbd-subj', 'js-kbd-qr', 'js-kbd-sms', 'js-kbd-from', 'js-kbd-captcha', 'js-kbd-region'], //'js-kbd-compose-input',  'js-kbd-compose'
                handler: function(e) {
                    Daria.Focus.attach(e, 'quickreply');
                }
            }
        }
    },

    // закрытие диалогов
    {
        name: 'dialog',
        shortcuts: {
            'Dialog_cancel': {
                mask: 'Esc',
                enableInInput: true,
                handler: function() {
                    Daria.Dialog.cancel();
                }
            }
        }
    },

    // закрытие tutorial'a
    {
        name: 'tutorial',
        shortcuts: {
            'Tutorial_close': {
                mask: 'Esc, Enter',
                enableInInput: true,
                handler: function() {
                    Jane.events.trigger('tutorial.close');
                }
            }
        }
    },

    // прикрепление файлов из Диска
    {
        name: 'finder',
        shortcuts: {
            'Finder_close': {
                mask: 'Esc',
                action: 'attachments.close-disk-browser'
            }
        }
    },

    // просмоторщик видео
    {
        name: 'video-player',
        shortcuts: {
            'Videoplayer_cancel': {
                mask: 'Esc',
                handler: function() {
                    Daria.VideoPlayer.close();
                }
            }
        }
    },

    // просмоторщик картинок
    {
        name: 'image-viewer',
        shortcuts: {
            'Image_viewer_close': {
                mask: 'Esc',
                enableInInput: true,
                handler: function() {
                    Daria.Layer.close();
                }
            },
            'Image_viewer_next': {
                mask: 'Right',
                handler: function() {
                    var imageViewer = Daria.ImageViewer;
                    if (imageViewer.isGalleryOpen()) {
                        imageViewer.scrollGallery(1);
                    } else {
                        imageViewer.next();
                    }
                }
            },
            'Image_viewer_prev': {
                mask: 'Left',
                handler: function() {
                    var imageViewer = Daria.ImageViewer;
                    if (imageViewer.isGalleryOpen()) {
                        imageViewer.scrollGallery(-1);
                    } else {
                        imageViewer.prev();
                    }
                }
            }
        }
    },

    // Абук
    {
        name: 'contacts',
        shortcuts: {
            'Abook_select_all': {
                mask: 'Ctrl+a',
                altMask: 'Meta+a',
                type: 'hold',
                handler: function() {
                    Jane.Block.Abook.getContactsBlock().selectAll();
                }
            },
            'Abook_deselect_all': {
                mask: 'Esc',
                enableInInput: true,
                handler: function() {
                    Jane.Block.Abook.getContactsBlock().deselectAll();
                }
            }
        }
    },

    // Живые письма
    {
        name: 'ppyrus',
        shortcuts: {
            // Выделить все письма
            'Select_all': {
                mask: 'Ctrl+a',
                altMask: 'Meta+a',
                type: 'hold',
                handler: function() {
                    if (Daria.Table.active) {
                        Daria.Table.active.toggleSelectAll();
                    }
                }
            },
            // Деселект выбранных писем
            'Deselect': {
                mask: 'Esc',
                handler: function() {
                    var activeTable = Daria.Table.active;
                    if (activeTable) {
                        if (Jane.watcher.get('daria:selection-mode')) {
                            activeTable.deselect();
                        }

                        if (Daria.layout == '2pane') {
                            activeTable.unsetCurrent(activeTable.curRowId);
                        }
                    }
                }
            },
            // Удалить письма
            'Delete_selected': {
                mask: 'Delete',
                altMask: 'Meta+Backspace',
                type: 'hold',
                action: 'ppyrus.delete'
            }
        }
    }
];

var showWarning = function() {
    return Jane.Page.type == 'messages';
};

var buttonIsVisible = function(name) {
    var toolbarBlock = Jane.$B('toolbar-box').getActive();
    if (toolbarBlock) {
        var button = toolbarBlock.toolbar.getButton(name);
        return !!(button && button.isVisible());
    } else {
        return false;
    }
};

// Хоткеи для пользовательских «ПК» кнопок
var userButtons = {
    // Архивировать
    'Archive': {
        mask: 'a',
        handler: function() {
            if (buttonIsVisible('archive') || Daria.layout !== "2pane") {
                Daria.Focus.messagesRun('archive', showWarning());
            }
        }
    },

    // Предопределённая пересылка
    'Sendon': {
        mask: 'Alt+f',
        handler: function() {
            if (buttonIsVisible('sendon')) {
                Daria.Focus.messagesRun('sendon', showWarning(), true, {
                    'toolbar': '1',
                    'toolbar.button': 'sendon'
                });
            }
        }
    },

    // Предопределённая папка
    'Infolder': {
        mask: 'Alt+m',
        handler: function() {
            if (buttonIsVisible('infolder')) {
                Daria.Focus.messagesRun('infolder', showWarning(), true, {
                    'toolbar': '1',
                    'toolbar.button': 'infolder'
                });
            }
        }
    },

    // Предопределённая метка
    'Defined_label': {
        mask: 'Alt+l',
        handler: function() {
            var toolbarBlock = Jane.$B('toolbar-box').getActive();
            if (toolbarBlock) {
                var button = toolbarBlock.toolbar.getButton('label');
                if (button) {
                    var method = button.isVisible() ? 'label' : 'unlabel';
                    Daria.Focus.messagesRun(method, showWarning(), true, {
                        'toolbar': '1',
                        'toolbar.button': method
                    });
                }
            }
        }
    },

    // Предопределённый ответ
    'Defined_reply': {
        mask: 'Alt+r',
        handler: function() {
            if (buttonIsVisible('template')) {
                Daria.Focus.messagesRun('reply-tmpl', showWarning(), true, {
                    'toolbar': '1',
                    'toolbar.button': 'template'
                });
            }
        }
    }
};

// Добавляем хоткеи ПК на страницу письма и списка писем
for (var i = self.shortcuts.length - 1, s; i >= 0; i--) {
    s = self.shortcuts[i];
    if (s.name == 'messages' || s.name == 'message') {
        $.extend(s.shortcuts, userButtons);
    }
}

/* ../../js/components/shortcuts-list.js end */

    /* ../../js/components/shortcuts-help.js begin */
/*global self, i18n */

// список справки по горячим клавишам
self.help = [
    {
        title: i18n('%Shortcuts_groups_global'),
        id: 'global',
        hotkeys: [
            {
                title: i18n('%Shortcuts_key_Check_new_mail'),
                id: 'Check_new_mail'
            },
            {
                title: i18n('%Shortcuts_key_New_mail'),
                id: 'New_mail'
            },
            {
                title: i18n('%Shortcuts_key_Goto_inbox'),
                id: 'Goto_inbox'
            },
            {
                title: i18n('%Shortcuts_key_Print'),
                id: 'Print'
            },
            {
                title: i18n('%Shortcuts_key_Find'),
                key: '/'
            },
            {
                title: i18n('%Shortcuts_key_Hotkeys_help'),
                key: '?'
            },
            {
                title: i18n('%Shortcuts_key_Columns_change'),
                key: '←|→'
            },
            {
                title: i18n('%Shortcuts_key_Next_prev'),
                key: '↑|↓'
            },
            {
                title: i18n('%Shortcuts_key_Collapse_folder'),
                key: 'Space'
            }
        ]
    },
    {
        title: i18n('%Shortcuts_groups_messages'),
        id: 'messages',
        hotkeys: [
            {
                // перемещение по письмам
                title: i18n('%Shortcuts_key_Next_prev_mail'),
                key: '↑|↓'
            },
            {
                title: i18n('%Shortcuts_key_Open_mail'),
                key: 'Enter'
            },
            {
                title: i18n('%Shortcuts_key_open_selected_mail'),
                key: 'Enter'
            },
            {
                // Выделить письма /снять выделение
                title: i18n('%Shortcuts_key_List_selection'),
                key: 'Shift + ↑|↓'
            },
            {
                title: i18n('%Shortcuts_key_Select_all'),
                id: 'Select_all'
            },
            {
                title: i18n('%Shortcuts_key_Labels_dialog'),
                id: 'Labels_dialog'
            },
            {
                title: i18n('%Shortcuts_key_Folders_dialog'),
                id: 'Folders_dialog'
            },
            {
                title: i18n('%Shortcuts_key_Label_read'),
                id: 'Label_read'
            },
            {
                title: i18n('%Shortcuts_key_Set_unmark'),
                id: 'Label_unread'
            },
            {
                title: i18n('%Shortcuts_key_Forward'),
                id: 'Forward'
            },
            {
                title: i18n('%Shortcuts_key_Label_important'),
                id: 'Label_important'
            },
            {
                title: i18n('%Shortcuts_key_Delete_selected'),
                id: 'Delete_selected'
            },
            {
                title: i18n('%Shortcuts_key_Open_important'),
                id: 'Label_important'
            },
            {
                title: i18n('%Shortcuts_key_Open_unread'),
                id: 'Label_unread'
            },
            {
                title: i18n('%Shortcuts_key_Paging'),
                key: 'Ctrl + ←|→'
            }
        ]
    },

    {
        title: i18n('%Shortcuts_groups_message'),
        id: 'message',
        hotkeys: [
            {
                title: i18n('%Shortcuts_help_label_unread'),
                id: 'Label_unread'
            },
            {
                title: i18n('%Shortcuts_help_toggle_spam'),
                id: 'Label_spam'
            },
            {
                title: i18n('%Shortcuts_help_trigger_important'),
                id: 'Label_important'
            },
            {
                title: i18n('%Shortcuts_help_set_label'),
                id: 'Labels_dialog'
            },
            {
                title: i18n('%Shortcuts_help_move_to_folder'),
                id: 'Folders_dialog'
            },
            {
                title: i18n('%Shortcuts_help_forward'),
                id: 'Forward'
            },
            {
                title: i18n('%Shortcuts_key_Reply'),
                id: 'Reply'
            },
            {
                title: i18n('%Shortcuts_key_Reply_all'),
                id: 'Reply_all'
            },
            {
                title: i18n('%Shortcuts_key_Delete'),
                id: 'Delete'
            },
            {
                title: i18n('%Shortcuts_key_Attachments_save'),
                id: 'Attachments_save'
            },
            {
                title: i18n('%Shortcuts_key_Next_prev_mail'),
                key: 'p/n | j/k'
            }
        ]
    },
    {
        title: i18n('%Shortcuts_groups_compose'),
        id: 'compose',
        hotkeys: [
            // {
            //     title: i18n('%Shortcuts_key_Add_recipient'),
            //     key: '+'
            // },
            {
                title: i18n('%Shortcuts_key_Attach'),
                key: '+'
            },
            {
                title: i18n('%Shortcuts_key_Send'),
                id: 'Send'
            },
            {
                title: i18n('%Shortcuts_key_Save_draft'),
                id: 'Save_draft'
            }
        ]
    },
    {
        title: i18n('%Shortcuts_groups_personal'),
        id: 'personal',
        hotkeys: [
            {
                title: i18n('%Shortcuts_key_Archive'),
                key: 'a'
            },
            {
                title: i18n('%Shortcuts_key_Sendon'),
                key: 'Alt + f'
            },
            {
                title: i18n('%Shortcuts_key_Infolder'),
                key: 'Alt + m'
            },
            {
                title: i18n('%Shortcuts_key_User_Label'),
                key: 'Alt + l'
            },
            {
                title: i18n('%Shortcuts_key_Reply_Template'),
                key: 'Alt + r'
            }
        ]
    }
];

/* ../../js/components/shortcuts-help.js end */

    /* ../../js/components/focus.js begin */
/**
 * Хелперы для обработки хоткеев
 */
var Focus = function(Daria, $) {
    //"use strict"; // shold work fine

    var that = this;

    /**
     * Проверяет, что переданная нода видима (не спрятана за скроллом) в пределах своего предка
     * @param  {DOM} domNode
     */
    that._elementInViewport = function(domNode) {

        var rect;
        var gap;

        if (Daria.layout !== '2pane') {

            var parentRect = domNode.offsetParent.getBoundingClientRect();
            rect = domNode.getBoundingClientRect();
            gap = rect.height;

            // ниже
            if (rect.top + rect.height + gap >= parentRect.bottom) {
                return parentRect.bottom - rect.top - rect.height - gap;
            }

            // выше
            if (rect.top < parentRect.top + gap) {
                return parentRect.top - rect.top + gap;
            }

        } else {

            var scroll = that.$viewport.scrollTop();
            rect = domNode.offset();
            gap = domNode.height();

            // ниже
            if (rect.top + gap + gap >= that.$viewport.height() + scroll) {
                return -(Math.abs(that.$viewport.height() + scroll - rect.top - gap - gap - gap));
            }

            // // выше
            if (rect.top - gap < scroll) {
                return Math.abs(scroll - rect.top + gap + gap);
            }

        }

        return 0;
    };

    /**
     * Удаление писем, либо очищение папок
     *
     * Если мы в левой колонке — очищаем папку. Если в списке писем — удаляем.
     */
    that.deleteOrEmpty = function() {
        switch (that.currentCol) {
            // case 1:
            //     if (self.activeModule === 'Folders') {
            //         self.modules.Folders.empty();
            //     }
            // break;

        case 2:

            // если мы в режиме просмотра письма
            if (Daria.Page.type === 'message') {
                Jane.Actions.run('delete');
                break;
            }
            // если смотрим список сообщений и ни одно не выбрано
            if (that.modules.Messages.countSelected() === 0) {

                // если писем в фокусе нет, то показываем сообещние и выходим из функции
                if (this.checkFocusedOrShowMessage()) {
                    break;
                }
            }

            that.modules.Messages.run('delete');
            break;

        case 3:
            var id = that.modules.Threepane.getMailId();
            Jane.Actions.run('delete', {'message-id': id});
            break;
        }
    };

    /**
     * Скроллит родительский элемент для переданного элемента (чтобы он был видим)
     *
     * @param  {DOM/jQuery} domNode элемент, который должен быть видим
     */
    that.scrollTop = function(domNode) {

        if (typeof domNode === 'undefined' || domNode.length === 0) {
            return false;
        }

        if (Daria.layout !== '2pane') {
            domNode = (typeof domNode.jquery !== 'undefined') ? domNode[0] : domNode;
        }

        var scrollDiff = that._elementInViewport(domNode);

        if (scrollDiff !== 0) {

            var value = (scrollDiff > 0) ? -scrollDiff : Math.abs(scrollDiff);

            if (Daria.layout !== '2pane') {

                domNode.offsetParent.scrollTop += value;

            } else {
                var scrollTop = that.$viewport.scrollTop();
                that.$viewport.scrollTop(scrollTop + value);
            }
        }
    };

    /**
     * Проверяем, не включен ли у нас минимизированный вариант
     * @return {Boolean}
     */
    that.isMinimized = function() {
        return (Daria.layout !== '2pane') ?
            false :
            (Jane.$H("settings").getSetting('hide_daria_left') === "on");
    };

    /**
     * Смена колонки
     * @param  {String} direction направление смены колонки
     * @param  {[string]} doNotSetCurrent флаг установки current элемента в списке писем
     */
    that.changeColumn = function(direction, doNotSetCurrent) {

        // пока умеем ходить по колонкам только там, где сть папки
        if (!Jane.$B('folders') || !Jane.$B('folders').visible) {
            return false;
        }

        if (direction === 'left' && that.currentCol > 1 && !that.isMinimized()) {
            that.currentCol--;

            if (that.currentCol === 1) {
                // ставим фокус на первую колонку
                that.modules[that.activeModule].setFocus();

                // убираем фокус со второй колонки
                if (Daria.Table.active) {
                    Daria.Table.active.unsetCurrent(Daria.Table.active.curRowId);
                }

            }

            if (Daria.layout !== '2pane' && that.currentCol === 2) {
                if (!doNotSetCurrent) {
                    Daria.Table.active.setCurrent(Daria.Table.active.curRowId);
                }

                that.modules.Threepane.removeFocus();
                $.Shortcuts.switchList('messages');

            }
        }

        if (direction === 'right' && that.currentCol < 3) {

            switch (that.currentCol) {
            case 1:
                // убираем фокус с первой колонки
                that.modules[that.activeModule].removeFocus();

                // ставим фокус на вторую колонку
                if (Daria.Table.active) {

                    // проверяем, что есть хоть один активный элемент
                    var curRowId = (typeof Daria.Table.active.curRowId === 'undefined' &&
                        Daria.Table.active.rows &&
                        Daria.Table.active.rows.length > 0) ?
                        Daria.Table.active.rows[0].id :
                        Daria.Table.active.curRowId;

                    Daria.Table.active.setCurrent(curRowId);
                    Daria.Table.active.curRowId = curRowId;

                }
                that.currentCol++;

                break;

            case 2:
                if (Daria.layout !== '2pane') {
                    // DARIA-37595 не убираем фокус с письма, если не понравится вернем =)
                    // Daria.Table.active.unsetCurrent(Daria.Table.active.curRowId);

                    that.modules.Threepane.setFocus();
                    $.Shortcuts.switchList('message');

                    that.currentCol++;
                }
                break;
            }
        }

    };
    that.changeColumnToFirstPane = function() {
        that.currentCol = 3;
        that.changeColumn('left', true);
    };

    that.changeColumnToSecondPane = function() {
        that.currentCol = 2;
        that.changeColumn('right');
    };

    /**
     * Триггерит флаг "важности" на письме или группе писем
     *
     * @param {String} [type] если передали message, значит работаем с одним письмом, иначе со списком или папками
     */
    that.markImportant = function(type) {
        var $letter;

        if (Daria.layout === '2pane') {
            $letter = $(Jane.$B('messages-box').getActiveCacheNode()).find('.b-message');
        } else {
            $letter = $(that.modules.Threepane.getActiveMessageNode());
        }


        // переключаем метку важную в on/off
        var lid = Jane.$H('labels').getImportantLID();
        var action = (that.oddEven) ? 'label' : 'unlabel';

        if (type === 'message') {
            action = $letter.hasClass('b-message_important') ? 'unlabel' : 'label';
            Jane.Actions.run(action, {}, {lid: lid, 'message-id': Daria.layout === '2pane' ? Daria.Page.params.ids : that.modules.Threepane.getCurrentMsgId() });

        } else {

            // если мы в списке писем
            if (Daria.Table.active && Jane.watcher.get('selectedCount') > 0) {
                Jane.Actions.run(action, {}, { lid: lid, hotkeysUsed: true });
                that.oddEven = !that.oddEven;

            } else {
                Jane.Page.go($('.lid-' + Jane.$H('labels').getImportantLID())[0].href);
            }

        }
    };

    /**
     * Проверяем, что в списке писем есть хоть одно письмо или мы не в инбоксе
     */
    // self.canSetFocusOnCentralColumn = function() {
    //     return (Daria.Table.active && Daria.Table.active.rows.length > 0) || Daria.Page.Type !== 'messages';
    // };

    /**
     * скроллит окно вверх/вниз
     */
    that.scrollPage = function(direction) {

        direction = (direction && direction === 'down') ? '+' : '-';

        var isThirdColumn = (that.currentCol === 3) ?
            '.m-layout_3pane .b-layout__second-pane .b-layout__inner' :
            '.b-layout__inner_type_messages';

        var element = (Daria.layout === '2pane') ? 'html,body' : isThirdColumn;

        $(element).stop(true).animate({"scrollTop": direction + "=200px"}, 150);
    };

    /**
     * перемещение по папкам/меткам вниз
     */
    that.moveNext = function() {

        switch (that.currentCol) {

            // левая колонка
        case 1:

            that.modules[that.activeModule].moveFocus('next');

            break;

            // список писем
        case 2:
            if (Daria.Page.type === 'messages' || Daria.layout !== '2pane') {
                if (Daria.Table.active) {
                    Daria.Table.active.moveCurrentDown();
                }
            } else {
                that.scrollPage('down');
            }
            break;

        case 3:
            if (Daria.layout !== '2pane') {
                that.modules.Threepane.moveNext();
            }
            break;
        }

    };

    /**
     * перемещение по папкам/меткам вверх
     */
    that.movePrev = function() {

        if (Daria.Page.type === 'setup') {
            that.scrollPage('up');
            return true;
        }

        switch (that.currentCol) {

            // левая колонка
        case 1:
            that.modules[that.activeModule].moveFocus('prev');

            break;

            // список писем
        case 2:

            if (Daria.Page.type === 'messages' || Daria.layout !== '2pane') {
                if (Daria.Table.active) {
                    Daria.Table.active.moveCurrentUp();
                }
            } else {
                that.scrollPage('up');
            }
            break;

        case 3:
            if (Daria.layout !== '2pane') {
                that.modules.Threepane.movePrev();
            }
            break;

        }

    };

    /**
     * Перемещение фокуса по первой колонке
     * @return {[type]} [description]
     */
    that.move = function(direction) {

        if (Daria.Page.type === 'setup') {
            that.scrollPage(direction === 'next' ? 'down' : 'up');
            return true;
        }

        if (!Jane.$B('folders') || !Jane.$B('folders').visible) {
            return false;
        }

        if (that.currentCol === 2 && !(Daria.Table.active && Daria.Table.active.curRowId) && Daria.Page.type !== 'message') {
            that.selectFirstMail();
            return false;
        }

        if (direction === 'next') {
            that.moveNext();
        } else {
            if (that.loadMore.focused) {
                that.loadMore.button.find('input').blur();
                that.loadMore.focused = false;
                Daria.Table.active.setCurrent(Daria.Table.active.curRowId);
            } else {
                that.movePrev();
            }
        }
    };

    /**
     * Октрываем папку/метку или письмо
     */
    that.open = function() {

        switch (that.currentCol) {

            // левая колонка
        case 1:

            // открываем папку/метку
            that.modules[that.activeModule].open();

            break;

            // вторая колонка.
        case 2:

            if (Daria.Page.type !== 'messages') {
                return true;
            }

            // если фокус на кнопке "Ещё письма"
            if (that.loadMore.focused) {
                that.loadMore.button.trigger('click');
                break;
            }

            // открываем тред/письмо
            if (Daria.Table.active) {

                if (Daria.layout === '2pane') {
                    Daria.Table.active.openCurrent();

                    // DARIA-19205
                    if (Daria.Page.params.search === "yes") {
                        var link = $(Daria.Table.active.getRow(Daria.Table.active.curRowId).tr).find('.b-messages__message__link').attr('href');
                        Jane.Page.go(link);
                    }

                } else {
                    /* не используем Daria.Page.params.thread_id потому что он мог устареть
                       при быстром скроле по списке с помощью клавиатуры */
                    var current = Daria.Table.active.curRowId;
                    var tid = current.replace(/^t/, '');

                    // если активен тред
                    if (current && tid !== current) {

                        // кликаем по кнопке раскрытия треда
                        $('.tid-' + tid)
                            .find('[data-action="thread.toggle"]:first')
                            .trigger('click');

                    }
                }
            }
            break;

            // Третья колонка (тред/письмо в 3pane).
        case 3:
            that.modules.Threepane.openCurrentMsg();
            break;

        }
    };

    /**
     * проверяет, что target является полем ввода
     * @param  {DOM} target ссылка на DOM элемент
     * @return {Boolean}
     */
    that.checkIsInput = function(target) {
        var name = target.tagName.toLowerCase();
        var type = target.type;
        return (name === 'input' && $.inArray(type, ['text', 'password', 'file', 'search']) > -1) || name === 'textarea';
    };

    /**
     * Вызывает попап с контактами, либо диалог выбора файла для аттача
     * в зависимости от того, в каком из полей стоял курсор
     *
     * @param  {Event} e
     * @param  {String} mode Откуда вызываем quickreply или compose
     */
    that.attach = function(e, mode) {

        // var target = e.target;
        // var notInSubjectInput = true;

        // проверяем, находится ли курсор в инпуте
        // if (self.checkIsInput(target)) {

        //     notInSubjectInput = false;

        //     // проверяем, что курсор в поле "to/cc/bcc"
        //     if (target.className.indexOf('js-add-contact') !== -1) {
        //         var $addPerson = $(target).closest('.b-mail-input').find('.js-kbd-add-person');

        //         if ($addPerson.length) {
        //             $addPerson.click();
        //         }
        //         return true;
        //     }
        // }

        // TODO FIXME в IE 8,9 система безопасности не позволяет кликать мышкой
        // по кнопке с выбором файлов. Но это как-то можно обойти
        if (!Modernizr.msie) {

            // раскрываем вкладку для аттачей в quickreply-е
            // в compose ее нет
            if (mode === 'quickreply') {
                try {
                    Jane.Actions.run('quick-reply.expand-attach');
                } catch(err) {
                    // Opera кидает некритичную ошибку в Compose
                    // которую мы игнорим
                }
            }

            $('.js-input-file input:visible').trigger('click');
        }
    };

    /**
     * Октрываем выпадушку с папками/метками.
     * Просто эмулируем клик на кнопке.
     * @param {String} module может быть labels или folders
     * @param {Boolean} [showWarning] если установлен в true и не выбрано ни одного письма - покажет ворнинг
     */
    that.openDropdown = function(module, showWarning) {

        if (showWarning && that.modules.Messages.countSelected() === 0) {

            // если писем в фокусе нет, то показываем сообещние и выходим из функции
            if (this.checkFocusedOrShowMessage()) {
                return false;
            }
        }

        var dropdownLink = $('.js-kbd-' + module + ':visible:first');

        // в 3pane (только если не выбрано ни одного письма) нужно кликать другую кнопку
        if (Daria.layout !== '2pane' && Daria.Table.active && Daria.Table.active.checkboxTree.count === 0) {
            dropdownLink = $('.b-message-toolbar:visible .js-kbd-' + module + ':visible', that.modules.Threepane.getCurrentMsgNode());
        }

        // кликаем по выпадушке с папками
        if (dropdownLink.length > 0) {
            dropdownLink.trigger('click');
        }
    };

    /**
     * Ставит фокус на первом письме в списке
     * @return {[type]} [description]
     */
    that.selectFirstMail = function() {
        if (that.currentCol === 2 && Daria.Table.active && Daria.Table.active.rows.length) {
            if (Daria.Table.active.curRowId) {
                Daria.Table.active.unsetCurrent(Daria.Table.active.curRowId);
            }
            Daria.Table.active.curRowId = Daria.Table.active.getRow(Daria.Table.active.rows[0].id).id;
            Daria.Table.active.setCurrent(Daria.Table.active.rows[0].id);

            // для 3pane убираем фокус с письма
            if (Daria.layout !== '2pane' && typeof that.modules !== 'undefined') {
                that.modules.Threepane.removeFocus();
            }
        }
    };

    /**
     * Слушаем события
     */
    that.bindEvents = function() {

        // binded functions для bind и unbind
        that.bindedMessageAction = (that._messageActionHandler).bind(that);
        that.bindedRemoveChecked = (that._removeCheckedIfNeeded).bind(that);

        // слушаем событие от Table о том, что пользователь достиг конца списка и нам
        // нужно активизировать кнопку "Ещё письма"
        Jane.events.bind('last-email-focused', that._lastEmailHandler = function() {
            that.loadMore.button = $('.js-load-more-button:visible');

            if (that.loadMore.button.length > 0) {
                that.loadMore.button.find('input').focus();
                Daria.Table.active.unsetCurrent(Daria.Table.active.curRowId);
                that.loadMore.focused = true;
                that.scrollTop(that.loadMore.button);
            }
        });

        // после перемещения писем обновляем выделение
        Jane.events.bind('message.action.complete', that.bindedMessageAction);

        // при смене типа страницы пытаемся заново инициализировать данные
        Jane.events.bind('pageType.change', that._pageTypeHandler = function() {

            that.modules[that.activeModule].removeFocus();
            that.currentCol = 2;

            // if (self.currentCol === 2) {
            //     self.selectFirstMail();
            // }
        });

        // событие об очищении папки
        Jane.events.bind('folder.cleared', that._folderClearedHandler = function() {
            that.folder_clear = true;
        });

        Jane.events.bind('dropdowns-closed', that.bindedRemoveChecked);

    };

    /**
     * Перестаём слушать какие-бы то ни было события
     * @return {[type]} [description]
     */
    that.unbindEvents = function() {
        Jane.events.unbind('last-email-focused', that._lastEmailHandler);
        Jane.events.unbind('pageType.change', that._pageTypeHandler);
        Jane.events.unbind('folder.cleared', that._folderClearedHandler);
        Jane.events.unbind('message.action.complete', that.bindedMessageAction);
        Jane.events.unbind('dropdowns-closed', that.bindedRemoveChecked);
        delete that.initiated;

    };

    /**
     * Переключает активную колонку
     * @param {Number} col номер колонки 1-3
     */
    that.setActiveColumn = function(col) {
        if (that.currentCol !== col) {
            that.modules[that.activeModule].removeFocus();
            that.currentCol = col;
        }
    };

    /**
     * Убирает фокус отовсюду
     */
    that.shutdown = function() {
        that.modules[that.activeModule].removeFocus();
        if (Daria.Table.active) {
            Daria.Table.active.removeVisualFocusFromCurrent();
        }
        that.unbindEvents();
    };

    /**
     * После перемещения писем обновляем выделение, если необходимо снимем чекбокс
     * @private
     */
    that._messageActionHandler = function(actionName, opts) {
        var skipFocus = opts && opts.skipFocus;

        if (Daria.Table.active && Daria.Table.active.curRowId && !skipFocus) {
            setTimeout(that.selectFirstMail, 150);
        }

        this._removeCheckedIfNeeded();
    };

    /**
     * Снимает чекбокс при необходимости
     * @private
     */
    that._removeCheckedIfNeeded = function() {
        if (this.getNeedToRemoveCheckedFlag()) {
            this.removeChecked();
        }
    };

    /**
     * Флаг необходимости убрать чекед
     */
    that._needToRemoveChecked = false;

    /**
     * Геттер флага необходимости убрать чекед
     * @return {boolean} состоятние флага
     */
    that.getNeedToRemoveCheckedFlag = function() {
        return that._needToRemoveChecked;
    };

    /**
     * Сеттер флага необходимости убрать чекед
     * @param {boolean} value необходимое состоятние флага
     */
    that.setNeedToRemoveCheckedFlag = function(value) {
        that._needToRemoveChecked = value;
    };

    /**
     * Если пользователь зафокусил письмо, но не чекнул и других
     * чекнутых писем нет, чекним за него DARIA-23900
     */
    that.checkFocusedOrShowMessage = function() {
        var current = that.modules.Messages.getCurrent();

        if (current !== -1 && Daria.Table.active.curRowIsFocused) {
            var trId = Daria.Table.active.getRow(current).id;
            Daria.Table.active.selectRow(trId, true);
            this.setNeedToRemoveCheckedFlag(true);

            return false;
        } else {
            Daria.MessageAction.warning();
        }

        return true;
    };

    /**
     * Убираем чекбокс с письма которое было в фокусе, но не чекнуто
     */
    that.removeChecked = function() {
        this.setNeedToRemoveCheckedFlag(false);
        var current = that.modules.Messages.getCurrent();
        if (current !== -1 && Daria.Table.active.curRowIsFocused) {
            var trId = Daria.Table.active.getRow(current).id;
            Daria.Table.active.selectRow(trId, false);
        }
    };

    // начальная инициализация
    that.init = function() {

        /**
         * Начальная инициализация
         */

        if (typeof that.initiated !== 'undefined') {
            return false;
        }

        that.$window = $(window);

        that.initiated = true;

        // всего колонок (справедливо и для 2-pane)
        that.columns = 3;

        // триггер, который мы используем для переключающихся действий
        that.oddEven = true;

        // активная колонка
        that.currentCol = 2;

        // self.selectFirstMail();

        // кто по умолчанию получит фокус "папки" или "метки"
        that.activeModule = 'Folders';

        that.$html = $('html');
        that.$viewport = (Modernizr.webkit) ? $('body') : $('html');
        that.$leftColBlock = $(Jane.$B('left-box').getActiveCacheNode());

        // кнопка "Еще письма"
        that.loadMore = {
            focused: false,
            button: $('.js-load-more-button')
        };

        that.bindEvents();
    };

    that.init();

    that.modules = {
        Folders: that.Folders(Daria, $),
        Labels: that.Labels(Daria, $),
        Messages: that.Messages(Daria, $),
        Collectors: that.Collectors(Daria, $),
        Threepane: that.Threepane(Daria, $)
    };

    return {

        move: that.move,
        open: that.open,
        toggleFolder: that.modules.Folders.toggle,
        deleteOrEmpty: that.deleteOrEmpty,
        changeColumn: that.changeColumn,
        changeColumnToFirstPane: that.changeColumnToFirstPane,
        changeColumnToSecondPane: that.changeColumnToSecondPane,
        messagesRun: that.modules.Messages.run,
        openDropdown: that.openDropdown,
        markImportant: that.markImportant,
        selectFirstMail: that.selectFirstMail,
        shutdown: that.shutdown,
        init: that.init,
        scrollPage: that.scrollPage,
        attach: that.attach,
        selectInbox: that.modules.Folders.selectInbox,
        getCurrentMsg: that.modules.Messages.getCurrent,
        checkFocusedOrShowMessage: that.checkFocusedOrShowMessage,
        removeChecked: that.removeChecked,
        _messageActionHandler: that._messageActionHandler,
        getActiveMessageNode: that.modules.Threepane.getActiveMessageNode,
        activeMessageIsEmpty: that.modules.Threepane.activeMessageIsEmpty,
        setNeedToRemoveCheckedFlag: that.setNeedToRemoveCheckedFlag,
        getNeedToRemoveCheckedFlag: that.getNeedToRemoveCheckedFlag,
        _removeCheckedIfNeeded: that._removeCheckedIfNeeded,

        getCurrentCol: function() {
            return that.currentCol;
        }
    };
};

/**
 * Работа со списком писем
 */
Focus.prototype.Messages = function(Daria) {

    var messages = {
        parent: this
    };

    /**
     * @return {String} возвращает ID выбранного письма или -1
     */
    messages.getCurrent = function() {

        if (Daria.layout === '2pane') {

            return (Jane.Page.type === 'message') ?
                Jane.Page.params.ids :
                (Daria.Table.active && Daria.Table.active.curRowId) ?
                Daria.Table.active.curRowId :
                -1;

        } else {

            if (Daria.Page.params.hasOwnProperty('ids')) {
                // единичное письмо
                return Daria.Page.params.ids;

            } else {
                // у нас тред
                var mid = messages.parent.modules.Threepane.getCurrentMsgId();
                return mid;
            }

        }
    };

    /**
     * @return {Number} возвращает количество выбранных писем
     */
    messages.countSelected = function() {
        return (Jane.Page.type === 'messages' && Daria.Table.active) ?
            Daria.Table.active.checkboxTree.count :
            0;
    };

    /**
     * Запускает заданное действие над письмами, подставляя правильные параметры
     *
     * @param  {String} action      действие
     * @param  {Boolean} [showWarning] если установлен в true и не выбрано ни одного письма - покажет ворнинг
     *
     */
    messages.run = function(action, showWarning, hotkeysFlag, params) {

        if (showWarning && messages.countSelected() === 0) {
            // если писем в фокусе нет, то показываем сообещние и выходим из функции
            if (this.checkFocusedOrShowMessage()) {
                return false;
            }
        }

        var selected = messages.countSelected();

        var specialMail = Jane.watcher.get('toolbar-button:reply:enabled');
        if (specialMail === false) {
            return false;
        }

        params = params || {};

        if (hotkeysFlag) {
            params['hotkeysUsed'] = true;
        }

        if (selected > 0) {
            Jane.Actions.run(action, {}, params);
        } else {
            var current = messages.getCurrent();

            if (/^t/.test(current)) {
                params['thread-id'] = current.replace(/^t/, '');
            } else {
                params['message-id'] = current;
            }
            Jane.Actions.run(action, {}, params);
        }

    };

    return {
        getCurrent: messages.getCurrent,
        run: messages.run,
        countSelected: messages.countSelected
    };

};

Focus.prototype.Threepane = function(Daria, $) {

    var threepane = {
        parent: this,
        messagesList: [],
        curIdx: -1,
        container: null
    };

    threepane.setFocus = function() {
        threepane.sync();
        threepane.setActive(0);
    };

    threepane.setActive = function(idx) {
        if (idx < 0 || idx > threepane.messagesList.length - 1) {
            return;
        }

        threepane.removeFocus();
        threepane.messagesList.eq(idx).addClass('b-message_focus');
        threepane.curIdx = idx;
    };

    threepane.sync = function() {
        threepane.container = $(Jane.$B('messages-box').getActiveCacheNode()).find('.b-layout__inner');
        threepane.messagesList = threepane.container.find('.b-message');
    };

    threepane.removeFocus = function() {
        if (threepane.messagesList.length) {
            threepane.messagesList.removeClass('b-message_focus');
        }
        threepane.curIdx = -1;
    };

    threepane.moveNext = function() {
        var msgsLen = threepane.messagesList.length;

        if (msgsLen) {
            if (msgsLen === 1) {
                threepane.parent.scrollPage('down');
            } else {
                var elemBottom = threepane.getCurrentMsgNode().rect().bottom;
                var container = threepane.container[0];
                var visibleHeight = container.scrollTop + container.offsetHeight;

                if (((elemBottom > visibleHeight) || (container.scrollTop + elemBottom > visibleHeight)) && visibleHeight < container.scrollHeight) {
                    threepane.parent.scrollPage('down');
                } else {
                    threepane.setActive(threepane.curIdx + 1);
                }
            }
        }
    };

    threepane.movePrev = function() {
        var msgsLen = threepane.messagesList.length;

        if (msgsLen) {
            if (msgsLen === 1) {
                threepane.parent.scrollPage('up');
            } else {
                var elemTop = threepane.getCurrentMsgNode().rect().top;
                var containerTop = threepane.container.rect().top;

                if (elemTop < containerTop) {
                    threepane.parent.scrollPage('up');
                } else {
                    threepane.setActive(threepane.curIdx - 1);
                }
            }
        }
    };

    threepane.getCurrentMsgNode = function() {
        return threepane.messagesList.eq(threepane.curIdx);
    };

    threepane.openCurrentMsg = function() {
        threepane.getCurrentMsgNode().click();
    };

    threepane.getCurrentMsgId = function() {
        var msg = threepane.messagesList[threepane.curIdx];
        if (msg) {
            var match = msg.className.match(/mid-(\d+)/);
            return (match && match[1]) || null;
        } else {
            return null;
        }
    };

    /**
     * Кривой способ узнать ID первого письма в 3пейне
     * @return {String} возвращает ID первого письма в треде
     */
    threepane.getMailId = function() {

        if (typeof Daria.Page.params.thread_id === 'undefined') {
            return Daria.Page.params.ids;
        } else {
            var deleteBtn = $('.b-message-toolbar:visible .b-message-toolbar__item_delete', this.getCurrentMsgNode());
            var params = deleteBtn.data('params').split('=');
            if (params.length === 2) {
                return params[1];
            }
        }

        return false;
    };

    threepane.getActiveMessageNode = function() {
        return threepane.messagesList[threepane.curIdx] || Jane.$B('messages-box').getActiveCacheNode();
    };

    threepane.activeMessageIsEmpty = function() {
        return !!$('.b-message-empty', threepane.getActiveMessageNode()).length;
    };

    Jane.events.bind('messages-thread.open-body', function() {
        threepane.sync();
        threepane.setActive(threepane.curIdx);
    });

    return {
        setFocus: threepane.setFocus,
        removeFocus: threepane.removeFocus,
        moveNext: threepane.moveNext,
        movePrev: threepane.movePrev,
        getMailId: threepane.getMailId,
        getActiveMessageNode: threepane.getActiveMessageNode,
        openCurrentMsg: threepane.openCurrentMsg,
        getCurrentMsgNode: threepane.getCurrentMsgNode,
        getCurrentMsgId: threepane.getCurrentMsgId,
        activeMessageIsEmpty: threepane.activeMessageIsEmpty
    };

};

/**
 * Грязные клавиатурные действия над списком меток
 */
Focus.prototype.Labels = function(Daria, $) {

    var labels = {
        parent: this
    };

    /**
     * Октрываем папку с меткой
     */
    labels.open = function() {
        var activeLabel = labels.list[labels.pos];
        Jane.Page.go($('.lid-' + activeLabel, Jane.$B('labels').getCacheNode()).attr('href'));
    };

    /**
     * Добавляет CSS класс к выбранному сборщику
     *
     * @param {Number} [id] индекс папки в labels.list. По умолчанию используется labels.pos
     */
    labels.setFocus = function(id) {
        var bLabels = Jane.$B('labels');

        if (!bLabels) {
            return;
        }

        if (typeof id !== 'undefined') {

            labels.removeFocus();

            if (id === 'last') {
                id = labels.last;
            } else {
                id = 0;
            }
            labels.pos = id;

        } else {
            id = labels.pos;
        }

        var $el = $('.lid-' + labels.list[id], bLabels.getCacheNode());
        $el.addClass('b-labels__label_focus');

        labels.parent.scrollTop($el);

    };

    /**
     * Убирает фокус с активного сборщика
     */
    labels.removeFocus = function() {
        var bLabels = Jane.$B('labels');
        if (bLabels) {
            $('.b-label, .jane-nav-column-label', bLabels.getCacheNode()).removeClass('b-labels__label_focus');
        }
    };

    /**
     * Перемещение курсора по сборщикам вверх/вниз
     *
     * @param  {String} direction направление next/prev
     */
    labels.moveFocus = function(direction) {

        if (direction === 'next') {

            if (labels.pos < labels.list.length - 1) {

                labels.removeFocus();
                labels.pos++;
                labels.setFocus();

            } else {

                if (Daria.layout === '2pane' && labels.parent.modules.Collectors.countCollectors() > 0) {
                    // перемещение к сборщикам
                    labels.removeFocus();
                    labels.parent.activeModule = 'Collectors';
                    labels.parent.modules.Collectors.setFocus(0);
                }
            }
        }

        if (direction === 'prev') {

            // перемещение к предыдущей метке
            if (labels.pos > 0) {
                labels.removeFocus();
                labels.pos--;
                labels.setFocus();

            } else {

                labels.removeFocus();
                labels.pos = 0;

                // перемещение к папкам
                labels.parent.modules.Folders.setFocus('last');
                labels.parent.activeModule = 'Folders';

            }

        }

    };

    /**
     * Инициализируем начальные значения, когда страница загрузилась
     * и у нас уже есть данные от хэндлеров
     */
    labels.list = [];
    labels.pos = 0;

    // слушаем событие смены страницы
    // необходимо для того, чтобы получать список меток при смене layout'ов.
    // HACK TODO FIXME
    //
    // Зачем это сделано: при смене layout страница обновляется и присходит инициализация
    // данных для управления фокусом. На странице ищется список меток, и происходит парсинг меток внутри.
    // Понятно, что на странице настроек никаких меток нет и получается пустой список.
    //
    // При обновлении страницы мы будет проверять, есть ли у меток список или нет. Если нет, то он будет
    // пытаться обновиться.
    //
    // В самом шаблоне список отображаемых меток сейчас получается нетривиальным путём
    // (подробности в labels.yate). Очень не хочется дублировать здесь
    // эту логику, т.к. тогда придётся при любом изменении логики показа меток делать
    // исправления в двух местах.
    //
    //
    labels.updateLabelsList = function() {
        var bLabels = Jane.$B('labels');

        if (!bLabels) {
            return;
        }

        labels.list = [];

        // генерим список ID меток
        var re = /.*\slid-(.*?)\s.*/;

        $('.b-label.js-kbd-nav, .jane-nav-column-label.js-kbd-nav:visible', bLabels.getCacheNode()).each(function(i, el) {
            var lid = el.className.replace(re, "$1");
            labels.list.push(lid);
            if (el.className.match('b-label_selected')) {
                labels.pos = i;
                labels.parent.activeModule = 'Labels';
            }
        });

        labels.last = labels.list.length - 1;
    };

    labels.updateLabelsList();

    Jane.events.bind('shortcuts.update-labels-list', function() {
        labels.updateLabelsList();
    });

    return {
        open: labels.open,
        moveFocus: labels.moveFocus,
        setFocus: labels.setFocus,
        removeFocus: labels.removeFocus
    };

};

/**
 * Грязные клавиатурные действия над списком папок
 */
Focus.prototype.Collectors = function(Daria, $) {

    var collectors = {
        parent: this
    };

    /**
     * Октрываем папку с меткой
     */
    collectors.open = function() {
        var activeLabel = collectors.list[collectors.pos];
        Jane.Page.go($('.b-label[data-popid=' + activeLabel + ']', Jane.$B('collectors').getCacheNode()).attr('href'));
    };

    /**
     * Добавляет CSS класс к выбранному сборщику
     *
     * @param {Number} [id] индекс папки в collectors.list. По умолчанию используется collectors.pos
     */

    collectors.setFocus = function(id) {
        var bCollectors = Jane.$B('collectors');

        if (!bCollectors) {
            return;
        }

        if (typeof id !== 'undefined') {
            collectors.removeFocus();
            collectors.pos = id;
        }

        var $el = $('.b-label[data-popid=' + collectors.list[collectors.pos] + ']', bCollectors.getCacheNode());
        $el.addClass('b-collectors__focus');

        collectors.parent.scrollTop($el);

    };

    /**
     * Убирает фокус с активной сейчас папки
     */
    collectors.removeFocus = function() {
        var bCollectors = Jane.$B('collectors');

        if (bCollectors) {
            $('.b-label, .jane-nav-column-label', bCollectors.getCacheNode()).removeClass('b-collectors__focus');
        }
    };

    /**
     * Перемещение курсора по меткам вверх/вниз
     *
     * @param  {String} direction направление next/prev
     */
    collectors.moveFocus = function(direction) {

        if (collectors.length === 0) {
            return false;
        }

        if (direction === 'next' && collectors.pos < collectors.list.length - 1) {
            collectors.removeFocus();
            collectors.pos++;
            collectors.setFocus();
        }

        if (direction === 'prev') {

            // перемещение к предыдущей метке
            if (collectors.pos > 0) {
                collectors.removeFocus();
                collectors.pos--;
                collectors.setFocus();

            } else {
                collectors.removeFocus();
                collectors.pos = 0;

                // перемещение к меткам
                collectors.parent.modules.Labels.setFocus('last');
                collectors.parent.activeModule = 'Labels';
            }

        }

    };

    collectors.list = [];
    collectors.pos = 0;

    collectors.updateCollectorsList = function() {
        var hCollectors = Jane.$H('collectors');

        if (!hCollectors || !hCollectors.data) {
            return;
        }

        collectors.list = [];

        // получаем список сборщиков
        var data = hCollectors.data;
        for (var i = 0, len = data.length; i < len; i++) {
            collectors.list.push(data[i].popid);
        }
    };

    collectors.updateCollectorsList();

    Jane.events.bind('shortcuts.update-collectors-list', function() {
        collectors.updateCollectorsList();
    });

    return {
        open: collectors.open,
        moveFocus: collectors.moveFocus,
        setFocus: collectors.setFocus,
        removeFocus: collectors.removeFocus,
        countCollectors: function() {
            return collectors.list.length;
        }
    };

};

/**
 * Грязные клавиатурные действия над списком папок
 */
Focus.prototype.Folders = function(Daria, $) {

    var folders = {
        parent: this
    };

    /**
     * Очищение текущей папки
     */
    folders.empty = function() {
        if (Jane.$H('folders').getCount(folders.current) > 0) {
            Jane.Actions.run("folder.clear", {fid: folders.current});
        }
    };

    /**
     * Добавляет CSS класс к выбранной папке
     */
    folders.setFocus = function(fid) {
        var bFolders = Jane.$B('folders');

        if (!bFolders) {
            return;
        }

        if (fid === -1) {
            return false;
        }

        if (typeof fid !== 'undefined') {
            folders.removeFocus();
            folders.current = (fid === 'last' ? folders.last : fid);
        }

        var $el = $('.fid-' + folders.current, bFolders.getCacheNode()).addClass('b-folders__folder_focus');
        folders.parent.scrollTop($el);
    };

    folders.selectInbox = function() {

        Jane.Page.go('#inbox', function() {

            //фокус на первую колонку
            if (folders.parent.getCurrentCol !== 1) {
                folders.parent.changeColumn('left');
            }

            folders.parent.modules[folders.parent.activeModule].removeFocus();
            folders.parent.activeModule = 'Folders';

            // выделяем inbox
            var inboxFid = Jane.$H('folders').getFolderBySymbol('inbox').fid;
            folders.setFocus(inboxFid);
            Jane.$B('toolbar').toolbar.toggleFixed(false);
        });
    };

    /**
     * Убирает фокус с активной сейчас папки
     */
    folders.removeFocus = function() {
        var bFolders = Jane.$B('folders');
        if (bFolders) {
            $('.b-folders__folder', bFolders.getCacheNode()).removeClass('b-folders__folder_focus');
        }
    };

    /**
     * Возвращает индекс следующий видимой папки. По умолчанию, начинает
     * отсчёт от текущей позиции.
     *
     * Если дальше видимых папок нет, возвращает -1
     *
     * @return {Number}
     */
    folders.getNextVisibleFolderIndex = function(direction) {

        var list = $('.b-folders').find('.b-folders__folder:visible');

        // вырезает из класснейма всё, кроме идентификатора папки
        var evilRE = /^(?:.*\s)?fid-(.*?)(?:\s.*)?$/;

        for (var i = 0; i < list.length; i++) {

            // ищем текущую папку
            if (list[i].className.match(' fid-' + folders.current)) {

                if (direction === 'next') {
                    return (i + 1 < list.length) ?
                        list[i + 1].className.replace(evilRE, "$1") :
                        -1;
                } else {
                    return (i - 1 >= 0) ?
                        list[i - 1].className.replace(evilRE, "$1") :
                        -1;
                }
            }
        }

        return -1;
    };

    /**
     * Перемещает фокус по списку (вверх/вниз)
     * @param  {String} direction направление (next/prev)
     */
    folders.moveFocus = function(direction) {

        var nextFolderId = folders.getNextVisibleFolderIndex(direction);

        if (direction === 'next') {

            // перемещаемся к меткам
            if (nextFolderId === -1) {

                folders.removeFocus();

                folders.parent.activeModule = 'Labels';
                folders.parent.modules.Labels.setFocus(0);

                // перемещаемся к следующей папке
            } else {
                folders.setFocus(nextFolderId);
            }
        }

        if (direction === 'prev') {

            if (nextFolderId > -1) {
                folders.setFocus(nextFolderId);
            }
        }

        return;
    };

    /**
     * Открывает/закрывает папку под курсором
     */
    folders.toggle = function() {

        if (!Jane.$B('folders') || !Jane.$B('folders').visible) {
            return false;
        }

        var $folder = $('.fid-' + folders.current, Jane.$B('folders').getCacheNode());
        var $handle = $folder.find('.b-folders__nesting__handle');

        if ($handle.length) {
            $handle.trigger('click');
        }

        return false;

    };

    /**
     * Открывает папку
     */
    folders.open = function() {

        if (!Jane.$B('folders') || !Jane.$B('folders').visible) {
            return false;
        }

        var hash = $('.fid-' + folders.current, Jane.$B('folders').getCacheNode()).find('.b-folders__folder__link').last().attr('href');
        Jane.Page.go(hash, function() {
            var table = Daria.Table.active;

            if (table) {
                if (table.curRowId) {
                    table.unsetCurrent(table.curRowId);
                }

                if (table.rows.length) {
                    table.curRowId = table.getRow(table.rows[0].id).id;
                    // так как свойство curRowId определяется неявно, сбросим флаг фокуса
                    table.curRowIsFocused = false;
                }
            }
        });
    };

    /**
     * Инициализируем начальные значения, когда страница загрузилась
     * и у нас уже есть данные от хэндлеров
     */
    folders.updateFoldersList = function() {

        folders.list = Jane.$H('folders').data.folder;

        folders.$B = Jane.$B('folders');

        folders.last = Jane.$H('folders').ids.draft;

        if (typeof folders.$B !== 'undefined') {
            // выбранная папка
            folders.current = folders.$B && folders.$B.selected || Jane.$H('folders').data.folder[0].fid;
        }

        if (folders.parent.currentCol === 1 && !folders.initiated) {
            folders.setFocus();
        }
        folders.initiated = 1;

    };

    folders.updateFoldersList();

    Jane.events.bind('shortcuts.update-folders-list', function() {
        folders.updateFoldersList();
    });

    // слушаем событие о сворачивании/разворачивании папок
    // DARIA-18544
    Jane.events.bind('folder.switch-open', function(e, params) {

        folders.list = Jane.$H('folders').data.folder;

        if (params['type'] === 'fold') {
            var folder = $('.fid-' + folders.current + ':visible');
            if (folder.length === 0) {
                folders.moveFocus('prev');
            }
        }

    });

    return {
        open: folders.open,
        moveFocus: folders.moveFocus,
        setFocus: folders.setFocus,
        toggle: folders.toggle,
        removeFocus: folders.removeFocus,
        empty: folders.empty,
        selectInbox: folders.selectInbox
    };

};

/* ../../js/components/focus.js end */


    // событие при изменении настроек
    Jane.events.bind('toggleShortcuts', function(e, value) {
        self.toggleHotkeys(value);
    });

    // слушаем событие загрузки страницы
    Jane.events.bind('pageinit', function() {
        self.toggleHotkeys(Jane.$H('settings').getSetting('enable_hotkeys'));
    });

    // смена типа страницы
    Jane.events.bind("pageType.change", function(e, diff) {

        self.pageType = diff.value;

        if (!self.eventsBound) {
            return false;
        }

        if (self.hotkeysEnabled) {

            $.Shortcuts.switchList(self.pageType);

        }
    });

    // изменение настроек
    self.toggleHotkeys = function(value) {
        Daria.Shortcuts.hotkeysEnabled = self.hotkeysEnabled = { 'on': true, 'off': false }[value];

        if (self.hotkeysEnabled) {

            if (!self.eventsBound) {

                self.bindLists(self.pageType);

                Daria.Focus = new Focus(Daria, $);

                /**
                 * Поддержка хоткеев для режима Quick/Reply
                 * @param {Event} e.action действие open/close
                 */
                Jane.events.bind('quickreply.toggle', function(e, data) {

                    if (data.action === 'open') {

                        $.Shortcuts.enableList('quickreply');

                    } else {

                        $.Shortcuts.disableList('quickreply');

                    }
                });

                /**
                 * Слушаем событие минимизации
                 */
                Jane.events.bind("minify", function() {

                    // проверим, что включили минимизацию и фокус был в первой колонке
                    if (Jane.$H("settings").getSetting('hide_daria_left') === "on" && Daria.Focus.getCurrentCol() === 1) {
                        Daria.Focus.changeColumn('right');
                    }
                });

            } else {

                // это нужно для редкого случая, когда злобный
                // тестер включает/выключает хоткеи в настройках по нескольку раз
                Daria.Focus.init();
            }

            $.Shortcuts.start();

        } else {
            // хоткеи только что отключили в настройках и нужно спрятать фокус
            if (typeof Daria.Focus !== 'undefined') {
                Daria.Focus.shutdown();
            }
            $.Shortcuts.stop();
        }
    };

    /**
     * Подгружает все списки хоткевв
     * @return {[type]} [description]
     */
    self.bindLists = function(activeList) {

        for (var i = self.shortcuts.length - 1; i >= 0; i--) {
            $.Shortcuts.loadList(self.shortcuts[i], self.altOS);
        }

        $.Shortcuts.enableList(activeList);

        self.eventsBound = true;
    };

    /**
     * Возвращает маску по id хоткея
     * @param   {String} key хоткей
     * @return  {String} mask
     */
    self._getShortcutMask = function(key, group) {

        for (var i = self.shortcuts.length - 1; i >= 0; i--) {

            if (self.shortcuts[i].name === group) {

                var list = self.shortcuts[i];
                if (list.shortcuts.hasOwnProperty(key)) {
                    return (self.altOS && list.shortcuts[key].altMask) ?
                            list.shortcuts[key].altMask :
                            list.shortcuts[key].mask;
                }
            }

        }
    };

    /**
     * Справка по горячим клавишам
     */
    self.showShortcutsHelp = function() {

        for (var i = self.help.length - 1; i >= 0; i--) {

            var column = self.help[i];

            for (var h = column.hotkeys.length - 1; h >= 0; h--) {

                if (typeof column.hotkeys[h].id !== 'undefined') {
                    var key = self._getShortcutMask(column.hotkeys[h].id, column.id);

                    if (key) {
                        column.hotkeys[h]['key'] = key.replace(/Meta/g, 'Cmd').replace(/\+/g, ' + ');
                    }
                }
            }
        }

        // И ещё мы будем грязно перехватывать нажатие табуляции
        Daria.Dialog.open({
            title: i18n('%Shortcuts_help_screen_title'),
            additionalClass: 'b-shortcuts-list__popup',
            width: 900,
            body: Jane.tt('mail-common:shortcuts-list', {columns: self.help}),
            onopen: function() {
                $(document).on('keydown.shortcutsPopup', function(evt) {
                    if (evt.which === 9) {

                        if (typeof self.popupActiveTab === 'undefined') {
                            self.popupActiveTab = 0;
                        }

                        var list = $('.b-shortcuts-list__item');
                        var next = self.popupActiveTab + 1;

                        if (next >= list.length) {
                            next = 0;
                        }

                        // контент
                        $('.b-shortcuts__list-id-' + self.popupActiveTab).addClass('g-hidden');
                        $('.b-shortcuts__list-id-' + next).removeClass('g-hidden');

                        // меню
                        $(list[self.popupActiveTab]).removeClass('b-shortcuts-list__item_current');
                        $(list[next]).addClass('b-shortcuts-list__item_current');

                        self.popupActiveTab = next;

                        return false;
                    }
                });
            },
            onclose: function() {
                $(document).off('keydown.shortcutsPopup');
                self.popupActiveTab = 0;
            }
        });

    };

    /**
     * Переключение табов в попапе со справкой
     */
    self.switchTab = function(o) {

        if (typeof self.popupActiveTab === 'undefined') {
            self.popupActiveTab = 0;
        }

        // контент
        $('.b-shortcuts__list-id-' + self.popupActiveTab).addClass('g-hidden');
        $('.b-shortcuts__list-id-' + o.params.tab).removeClass('g-hidden');

        // меню
        $('.b-shortcuts-list__item').removeClass('b-shortcuts-list__item_current');
        $(o.event.currentTarget).addClass('b-shortcuts-list__item_current');

        self.popupActiveTab = parseInt(o.params.tab, 10);

    };

    /**
     * Публичный метод для получения комбинации хоткея.
     *
     * @param {string} key Название экшена для хоткея
     * @param {string} group Название группы к которой он относится
     * @param {boolean} withParentheses Флаг для форматирования хоткея
     * @return {string} Хоткей
     */
    self.getShortcutLabelFor = function(key, group, withParentheses) {

        // Добавим Cmd для MacOS, отступы между символами
        var label = self._getShortcutMask(key, group).replace(/Meta/g, 'Cmd').replace(/\+/g, ' + ');

        if (withParentheses) {
            // Форматированный вывод
            return ' (' + label + ')';
        } else {
            // "Сырой" вывод
            return label;
        }
    };

    // чтобы отключить ВСЕ промо хоткеев, достаточно убрать этот инклюд
    /* ../../js/components/shortcuts-promo.js begin */
/* global Daria, $, Jane, i18n, self */
/*
 * Этот файл подключается в shortcuts.js
 *
 * Таблица сопоставления кодов(code) с хоткеями
 * compose.js - a(Ctrl-s)
 * wrapper.js - b(U),c(I)
 * delete.js - d(M)
 * label.js - e(L)
 * mark.js - f(Q),g(U)
 * nextprev.js - h(N/K),i(P/J)
 * reply.js - j(Shift-E),o(Shift-R)
 * quick-reply.js - k(Ctrl-s),l(Shift-R),m(Shift-E)
 * js/components/table.js - n(Shift-&#8595)
 * statusline after bubble has code 'p'!
 * */

/**
 * Промо хоткеев.
 *
 * DARIA-19516
 * DARIA-19514
 * DARIA-19537
 *
 * БОльшая часть кода находится в этом файле, однако, когда придёт момент вычищения промо хоткеев,
 * необходимо будет погрепать исходники.
 *
 * 1) Баблы
 *    вычистить все вызовы Jane.Actions.run('trigger-hotkeys-promo-bubble');
 *
 * 2) Done
 *    в файле compose-done.js посмотреть на комментарии TODO. Так указано, что нужно удалить
 *    вычистить все вызовы Jane.Actions.run('hotkeys-promo-save', {}, {type: 'done'});
 *
 * 3) Statusline
 *    ничего специально чистить не надо
 *
 * 4) В shortcuts.styl убрать инклюд shortcuts-promo.styl и удалить каталог с картинками promo внутри b-shortcuts
 *
 */

// списки горячих клавиш для промо-статус полоски хоткеев
self.shortcuts.push({
    name: 'promo',
    shortcuts: {

        '_PromoHotkeys': {
            mask: 'Ctrl,Meta,Shift,Alt,pageup,pagedown,up,down,left,right,space,tab,f9,w,i,u,enter,cmd,?',
            action: 'trigger-hotkeys-stickyline'
        },

        '_PromoHelp': {
            mask: 'Shift+?,Shift+comma,Shift+7,7',
            type: 'hold',
            handler: function() {
                Jane.Actions.run('show-hotkeys-list', {}, {type: 'stickyline'});
            }
        },

        '_CancelPromo': {
            mask: 'Esc',
            handler: function() {
                Daria.ShortcutsPromo.removePromos();
            }
        }
    }
});

// форсируем включение наших упячечных промо хоткеев
Jane.events.bind("pageinit", function() {
    if (self.hotkeysEnabled && Daria.ShortcutsPromo.doWeNeedToShowPromo('stickyline')) {
        $.Shortcuts.modalListOn('promo');
    }
});

Daria.ShortcutsPromo = (function(Daria, $) {
    "use strict";

    var self = {
        params: {},

        // флаг, показывающий, есть ли хоть одно активное промо сейчас
        promoActive: false,

        // флаг отправки письма с помощью хоткея
        sentWithShortcuts: false,

        // флаг альтернативной ОС
        altOS: (navigator.platform.toLowerCase().indexOf('mac') === 0)
    };

    self.promoBubbleParams = {
        'Label_unread': {
            'hotkey1': 'U',
            'hotkey2': '',
            title: i18n('%Shortcuts_promo_text_keys9'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys9'),
            code: 'b'
        },
        'Label_important': {
            'hotkey1': 'I',
            'hotkey2': '',
            title: i18n('%Shortcuts_promo_text_keys10'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys10'),
            code: 'c'
        },
        'Save_draft': {
            hotkey1: 'Ctrl',
            hotkey2: 'S',
            code: 'a',
            title: i18n('%Shortcuts_promo_text_keys4'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys4')
        },
        'Folders_dialog': {
            hotkey1: 'M',
            hotkey2: '',
            code: 'd',
            title: i18n('%Shortcuts_promo_text_keys8'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys8')
        },
        'Labels_dialog': {
            hotkey1: 'L',
            hotkey2: '',
            code: 'e',
            title: i18n('%Shortcuts_promo_text_keys7'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys7')
        },
        'Mark_read': {
            hotkey1: 'Q',
            hotkey2: '',
            code: 'f',
            title: i18n('%Shortcuts_promo_text_keys14'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys14')
        },
        'Mark_unread': {
            hotkey1: 'U',
            hotkey2: '',
            code: 'g',
            title: i18n('%Shortcuts_promo_text_keys15'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys15')
        },
        'Goto_next': {
            hotkey1: 'N / K',
            title: i18n('%Shortcuts_promo_text_keys13'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys13'),
            code: 'h'
        },
        'Goto_previous': {
            hotkey1: 'P / J',
            title: i18n('%Shortcuts_promo_text_keys12'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys12'),
            code: 'i'
        },
        'reply-all': {
            hotkey1: 'Shift',
            hotkey2: 'R',
            code: 'o',
            title: i18n('%Shortcuts_promo_text_keys5all'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys5all')
        },
        'reply': {
            hotkey1: 'Shift',
            hotkey2: 'E',
            code: 'j',
            title: i18n('%Shortcuts_promo_text_keys5'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys5')
        },
        'quick-reply.reply': {
            hotkey1: 'Shift',
            hotkey2: 'E',
            code: 'm',
            title: i18n('%Shortcuts_promo_text_keys5'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys5')
        },
        'quick-reply.reply-all': {
            hotkey1: 'Shift',
            hotkey2: 'R',
            code: 'l',
            title: i18n('%Shortcuts_promo_text_keys5all'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys5all')
        },
        'quick-reply.save': {
            hotkey1: 'Ctrl',
            hotkey2: 'S',
            code: 'k',
            title: i18n('%Shortcuts_promo_text_keys4'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys4')
        },
        'messages-check': {
            hotkey1: 'Shift',
            hotkey2: '&#8595;', // стрелка вниз
            code: 'n',
            title: i18n('%Shortcuts_promo_text_keys2'),
            promoTitleStart: i18n('%Shortcuts_promo_bubble_title_keys2'),
            notimeout: true
        }
    };

    // считаем метрику промо хот-кеев
    self.metrika = function() {
        var message = ['hot-keys'];
        $.merge(message, arguments);

        if (Daria.DEBUG) {
            console.log('@metrika promotion hotkeys -> ', message);
        }
        Jane.c(message);
    };

    // обновим данные по показам промо хоткеев
    self.readPromoData = function() {

        // hk_promo –  название образовано от hotkeys_promo
        // но длина ключа в settings ограничена
        self.params = {
            'done': self.parseUrlParams(Jane.$H("settings").getSetting('hk_promo_done')),
            'bubble': self.parseUrlParams(Jane.$H("settings").getSetting('hk_promo_bubble')),
            'stickyline': self.parseUrlParams(Jane.$H("settings").getSetting('hk_promo_stickyline'))
        };
        // DARIA-29937 разово обнуляем показы баблов всем, кто видел их последний раз 3 месяца назад и больше
        if (self.params.bubble.lastTS + Jane.Date.MONTH * 3 < 1395518400000 /*23.03.2014*/) {
            self.params.bubble = {
                count: 0,
                lastTS: 1
            };
        }

    };

    // разбираем строку с параметрами.
    self.parseUrlParams = function(params) {
        var result = {};

        if (typeof params === 'undefined' || params === '') { //
            return {};
        }

        params = params.replace(/&amp;/g, '&').split('&');

        for (var i = 0, pair, lp, rp; i < params.length; i += 1) {
            pair = params[i].split('=');
            lp = pair[0];
            rp = pair[1];
            result[lp] = isNaN(rp) ? rp : parseInt(rp, 10);
        }
        return result;
    };

    /**
     * Определяет, прошло ли заданное количество дней с момента TS.
     * Использует локальное время пользователя.
     * @param  {Number} ts          timestamp
     * @param  {Number} daysNumber количество дней
     * @return {Boolean}
     */
    var nDaysPassed = self.nDaysPassed = function(ts, daysNumber) {
        daysNumber = (typeof daysNumber !== 'undefined') ? daysNumber : 1;

        if (typeof ts === 'undefined') {
            return true;
        }

        return (ts + 1000 * 60 * 60 * 24 * daysNumber < Daria.now()) || false;
    };

    /**
     * Определяет, прошло ли заданное количество недель с момента TS.
     * Использует локальное время пользователя.
     * @param  {Number} ts          timestamp
     * @param  {Number} weeksNumber количество недель
     * @return {Boolean}
     */
    self.nWeeksPassed = function(ts, weeksNumber) {
        weeksNumber = (typeof weeksNumber !== 'undefined') ? weeksNumber : 1;

        if (typeof ts === 'undefined') {
            return true;
        }

        return nDaysPassed(ts, 7 * weeksNumber);
    };

    /**
     * возвращает true, если такая комбинация клавиш уже показывалась
     */
    self.isShowed = function(code) {
        var codes = self.params.bubble.codes || '';
        if (!code) {
            return true;
        }
        return codes.indexOf(code) > -1;
    };

    /**
     * возвращает true, если number определен и < x
     */
    self.isLess = function(number, x) {
        return (typeof number !== 'undefined' && number < x) || false;
    };

    /**
     * Проверим, сколько раз мы уже спамили пользователя нашим промо
     * @param {String} type тип промо
     * @param {[Object]} params Дополнительные параметры
     */
    self.doWeNeedToShowPromo = function(type, params) {

        // если сейчас показывается промо todo, то хоткеи не показываем
        if (Jane.$H('settings').isSet('todo_promo')) {
            return false;
        }
        // проверим, что у нас уже прочитаны какие-то данные
        if (typeof self.params.done === 'undefined') {
            self.readPromoData();
        }

        // если нет данных, то значит мы ещё не показывали промо
        if (typeof self.params[type] === 'undefined') {
            return true;
        }

        var checkCount;
        var checkTS;

        // IS_KCUF - Все промо хот-кеев надо закрыть на настройку от конкурентов.
        // hotkeysEnabled - не показываем промо если хотке не включены
        if (self.promoActive || Daria.IS_KCUF || !Daria.Shortcuts.hotkeysEnabled) {
            return false;
        }

        switch (type) {

            // промо на Done DARIA-19537
        case 'done':

            // DARIA-21786
            //- показывать надо 1 раз в день в течение недели.
            checkCount = self.isLess(self.params.done.count || 0, 7);
            checkTS = self.nDaysPassed(self.params.done.lastTS);

            /*
             убедимся, что мы показали промо меньше 5 раз
             и прошла, как минимум, неделя с прошлого показа
             */
            return checkCount && checkTS;


            // промо бабл DARIA-19516
        case 'bubble':
            self.setBubbleHowUnshown();

            // DARIA-21786
            //- период времени между показами - 24 часа
            checkTS = self.nDaysPassed(self.params.bubble.lastTS);

            // DARIA-21786
            //- каждый бабл (их всего 12) должен показаться пользователю только один раз.
            checkCount = !self.isShowed(params && params.code);

            // никогда не показываем бабл на done
            if (Daria.Page.type === 'done') {
                return false;
            }

            /*
            убедимся, что мы показали промо меньше 2 раз
            и прошла, как минимум, неделя с прошлого показа
            */
            return checkCount && checkTS;


            // промо полоска
        case 'stickyline':

            // Не показываем стикилайн для незакрытого апдейтера
            if (!Daria.getCookie('hide-browser-updater')) {
                return false;
            }

            // если уже был промо бабл
            // теперь вообще не показываем статуслайн
            // DARIA-21786
            // - если бабл уже хоть раз был показан, статус-лайн показаться не должен.
            if (self.params.bubble.lastTS) {
                return false;
            }

            checkCount = self.isLess(self.params.stickyline.count || 0, 1);
            checkTS = self.nWeeksPassed(self.params.stickyline.lastTS);

            /*
            убедимся, что мы показали промо меньше 2 раз
            и прошла, как минимум, неделя с прошлого показа
            */
            return checkCount && checkTS;


            // no default
        }

        return false;
    };
    /**
     * DARIA-29937 Делает настройку чтобы бабл показался еще раз, если время пришло
     */
    self.setBubbleHowUnshown = function() {
        $.each(self.params.bubble, function(code,time) {
            if (code.length === 1 && time < Daria.now()) {
                delete self.params.bubble[code];
                self.params.bubble.codes = self.params.bubble.codes.replace(code, '');
                self.params.bubble.count -= 1;
            }
        });
    };
    /**
     * После показа всех 12 баблов показать еще один статус-лайн
     */
    self.showStatuslineAfterBubble = function() {
        var body = Jane.tt('mail-common:shortcuts-stickyline-after-bubble', {});
        var metrikaTitle = 'Статус-лайн после баблов';

        self.promoActive = true;

        //@metrika статуслайн
        self.metrika(metrikaTitle, 'показ');

        Daria.Stickyline.showMsg({
            name: 'hotkeysPromoStickyline',
            body: body,
            body3: body,
            blocker: true,
            blockerCanBeClosed: true,
            hideOnTimeout: 0,

            // при закрытии крестиком, сохраняем данные о показе
            onclose: function() {
                //@metrika статуслайн
                self.metrika(metrikaTitle, 'клик по крестику');
                self.removeStickyPromo();
            },

            // заглушка, чтобы не закрывать статуслайн
            onclick: function() {
                //@metrika статуслайн
                self.metrika(metrikaTitle, 'клик');
                return false;
            }
        });

        Jane.Actions.run('hotkeys-promo-save', {}, {type: 'bubble', code: 'p'});
    };

    /**
     * Показываем синюю перду с промо хоткеев
     */
    self.showStickylinePromo = function() {

        var body = Jane.tt('mail-common:shortcuts-stickyline', {});
        var metrikaTitle = 'Статус-лайн';

        self.promoActive = true;

        //@metrika статуслайн
        self.metrika(metrikaTitle, 'показ');

        Daria.Stickyline.showMsg({
            name: 'hotkeysPromoStickyline',
            body: body,
            body3: body,
            blocker: true,
            blockerCanBeClosed: true,
            hideOnTimeout: 0,

            // при закрытии крестиком, сохраняем данные о показе
            onclose: function() {
                //@metrika статуслайн
                self.metrika(metrikaTitle, 'клик по крестику');
                self.removeStickyPromo();
            },

            // заглушка, чтобы не закрывать статуслайн
            onclick: function() {
                return false;
            }
        });
        $.Shortcuts.modalListOff('promo');

        Jane.Actions.run('hotkeys-promo-save', {}, {type: 'stickyline'});
    };

    /**
     * Снимаем бинды и убираем промо полоску
     */
    self.removeStickyPromo = function() {
        Daria.Stickyline.hide("hotkeysPromoStickyline");
        $.Shortcuts.modalListOff('promo');
    };

    /**
     * Добавляем в настройки время через которое заново запускать бабл с хоткеем
     */
    self.addRestartBubblesTime = function(code, date) {
        var params = self.params.bubble;
        params[code] = date;
        Jane.$H("settings").setSettings({'hk_promo_bubble': $.param(params)});
    };
    /**
     * Показывает промо бабл с хоткеями
     *
     */
    self.showBubblePromo = function(o) {
        var promoTitleStart = o.promoTitleStart || i18n('%Shortcuts_promo_bubble_title');
        var params = {
            promoTitleStart: promoTitleStart,
            promoKey1: o.hotkey1,
            promoKey2: o.hotkey2,
            promoTitleEnd: (o.title) ? o.title : i18n('%Shortcuts_promo_text_keys2')
        };

        var metrikaTitle = 'Бабл';
        var dialog;

        // заменим Ctrl на Cmd в бабле для маководов

        if (self.altOS) {
            params.promoKey1 = params.promoKey1.replace(/Ctrl/g, 'Cmd');
            params.promoTitleEnd = params.promoTitleEnd.replace(/Ctrl/g, 'Cmd');
        }

        self.promoActive = true;

        dialog = Daria.Dialog.open({
            additionalClass: 'b-shortcuts-promo__popup',
            body: Jane.tt('mail-common:shortcuts-bubble', {params: params}),
            noPosition: true,
            noShortcuts: true,
            onTarget: {
                noTail: true
            },
            onopen: function() {
                //@metrika бабл
                var N = self.params.bubble.codes || '';
                N = N.length + 1;
                self.metrika(metrikaTitle, 'показ', N ? 'Номер ' + N : N);

                // добавляем свои обработчики событий в
                // диалоге
                this._bind();

                // отпозиционируем диалог
                $('.b-shortcuts-promo__popup').css({
                    'position': 'fixed',
                    'bottom': 0,
                    'right': 400,
                    'top': 'auto',
                    'left': 'auto',
                    'width': '300px'
                });
                self.addRestartBubblesTime(o.code, Daria.now() + Jane.Date.MONTH * 3);
            },
            oncancel: function() {
                self.addRestartBubblesTime(o.code, Daria.now() + Jane.Date.MONTH * 6);
                //@metrika бабл
                self.metrika(metrikaTitle, 'клик по крестику');
            },
            onclose: function() {
                // Убираем обработчики события
                // я не уверен что у меня будет мой экземпляр диалога
                if (dialog && dialog.params && dialog.params._unbind) {
                    dialog.params._unbind();
                }
            },
            onHelpLinkClick: function() {
                //@metrika бабл
                self.metrika(metrikaTitle, 'клик по ссылке');
            },
            // обрабатываем все клики в диалоге
            // и вызывает необходимые обработчики
            // переданные в диалог в объекте params
            // Сделано
            // чтобы не разносить логику логирования
            // по разным файлам.
            // @param {Object} evnt The event object
            _onDialogClick: function(evnt) {
                var target = evnt.target;
                var action = $(target).attr('data-dialog-event');

                if (dialog && dialog.params && dialog.params[action]) {
                    dialog.params[action](evnt);
                }
                // продолжаем распространение
                return true;
            },
            _bind: function() {
                var $dialog = Daria.Dialog.$dialog;
                $dialog.on('click', this._onDialogClick);
            },
            _unbind: function() {
                dialog.$dialog.off('click', this._onDialogClick);
            }
        });

        Jane.Actions.run('hotkeys-promo-save', {}, {type: 'bubble', code: o.code});

    };

    /**
     * Возвращает данные для показа промо на done.
     * Вызывается из compose-done.js. Малой кровью не удалось вытащить сюда весь код промо на done :(
     * @return {Object}
     */
    self.showDonePromo = function() {

        var ctrlKey = (self.altOS) ? 'Cmd' : 'Ctrl';

        // параметры для шаблона
        var params = {
            promoTitle: (self.sentWithShortcuts) ? i18n('%Shortcuts_promo_text_be_productive2') : i18n('%Shortcuts_promo_title_Use_hotkeys'),
            promoTitle2: (self.sentWithShortcuts) ? i18n('%Shortcuts_promo_text_keys2') : i18n('%Shortcuts_promo_text_keys'),
            promoKey1: (self.sentWithShortcuts) ? 'Shift' : ctrlKey,
            promoKey2: (self.sentWithShortcuts) ? '&#8595;' : 'Enter'
        };

        //@metrika done
        self.metrika('Done', 'показ');

        // сбрасываем флаг
        self.sentWithShortcuts = false;

        self.promoActive = true;

        // сбросим флаг, когда done скроется
        setTimeout(function() {
            self.promoActive = false;
        }, 20000);

        // сохраняем данные о показе промо
        Jane.Actions.run('hotkeys-promo-save', {}, {type: 'done'});

        return params;
    };

    // Покажем промо бабл с хоткеями, если уже пришло время
    Jane.Actions.add(
        new Jane.Action('trigger-hotkeys-promo-bubble', function(o) {

            var params = self.promoBubbleParams[o.params.eventName] || {};
            var codes;

            if (self.doWeNeedToShowPromo('bubble', params)) {

                $.Shortcuts.modalListOff('promo');
                if (params.notimeout) {
                    self.showBubblePromo(params);
                } else {
                    setTimeout(function() {
                        self.showBubblePromo(params);
                    }, 10);
                }
            }

            //DARIA-21985 - После показа всех 12 баблов показать еще один статус-лайн
            //охохохо Пользователь думал что 12 баблов и все?! Простачок
            codes = self.params && self.params.bubble && self.params.bubble.codes;
            if (codes && codes.length > 11 && codes.indexOf('p') === -1) {
                self.showStatuslineAfterBubble();
            }
        })
    );

    // Покажем промо бабл с хоткеями, если уже пришло время
    Jane.Actions.add(
        new Jane.Action('trigger-hotkeys-stickyline', function() {
            if (self.doWeNeedToShowPromo('stickyline')) {
                self.showStickylinePromo();
            }
        })
    );

    // Сохранение данных о показах промо хоткеев в settings
    Jane.Actions.add(
        new Jane.Action('hotkeys-promo-save', function(params) {

            var type = params.params.type || 'done';    // params.params — не очепятка. Просто с первого раза не доходит

            if (typeof self.params[type] === 'undefined') {
                self.params[type] = {};
            }

            var codes = self.params[type].codes || '';
            var willRemoved = {}; // сохряняем настройки с временем перезапуска бабла

            if (type === 'bubble') {
                $.each(self.params.bubble, function(code, time) {
                    if (code.length === 1) {
                        willRemoved[code] = time;
                    }
                });
            }

            // обновим данные по количеству показов промо
            var params_type = self.params[type] = {
                count: (typeof self.params[type].count !== 'undefined') ? parseInt(self.params[type].count, 10) + 1 : 1,
                lastTS: Daria.now()
            };

            // сохраняем код комбинации клавиш и добавляем настройку времени перезапуска
            if (type === 'bubble') {
                params_type.codes = codes;

                if (params.params.code) {
                    params_type.codes += params.params.code;
                }
                $.extend(params_type, willRemoved);
            }

            var settings = {};
            settings['hk_promo_' + type] = $.param(params_type);

            // сохраним настройки
            Jane.$H("settings").setSettings(settings);

            self.promoActive = false;
        })
    );

    // TODO: убрать
    // сбрасывает все данные о показах промо
    Jane.Actions.add(
        new Jane.Action('hotkeys-promo-reset', function() {
            Jane.$H("settings").setSettings({
                hk_promo_stickyline: 'count=0&lastTS=1',
                hk_promo_bubble: 'count=0&lastTS=1',
                hk_promo_done: 'count=0&lastTS=1'
            });
        })
    );

    // открытие окна со списком хоткеев
    Jane.Actions.add(
        new Jane.Action('show-hotkeys-list', function(params) {
            if (params.params && params.params.type === 'stickyline') {
                //@metrika статуслайн
                self.metrika('Статус-лайн', 'клик по ссылке');
            }

            if (params.params && params.params.type === 'done') {
                //@metrika done
                self.metrika('Done', 'клик на вопрос');
            }

            self.removeStickyPromo();
            Daria.Shortcuts.showShortcutsHelp();
        })
    );

    Jane.Actions.add(
        new Jane.Action('trigger-hotkey-pressed', function(o) {
            var data = ['Использовали хоткей'];

            if (self.hotkeyWasPressed) {
                return;
            }

            self.hotkeyWasPressed = true;

            if (o.params && o.params.shortcut && o.params.shortcut.mask) {
                data.push(o.params.shortcut.mask);
            }

            Jane.ErrorLog.send({
                event: "hotkey-promo",
                data: data.join('|')
            });
        })
    );

    Jane.Actions.add(
        new Jane.Action('hotkeys-promo-sent-with-shortcuts', function() {
            self.sentWithShortcuts = true;
        })
    );

    return {
        doWeNeedToShowPromo: self.doWeNeedToShowPromo,
        removePromos: self.removeStickyPromo,
        showDonePromo: self.showDonePromo

    };

})(Daria, jQuery);


/* ../../js/components/shortcuts-promo.js end */


    return {
        showShortcutsHelp: self.showShortcutsHelp,
        switchTab: self.switchTab,
        hotkeysEnabled: self.hotkeysEnabled,
        getShortcutLabelFor: self.getShortcutLabelFor,
        _focus: Focus
    };

})(Daria, jQuery);

/* ../../js/components/shortcuts.js end */

    /* ../../js/components/folders.js begin */
/*
 * Folders
*/
Daria.Folder = function(params) {
    var events = Jane.events;

    return {
        validate: function() {
            var folder;
            var msg;

            if (!this.folderName) {
                msg = i18n('%Setup_Filters_Create_Error_Empty');
                events.trigger("folder.error", msg);
                return false;
            }

            folder = Jane.$H("folders").getFolderByName(this.folderName, params.parent_id);
            if (folder && folder.fid != params.id) { // Проверяем, что метки с таким именем еще нет.
                msg = folder['symbol'] ? i18n('%Folders_System_Msg', this.folderName) : i18n('%Folders_Exists_Msg');
                events.trigger("folder.error", msg);
                return false;
            }

            return true;
        },

        setName: function(name) {
            this.folderName = name;
            events.trigger("folder.name-changed", name);
        },

        bindEvents: function() {
            var that = this;
            /*
            var teaser = this.context.find(".b-teaser");
            */
            var filterbox = this.context.find(".b-form-layout_filters-simple");

            if (this.filter) {
                this.filter.form = filterbox.find("form");
            }

            var error =  {
                cls: 'b-popup__field_error',
                active: false,
                show: function(msg) {
                    this.notification = that.context.find('.b-notification__text');
                    this.row = this.notification.closest(".b-table");
                    if (msg) {
                        this.notification.text(msg);
                        this.row.addClass(this.cls);
                        this.active = true;
                    }
                },
                hide: function() {
                    this.row.removeClass(this.cls);
                    this.active = false;
                }
            };

            events.bind("folder.error", function(name, msg) {
                error.show(msg);
                that.input.focus();
            });

            this.context.delegate(".js-filter-open", "click", function() {
                Jane.c(["Поп-ап создания папки", "клик на открыть фильтры"]);
                var from = filterbox.find('input:visible').eq(0).focus();
                var autocomplete = Daria.Autocompleter.getContact();
                autocomplete.setOptions({
                    multiple: false,
                    formatResult: function(row) {
                        // Это группа
                        if (row.contacts) {
                            var contacts = [];

                            for (var i = 0, len = row.contacts.length; i < len; i++) {
                                contacts.push(row.contacts[i].email);
                            }

                            return contacts.join(', ');
                        } else {
                            return row.email;
                        }
                    }
                });
                autocomplete.bindField({ field: from, focus: 1 });
            });

            this.context.delegate(".js-filter-close", "click", function() {
                Jane.c(["Поп-ап создания папки", "клик на свернуть фильтры"]);
                that.input.focus();
            });

            this.context.delegate(".js-filter-link", "click", function() {
                that.filter = false;
                that.success = function(id) {
                    Page.go("#setup/filters-create/folder=" + id);
                };
                that.onCreate();
                return false;
            });

            this.context.delegate(".js-input-name", "keyup", function(e) {
                var name = $.trim(this.value).replace(/\u0020/g, '\u00a0');
                if (name != that.folderName && error.active) {
                    error.hide();
                }
                that.setName(name);
                if (e.keyCode == 13) {
                    that.onCreate();
                }
            });
        },

        filter: Daria.FilterSimpleCreatePopup(),

        onCreate: function() {
            var that = this;
            if (this.validate()) {
                Daria.Dialog.close();
                this.create(function(id) {
                    if (that.filter) {
                        that.filter.params.move_folder = id;
                        that.filter.create();
                    }
                });
            }
        },

        init: function() {
            this.input = $("input[name=folder_name]", this.context);
            if (params.name) {
                this.input.val(params.name);
            }
            this.bindEvents();
            this.open();
        }
    };
};

/* ../../js/components/folders.js end */

    /* ../../js/components/money.js begin */
(function(Jane, Daria) {

    var Money = Daria.Money = {};

    /**
     * Максимальная сумма перевода в рублях
     */
    Money.MAX_AMOUNT = 14000;

    /**
     * Сумма для токена без учета комиссии
     * Причина в разных значениях в том, что limit в скоупе указывается без учета комиссии
     * и расчет лимита должен выполняться каждый раз на почте при изменении комиссии
     */
    Money.MAX_SCOPE_AMOUNT = 15000;

    /**
     * Доступность работы с Деньгами
     * @returns {Boolean}
     */
    Money.isAvailable = function() {
        return Money.isPossible() &&
            $.inArray('20', Daria.SIDS) !== -1;
    };

    /**
     * Возможность работы с Деньгами
     * @returns {Boolean}
     */
    Money.isPossible = function() {
        return Daria.product === 'RUS' &&
            !Daria.IS_CORP &&
            !Jane.Config.PDD.domain &&
            Jane.Config.isYamoney;
    };

    /**
     * @param {Number} amount
     */
    Money.parseAmount = function(amount) {
        var m = Number(amount).toFixed(2).match(/^(\d+)(\.(\d*))?$/);
        if (!m) {
            return [0, 0];
        }

        return [
            Number(m[1]),
            Number(m[3] || 0)
        ];
    };

    /**
     * @returns {Deferred}
     */
    Money.getAccountInfo = function(params) {
        var dfd = $.Deferred();
        params = params || {};

        var request = Jane.Handler.getAll(['money-payment-info'], params, function() {
            var hMoneyPaymentInfo = Jane.$H('money-payment-info');
            var key = hMoneyPaymentInfo.getKey(params);

            // сервис в случае ошибки выдает 404 или 403 код,
            // в результате по умолчанию в кэш ничего не попадает
            // метод используется в нескольких местах, от этого часто перезапрашивается
            // если запросы тормозят, это очень заметно
            // поэтому принудительно пишем в кэш ошибочные данные
            if (!hMoneyPaymentInfo.isCached(key)) {
                hMoneyPaymentInfo.setCache(key, {}, params, Daria.now());
                dfd.reject({});
                return;
            }

            var data = hMoneyPaymentInfo.getCache(key) || {};

            if (data.status === 'ok') {
                dfd.resolve(data);
            } else {
                dfd.reject(data);
            }
        });

        Money.getAccountInfo._requests[request.id] = request;

        dfd.always(function() {
            delete Money.getAccountInfo._requests[request.id];
        });

        return dfd.promise();
    };
    Money.getAccountInfo._requests = {};
    Money.getAccountInfo.abort = function() {
        for (var id in Money.getAccountInfo._requests) {
            Money.getAccountInfo._requests[id].abort();
        }
        Money.getAccountInfo._requests = {};
    };

    Money.log = {
        // начало отправки письма с деньгами
        mailSendTry: function() {
            Jane.ErrorLog.send({ event: 'YAMONEY_MAIL', status: 'send' });
        },

        // форма заполнена неверно
        mailSendFormValid: function() {
            Jane.ErrorLog.send({ event: 'YAMONEY_MAIL', status: 'form_valid' });
        },

        // письмо с деньгами успешно отправлено
        mailSendDone: function() {
            Jane.ErrorLog.send({ event: 'YAMONEY_MAIL', status: 'done' });
        },

        // ошибка при переводе
        mailSendPaymentFail: function(error) {
            Jane.ErrorLog.send({ event: 'YAMONEY_MAIL', status: 'payment_fail', error: error });
        },

        // ошибка при отправке
        mailSendFail: function(error) {
            Jane.ErrorLog.send({ event: 'YAMONEY_MAIL', status: 'fail', error: error });
        }
    };

    /**
     * Метрика
     */
    Money.metric = function() {
        var args = Array.prototype.slice.call(arguments);
        args.unshift('Money');
        Jane.c.apply(Jane.c, args);
    };

    /**
     * Метрика показа денежных писем и клика по ссылкам внутри письма
     * Пример:
     * {"Money":{"Денежные письма":{"Показ плашки без кнопки \"получить\"":"Отправленные"}}}
     * @see blocks/message/body/message-body.js
     * @param {String} mid
     * @param {String} [actionText] описание действия, по умолчанию показ
     */
    Money.mailMoneyMetric = function(mid, actionText) {
        var body = Jane.$H('message-body').getCacheByParams({ ids: mid });

        if (!body || !body.money) {
            return;
        }

        var message = Jane.$H('message').getCache(mid);
        var folder = Jane.$H('folders').getFolderById(message.fid);

        if (!message || !folder) {
            return;
        }

        var folders = {
            'inbox': 'Входящие',
            'sent': 'Отправленные',
            'trash': 'Удаленные',
            'spam': 'Спам',
            'draft': 'Черновики',
            'outbox': 'Исходящие',
            'template': 'Шаблоны',
            'archive': 'Архивы'
        };

        var params = [ 'Денежные письма' ];

        if (actionText) {
            params.push(actionText);
        } else {
            params.push('Показ плашки ' + (body.money.hold ? 'с кнопкой "получить"' : 'без кнопки "получить"'));
        }

        if (folder.user) {
            params.push('Пользовательская папка');
        } else if (folders[folder.symbol]) {
            params.push(folders[folder.symbol]);
        } else {
            params.push('Папка не определена');
        }

        Money.metric.apply(Money.metric, params);
    };

    /**
     * Получение виджета с информацией о балансе
     * только для денежного письма без персонифицированной ссылки
     *
     * @param {String} mid
     * @returns {Deferred}
     */
    Money.messageAccountInfo = function(mid) {
        var dfd = $.Deferred();
        var hMessageBody = Jane.$H('message-body');
        var message = hMessageBody.getCacheByParams({ ids: mid });

        if (!message || !message.money || message.money.hold) {
            dfd.reject();
            return dfd;
        }

        Money.getAccountInfo().done(function(data) {
            data = data || {};
            if (data.status === 'ok') {
                dfd.resolve(Jane.tt('mail-common:js-message-account-info', data));

            } else {
                dfd.reject();
            }
        })
        .fail(dfd.reject);

        return dfd;
    };

    Money.findTargetAccountInfo = function(node) {
        var moneyTargetInfo = $(node).find('div[name^="money_mail_payment_info_cuon5ahg"] a[name^="money_mail_help"]').closest('td');

        // изменение шаблона шапки денежного письма
        if (!moneyTargetInfo.length) {
            moneyTargetInfo = $(node).find('div[name^="money_mail_payment_info_cuon5ahg"] a[yamailhelp="1"]').closest('td');
        }

        // изменение шаблона шапки денежного письма
        if (!moneyTargetInfo.length) {
            moneyTargetInfo = $(node).find('div[yamailpaymentinfo="1"] a[yamailhelp="1"]').closest('td');
        }

        return moneyTargetInfo;
    };

})(Jane, Daria);


/* ../../js/components/money.js end */

    /* ../../js/components/message.eticket.js begin */
(function(Jane, Daria) {

    /**
     * Метка о том, что на письме есть напоминание о полете
     * @constant
     * @type {string}
     */
    var aviatickerRenimderLabel = 'remindme_aviaeticket';

    /**
     * Домены магазинов
     * @constant
     * @type {array}
     */
    var eshopDomains = [
        '2e-systems', 'aeroconnect', 'airtickets', 'amadeus', 'anywayanyday',
        'aviacassa', 'biletdv', 'biletix', 'bilet-on-line', 'blu-express',
        'bravoavia', 'charterbilet', 'davs', 'dsbw', 'expedia', 'fresh-travel',
        'infoflotforum', 'kaplan', 'kayak', 'miles-and-more', 'nabortu',
        'nh-hotels', 'onetwotrip', 'ozon', 'razlet', 'rusaero', 'samolet',
        'samotlor', 'sendgrid', 'senturia', 'sindbad', 'tais', 'tickets', 'trenitalia',
        'agent', 'biletexpert', 'chabooka', 'clickavia', 'eviterra', 'pososhok', 'talarii', 'agenda', 'tripsta'
    ];

    /**
     * IATA коды авиакомпаний, для которых известен логотип
     * @constant
     * @type {string}
     */
    var airlineIATA = '9U,UA,UN,U9,TK,B2,I8,R2,S7,SU,U6,VV,4G,YQ,YC,A9,5N,6W,R3,OS,AB,HG,PS,KC,B6,BA,CU,KE,MS,SK,BT,DE,QR,CX,4U,TG,G9,A3,AM,AR,EI,EN,F9,FQ,HU,MH,US,UX,WZ,YM,AF,AY,CA,OK,LX,RJ,AI,IB,TP,LY,AZ,DL,LO,VN,AA,AK,JQ,UL,VL,WU,8Z,W6,ZI,LH,SN,CZ,SQ,EY,FR,KK,EK,DY,KL,MF,PG,QJ,UT,U2,VY,OG,HX,FZ,FV,XF,PC,QS,WF,NN';

    /**
     * Дополнительные флаги билетов
     * @type {Object}
     */
    var eticketFlags = {};

    function ETicket(data) {
        this.startdt = new Date();

        this.mid = data.mid;

        eticketFlags[this.mid] = eticketFlags[this.mid] || {};

        this.flags = data.flags || {};
        $.extend(this.flags, eticketFlags[this.mid]);

        this.lids = data.lid;

        this.type = null;
        var from = jpath(data, '/.field[.type == "from"].email')[0] || '';

        this.domain = "";
        if (Jane.FormValidation.checkEmail(from)) {
            this.domain = from.split('@')[1].replace(/\.[^\.]+$/, '').toLowerCase();
        }

        this.className = null;
    }

    ETicket.prototype.update = function() {
    };

    var AviaETicket = Daria.AviaETicket = function(/*data*/) {
        AviaETicket.superClass.constructor.apply(this, arguments);
        this.type = 'plane';
        this.flights = [];
        // ближайший актуальный рейс
        this.nearFlight = null;
        // хэш перелетов
        this.hash = null;
        // признак дубля билета
        this.duplicate = false;
        this._dfdUpd = null;
    };

    Jane.extend(AviaETicket, ETicket);

    AviaETicket.log = {
        _userAction1: function() {
            AviaETicket.log._userAction1 = $.noop;
            Jane.ErrorLog.send({
                'event': 'aviaetickt.useraction',
                'widget': 1
            });
        },

        _userAction2: function() {
            AviaETicket.log._userAction2 = $.noop;
            Jane.ErrorLog.send({
                'event': 'aviaetickt.useraction',
                'widget': 2
            });
        },

        // взаимодействие с виджетом уникального юзера
        userAction: function(widget) {
            if (widget == 1) {
                this._userAction1();
            } else if (widget == 2) {
                this._userAction2();
            }
        },

        // показали хотя бы один виджер билетов (не напоминание)
        showFlights: function() {
            AviaETicket.log.showFlights = $.noop;
            Jane.ErrorLog.send({
                'event': 'aviaetickt.showflights'
            });
        },

        // показали хотя бы один виджер билетов (напоминание, не фейковое)
        showReminder: function() {
            AviaETicket.log.showReminder = $.noop;
            Jane.ErrorLog.send({
                'event': 'aviaetickt.showreminder'
            });
        },

        // заглушка - тип письма "билет", но фактов не найдено
        noFlights: function(data) {
            $.extend(data, {'event': 'aviaetickt.noflights'});
            Jane.ErrorLog.send(data);
        },

        // логотип не найден
        noLogo: function(data) {
            $.extend(data, {'event': 'aviaetickt.nologo'});
            Jane.ErrorLog.send(data);
        }
    };

    AviaETicket.notificationLock = function(mid, hash) {
        var cache = AviaETicket.notificationLock._hash;

        if (!cache[hash]) {
            cache[hash] = mid;
            return false;
        }

        if (cache[hash] == mid) {
            return 2;
        }

        return 1;
    };
    AviaETicket.notificationLock._hash = {};

    AviaETicket.hash = {
        cache: {},
        set: function(eticket) {
            if (!eticket.hash) {
                return;
            }

            var hash = eticket.hash + '-' + eticket.domain;
            this.cache[hash] = this.cache[hash] || [];
            this.cache[hash].push(eticket.mid);
            this.cache[hash] = _.uniq(this.cache[hash]);
            this.cache[hash].sort();
        },
        get: function(eticket) {
            if (!eticket) {
                return this.cache;
            }

            var hash = eticket.hash + '-' + eticket.domain;
            return this.cache[hash] || [];
        }
    };

    AviaETicket.redrawTable = function(messages, table) {
        $.each(messages, function() {
            if (this.eticket) {
                this.eticket.getFlights().done(function() {
                    this.redrawTable(table);
                    redrawDuplicate(this);
                });
            }
        });

        function redrawDuplicate(eticket) {
            var mids = AviaETicket.hash.get(eticket);
            var l = mids.length;

            if (l < 2) {
                return;
            }

            var duplicate = [];
            var noduplicate = [];
            noduplicate.push(mids.slice(l - 1, l));
            duplicate = duplicate.concat(mids.slice(0, l - 1));

            var hMessage = Jane.$H('message');
            $.each(duplicate, function(i, mid) {
                var msg = hMessage.getCache(mid);
                if (msg.eticket.duplicate !== true) {
                    msg.eticket.duplicate = true;
                    msg.eticket.getFlights().done(function() {
                        this.redrawTable(table, true);
                    });
                }
            });

            $.each(noduplicate, function(i, mid) {
                var msg = hMessage.getCache(mid);
                if (msg.eticket.duplicate !== false) {
                    msg.eticket.duplicate = false;
                    msg.eticket.getFlights().done(function() {
                        this.redrawTable(table, true);
                    });
                }
            });
        }
    };

    /**
     * Перерисовка сообщения в списке
     * только 1 раз в случае, если строка в таблице найдена
     * иначе выполняется двойная перерисовка при клике на "проверить сообщения"
     */
    AviaETicket.prototype.redrawTable = function(table, force) {
        var mid = this.mid;
        var row = table && table.getRow(mid);
        if (!row) {
            return false;
        }

        var hMessage = Jane.$H('message');
        var msg = hMessage.getCache(mid);

        if (!msg) {
            return false;
        }

        var $tr = $(row.tr);

        if ($tr.find('.js-eticket-flight-info').length && !force) {
            return true;
        }

        /*
         * TODO: Для простоты хочется заменять весь $tr, а не его части,
         * но чтобы не терялись ссылки на $tr в других компонентах (см. DARIA-31775).
         *
         * Сейчас оставил как было, плюс добавил замену className $tr.
         * Например, был 'b-messages__message_eticket', должен стать 'b-messages__message_eticket b-messages__message_eticket_expired'.
         * Раньше эти классы навешивались на элементы глубже (напр. на b-messages__message__right), но это неверно и запутывает.
         */
        var $newTr = $(Jane.tt('mail-common:js-message-eticket', {
            message: msg
        }, ['labels', 'settings']));
        $tr.find('.js-messages__message__left')
            .replaceWith($newTr.find('.js-messages__message__left'))
            .end()
            .find('.js-messages__message__right')
            .replaceWith($newTr.find('.js-messages__message__right'))
            .end()
            .attr('class', $newTr.attr('class'));

        return true;
    };

    AviaETicket.prototype.update = function() {
        if (this._dfdUpd && this._dfdUpd.state() == 'pending') {
            return this._dfdUpd.promise();
        }
        this._dfdUpd = $.Deferred();

        var dfd = $.Deferred();

        dfd.done(function(flights) {
            if (!this.flightInfoDt) {
                this.flightInfoDt = this.msgBodyDt;
            }

            var isReminder = this.flags['aviaeticket_reminder'];// && !this.flags['aviaeticket_reminder_fake'];

            Jane.ErrorLog.send({
                'event': 'aviaetickt.timers',
                'mid': this.mid,
                'msg-body': this.msgBodyDt - this.startdt,
                'flight-info': this.flightInfoDt - this.msgBodyDt,
                'all': this.flightInfoDt - this.startdt
            });

            this.flights = flights;
            this.flights.sort(function(a, b) {
                if (a.departure == b.departure) {
                    return 0;
                }

                return a.departure < b.departure ? -1 : 1;
            });
            this.nearFlight = jpath(this.flights, '.[!.outdated]')[0] || null;

            if (this.nearFlight && this.nearFlight.iata) {
                if ($.inArray(this.domain, eshopDomains) > -1) {
                    this.className = this.domain;
                } else if (airlineIATA.indexOf(this.nearFlight.iata) > -1) {
                    this.className = this.nearFlight.iata;
                } else {
                    if (this.nearFlight.airline) {
                        this.className = 'unknown_iata';
                    }

                    AviaETicket.log.noLogo({
                        'mid': this.mid,
                        'iata': this.nearFlight.iata,
                        'domain': this.domain,
                        'airline': this.nearFlight.airline
                    });
                }
            }

            // заголовок для напоминалки
            if (isReminder) {
                $.each(this.flights, function(i, f) {
                    f.reminderText = i18n('%Aviaeticket_reminder_text', Jane.Date.humanDate2(new Date(f.departure)));
                });
            }

            // дополнительная информация для текущего перелета
            if (this.nearFlight) {
                this.nearFlight.info = [];

                // погода для любого направления
                if (this.nearFlight.temp_arr_text) {
                    this.nearFlight.info.push({
                        type: 'weather',
                        linkText: this.nearFlight.temp_arr_text,
                        link: this.nearFlight.temp_arr_link
                    });
                }

                if (this.nearFlight.currency) {
                    var cur = this.nearFlight.currency;

                    if (this.nearFlight.currency.rate && this.nearFlight.currency.rate != 1) {
                        this.nearFlight.info.push({
                            type: 'course',
                            text: cur.toCode + ' = ' + cur.rate + ' ' + cur.fromCode
                        });

                    } else if (!this.nearFlight.currency.rate) {
                        this.nearFlight.info.push({
                            type: 'currency-code',
                            text: i18n('%Currency') + ':',
                            link: 'http://yandex.ru/yandsearch?text=' + encodeURIComponent(i18n('%Currency') + ' ' + cur.toCode),
                            linkText: cur.toCode
                        });
                    }
                }

                // валюта и достопримечательности только для первого рейса
                if (this.nearFlight.direction == 'forward') {
                    if (this.nearFlight.city_arr) {
                        this.nearFlight.info.push({
                            type: 'city',
                            linkText: i18n('%Message_See_City'),
                            link: 'http://yandex.ru/yandsearch?text=' + encodeURIComponent(i18n('%Get_sight') + ' ' + this.nearFlight.city_arr)
                        });
                    }
                }

                // данные для напоминалки
                if (isReminder) {
                    var f = this.nearFlight;

                    // ссылки на экспресс или такси
                    if (f.city_dep == 'Москва' || f.city_arr == 'Москва') {
                        f.info.push({
                            linkText: i18n('%Get_aeroexpress'),
                            link: '//awaps.yandex.ru/1/9990/001001.gif?0-0-0-0-la:272360p:174711',
                            type: 'aeroexpress',
                            extype: 'reminder'
                        });

                    } else if (
                        $.inArray(f.city_dep, ['Санкт-Петербург', 'Вологда', 'Воронеж', 'Казань', 'Красноярск']) > -1 ||
                            $.inArray(f.city_arr, ['Санкт-Петербург', 'Вологда', 'Воронеж', 'Казань', 'Красноярск']) > -1
                        ) {
                        f.info.push({
                            linkText: i18n('%Get_taxi'),
                            link: '//taxi.yandex.ru',
                            type: 'yataxi',
                            extype: 'reminder'
                        });

                    } else {
                        f.info.push({
                            linkText: i18n('%Get_taxi'),
                            link: 'http://yandex.ru/yandsearch?text=' + encodeURIComponent(i18n('%Get_taxi') + ' ' + f.city_dep),
                            type: 'taxi',
                            extype: 'reminder'
                        });
                    }
                }
            }

            // устанавливанием напоминание в календаре за сутки
            this.setNotification({
                autoSmsOffset: -1440,
                autoEmailOffset: -1440
            });

            if (this.nearFlight && isReminder) {
                AviaETicket.log.showReminder();
            } else {
                AviaETicket.log.showFlights();
            }

            Jane.events.trigger('message.eticket.update', [this.mid]);
            this._dfdUpd.resolveWith(this);
        }.bind(this));

        dfd.fail(function() {
            AviaETicket.log.noFlights({
                'mid': this.mid,
                // логируем mdb для дальнейшего анализа
                'mdb': Jane.$H('account-information').getDataKey('db')
            });
            this._dfdUpd.rejectWith(this);
        }.bind(this));

        var hMessageBodyParams = {
            ids: this.mid
        };

        Jane.Handler.getAll(['message-body'], hMessageBodyParams, function() {
            this.msgBodyDt = new Date();
            var data = Jane.$H('message-body').getCacheByParams(hMessageBodyParams);
            var flights = jpath(data, '.facts.ticket.flight');
            this.hash = jpath(data, '.facts.ticket.hash')[0];

            AviaETicket.hash.set(this);

            function hasEATA(e) {
                return Boolean(e.iata);
            }

            function generateIterator(i) {
                return function(k, e) {
                    req.push({
                        handlers: ['flight-info'],
                        params: {
                            date: Jane.Date.format('%Date_iso', e.departure),
                            number: e.flight_number,
                            from_geoid: e.city_dep_geoid
                        },
                        flight: i,
                        trip: k
                    });
                };
            }

            function replaceRealHref(text, href) {
                var realHref = href.slice(href.indexOf('&amp;l=') + 7);
                if (realHref) {
                    realHref = Daria.base64UrlDecode(realHref);
                    return 'href="' + realHref + '"';
                }
                return text;
            }

            if (flights && flights.length) {
                var req = [];
                for (var i = 0; i < flights.length; i++) {
                    var f = flights[i];
                    var timeToFlight = f.departure - $.now();

                    // помечаем как устаревший
                    if (timeToFlight < 0) {
                        f.outdated = true;
                        continue;
                    }

                    var iataTrip = $.grep(f.trip, hasEATA);

                    // если нет кода IATA, то мы можем получить неправильную инфу из расписаний
                    if (iataTrip.length != f.trip.length) {
                        continue;
                    }

                    if (!this.flags['aviaeticket_reminder'] && timeToFlight < 24 * 60 * 60 * 1000 && !this.hasReminderLID()) {
                        // билет куплен меньше чем за сутки до вылета и мы на него не поставили метку "есть напоминание"
                        this.flags['aviaeticket_reminder'] = true;
                        this.flags['aviaeticket_reminder_fake'] = true;
                    }

                    // если мы решили вместо обычного виджета показывать напоминание, то парсить в нем ничего не надо
                    if (!this.ticketMID && this.flags['aviaeticket_reminder'] && !this.flags['aviaeticket_reminder_fake']) {
                        // парсим урл оригинального письма
                        var body = jpath(data, '.body.content')[0];
                        if (body) {
                            body = body.replace(/href="([^"]+)"/g, replaceRealHref);
                            var ticketMid = (body.match(/mail.yandex.ru(%2F|\/)message(%3F|\?)ids(%3D|=)(\d+)/) || [])[4];

                            if (ticketMid) {
                                var p = $.extend({}, Jane.Page.params);
                                p.ids = ticketMid;
                                p._page = 'message';

                                this.ticketURL = Jane.Page.params2url(p);
                                this.ticketMID = ticketMid;

                                // запрос на проверку доступности письма билета
                                req.push({handlers: ['message'], params: {ids: ticketMid}});

                                // напоминание содержит информацию об одном перелете,
                                // поэтому направление перелета передается в заголовке
                                var direction = jpath(data, '.info.eticket-flight-direction')[0];
                                if (direction) {
                                    f.direction = direction;
                                }
                            }
                        }
                    }

                    $.each(f.trip, generateIterator(i));
                }


                if (req.length) {
                    Jane.Handler.getAll(req, function() {
                        if (this.ticketMID) {
                            var msg = Jane.$H('message').getCache(this.ticketMID);
                            // если письмо-билет не найден, то открывается напоминание
                            if (!msg) {
                                this.ticketMID = null;
                                this.ticketURL = null;
                            }
                        }

                        this.flightInfoDt = new Date();
                        var i;
                        for (i = 0; i < req.length; i++) {
                            if (!('flight' in req[i])) {
                                continue;
                            }

                            var data = Jane.$H('flight-info').getCacheByParams(req[i].params) || {};

                            if (!$.isEmptyObject(data)) {
                                if ('temp_arr' in data) {
                                    if (data['temp_arr'] < 0) {
                                        data['temp_arr_text'] = String.fromCharCode(8722) + Math.abs(data['temp_arr']);
                                    } else {
                                        data['temp_arr_text'] = '+' + data['temp_arr'];
                                    }
                                    data['temp_arr_text'] += '°C';
                                }

                                data.rasp_flight_info = true;

                                $.extend(this.flags, data.flags);
                                $.extend(eticketFlags[this.mid], data.flags);
                            }

                            if (this.ticketMID) {
                                data.ticketMID = this.ticketMID;
                                data.ticketURL = this.ticketURL;
                            }

                            $.extend(flights[req[i].flight].trip[req[i].trip], data);
                        }

                        var fieldsBg = ['airport_dep', 'city_dep', 'departure', 'from_country_geoid', 'ticketMID', 'ticketURL', 'iata', 'airline', 'flight_number', 'checkin', 'phone'];
                        var fieldsEnd = ['airport_arr', 'arrival', 'city_arr', 'to_country_geoid', 'temp_arr', 'temp_arr_link', 'temp_arr_text'];
                        var currReq = [];
                        for (i = 0; i < flights.length; i++) {
                            var tripLength = flights[i].trip.length;
                            var l = fieldsBg.length;
                            var trip;
                            while (l--) {
                                trip = flights[i].trip[0];
                                if (trip.hasOwnProperty(fieldsBg[l])) {
                                    flights[i][fieldsBg[l]] = trip[fieldsBg[l]];
                                }
                            }

                            l = fieldsEnd.length;
                            while (l--) {
                                trip = flights[i].trip[tripLength - 1];
                                if (trip.hasOwnProperty(fieldsEnd[l])) {
                                    flights[i][fieldsEnd[l]] = trip[fieldsEnd[l]];
                                }
                            }

                            if (tripLength > 1 && flights[i]['from_country_geoid'] && flights[i]['to_country_geoid'] && flights[i]['from_country_geoid'] != flights[i]['to_country_geoid']) {
                                if (flights[i]['direction'] == 'back') {
                                    currReq.push({handlers: ['currency-rates'], params: {
                                        toGeoid: flights[i]['from_country_geoid'],
                                        fromGeoid: flights[i]['to_country_geoid']
                                    }, flight: i});
                                } else {
                                    currReq.push({handlers: ['currency-rates'], params: {
                                        toGeoid: flights[i]['to_country_geoid'],
                                        fromGeoid: flights[i]['from_country_geoid']
                                    }, flight: i});
                                }
                            }
                        }

                        // перелет с пересадками
                        // получение курса конечной точки, относительно начальной
                        // TODO место для оптимизации - один запрос не нужен, так же не нужны запросы курса в местах пересадки
                        if (currReq.length) {
                            Jane.Handler.getAll(currReq, function() {
                                var i;
                                for (i = 0; i < currReq.length; i++) {
                                    var data = Jane.$H('currency-rates').getCacheByParams(currReq[i].params);
                                    if (!$.isEmptyObject(data.data)) {
                                        flights[currReq[i].flight].currency = data.data;
                                    }
                                }

                                for (i = 0; i < flights.length; i++) {
                                    if (flights[i].trip.length == 1 && flights[i].trip[0].currency) {
                                        flights[i].currency = flights[i].trip[0].currency;
                                    }
                                }

                                dfd.resolve(flights);
                            });

                        } else {
                            for (i = 0; i < flights.length; i++) {
                                if (flights[i].trip.length == 1 && flights[i].trip[0].currency) {
                                    flights[i].currency = flights[i].trip[0].currency;
                                }
                            }

                            dfd.resolve(flights);
                        }

                    }.bind(this));
                } else {
                    dfd.resolve(flights);
                }

            } else {
                dfd.reject();
            }
        }.bind(this));

        return this._dfdUpd.promise();
    };

    AviaETicket.prototype.getReminderLID = function() {
        if (!('_reminderLID' in AviaETicket)) {

            var hLabels = Jane.$H('labels');
            var reminderLID = hLabels.getLIDByName(aviatickerRenimderLabel);

            if (!reminderLID) {
                reminderLID = false;
            }
            // кешируем
            AviaETicket['_reminderLID'] = reminderLID;
        }

        return AviaETicket['_reminderLID'];
    };

    AviaETicket.prototype.hasReminderLID = function() {
        var lid = this.getReminderLID();
        // если такой метки вообще нет - ничего не надо делать. Считаем, что она выставлена
        if (!lid) {
            return true;
        }

        return $.inArray(lid, this.lids) > -1;
    };

// @param {Object} options Настройки для напоминания
// @param {Function} callback Вызовется при удачной установки напоминания
// @param {Function} onError Вызовется при ну удачной установки напоминания
    AviaETicket.prototype.setNotification = function(options, callback, onError) {
        //(18:05:22) dbrylev: Переименовал входной параметр smsOffset в userSmsOffset, и выходной currentSmsOffset в userSmsOffset
        var defaultOptions = {
            mid: this.mid,
            ticketId: this.hash,
            data: null, // проставляем ниже
            email: Jane.$H('settings').getSetting('default_email')
        };

        options = $.extend({}, defaultOptions, options);

        // для письма-напоминания не надо ставить напоминание :)
        if (this.flags['aviaeticket_reminder']) {
            return false;
        }

        // если есть различие времени между ответами томиты и расписаний, то напоминание по смс ставить не нужно
        if (this.flags.diff_flight_info) {
            delete options.autoSmsOffset;
            delete options.userSmsOffset;
        }

        // не указано время напоминания
        if (!options.autoSmsOffset && !options.autoEmailOffset && !options.userSmsOffset) {
            return false;
        }

        var that = this;
        var hasReminderLID = this.hasReminderLID();
        var lock = AviaETicket.notificationLock(this.mid, this.hash);

        // если есть метка о том, что напоминание уже поставили
        // и это не обновление напоминания то ничего не делаем
        if ((lock || hasReminderLID) && !options.update) {
            if (!hasReminderLID && lock === 1) {
                Jane.Handler.doAll(['do-label'], {lid: this.getReminderLID(), ids: [this.mid]});
            }

            return false;
        }

        if (options.hasOwnProperty('update')) {
            delete options.update;
        }

        var flights4Calendar = this.flightsToCal();
        // если нет ни одного напоминания
        if (!flights4Calendar.length) {
            return;
        }

        options.data = JSON.stringify(flights4Calendar);

        // http://wiki.yandex-team.ru/calendar/api/ext/backend/flights
        Jane.Handler.doAll(['set-flight-reminder'], options,
            function(data) {
                if (jpath(data, '.handlers[0].status')[0] == 'ok') {
                    // помечаем меткой что уже установили напоминание
                    // если это обновление то не ставим метку, так как она уже есть
                    if (!hasReminderLID) {
                        Jane.Handler.doAll(['do-label'], {lid: that.getReminderLID(), ids: [that.mid]});
                    }

                    if (callback) {
                        callback(data);
                    }
                } else {
                    if (onError) {
                        onError(data);
                    }
                }
            }
        );

        return true;
    };

    AviaETicket.prototype.flightsToCal = function(dontCheckOutdated) {
        var flights4Calendar = [];
        for (var i = 0, j = this.flights.length; i < j; i++) {
            var flight = this.flights[i];
            // не устанавливаем для устаревших полетов и у которых нет даты или времени
            if ((dontCheckOutdated || !flight.outdated) && flight.departure && flight.flight_number) {

                var calInfo = {
                    flightNumber: flight.flight_number,
                    departureCity: flight.city_dep,
                    departureAirport: flight.airport_dep,
                    departureDateTime: Jane.Date.format('%Date_FT', flight.departure),
                    arrivalCity: flight.city_arr,
                    direction: flight.direction
                };

                if (flight.trip[0] && flight.trip[0].rasp_flight_info) {
                    calInfo.source = 'rasp';
                } else {
                    calInfo.source = 'iex';
                }

                // если перелет с пересадками, передаче данных последнего рейса
                // необходимо томите для полного формирования фактов по перелету с пересадками
                if (flight.trip.length > 1) {
                    var lastTrip = flight.trip[flight.trip.length - 1];
                    calInfo.lastSegmentFlightNumber = lastTrip.flight_number;
                    calInfo.lastSegmentDepartureDateTime = Jane.Date.format('%Date_FT', lastTrip.departure);

                    if (lastTrip.rasp_flight_info) {
                        calInfo.lastSegmentSource = 'rasp';
                    } else {
                        calInfo.lastSegmentSource = 'iex';
                    }
                }

                // если есть информация о чекине, то добавляем
                if (flight.checkin) {
                    calInfo.checkInLink = flight.checkin;
                }
                // если есть ссылка на аэроэкспресс
                if (flight.city_dep == 'Москва' || flight.city_arr == 'Москва') {
                    // без схемы ссылку не показывает
                    calInfo.aeroexpressLink = 'https://www.aeroexpress.ru';
                }

                flights4Calendar.push(calInfo);
            }
        }

        return flights4Calendar;
    };

    AviaETicket.prototype.testNotificationReal = function(offset) {
        offset = offset || 2;

        var flights4Calendar = this.flightsToCal(true);

        // если нет ни одного напоминания
        if (!flights4Calendar.length) {
            return;
        }

        var mid = this.mid;
        var hash = this.hash;

        Jane.Handler.doAll(
            ['get-flight-reminder-info'],
            {
                mid: mid,
                ticketId: hash,
                data: JSON.stringify(flights4Calendar)
            },
            function(data) {
                var availOffset = jpath(data, '.handlers[0].data.availableOffset')[0];
                if (availOffset < 0) {
                    var params = {
                        mid: mid,
                        ticketId: hash,
                        data: JSON.stringify(flights4Calendar),
                        autoEmailOffset: availOffset + offset,
                        email: Jane.$H('settings').getSetting('default_email')
                    };

                    Jane.Handler.doAll(['set-flight-reminder'], params, function(data) {
                        if (jpath(data, '.handlers[0].status')[0] == 'ok') {
                            console.log('ok');
                        } else {
                            console.log('error', data);
                        }
                    });
                }
            }
        );
    };

    AviaETicket.prototype.testNotificationChangeDate = function(offset) {
        offset = offset || 0;

        var flights4Calendar = this.flightsToCal(true);

        // если нет ни одного напоминания
        if (!flights4Calendar.length) {
            return;
        }

        $.each(flights4Calendar, function() {
            var dt = new Date(this.departureDateTime);
            var today = new Date();

            dt.setFullYear(today.getFullYear());
            dt.setMonth(today.getMonth());
            dt.setDate(today.getDate() + offset);

            this.departureDateTime = dt.getFullYear() + '-' + (dt.getMonth() + 1) + '-' + dt.getDate() + ' ' + dt.getHours() + ':' + dt.getMinutes() + ':00';
        });

        var mid = this.mid;
        var hash = this.hash;

        Jane.Handler.doAll(
            ['get-flight-reminder-info'],
            {
                mid: mid,
                ticketId: hash,
                data: JSON.stringify(flights4Calendar)
            },
            function(data) {
                var availOffset = jpath(data, '.handlers[0].data.availableOffset')[0];
                if (availOffset < 0) {
                    var params = {
                        mid: mid,
                        ticketId: hash,
                        data: JSON.stringify(flights4Calendar),
                        autoEmailOffset: availOffset + offset,
                        email: Jane.$H('settings').getSetting('default_email')
                    };

                    Jane.Handler.doAll(['set-flight-reminder'], params, function(data) {
                        if (jpath(data, '.handlers[0].status')[0] == 'ok') {
                            console.log('ok');
                        } else {
                            console.log('error', data);
                        }
                    });
                }
            }
        );
    };

// получаем информацию о полете
// асинхронно
//
// Я хочу быть уверенным в том что меня вызовут когда данные,
// для конкретного письма будут готовы, не зависимо от того были они уже получены
// или еще нет.
    AviaETicket.prototype.getFlights = function() {
        return this._dfdUpd.promise();
    };

    Daria.ETicket = {};
    Daria.ETicket.create = function(data) {
        if (!Jane.$H('settings').canShowEtickets()) {
            return null;
        }

        if (!data.fid || Jane.$H('folders').spamOrTrash(data.fid)) {
            return null;
        }

        return new AviaETicket(data);
    };

})(Jane, Daria);

/* ../../js/components/message.eticket.js end */

    /* ../../js/components/message.money.js begin */
(function(Jane, Daria) {

    Daria.Money = Daria.Money || {};
    var Money = Daria.Money;

    function Yamoney() {
        Yamoney.superClass.constructor.apply(this, arguments);
        this.amount = null;
        this.__service = 'money';
    }

    Jane.extend(Yamoney, Daria.MessageListInfo);

    Yamoney.prototype._onprepare = function(messageBody) {
        var dfd = $.Deferred();

        if (messageBody.money && messageBody.money.amount) {
            this.amount = messageBody.money.amount;
            dfd.resolve();

        } else {
            dfd.reject();
        }

        return dfd.promise();
    };

    Yamoney.prototype._onredraw = function(message, tr) {
        $(tr).find('.js-messages-money').replaceWith(Jane.tt('mail-common:js-message-money', {
            message: message,
            'page-params': Jane.Page.params,
            'page-type': Jane.Page.params._page
        }, ['folders', 'labels'], Jane.Page.params));
    };


    Money.Message = {
        create: function(message) {
            if (!message.fid) {
                return null;
            }

            var hFolders = Jane.$H('folders');
            var folder = hFolders.getFolderById(message.fid);

            if (!folder || (!hFolders.isFolder(message.fid, ['inbox', 'sent']) && !folder.user)) {
                return null;
            }

            return new Yamoney(message);
        }
    };


})(Jane, Daria);

/* ../../js/components/message.money.js end */

    /* ../../js/components/resizer.js begin */
(function(Daria, $) {
    /**
     * Ресайзер панелей
     * @param {Object} options
     * @param {String|jQuery|Node} [options.splitter = '.b-resizer'] селектор, jQuery объект или DOM элемент,
     * который является элементом для изменения размеров панелей
     * @param {String|jQuery|Node} [options.context = '.body'] селектор, jQuery объект или DOM элемент,
     * который является элементом контекста ресайзинга
     * @param {String|jQuery|Node} [options.pane1 = '.b-layout__first-pane'] первая панель для изменения размеров
     * @param {String|jQuery|Node} [options.pane2 = '.b-layout__second-pane'] вторая панель для изменения размеров
     * @param {Number} [options.ratio = 35] значение размера первой панели (%).
     * Зачение размера второй панели - 100 - options.ratio.
     * @param {Number} [options.minRatio = 20] минимальное значение размера панелей
     * @param {String} [options.direction = 'h'] направление изменения размеров ('h' - горизонтальное, 'v' - вертикальное)
     * @param {Function} [options.updateDimension = Daria.nop] метод, который будет вызван в случае изменения размеров
     * панелей. Передает 3 параметра - ratio для первой и второй панели, флаг разрешения проверки ограничений
     * @param {Function} [options.dragStart = Daria.nop] - событие начала перемещения ресайзера
     * @param {Function} [options.drag = Daria.nop] - событие перемещения ресайзера
     * @param {Function} [options.dragEnd = Daria.nop] - событие окончания перемещения ресайзера
     * @constructor
     */
    Daria.Resizer = function(options) {
        options = $.extend({
            splitter: '.b-resizer',
            context: 'body',
            pane1: '.b-layout__first-pane',
            pane2: '.b-layout__second-pane',
            ratio: 35,
            minRatio: 20,
            direction: 'h',
            updateDimension: Daria.nop,
            dragStart: Daria.nop,
            drag: Daria.nop,
            dragEnd: Daria.nop
        }, options);

        this.options = options;
        this.realRatio = null;
    };

    /**
     * Вызывает инициализацию ресайзера
     * @param {Object} options позволяет расширить или скорректировать опции ресайзера
     * @type {Function}
     */
    Daria.Resizer.prototype.init = function(options) {
        options = this._updateOptions(options);

        this.setRatio(options.ratio);
    };

    /**
     * Обновляет опции ресайзера
     * @param  {Object} options опции, которые необходимо обновить
     * @return {Object} текущий объект опций
     * @private
     */
    Daria.Resizer.prototype._updateOptions = function(options) {
        options = $.extend(this.options, options);
        this.options = options;

        options.context = $(options.context);
        options.splitter = $(options.splitter, options.context);
        options.pane1 = $(options.pane1, options.context);
        options.pane2 = $(options.pane2, options.context);

        // Подписка на события
        options.splitter
            .off('.resizer')
            .on('mousedown.resizer', $.proxy(this._dragStart, this));

        return options;
    };

    /**
     * Установка нового значения размера (в %) первой панели
     * @param {Number} [ratio=this.options.ratio] значение размера первой панели (%)
     * @param {Boolean} denyRatioCheck флаг отключения проверки вхождения размера в ограничения
     */
    Daria.Resizer.prototype.setRatio = function(ratio, denyRatioCheck) {
        var ratio1;
        var ratio2;

        if (typeof ratio == 'number') {
            ratio1 = ratio;
        } else {
            ratio1 = this.options.ratio;
        }

        if (!denyRatioCheck) {
            this.updateTotalSize();
            ratio1 = Math.max(this.options.minRatio, Math.min(100 - this.options.minRatio, ratio1));
        }
        ratio2 = 100 - ratio1;

        this.options.ratio = ratio1;
        this.options.updateDimension.call(this, ratio1, ratio2, denyRatioCheck);
    };

    /**
     * Позволяет получить размер первой панели в %
     * @returns {Number} размер первой панели в %
     */
    Daria.Resizer.prototype.getRatio = function() {
        return this.options.ratio;
    };

    /**
     * Обновление общего размера панелей
     */
    Daria.Resizer.prototype.updateTotalSize = function() {
        var pane1Size = this.options.pane1[this.getDirectionDimension()]();
        var pane2Size = this.options.pane2[this.getDirectionDimension()]();
        /**
         * Суммарный размер панелей
         * @type {Number}
         */
        this.totalSize = pane1Size + pane2Size;
    };

    /**
     * Получение типа измерения размеров
     * @returns {String}
     */
    Daria.Resizer.prototype.getDirectionDimension = function() {
        return this.options.direction == 'h' ? 'outerWidth' : 'outerHeight';
    };

    /**
     * Метод обработки начала перемещения ресайзера
     * @param {Event} event объект события
     * @private
     */
    Daria.Resizer.prototype._dragStart = function(event) {
        this.updateTotalSize();
        this.startPoint = this._getCoord(event);
        this.startRatio = this.options.ratio;
        this.setRatio();
        this._toggleDragMode(true, event);
        this.options.dragStart.call(this);
    };

    /**
     * Метод обработки перемещения ресайзера
     * @param {Event} event объект события
     * @private
     */
    Daria.Resizer.prototype._drag = function(event) {
        var that = this;
        var coord = this._getCoord(event);
        var size = coord - this.startPoint;
        var percentOfIncrease = size / this.totalSize * 100;
        var ratio = this.startRatio + percentOfIncrease;
        // BUGFIX: Значительно увеличивает плавность ресайза в IE8
        setTimeout($.proxy(function() {
            that.setRatio(ratio);
            that.options.drag.call(this, this.options.ratio);
        }, this), 1);
    };

    /**
     * Метод окончания перемещения ресайзера
     * @private
     */
    Daria.Resizer.prototype._dragEnd = function() {
        this._toggleDragMode(false);
        this.options.dragEnd.call(this, this.options.ratio);
    };

    /**
     * Позволяет получить координату мыши по направлению перемещения ресайзера
     * @param {Event} event объект события
     * @returns {Number} координата мыши
     * @private
     */
    Daria.Resizer.prototype._getCoord = function(event) {
        if (this.options.direction == 'h') {
            return event.pageX;
        }
        return event.pageY;
    };

    /**
     * Включает/выключает обработку перемещения ресайзера
     * @param {Boolean} isDragging флаг включения/выключения обработки перемещения ресайзера
     * @param {Event} event объект события
     * @private
     */
    Daria.Resizer.prototype._toggleDragMode = function(isDragging, event) {
        var $document = $(document);

        if (isDragging && event) {
            // Превентим выделение для "нормальных" браузеров
            event.preventDefault();
        }

        this.options.splitter.toggleClass('b-resizer_move', isDragging);

        if (isDragging) {
            $document.on({
                'mousemove.resizer': $.proxy(this._drag, this),
                'mouseup.resizer': $.proxy(this._dragEnd, this),
                // Превентим/разрешаем выделение для IE
                'selectstart.resizer': false
            });
        } else {
            $document.off('.resizer');
        }
    };

    /**
     * Включает/выключает "режим одной панели", т.е. максимально расширяет указанную панель.
     * @param {Boolean|Number} paneNum  Если указано число, то это номер панели, которую необходимо расширить.
     * true - эквивалентно первой панели
     * false - выключит этот режим и покажет обе панели
     */
    Daria.Resizer.prototype.toggleOnePaneMode = function(paneNum) {
        var flag = !!paneNum;
        if (flag) {
            paneNum = (typeof paneNum === 'number') ? paneNum : 1;
            this.realRatio = this.realRatio || this.options.ratio;
            this.setRatio(paneNum === 1 ? 100 : 0, true);
        } else if (this.realRatio !== null) {
            this.setRatio(this.realRatio);
            this.realRatio = null;
        }
        // Скрываем "таскалку" в режиме одной панели
        this.options.splitter.toggle(!flag);
    };

    /**
     * Позволяет обновить параметры ресайзера
     * @param {Object} options корректируемые опции ресайзера
     */
    Daria.Resizer.prototype.update = function(options) {
        this._updateOptions(options);
        // Обновляем только если отключен "режим одной панели"
        if (this.realRatio === null) {
            this.setRatio();
        }
    };

    /**
     * Удаление ресайзера
     */
    Daria.Resizer.prototype.destroy = function() {
        // Отписка от событий
        $(document).off('.resizer');
        if (this.options.splitter) {
            this.options.splitter.off('.resizer');
        }
        // Удаление связей с DOM
        this.options.context = null;
        this.options.splitter = null;
        this.options.pane1 = null;
        this.options.pane2 = null;
    };
})(Daria, jQuery);

/* ../../js/components/resizer.js end */


    var Block = Jane.Block;
    var Handler = Jane.Handler;
    var DoHandler = Jane.DoHandler;
    var Actions = Jane.Actions;
    var Action = Jane.Action;
    var MessageAction = Daria.MessageAction;
    var Page = Jane.Page;
    var Table = Daria.Table;

    /* ../../handlers/handlers.js begin */
/* ../../handlers/attach/do-attach-file-status.js begin */
new Jane.DoHandler("do-attach-file-status",
    /* ../../handlers/attach/do-attach-file-status.info.js begin */
{
    params: {
        oid: null
    }
}

/* ../../handlers/attach/do-attach-file-status.info.js end */

);

/* ../../handlers/attach/do-attach-file-status.js end */

/* ../../handlers/attach/do-attach-file-store.js begin */
new Jane.DoHandler("do-attach-file-store",
    /* ../../handlers/attach/do-attach-file-store.info.js begin */
{
    params: {
        file: null
    }
}

/* ../../handlers/attach/do-attach-file-store.info.js end */

);

/* ../../handlers/attach/do-attach-file-store.js end */


/* ../../handlers/folders/folders.js begin */
(function() {

    var hFolders = new Jane.Handler("folders");

    hFolders.ids = {};
    hFolders.symbols = {};

    var DEFAULT_FOLDER_NAMES = {
        'inbox': i18n('%Folder_inbox'),
        'sent': i18n('%Folder_sent'),
        'trash': i18n('%Folder_trash'),
        'spam': i18n('%Folder_spam'),
        'draft': i18n('%Folder_draft'),
        'outbox': i18n('%Folder_outbox'),
        'template': i18n('%Folder_templates'),
        'archive': i18n('%Folder_archive')
    };

// индекс папок для сортировки в настройках
    var DEFAULT_FOLDER_INDEX = {
        'inbox': 1,
        'sent': 2,
        'trash': 3,
        'spam': 4,
        'draft': 5,
        'outbox': 6,
        'template': 7,
        'archive': 8
    };

// Запоминаем id-шники дефолтных папок.
    hFolders.onsetcache = function(key, data, params) {
        var currentFolder = params['current_folder'] || Jane.Page.params.current_folder;
        var hMessages = Jane.$H("messages");
        var ids = {};
        var symbols = {};
        var folders = jpath(data, '.folder');

        for (var i = 0, j = folders.length; i < j; i++) {
            var newFolderData = folders[i];
            var newFolderFid = newFolderData.fid;
            var newFolderSymbol = newFolderData.symbol;

            // инвалидируем списки писем при расхождении данных
            var oldFolderData;
            if (
            // это не текущая папка
                (currentFolder && newFolderFid != currentFolder) &&
                    // если есть старые данные
                    (oldFolderData = this.getFolderById(newFolderFid)) &&
                    // старые и новые данные не совпадают
                    newFolderData.count != oldFolderData.count
                ) {
                hMessages.clearCacheByFolder(newFolderFid);
            }

            // заполняем кеш для symbol
            if (newFolderSymbol) {
                // проверка на всякий случай
                if (newFolderSymbol in DEFAULT_FOLDER_NAMES) {
                    // из-за того, что в js4wmi и у нас разные понятия "язык",
                    // перетираем названия дефолтных папок на правильные
                    newFolderData.name = DEFAULT_FOLDER_NAMES[newFolderSymbol];
                }
                ids[newFolderSymbol] = newFolderFid;
                symbols[newFolderFid] = newFolderSymbol;

                // папка "Архив" системная, но должна быть во "Входящих", поэтому отмечаем как пользовательскую
                if (newFolderSymbol == 'archive') {
                    newFolderData.user = true;
                }

                // системная папка не может быть вложена в пользовательские
                // на практике - может
                //TODO что-то надо придумать с удалением пользовательской, в которую вложена системная
                if (newFolderSymbol != 'template') {
                    delete newFolderData.parent_id;
                    var parent = jpath(data, '.folder[.subfolder == "' + newFolderFid + '"]')[0];
                    if (parent) {
                        parent.subfolder.splice($.inArray(newFolderFid, parent.subfolder), 1);
                    }
                }

                newFolderData.order = DEFAULT_FOLDER_INDEX[newFolderSymbol] || Number.MAX_VALUE;
            }
        }

        /*
            // Предзагружаем папки с непрочитанными письмами, кроме общих папок
            var unreadFolders = $.grep(jpath(data, '.folder[!.symbol && !.shared]'), function(folder) {
                return folder['new'];
            });
            var unreadHandlers = $.map(unreadFolders, function(folder) {
                return [{
                    handlers: ['messages', 'messages-pager'],
                    params: {
                        current_folder: folder.fid,
                        threaded: Jane.$H("settings").isThreaded() ? 'yes' : ''
                    }
                }];
            });
            Jane.Handler.getAll(unreadHandlers);
        */
        var hMessagesParams = hMessages.params;
        if (!hMessagesParams['current_folder'] && !params['current_folder']) {
            // если мы загрузились не в почте, то folders нет, поэтому первый переход в inbox выполнится немного неправильно
            // тут мы смотрим, что если у current_folder еще нет значения (т.е. это действительно первая загрузка почты), то его надо поставить,
            // и (вот это хак) мы подделываем параметры, чтобы там был current_folder
            params['current_folder'] = ids['inbox'];
        }
        // Проставляем хэндлеру messages дефолтное значение для параметра current_folder.
        hMessagesParams['current_folder'] = ids['inbox'];

        this.ids = ids;
        this.symbols = symbols;
        this.data = data; // Чтобы не считать ключ (а он ни от чего не зависит) и не лезть в кэш, сохраняем сразу xml с папками.

        var cfids = Jane.$H('settings').getOpenedFolders();
        // Добавляем аттрибут opened ко всем развернутым папкам из настроек
        $.each(cfids, function(i, fid) {
            var folder = jpath(data, '.folder[.fid == "' + fid + '"]')[0];
            if (!folder) {
                return;
            }
            folder['opened'] = true;
        });

        // Помечаем папки, в которых есть подпапки с непрочитанными письмами, жирным (DARIA-9059)
        var markedFolders = {};
        $.each(jpath(data, '.folder[.parent_id && !.subfolders]'), function(i, folder) {
            var unread = 0;
            var parentID;
            do {
                folder = parentID ? jpath(data, '.folder[.fid == "' + parentID + '"]')[0] : folder;
                unread += Number(folder['new']);
                if (parentID in markedFolders) {
                    return true;
                }
                if (unread) {
                    folder['has-unread'] = true;
                    markedFolders[folder['fid']] = 1;
                }
                parentID = folder['parent_id'];
            } while (parentID);
        });
    };

    /**
     * Возвращает папку по FID.
     * @param {String} fid FID папки.
     * @return {Object}
     */
    hFolders.getFolderById = function(fid) {
        return jpath(this.data, '.folder[.fid == "' + fid + '"]')[0];
    };

    hFolders.getFolderByName = function(name, parent_id) {
        var selector = '.folder[.name == "' + name + '"' +
            (parent_id ? ' && .parent_id == "' + parent_id + '"' : ' && !.parent_id' ) + ']';
        return jpath(this.data, selector)[0];
    };

    /**
     * Поиск всех папок с указанным названием.
     */
    hFolders.getFoldersByName = function(name) {
        return jpath(this.data, '.folder[.name == "' + name + '"]');
    };

    /**
     * Возвращает массив подпапок.
     * @param {String} fid
     * @returns Array
     */
    hFolders.getSubfolders = function(fid) {
        return jpath(this.data, '.folder[.parent_id == "' + fid + '"]');
    };

    /**
     * Массив fid папок, вложенных в указанную.
     * @param {String} fid
     * @returns Array
     */
    hFolders.getSubfoldersFid = function(fid) {
        return $.map(this.getSubfolders(fid) || [], function(folder) {
            return folder.fid;
        });
    };

    /**
     * Массив fid всех вложенных папок в указанную.
     * @param {String} fid
     * @returns Array
     */
    hFolders.getAllSubfoldersFid = function(fid) {
        var getSFolders = function(fid) {
            var subfoldersFids = this.getSubfoldersFid(fid);
            var l = subfoldersFids.length;

            while (l--) {
                subfoldersFids = subfoldersFids.concat(getSFolders.call(this, subfoldersFids[l]));
            }

            return subfoldersFids;
        };

        return getSFolders.call(this, fid);
    };

    /**
     * Проверяет, что данная папка является одной из стандартых.
     * @param {String} fid ID папки.
     * @param {String|Array} foldersName Массив папок для проверки.
     * @return Boolean
     * @example
     * Jane.$H('folders').isFolder(fid, ['trash', 'spam']);
     */
    hFolders.isFolder = function(fid, foldersName) {
        if (!$.isArray(foldersName)) {
            foldersName = [foldersName];
        }

        var ids = hFolders.ids;

        for (var i = 0, j = foldersName.length; i < j; i++) {
            if (fid == ids[foldersName[i]]) {
                return true;
            }
        }

        return false;
    };

    hFolders.getFolderBySymbol = function(symbol) {
        return jpath(this.data, '.folder[.symbol == "' + symbol + '"]')[0];
    };

    /**
     * Возвращает true, если папка «Удаленные» или «Спам»
     * @param {String} fid ID папки.
     * @return {Boolean}
     */
    hFolders.spamOrTrash = function(fid) {
        return hFolders.isFolder(fid, ['trash', 'spam']);
    };

    /**
     * Возвращает true, если папка не "Черновики", "Исходящие", "Удаленные", "Спам", "Отправленные" или "Архив".
     * @param {String} fid ID папки.
     * @return {Boolean}
     */
    hFolders.isIncoming = function(fid) {
        return !hFolders.isFolder(fid, [
            'draft',
            'outbox',
            'sent',
            'spam',
            'trash',
            'template',
            'archive'
        ]);
    };

    /**
     * Массив fid папок. в которые можно бросать.
     * @return {String[]}
     */
    hFolders.getDroppableListFid = function() {
        var that = this;

        var folders = $.grep(this.data.folder, function(folder) {
            return that.isDroppable(folder.fid);
        });

        folders = $.map(folders, function(folder) {
            return folder.fid;
        });

        return folders;
    };

    /**
    * Массив fid папок, в которые возможен перенос указанной.
    * @param {String} fid
    * @returns Array
    */
    hFolders.getMoveFoldersFid = function(fid) {
        if (!this.isDraggable(fid)) {
            return [];
        }

        // папки, в которые можно бросать
        var folders = this.getDroppableListFid();

        // нельзя переносить во вложенные папки и в саму перетаскиваемую папку
        var exfolders = this.getAllSubfoldersFid(fid);
        // нельзя бросать в себя
        exfolders = exfolders.concat(fid);

        //var parentFid = this.getFolderById(fid).parent_id;
        //var inboxFid = this.getFolderBySymbol('inbox').fid;

        // нельзя переносить в папку, в которой уже находится наша
        //exfolders.push(parentFid || inboxFid);

        folders = $.grep(folders, function(el) {
            return $.inArray(el, exfolders) === -1;
        });

        return folders;
    };

    /**
     * Функция сравнения расположения папок для сортировки.
     * Системные папки всегда внизу, пользовательские по значению folder_options.position.
     */
    hFolders.comparePosition = function(a, b) {
        var max = 1000000000000;
        var userA = !a.symbol && a.user;
        var userB = !b.symbol && b.user;
        var nameA = a.name.toLowerCase();
        var nameB = b.name.toLowerCase();
        var positionA = Number(a.folder_options && a.folder_options.position || 0);
        var positionB = Number(b.folder_options && b.folder_options.position || 0);

        var pa = userA ? positionA : max + Number(a.order || 0);
        var pb = userB ? positionB : max + Number(b.order || 0);

        if (a.symbol === 'inbox') {
            pa = -1;
        }

        if (b.symbol === 'inbox') {
            pb = -1;
        }

        if (pa < pb) {
            return -1;

        } else if (pa > pb) {
            return 1;

        } else if (nameA < nameB) {
            return -1;

        } else if (nameA > nameB) {
            return 1;
        }

        return 0;
    };




    /**
     * Массив соседей
     * TODO для системных возвращает неправильно, надо проверить
     */
    hFolders.getNeighborFids = function(fid) {
        var folder = fid && this.getFolderById(fid);
        if (!folder) {
            return [];
        }

        var neighborFolders;
        if (!folder.parent_id) {
            neighborFolders = $.grep(this.data.folder, function(folder) {
                return (!folder.parent_id && folder.user && !folder.symbol);
            });

        } else {
            neighborFolders = this.getSubfolders(folder.parent_id);
        }

        neighborFolders.sort(this.comparePosition);

        var neighborFids = $.map(neighborFolders, function(folder) {
            return folder.fid;
        });

        return neighborFids;
    };

    hFolders.getParentFid = function(fid) {
        var folder = fid && this.getFolderById(fid);
        return folder && folder.parent_id || this.getFolderBySymbol('inbox').fid;
    };

    hFolders.getTopParent = function(fid) {
        var parentFolder = this.getFolderById(this.getParentFid(fid));
        while (parentFolder && !parentFolder.symbol) {
            parentFolder = this.getFolderById(this.getParentFid(parentFolder.fid));
        }
        return parentFolder;
    };

    /**
     * Бросать можно только пользовательские папки и во "входящие"
     */
    hFolders.isDroppable = function(fid) {
        var folder = fid && this.getFolderById(fid);
        if (!folder) {
            return false;
        }

        // перетаскивать можно только папки внутри "входящих"
        var parentFolder = this.getTopParent(fid);
        if (!parentFolder || parentFolder.symbol !== 'inbox') {
            return false;
        }

        return ((folder.user && !folder.symbol) || folder.symbol === 'inbox');
    };

    /**
     * Перетаскивать можно только пользовательские папки
     */
    hFolders.isDraggable = function(fid) {
        var folder = fid && this.getFolderById(fid);
        if (!folder) {
            return false;
        }

        // перетаскивать можно только папки внутри "входящих"
        var parentFolder = this.getTopParent(fid);
        if (!parentFolder || parentFolder.symbol !== 'inbox') {
            return false;
        }

        return (folder.user && !folder.symbol);
    };

    hFolders.moveIn = function(fid, parentFid) {
        var dfd = $.Deferred();

        if (fid === parentFid) {
            dfd.resolve('donot');
            return dfd.promise();
        }

        var folder = this.getFolderById(fid);
        var folderParentFid = this.getParentFid(fid);
        var parent = this.getFolderById(parentFid);

        if (!folder || !parent) {
            dfd.reject('notfound');
            return dfd.promise();
        }

        if (!this.isDraggable(fid) || !this.isDroppable(parentFid)) {
            dfd.reject('noaccess');
            return dfd.promise();
        }

        if (folderParentFid === parentFid) {
            dfd.resolve('donot');
            return dfd.promise();
        }

        if (this.getFolderBySymbol('inbox').fid === parentFid) {
            parentFid = 0;
        }

        // нельзя переносить в папку, которая уже содержит папку с таким же именем
        var neighborFolders;
        if (!parentFid) {
            neighborFolders = $.grep(this.data.folder, function(folder) {
                return !folder.parent_id;
            });

        } else {
            neighborFolders = this.getSubfolders(parentFid);
        }

        for (var i = 0; i < neighborFolders.length; i++) {
            if (neighborFolders[i].name === folder.name) {
                dfd.reject('nameduplicate');
                return dfd.promise();
            }
        }

        Jane.Handler.doAll(['do-folder-move', 'folders'], {
            fid: fid,
            parent_id: parentFid
        }, function(data) {
            var saveStatus = jpath(data, '.handlers[.name="do-folder-move"].data.body.updated')[0];

            if (saveStatus === 'ok') {
                dfd.resolve('ok');
            } else {
                dfd.reject('actionerror');
            }
        });

        return dfd.promise();
    };

    hFolders.moveAfter = function(fid, overFid) {
        var dfd = $.Deferred();

        if (fid === overFid) {
            dfd.resolve('donot');
            return dfd.promise();
        }

        var folder = this.getFolderById(fid);

        if (!folder || !$.isPlainObject(folder.folder_options)) {
            dfd.reject('notfound');
            return dfd.promise();
        }

        if (!folder.folder_options.hasOwnProperty('notify') || !folder.folder_options.hasOwnProperty('threaded')) {
            dfd.reject('nooptions');
            return dfd.promise();
        }

        if (!this.isDraggable(fid)) {
            dfd.reject('noaccessfid');
            return dfd.promise();
        }

        var queue = $({});
        var neighborFids;
        var that = this;

        if (overFid) {
            if (!this.isDroppable(overFid)) {
                dfd.reject('noaccessover');
                return dfd.promise();
            }

            var folderParentFid = this.getParentFid(fid);
            var overFolderParentFid = this.getParentFid(overFid);

            if (folderParentFid !== overFolderParentFid) {
                queue.queue(function(next) {
                    that.moveIn(fid, overFolderParentFid)
                        .done(next)
                        .fail(dfd.reject);
                });

            } else {
                // перетаскиваемая папка уже находится ниже выбранной
                neighborFids = this.getNeighborFids(fid);
                if ($.inArray(fid, neighborFids) === $.inArray(overFid, neighborFids) + 1) {
                    dfd.resolve('donot');
                    return dfd.promise();
                }
            }

        } else {
            // перетаскиваемая папка уже находится вверху списка
            neighborFids = this.getNeighborFids(fid);
            if ($.inArray(fid, neighborFids) === 0) {
                dfd.resolve('donot');
                return dfd.promise();
            }
        }

        queue.queue(function() {
            Jane.Handler.doAll(['do-folder-set-options', 'folders'], {
                fid: fid,
                prev: overFid || 0,
                notify: folder.folder_options.notify,
                threaded: folder.folder_options.threaded
            }, function(data) {
                var saveStatus = jpath(data, '.handlers[.name="do-folder-set-options"].data.body.updated')[0];

                if (saveStatus === 'ok') {
                    dfd.resolve('ok');
                } else {
                    dfd.reject('actionerror');
                }


                // проверка правильности переноса
                var neighbors = that.getNeighborFids(overFid || fid);
                var idxFid = $.inArray(fid, neighbors);
                var idxOverFid = $.inArray(overFid, neighbors);

                if ((overFid && idxFid !== (idxOverFid + 1)) || (!overFid && idxFid !== 0)) {
                    Jane.ErrorLog.send({
                        event: 'folders.move.position',
                        status: 'position_error',
                        fid: fid + ':' + that.getFolderById(fid).folder_options.position,
                        overFid: overFid + ':' + that.getFolderById(overFid).folder_options.position
                    });
                }
            });
        });

        return dfd.promise();
    };

    hFolders.moveBefore = function(fid, overFid) {
        var dfd = $.Deferred();

        // наш сосед сверху
        var neighborFids = this.getNeighborFids(overFid);
        var beforeFid = neighborFids[$.inArray(overFid, neighborFids) - 1];

        // если сверху никого нет, размещаем в родителе первым
        if (!beforeFid) {
            var queue = $({});
            var that = this;
            var overFolderParentFid = this.getParentFid(overFid);

            queue.queue(function(next) {
                that.moveIn(fid, overFolderParentFid)
                    .done(next)
                    .fail(dfd.reject);
            });

            queue.queue(function() {
                that.moveAfter(fid, false)
                    .done(dfd.resolve)
                    .fail(dfd.reject);
            });

        } else {
            this.moveAfter(fid, beforeFid)
                .done(dfd.resolve)
                .fail(dfd.reject);
        }

        return dfd.promise();
    };






    hFolders.updateFolderCounts = function(id, deltas) {
        var folder = this.getFolderById(id);
        var counts = {};
        // Не пересчитываем для папки "Исходящие" (DARIA-24924)
        if (folder && !this.isFolder(id, 'outbox')) {
            $.each(["new", "count"], function(i, v) {
                folder[v] += deltas[v];
                counts[v] = folder[v];
            });
            if (!this.spamOrTrash(id)) {
                // Пересчитываем цифирку у непрочитанных.
                this.data['new'] += deltas['new'];
            }
        }
        return counts;
    };

    /**
     * Возвращает количество писем в папке FID.
     * @param {String} fid ID папки.
     * @return {Number}
     */
    hFolders.getCount = function(fid) {
        var folder = hFolders.getFolderById(fid);
        return folder ? folder.count : null;
    };

    /**
     * Возвращает количество непрочитанных писем.
     * @param {String} [fid] ID папки. Если не указан, то возвращает общее количество непрочитанных.
     * @return {Number}
     */
    hFolders.getUnreadCount = function(fid) {
        var data = fid ? hFolders.getFolderById(fid) : this.data;
        return data ? Number(data['new']) : null;
    };

    /**
     * Возвращает хеш папок
     * {fid: 0}
     * @returns Object
     */
    hFolders.getFoldersHash = function() {
        var cache = this.getCacheByParams();
        var result = {};
        if (cache) {
            $.each(cache.folder, function() {
                result[this.fid] = 0;
            });
        }

        return result;
    };

    /**
     * Устанавливает для папки флажок recent
     * @param {String} fid
     */
    hFolders.setRecent = function(fid) {
        var folder = this.getFolderById(fid);
        if (folder) {
            folder.recent = true;
        }
    };

    /**
     * Возвращает true, если папка расшарина
     * @param {String} [fid] ID папки
     * @return {Boolean}
     */
    hFolders.isShared = function(fid) {
        var folder = this.getFolderById(fid);
        return  !!(folder && folder.shared);
    };

    /**
     * Название системной папки по symbol
     * @param {String} symbol
     * @return {String}
     */
    hFolders.getDefaultFolderName = function(symbol) {
        return DEFAULT_FOLDER_NAMES[symbol];
    };

    /**
     * Установка системной метки.
     */
    hFolders.setSymbol = function(fid, symbol, onsuccess, onerror) {
        onsuccess = onsuccess || $.noop;
        onerror = onerror || $.noop;
        var that = this;

        Jane.Handler.doAll(['do-folder-set-symbol'], {
            fid: fid,
            symbol: symbol
        }, function(resp, error) {
            if (!$.isEmptyObject(error)) {
                onerror();
                return;
            }

            // список папок получаем отдальным запросом, иначе возвращает не измененный
            Jane.Handler.doAll(['folders'], {}, function() {
                var folder = that.getFolderBySymbol(symbol);
                if (folder) {
                    onsuccess(folder);
                } else {
                    onerror();
                }
            });
        });
    };

    /**
     * Удаление системных меток.
     */
    hFolders.removeSymbol = function(fid, onsuccess, onerror) {
        onsuccess = onsuccess || $.noop;
        onerror = onerror || $.noop;
        var that = this;

        Jane.Handler.doAll(['do-folder-remove-symbol'], {
            fid: fid
        }, function(resp, error) {
            if (!$.isEmptyObject(error)) {
                onerror();
                return;
            }

            // список папок получаем отдальным запросом, иначе возвращает не измененный
            Jane.Handler.doAll(['folders'], {}, function() {
                var folder = that.getFolderById(fid);
                if (!folder.symbol) {
                    onsuccess(folder);
                } else {
                    onerror();
                }
            });
        });
    };

    hFolders.isArchive = function(fid) {
        var folder = this.getFolderById(fid);
        if (!folder) {
            return false;
        }

        return folder.symbol == 'archive';
    };

    /**
     * Получение количества пользовательских папок
     */
    hFolders.getCountUserFolders = function() {
        return jpath(this.data, '.folder[.user]').length;
    };

    /**
     * Создание системной папки "Архив".
     * Пользовательская папка с именем "Archive" будет переведена в системную.
     */
    hFolders.createArchiveFolder = function() {
        var that = this;
        var dfd = $.Deferred();
        var fArchiveBySymbol = that.getFolderBySymbol('archive');
        var fArchiveByName = that.getFoldersByName('Archive').shift();
        var fArchiveLocal = (i18n('%Folder_archive') != 'Archive') ? that.getFoldersByName(i18n('%Folder_archive')).shift() : null;

        if (!fArchiveBySymbol && !fArchiveByName && !fArchiveLocal) {
            Jane.Handler.doAll(['do-folders-add', 'folders'], {
                folder_name: 'Archive'
            }, function(data, error) {
                if (!$.isEmptyObject(error)) {
                    dfd.reject();
                    return;
                }

                var folder = that.getFolderByName('Archive');
                if (!folder || !folder.fid) {
                    dfd.reject();
                    return;
                }

                that.setSymbol(folder.fid, 'archive', function(folder) {
                    dfd.resolve(folder.fid);
                }, function() {
                    dfd.reject();
                });
            });

        } else if (!fArchiveBySymbol && (fArchiveByName || fArchiveLocal)) {
            if (fArchiveByName) {
                that.setSymbol(fArchiveByName.fid, 'archive', function(folder) {
                    dfd.resolve(folder.fid);
                }, function() {
                    dfd.reject();
                });

            } else if (fArchiveLocal) {
                Jane.Handler.doAll(['do-folder-rename', 'folders'], {
                    fname: 'Archive',
                    fid: fArchiveLocal.fid
                }, function(data, error) {
                    if (!$.isEmptyObject(error)) {
                        dfd.reject();
                        return;
                    }

                    that.setSymbol(fArchiveLocal.fid, 'archive', function(folder) {
                        dfd.resolve(folder.fid);
                    }, function() {
                        dfd.reject();
                    });
                });
            }

        } else {
            dfd.resolve(fArchiveBySymbol.fid);
        }

        return dfd.promise();
    };

    /**
     * Логирует теоретическую возможноть драг-н-дропа папок
     * Если пользовательских папок больше 1, то уже есть что таскать.
     */
    hFolders.logDragndropAbility = function() {
        var folders = this.data.folder;

        var draggableFoldersCnt = 0;
        for (var i = 0, j = folders.length; i < j; i++) {
            // isDraggable довольно дорогой метод,
            // поэтому ходить по всем папкам очень медленно,
            // тем более что нам надо всего 2
            if (this.isDraggable(folders[i].fid)) {
                draggableFoldersCnt++;
                if (draggableFoldersCnt > 1) {
                    Jane.c('Драгндроп папок', 'Показ папок в инбоксе (больше 1, драг разрешен)');
                    return;
                }
            }
        }
    };

})();


/* ../../handlers/folders/folders.js end */

/* ../../handlers/folders/do-folders-add.js begin */
new DoHandler("do-folders-add",
    /* ../../handlers/folders/do-folders-add.info.js begin */
{
    params: {
        folder_name: null
    }
}


/* ../../handlers/folders/do-folders-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/folders/do-folders-add.js end */

/* ../../handlers/folders/do-folder-clear.js begin */
new DoHandler("do-folder-clear",
    /* ../../handlers/folders/do-folder-clear.info.js begin */
{
    params: {
        cfid: null,
        method: null,
        old_f: null,
        from_f: null,
        subj_f: null
    }
}


/* ../../handlers/folders/do-folder-clear.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/folders/do-folder-clear.js end */

/* ../../handlers/folders/do-folder-mark-read.js begin */
new DoHandler("do-folder-mark-read",
    /* ../../handlers/folders/do-folder-mark-read.info.js begin */
{
    params: {
        fid: null
    }
}


/* ../../handlers/folders/do-folder-mark-read.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/folders/do-folder-mark-read.js end */

/* ../../handlers/folders/do-folder-rename.js begin */
new DoHandler("do-folder-rename",
    /* ../../handlers/folders/do-folder-rename.info.js begin */
{
    params: {
        name: null,
        fid: null
    }
}


/* ../../handlers/folders/do-folder-rename.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/folders/do-folder-rename.js end */

/* ../../handlers/folders/do-folder-remove.js begin */
new DoHandler("do-folder-remove",
    /* ../../handlers/folders/do-folder-remove.info.js begin */
{
    params: {
        fid: null,
        force: 'yes'
    }
}


/* ../../handlers/folders/do-folder-remove.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/folders/do-folder-remove.js end */

/* ../../handlers/folders/do-folder-move.js begin */
new DoHandler("do-folder-move",
    /* ../../handlers/folders/do-folder-move.info.js begin */
{
    params: {
        fid: null,
        parent_id: null
    }
}

/* ../../handlers/folders/do-folder-move.info.js end */

);

/* ../../handlers/folders/do-folder-move.js end */

/* ../../handlers/folders/do-folder-set-options.js begin */
new DoHandler('do-folder-set-options',
    /* ../../handlers/folders/do-folder-set-options.info.js begin */
{
    params: {
        fid: null,
        prev: null,
        notify: null,
        threaded: null
    }
}

/* ../../handlers/folders/do-folder-set-options.info.js end */

);

/* ../../handlers/folders/do-folder-set-options.js end */

/* ../../handlers/folders/do-folder-set-symbol.js begin */
new DoHandler('do-folder-set-symbol',
    /* ../../handlers/folders/do-folder-set-symbol.info.js begin */
{
    params: {
        fid: null,
        symbol: null
    }
}

/* ../../handlers/folders/do-folder-set-symbol.info.js end */

);

/* ../../handlers/folders/do-folder-set-symbol.js end */

/* ../../handlers/folders/do-folder-remove-symbol.js begin */
new DoHandler('do-folder-remove-symbol',
    /* ../../handlers/folders/do-folder-remove-symbol.info.js begin */
{
    params: {
        fid: null
    }
}

/* ../../handlers/folders/do-folder-remove-symbol.info.js end */

);

/* ../../handlers/folders/do-folder-remove-symbol.js end */

/* ../../handlers/filters/filter-search.js begin */
(function() {
    var hFilterSearch = new Jane.Handler('filter-search',
        /* ../../handlers/filters/filter-search.info.js begin */
{
    params: {
        mids: null
    }
}

/* ../../handlers/filters/filter-search.info.js end */
);

    hFilterSearch.processEnvelope = function(envelope) {
        var hLabels = Jane.$H('labels');

        // находим первую метку, у которой social=true и запоминаем ее имя
        _.any(envelope.labels, function(label) {
            var labelObj = _.find(hLabels.data.label, { lid: label});

            if (labelObj && labelObj.social) {
                envelope.dlid  = labelObj.name.replace(/^vtnrf0/, '');
                return true;
            }
        });

        // помечаем письмо как обработанное, чтобы onsetcache не зациклился
        envelope.processed = true;

        return envelope;
    };

    hFilterSearch.onsetcache = function(key, data) {
        var that = this;
        var cacheKey;

        var groupedParticipants;
        var hParticipants = Jane.$H('messages-thread-participants');

        // каждое необработанное письмо кладем в отдельный уютный кеш
        data.envelopes.filter(function(envelope) {
            if (envelope.processed) {
                delete envelope.processed;
                return false;
            }

            return true;

        }).forEach(function(envelope) {
            that.processEnvelope(envelope);

            cacheKey = hFilterSearch.getKey({ 'mids': envelope.mid });
            hFilterSearch.setCache(cacheKey, { envelopes: [envelope] });

            groupedParticipants = hParticipants.getParticipantsGroupedByMid();

            if (groupedParticipants[envelope.mid] && groupedParticipants[envelope.mid].length) {
                groupedParticipants[envelope.mid].forEach(function(p) {
                    p.message = envelope;
                });
            }

        });

        return data;
    };

    return hFilterSearch;
})();

/* ../../handlers/filters/filter-search.js end */

/* ../../handlers/filters/filters-preview.js begin */
new Handler('filters-preview',
    /* ../../handlers/filters/filters-preview.info.js begin */
{
    params: {
        id: null,
        field1: null,
        field2: null,
        field3: null,
        logic: null,
        offset: 0,
        count: 30
    }
}

/* ../../handlers/filters/filters-preview.info.js end */

);

/* ../../handlers/filters/filters-preview.js end */

/* ../../handlers/filters/filters-apply.js begin */
new Handler('filters-apply', {
    params: {
        id: null
    }
});

/* ../../handlers/filters/filters-apply.js end */

/* ../../handlers/filters/filters.js begin */
(function(global) {
    /**
     * @handler filters
     * @desc Модель для работы с фильтрами
     */
    var hFilters = new global.Jane.Handler("filters");
    var jpath = global.jpath;

    hFilters.onsetcache = function(key, data) {
        this.data = data;
    };

    /**
     * По id метки возвращает массив с элементами action фильтров, в которых эта метка используется
     * @param {String|Number} lid
     * @return Array
     */
    hFilters.getForLabel = function(lid) {
        return jpath(this.data.action, '[.actions.type == "movel" && .actions.parameter == "' + lid + '"]');
    };

    /**
     * По id папки возвращает массив с элементами action фильтров, в которых эта папка используется
     * @param {String|Number} fid
     * @return Array
     */
    hFilters.getForFolder = function(fid) {
        return jpath(this.data.action, '[.actions.type == "move" && .actions.parameter == "' + fid + '"]');
    };

    /**
     * По id сборщика возвращает массив с элементами action фильтров
     * @param {String|Number} popid
     * @return Array
     */
    hFilters.getForCollector = function(popid) {
        return jpath(this.data.action, '[.condition.div == "X-yandex-rpop-id" && .condition.pattern == "' + popid + '"]');
    };

    /**
     * Получение количества активных фильтров
     */
    hFilters.getCountEnableFilters = function() {
        return jpath(this.data, '.action[.enable == "yes"]').length;
    };
}(this));

/* ../../handlers/filters/filters.js end */

/* ../../handlers/filters/filters-whitelist.js begin */
(function() {
    var hFilter = new Handler('filters-whitelist');

    hFilter.hasEmail = function(email) {
        var data = this.getCache(this.getKey());

        if (!data) {
            return false;
        }

        return !!jpath(data, '[.addresses =="' + email + '"]')[0];
    };
})();

/* ../../handlers/filters/filters-whitelist.js end */

/* ../../handlers/filters/filters-blacklist.js begin */
(function() {

    var hFilter = new Handler('filters-blacklist');

    hFilter.hasEmail = function(email) {
        var data = this.getCache(this.getKey());

        if (!data) {
            return false;
        }

        return !!jpath(data, '[.addresses == "' + email + '"]')[0];
    };

})();

/* ../../handlers/filters/filters-blacklist.js end */

/* ../../handlers/filters/filters-check-owner.js begin */
new Handler("filters-check-owner",
    /* ../../handlers/filters/filters-check-owner.info.js begin */
{
    params: {
        e: null,
        from: null
    }
}


/* ../../handlers/filters/filters-check-owner.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/filters-check-owner.js end */

/* ../../handlers/filters/filters-check-password.js begin */
/**
 * @desc Проверяет введенный пользователем пароль
 */
(function() {
    new Jane.Handler("filters-check-password", /* ../../handlers/filters/filters-check-password.info.js begin */
{
    params: {
        password: null
    }
}


/* ../../handlers/filters/filters-check-password.info.js end */
);
}());

/* ../../handlers/filters/filters-check-password.js end */

/* ../../handlers/filters/do-filters-accept-email.js begin */
new DoHandler("do-filters-accept-email",
    /* ../../handlers/filters/do-filters-accept-email.info.js begin */
{
    params: {
        e: null
    }
}


/* ../../handlers/filters/do-filters-accept-email.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-accept-email.js end */

/* ../../handlers/filters/do-filters-whitelist-add.js begin */
new DoHandler("do-filters-whitelist-add",
    /* ../../handlers/filters/do-filters-whitelist-add.info.js begin */
{
    params: {
        email: null
    }
}


/* ../../handlers/filters/do-filters-whitelist-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-whitelist-add.js end */

/* ../../handlers/filters/do-filters-whitelist-remove.js begin */
new DoHandler("do-filters-whitelist-remove",
    /* ../../handlers/filters/do-filters-whitelist-remove.info.js begin */
{
    params: {
        email: null
    }
}


/* ../../handlers/filters/do-filters-whitelist-remove.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-whitelist-remove.js end */

/* ../../handlers/filters/do-filters-blacklist-add.js begin */
new DoHandler("do-filters-blacklist-add",
    /* ../../handlers/filters/do-filters-blacklist-add.info.js begin */
{
    params: {
        email: null
    }
}


/* ../../handlers/filters/do-filters-blacklist-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-blacklist-add.js end */

/* ../../handlers/filters/do-filters-blacklist-remove.js begin */
new DoHandler("do-filters-blacklist-remove",
    /* ../../handlers/filters/do-filters-blacklist-remove.info.js begin */
{
    params: {
        email: null
    }
}


/* ../../handlers/filters/do-filters-blacklist-remove.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-blacklist-remove.js end */

/* ../../handlers/filters/do-filters-on.js begin */
new DoHandler("do-filters-on",
    /* ../../handlers/filters/do-filters-on.info.js begin */
{
    params: {
        id: null,
        enabled: null
    }
}


/* ../../handlers/filters/do-filters-on.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-on.js end */

/* ../../handlers/filters/do-filters-off.js begin */
new DoHandler("do-filters-off",
    /* ../../handlers/filters/do-filters-off.info.js begin */
{
    params: {
        id: null,
        enabled: null
    }
}


/* ../../handlers/filters/do-filters-off.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-off.js end */

/* ../../handlers/filters/do-filters-delete.js begin */
new DoHandler("do-filters-delete",
    /* ../../handlers/filters/do-filters-delete.info.js begin */
{
    params: {
        id: null
    }
}


/* ../../handlers/filters/do-filters-delete.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-delete.js end */

/* ../../handlers/filters/do-filters-add.js begin */
new DoHandler("do-filters-add",
    /* ../../handlers/filters/do-filters-add.info.js begin */
{
    params: {
        name: null,
        letter: null,
        attachment: null,
        logic: null,
        field1: null,
        field2: null,
        field3: null,
        clicker: null,
        move_label: null,
        move_folder: null,
        forward_address: null,
        notify_address: null,
        autoanswer: null,
        order: null,
        stop: null
    }
}


/* ../../handlers/filters/do-filters-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-add.js end */

/* ../../handlers/filters/do-filters-edit.js begin */
new DoHandler("do-filters-edit",
    /* ../../handlers/filters/do-filters-edit.info.js begin */
{
    params: {
        id: null,
        name: null,
        letter: null,
        attachment: null,
        logic: null,
        field1: null,
        field2: null,
        field3: null,
        clicker: null,
        move_label: null,
        move_folder: null,
        forward_address: null,
        notify_address: null,
        autoanswer: null,
        order: null,
        stop: null
    }
}


/* ../../handlers/filters/do-filters-edit.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-edit.js end */

/* ../../handlers/filters/do-filters-sort.js begin */
new DoHandler("do-filters-sort",
    /* ../../handlers/filters/do-filters-sort.info.js begin */
{
    params: {
        list: null
    }
}


/* ../../handlers/filters/do-filters-sort.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/filters/do-filters-sort.js end */

/* ../../handlers/labels/labels.js begin */
(function(/**Daria*/Daria, /**Jane*/Jane) {

    // Метки для фидбэка спам-обороны (DARIA-8818)
    var SOLabelPrefix = 'SystMetkaSO:';

    /* ../../handlers/labels/site-labels.js begin */
(function() {

    var data = {
        // Яндекс
        yaru: "Я.ру",
        yandexfotki: "Яндекс.Фотки",
        yandexvideo: "Яндекс.Видео",
        yadirect: "Яндекс.Директ",
        yacards: "Яндекс.Открытки",
        yamarket: "Яндекс.Маркет",
        yanarod: "Яндекс.Народ",
        yaauto: "Яндекс.Авто",
        yacal: "Яндекс.Календарь",
        yasupport: 'yasupport',
        yamoney: "Яндекс.Деньги",
        yandexmusic: "Яндекс.Музыка",
        yandexwiki: "Яндекс.Вики",
        yasitesearch: "Яндекс.Поиск",
        yaxml: "Яндекс.XML",
        yawebmaster: "Яндекс.Вебмастер",
        yabetatest: 'Яндекс.Бета',
        yadisk: 'Яндекс.Диск',
        videoletter: 'videoletter',
        moikrug: "Мой Круг",
        jira: "jira",
        yandexcom: 'Yandex',
        yandexru: 'Яндекс',
        yandexcomtr: 'Yandex',
        // Старые соцметки
        odnoklassniki: "Odnoklassniki.ru",
        liveinternet: "Liveinternet.ru",
        livejournal: "Livejournal.com",
        vkontakte: "Vkontakte.ru",
        facebook: "Facebook.com",
        friendfeed: "Friendfeed.com",
        habrahabr: "Habrahabr.ru",
        mirtesen: "Mirtesen.ru",
        twitter: "Twitter.com",
        headhunter: "HeadHunter.ru",
        ozonru: "Ozon.ru",
        fotostrana: "Fotostrana.ru",
        subscribe: "Subscribe.ru",
        mnogoru: "Mnogo.ru",
        executive: "E-xecutive.ru",
        myspace: "Myspase.com",
        youtube: "Youtube.com",
        professionali: "Professionali.ru",
        rutube: "Rutube.ru",
        pingadmin: "Ping-admin.ru",
        markafoni: "Markafoni.com",
        yonja: "Yonja.com",
        formspring: "Formspring.me",
        oley: "Oley.com",
        stumbleupon: "Stumbleupon.com",
        //eticket: 'eticket',
        vedomostiru: "Ведомости",
        'yves-rocherru': 'yves-rocher.ru',
        workua: 'Work.ua',
        wordpresscom: 'Wordpress',
        womanjournalru: 'wmj.ru',
        vshtate: 'vshtate.ru',
        vkrugudruzei: 'vkrugudruzei',
        victoriassecretcom: "Victoria's Secret",
        topshopru: 'TOPSHOP',
        superjob: 'SuperJob.ru',
        smartresponderru: 'smartresponder.ru',
        skyperu: 'skype.com',
        ottoru: 'otto.ru',
        molotokru: 'molotok.ru',
        mcafeecom: 'McAfee.com',
        linkedin: 'Linkedin',
        lamodaru: 'lamoda.ru',
        geometriaru: 'Geometria.ru',
        futuretodayru: 'FutureToday.ru',
        freelance: 'Free-lance.ru',
        evernoteru: 'Evernote.com',
        dissercatcom: 'disserCat.com',
        bookingcom: 'Booking.com',
        b2bcenterru: 'B2B-Center.ru',
        applecom: 'Apple.com',
        '24open': '24open',
        datingsite: 'dating',
        'vtnrf0datingsite': 'dating',
        grouponsite: 'groupon',
        '4square': 'foursquare.com',
        allegropl: 'allegro.pl',
        darudarorg: 'darudar.org',
        ebaycom: 'ebay.com',
        forum2x2ru: 'forum2x2.ru',
        gideparkru: 'gidepark.ru',
        joobleru: 'jooble.ru',
        justclickru: 'JustClick.ru',
        kolizeoru: 'kolizeo.ru',
        newsprofipostorg: 'profi-post.org',
        newsquickofficecom: 'Quickoffice.com',
        servicegirlsgogamesru: 'GirlsgoGames.ru',
        tradesu: 'trade.su',
        biznesbombaru: 'biznesbomba.ru',
        gate32ru: 'gate-32.ru',
        specservercom: 'specserver.com',
        butikru: 'butik.ru',
        pcdaysru: 'pcdays.ru',
        '7yaru': '7ya.ru',
        info74ru: 'info74.ru',
        floridecorru: 'floridecor.ru',
        allsoftru: 'allsoft.ru',
        forumhouseru: 'forumhouse.ru',
        shopdeluxeru: 'shopdeluxe.ru',
        loccitaneru: 'loccitane.ru',
        emeacom: 'ea.com',
        'yarabota': 'Яндекс.Работа',
        'yarealty': 'Яндекс.Недвижимость',
        // Новые соцметки
        'vtnrf024open': "24open.ru",
        'vtnrf04square': "Foursquare",
        'vtnrf07yaru': "7я.ру",
        'vtnrf0afyru': "AFY.ru",
        'vtnrf0allegropl': "Аллегро",
        'vtnrf0allsoftru': "Allsoft",
        'vtnrf0applecom': "Apple",
        'vtnrf0aukroua': "Aukro.ua",
        'vtnrf0avitoru': "AVITO.ru",
        'vtnrf0b2bcenterru': "В2В-Center",
        'vtnrf0beonru': "BeOn",
        'vtnrf0bigbuzzyru': 'groupon',
        'vtnrf0biznesbombaru': "Biznesbomba",
        'vtnrf0bookingcom': "Booking.com",
        'vtnrf0burningmancom': 'BurningMan.com',
        'vtnrf0busuucom': "busuu.com",
        'vtnrf0butikru': "Бутик.ру",
        'vtnrf0chocolifeme': "Chocolife.me",
        'vtnrf0crewardscom': "crewards.com",
        'vtnrf0darudarorg': "Дару-дар",
        'vtnrf0dealextremecom': "DealExtreme",
        'vtnrf0diaryru': "Diary.ru",
        'vtnrf0dissercatcom': "DisserCat.com",
        'vtnrf0drimmicom': "Drimmicom",
        'vtnrf0ebaycom': "Ebay",
        'vtnrf0emeacom': "EA.com",
        'vtnrf0emirates': "Emirates",
        'vtnrf0evernoteru': "Evernote",
        'vtnrf0executive': "Executive",
        'vtnrf0facebook': "Facebook",
        'vtnrf0floridecorru': "Флор&Декор",
        'vtnrf0formspring': "Formspring",
        'vtnrf0forum2x2ru': "2x2",
        'vtnrf0forumhouseru': "Хост.ру",
        'vtnrf0freelance': "Freelance",
        'vtnrf0friendfeed': "Friendfeed",
        'vtnrf0futuretodayru': "Futuretoday",
        'vtnrf0gate32ru': "Gate32",
        'vtnrf0geometriaru': "Geometria",
        'vtnrf0getresponsecom': "Getresponse.com",
        'vtnrf0gideparkru': "Гайдпарк",
        'vtnrf0githubcom': "Github.com",
        'vtnrf0googlegroupscom': "Google groups",
        'vtnrf0googlecom': 'Google',
        'vtnrf0grouponsite': 'groupon',
        'vtnrf0gurboyru': 'groupon',
        'vtnrf0habrahabr': "Хабрахабр",
        'vtnrf0headhunter': "HH.ru",
        'vtnrf0imnicamailcom': "Imnica mail",
        'vtnrf0info74ru': "Инфо74",
        'vtnrf0infobonprixde': "Bonprix",
        'vtnrf0internetprosru': "Интернет опрос",
        'vtnrf0iskusnitsaru': "Искусница",
        'vtnrf0jobsmarketru': "Jobsmarket.ru",
        'vtnrf0joobleru': "Joobler.u",
        'vtnrf0justclickru': "Just Click",
        'vtnrf0kolizeoru': "KOLIZEO.ru",
        'vtnrf0lamodaru': "Lamoda.ru",
        'vtnrf0linkedin': "Linkedin",
        'vtnrf0liveinternet': "LiveInternet",
        'vtnrf0livejournal': "Livejournal",
        'vtnrf0loccitaneru': "L'occitane",
        'vtnrf0mailluxaleru': "Luxale",
        'vtnrf0markafoni': "Markafoni",
        'vtnrf0mcafeecom': "McAfee",
        'vtnrf0mirtesen': "Мир Тесен",
        'vtnrf0mnogoru': "MNOGO.ru",
        'vtnrf0moikrug': "Мой Круг",
        'vtnrf0molotokru': "Молоток.ру",
        'vtnrf0myfantru': 'groupon',
        'vtnrf0myspace': "MY SPACE ",
        'vtnrf0notifyastrostarru': "Астростар.ру",
        'vtnrf0oley': "Oley",
        'vtnrf0ottoru': "Oтто.ру",
        'vtnrf0ozonru': "Озон.ру",
        'vtnrf0pathcom': "Path.com",
        'vtnrf0paypalcom': "PayPal.com",
        'vtnrf0pcdaysru': "PC Days",
        'vtnrf0pingadmin': "Ping-Admin.Ru",
        'vtnrf0professionali': "Профессионалы",
        'vtnrf0quelleinforu': "Quelle",
        'vtnrf0quickofficecom': "Quickoffice",
        'vtnrf0radiomarketru': "Радио Маркет",
        'vtnrf0rdwru': "Работа для Вас",
        'vtnrf0regru': "reg.ru",
        'vtnrf0rutube': "Rutube",
        'vtnrf0servicegirlsgogamesru': "GirlsgoGames",
        'vtnrf0skyperu': "Skype.ru",
        'vtnrf0smartresponderru': "SmartResponder",
        'vtnrf0specservercom': "specserver.com",
        'vtnrf0sprashivairu': "Спрашивай.ру",
        'vtnrf0stumbleupon': "Stumbleupon",
        'vtnrf0subscribe': "Subscribe",
        'vtnrf0superjob': "Superjob",
        'vtnrf0teszveszhu': "teszves",
        'vtnrf0topshopru': "Топ-Шоп.ру",
        'vtnrf0tradesu': "TRADE.SU",
        'vtnrf0twitter': "twitter",
        'vtnrf0vabankcom': "vabank.com",
        'vtnrf0vedomostiru': "Ведомости",
        'vtnrf0victoriassecretcom': "Victoria's secret",
        'vtnrf0vkrugudruzei': "В кругу друзей ",
        'vtnrf0vshtate': "В Штате",
        'vtnrf0wmjru': "Womanjournal",
        'vtnrf0wordpresscom': "Wordpress",
        'vtnrf0workua': "Work.ua",
        'vtnrf0yangutucom': "Yangutu",
        'vtnrf0yonja': "Yonja",
        'vtnrf0youtube': "Youtube",
        'vtnrf0yves-rocherru': "Yves Rocher",
        'vtnrf07vetrovmskru': "7 Ветров",
        'vtnrf0anketkaru': "Анкетка.ру",
        'vtnrf0askfm': "Ask.fm",
        'vtnrf0aviasalesru': "Aviasales.ru",
        'vtnrf0babyblogru': "БебиБлог",
        'vtnrf0babyru': "бэби.ру",
        'vtnrf0bio4freecom': "Bio4free.com",
        'vtnrf0chingoraclecom': "Chingoracle.com",
        'vtnrf0dotnewsru': "Dotnews.ru",
        'vtnrf0edarlingru': "Edarling.ru",
        'vtnrf0finance1ru': "Finance1.ru",
        'vtnrf0fxcluborg': "Forex club",
        'vtnrf0gamenetru': "GameNet",
        'vtnrf0horoscopofreecom': "Horoscopofree.com",
        'vtnrf0jobru': "Job.ru",
        'vtnrf0kissesru': "Kisses.ru",
        'vtnrf0liststarotaroru': "ТароТаро",
        'vtnrf0liveexpertru': "Liveexpert.ru",
        'vtnrf0livemasterru': "Livemaster.ru",
        'vtnrf0malinaru': "Малина",
        'vtnrf0mamsyru': "Mamsy.ru",
        'vtnrf0meggymallru': "Meggy Mall",
        'vtnrf0mithostru': "Mitinfo.ru",
        'vtnrf0pokerstarscom': "PokerStars.com",
        'vtnrf0prestigeua': "Prestige",
        'vtnrf0probelovnet': "Пробелов.Нет",
        'vtnrf0promenadru': "Promenad",
        'vtnrf0qualitynetua': "Quality.net",
        'vtnrf0rabotaua': "Rabota.ua",
        'vtnrf0rugionru': "RUgion",
        'vtnrf0sapatoru': "Sapato.ru",
        'vtnrf0slandoru': "Slando.ru",
        'vtnrf0softkeyru': "Softkey.ru",
        'vtnrf0stilagoinfo': "Emailvision",
        'vtnrf0taggedmailcom': "Tagged",
        'vtnrf0theboutiqueru': "Boutique.ru",
        'vtnrf0topfacecom': "Topface",
        'vtnrf0torrnadoru': "torrНадо.ru",
        'vtnrf0transportlineru': "TransportLine",
        'vtnrf0trudcom': "Trud.com",
        'vtnrf0westwingru': "Westwing",
        'vtnrf0wildberriesru': "Wildberries",
        'vtnrf0wmmailru': "Wmmail.ru",
        'vtnrf0worldoftanksru': "World of Tanks",
        'vtnrf0yourclotheseu': "Boutique.ru"
    };

    new Jane.StaticJSHandler('site-labels', {data: data});

})();



/* ../../handlers/labels/site-labels.js end */

    var hSiteLabels = Jane.$H('site-labels');

    var hLabels = new Jane.Handler('labels');

    hLabels.SO = (function() {
        var types = [
            // типы сообщения
            ['other', 'other', 'другое'],
            ['4', 'people', 'письмо от человека'],
            ['2', 'registration', 'письмо с учетными данными'],
            ['5', 'eticket', 'электронный билет'],
            ['6', 'eshop', 'статус интернет-покупки'],
            ['8', 'bounce', 'статус доставки письма'],
            ['12', 'greeting', 'письмо от яндекса'],
            ['13', 'news', 'общая рассылка (новости/акции)'],
            ['7', 'notification', 'уведомление о новом сообщении'],
            ['22', 'personalnews', 'индивидуальная рассылка'],
            ['28', 'cancel', 'отмена какой-либо брони'],
            ['35', 'hotel', 'бронирования гостиниц'],
            ['36', 'yamoney', 'письма с деньгами'],
            ['invite', 'invite', 'приглашение'],

            // типы отправителя
            ['other', 'other', 'другое'],
            ['14', 's_grouponsite', 'скидочного сервиса'],
            ['15', 's_datingsite', 'сайта знакомств'],
            ['17', 's_bank', 'банка'],
            ['18', 's_social', 'социальной сети'],
            ['16', 's_aviaeticket', 'авиакомпании (или агента)'],
            ['19', 's_travel', 'тур. оператора'],
            ['20', 's_zdticket', 'жд-компании'],
            ['21', 's_realty', 'агентства недвижимости'],
            ['23', 's_eshop', 'интернет-магазина'],
            ['24', 's_company', 'какой-либо компании'],
            ['33', 's_forum', 'форума'],
            ['31', 's_advert', 'доски объявлений'],
            ['25', 's_job', 'рекрутинговой компании'],
            ['34', 's_mobile', 'мобильного оператора'],
            ['32', 's_provider', 'провайдера'],
            ['29', 's_tech', 'IT компании'],
            ['26', 's_game', 'какой-либо игры'],
            //['s_state', 's_state', 'гос. организации'],
            //['s_training', 's_training', 'учебные курсы'],
            ['30', 's_media', 'медиа-портала'],
            ['s_gos', 's_state', 'государственных услуг'],
            ['other', 'other', 'другое']
        ];

        types = $.map(types, function(label) {
            return {
                id: label[0],
                title: label[1],
                description: label[2] || label[1].toLowerCase()
            };
        });

        return {
            mtypes: types.slice(0, 14),
            ftypes: types.slice(14)
        };
    })();

    /**
     * Получение типа сообщения по id.
     *
     * @param {String} id
     * @return {Object}
     */
    hLabels.getMTypeById = function(id) {
        var l = this.SO.mtypes.length;
        while (l--) {
            if (this.SO.mtypes[l].id === id) {
                return this.SO.mtypes[l];
            }
        }

        return null;
    };

    /**
     * Получение типа отправителя по id.
     *
     * @param {String} id
     * @return {Object}
     */
    hLabels.getFTypeById = function(id) {
        var l = this.SO.ftypes.length;
        while (l--) {
            if (this.SO.ftypes[l].id === id) {
                return this.SO.ftypes[l];
            }
        }

        return null;
    };

    /**
     * Получение первого типа сообщения из общего списка типов сообщения.
     *
     * @param {Array} labels список типов сообщения
     * @returns {String|Null} тип сообщения
     */
    hLabels.extractFirstMType = function(labels) {
        var mtypes = $.map(this.SO.mtypes, function(t) {
            return t.id;
        });

        labels = $.map(labels, function(l) {
            if ($.inArray(l, mtypes) == -1) {
                return;
            }

            return l;
        });

        return labels[0] || null;
    };

    /**
     * Получение первого типа отправителя из общего списка типов сообщения.
     *
     * @param {Array} labels список типов сообщения
     * @returns {String|Null} тип отправителя
     */
    hLabels.extractFirstFType = function(labels) {
        var ftypes = $.map(this.SO.ftypes, function(t) {
            return t.id;
        });

        labels = $.map(labels, function(l) {
            if ($.inArray(l, ftypes) == -1) {
                return;
            }

            return l;
        });

        return labels[0] || null;
    };

    hLabels.getSOLabelName = function(lid) {
        var label = this.getLabelById(lid);
        // есть подозрение, что label.name есть не всегда DARIA-10920
        if (label && label.name && label.name.indexOf(SOLabelPrefix) === 0) {
            return label.name;
        }

        return null;
    };

// Запоминаем id метки "Важные".
    hLabels.onsetcache = function(key, data) {
        /**
         * Кэш поиска меток по имени.
         * @type {Object}
         * @private
         */
        this._cacheByName = {};

        /**
         * Кэш поиска меток по lid.
         * @type {Object}
         * @private
         */
        this._cacheByLid = {};

        var siteLabels = hSiteLabels.getCache();

        $.each(jpath(data, ".label"), function() {
            var name = this.name;
            var label = siteLabels[name];
            var title;
            if (label) {
                if (label == 'dating') {
                    title = i18n('%Labels_Social_Label_Datingsite');
                } else if (label == 'groupon') {
                    title = i18n('%Labels_Social_Label_Grouponsite');
                } else if (label == 'yasupport') {
                    title = i18n('%Labels_Social_Label_Yasupport');
                    this.yaservice = true;
                } else if (label == 'videoletter') {
                    title = i18n('%Labels_Social_Label_Videoletter');
                    this.yaservice = true;
                } else if (label == 'eticket') {
                    title = i18n('%Labels_Social_Label_Eticket');
                } else if (name.indexOf('ya') > -1 || name == 'moikrug') {
                    title = i18n('%Labels_Social_Label_Yandex', label);
                    this.yaservice = true;
                } else {
                    title = i18n('%Labels_Social_Label', label);
                }

                this.social = true;
                this.title = title;
            } else {
                // DARIA-25410
                // обрезание длинных меток писем из google
                if (this.user && this.name.length > 15) {
                    this.name = this.name.substr(0, 15) + '…';
                }

                // обнуляем данные о социальности из wmi
                delete this.social;
            }
        });

        this.data = data; // Чтобы не считать ключ (а он ни от чего не зависит) и не лезть в кэш, сохраняем сразу xml с метками.

        var label = this.getLabelByName('remindme_threadabout:mark');
        if (!label) {
            Jane.ErrorLog.send({
                'errorType': 'nolabel',
                'label': 'remindme_threadabout:mark'
            });
        }
    };

    /**
     * Возвращает LID метки "Важное"
     * @return {String}
     */
    hLabels.getImportantLID = function() {
        var label = this.getLabelById('priority_high');
        return label ? label.lid : null;
    };

    /**
     * Возвращает ID метки по имени.
     * @param {String} name Имя метки.
     * @return {String}
     */
    hLabels.getLIDByName = function(name) {
        var label = this.getLabelByName(name);
        return label ? label.lid : null;
    };

    /**
     * Возвращает метку по LID или symbol.
     * @param {String} lid LID метки.
     * @return {Object}
     */
    hLabels.getLabelById = function(lid) {
        var cache = this._cacheByLid || {};
        if (!(lid in cache)) {
            if (/^\d+$/.test(lid)) {
                cache[lid] = jpath(this.data, '.label[.lid == "' + lid + '"]')[0];
            } else {
                cache[lid] = jpath(this.data, '.label[.symbol == "' + lid + '"]')[0];
            }
        }

        return cache[lid];
    };

    /**
     * Возвращает метку по названию.
     * @param {String} name Название метки.
     * @return {Object}
     */
    hLabels.getLabelByName = function(name) {
        var cache = this._cacheByName || {};
        if (!(name in cache)) {
            cache[name] = jpath(this.data, '.label[.name == "' + name + '"]')[0];
        }

        return cache[name];
    };

    /**
     * Обновляет количество писем в метке.
     * @param {String} lid
     * @param {Number} delta
     */
    hLabels.updateLabelCount = function(lid, delta) {
        var label = this.getLabelById(lid);
        // письмо может прийти для метки, о  которой мы еще не знаем
        if (label) {
            label.count = Number(label.count) + delta;
        }
    };

    /**
     * Возвращает хеш меток, доступных пользователю.
     * {lid: 0}
     * @returns Object
     */
    hLabels.getLabelsHash = function() {
        //var xpath = 'label[@id][(user or default) and not(social) and not(name = "deleted" and default)]';
        var cache = this.getCacheByParams();
        var result = {};
        if (cache) {
            $.each(cache.label, function() {
                if (this.lid && (this.user || this['default']) && !this.social && !(this.name == 'deleted' && this['default'])) {
                    result[this.lid] = 0;
                }
            });
        }
        return result;
    };

    /**
     * Возврщает количество пользовательских меток.
     * @returns Number
     */
    hLabels.getUserLabelsCount = function() {
        return jpath(this.data, '.label[.user]').length;
    };

    /**
     * Возврщает true, если метка lid социальная.
     * @param {String} lid
     * @returns Boolean
     */
    hLabels.isSocial = function(lid) {
        var label = hLabels.getLabelById(lid);
        return Boolean(label && 'social' in label);
    };

})(Daria, Jane);


/* ../../handlers/labels/labels.js end */

/* ../../handlers/labels/do-labels-delete.js begin */
new DoHandler("do-labels-delete",
    /* ../../handlers/labels/do-labels-delete.info.js begin */
{
    params: {
        lids: null
    }
}


/* ../../handlers/labels/do-labels-delete.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/labels/do-labels-delete.js end */

/* ../../handlers/labels/labels-colors.js begin */
(function() {

    var FAKE_LABEL_COLOR = '31c73b';

    var hLabelsColors = new Jane.StaticJSHandler("labels-colors", {
        data: {
            "row": [
                { "color": [ FAKE_LABEL_COLOR, '7cc3c4', '5a8eff', 'ba99ff', 'a8bcce', 'c1be00', 'f99000', 'ff8985' ] },
                { "color": [ '28a931', '67a3a4', '5080e7', 'a488e2', '8e9faf', 'a19f00', 'db7f00', 'ff3f30' ] },
                { "color": [ '1d8925', '508182', '456ec8', '8e75c4', '73818e', '807e00', 'bb6c00', 'f32300' ] },
                { "color": [ '136619', '395e5f', '385ca8', '7760a4', '57616c', '5c5a00', '9c5800', 'd51e00' ] }
            ]
        }
    });

    hLabelsColors.FAKE_LABEL_COLOR = FAKE_LABEL_COLOR;

})();

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/labels/labels-colors.js end */

/* ../../handlers/labels/do-labels-add.js begin */
new DoHandler("do-labels-add",
    /* ../../handlers/labels/do-labels-add.info.js begin */
{
    params: {
        label_name: null,
        label_color: null,
        label_type: null
    }
}


/* ../../handlers/labels/do-labels-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/labels/do-labels-add.js end */

/* ../../handlers/messages/messages.js begin */
(function() {

    var hMessages = new Handler("messages",
        /* ../../handlers/messages/messages.info.js begin */
{
    params: {
        threaded       : null,
        'goto'         : null,
        current_folder : null, // У этого параметра есть дефолтное значение. Но у каждого пользователя свой собственный id у папки "Входящие".
                               // Поэтому мы тут пишем null, а при загрузке списка папок устанавливаем его в нужное значение.
                               // См. ../folders/folders.js метод onsetcache.
        current_label  : null,
        thread_id      : null,
        extra_cond     : null,
        page_number    : "1",
        sort_type      : "date",
        request        : null,
        scope          : null,
        unread         : null,
        datePager      : null,
        mrange         : null,
        from           : null,
        to             : null,
        fid            : null,
        lid            : null,
        excluded       : null,
        search         : null,
        force          : null,
        first          : null,
        last           : null,
        type           : null,
        withatts       : null
    }
}


/* ../../handlers/messages/messages.info.js end */

    );

    /**
     * Хеш с данными о страницах для списков писем
     * @type Object
     * @private
     */
    hMessages._pages = {};

    /**
     * Возвращает номер последней загруженной и следующей страницы для списка писем с параметрами params
     * @param {Object} [params=Daria.Page.params]  Параметры списка писем.
     * @return {Object}  Если информация для тиких параметров есть, то возвращается объект вида {current: 1, next: 2}.
     *                   Если текущая страница последняя, то "next" в нем будет null.
     *                   Если же информации нет, то возвращается объект {current: 1, next: null}, который записывается в хэш this._pages.
     */
    hMessages.getPageInfo = function(params) {
        params = $.extend({}, params || Daria.Page.params);
        delete params['page_number'];
        var key = this.getKey(params);
        if (!this._pages[key]) {
            this._pages[key] = {current: 1, next: null};
        }
        return this._pages[key];
    };

    hMessages.setCache = function(key, data, params, timestamp) {
        var item = this.cache[key];
        if (item && (item.timestamp > timestamp)) {
            return;
        }

        var hMessage = Jane.$H("message");

        var ids = [];
        var items = data['message'];
        for (var i = 0, j = items.length; i < j; i++) {
            if (items[i]) { // в message-nearest может приходить null
                ids.push(hMessage._setCacheFromMessages(items[i], timestamp));
            } else {
                ids.push(null);
            }
        }

        if (params['thread_id']) {
            var cnt = jpath(data, '.details.pager.items-count')[0];
            if (cnt) {
                // грязными ручонками лезем куда не надо, ай-ай-ай
                hMessage._countInfo['t' + params['thread_id']] = parseInt(cnt, 10);
            }
        }

        this._setCache(key, { ids: ids, node: data }, params, timestamp);

//    this.logWrongFolderCounters(data, params);
        this.data = data;
    };

    hMessages.getCache = function(key) {
        var cacheItem = this.cache[key];
        if (!cacheItem) {
            return;
        }
        var cacheData = cacheItem.data;

        var node = cacheData.node;

        node.message = [];
        var hMessage = Jane.$H("message");
        for (var i = 0, j = cacheData.ids.length; i < j; i++) {
            if (cacheData.ids[i]) {
                node.message.push(hMessage.getCache(cacheData.ids[i]));
            } else {
                node.message.push({});
            }
        }

        return node;
    };

    function onsetcacheIE9Pinned(key, cache, params) {
        if (!Daria.Pinned.ON) {
            return;
        }

        var hFoldersIds = Jane.$H('folders').ids;

        if (!params.thread_id && !params.request && (!params.current_folder || params.current_folder === hFoldersIds.inbox)) {
            var messagesToShow = [];

            var messages = jpath(cache.node, '.message');
            var size = Math.min(5, messages.length);
            for (var i = 0; i < size; i++) {
                var message = messages[i];
                var messageParams = {
                    // в IE9 и IE10 pinned sites больше 128 символов не влезает
                    'subject': message['subject'].substr(0, 128),
                    'url': '#' + (message.count ? 'thread' : 'message') + '/' + message.mid,
                    'ico': '//yastatic.net/lego/_/ZngJQ7JbhUe5e7PytN5P2dXat6o.ico'
                };
                /*
                Отрывыем: DARIA-22672

                // ищем социальные метки, чтобы заменить иконку
                var messageLabels = message.lid;
                var hLabels = Jane.$H('labels');
                var mailStatic = Jane.getEntity('mail-static');
                for (var k = 0, l = messageLabels.length; k < l; k ++) {
                    var socialLabel = hLabels.getLabelById(messageLabels[k]);
                    if (socialLabel && socialLabel.social) {
                        // Это правильный новый урл до иконок b-ico/b-ico_service
                        // messageParams.ico = mailStatic + '/blocks/jane/b-ico/_service/b-ico_service_' + messageLabel.name + '.ico';
                        messageParams.ico = mailStatic + '/blocks/jane/b-site-icon/_type/b-site-icon_' + socialLabel.name + '.ico';
                        break;
                    }
                }
                */

                messagesToShow.push(messageParams);
            }

            Daria.Pinned.updateJumpList(i18n('%Pinned_Входящие'), messagesToShow);
        }
    }

    /* ------------------------------------------------------------------------------------------------------------- */

// Очищает кэш по заданной метке
    hMessages.clearCacheByLabel = function(labelID) {
        this.clearCache(function(key, cacheItem) {
            var params = cacheItem.params;
            return params.current_label == labelID;
        });
    };

// Очищает кэш по заданной папке
    hMessages.clearCacheByFolder = function(folderID) {
        this.clearCache(function(key, cacheItem) {
            var params = cacheItem.params;
            return (params.current_folder || hMessages.params.current_folder) == folderID;
        });
    };

    hMessages.onsetcache = function(key, cache, params) {
        // Обновляем информацию о страницах
        var pageInfo = this.getPageInfo(params);
        var hasMsgs = !this.isEmptyList(key);
        var currentPage = Number(params['page_number']) || 1;
        var nextPage = jpath(cache.node, '.details.pager.next')[0];

        nextPage = nextPage ? Number(nextPage) : null;

        if (hasMsgs) {
            // Если на данной странице есть сообщения и это самая последняя,
            // либо последняя загруженная страница, то делаем ее текущей
            if (!nextPage || (nextPage && currentPage >= pageInfo.current)) {
                pageInfo.current = currentPage;
                pageInfo.next = nextPage;
            }
        } else if (currentPage <= pageInfo.current) {
            // Если же на ней нет сообщений и она - либо текущая, либо была до нее,
            // то текущей страницей (последней страницей с сообщениями) является как минимум предыдущая.
            pageInfo.current = Math.max(currentPage - 1, 1);
            pageInfo.next = null;
        }

        // ставим таймаут, чтобы пришли labels
        window.setTimeout(function() {
            onsetcacheIE9Pinned(key, cache, params);
        }, 1);

        // открытие непрочитанных тредов только для 303 базы
        // пока решили оторвать автораскрытие тредов везде
        /*if (false && Jane.$H("account-information").data['db'] == 'mdb303') {
            preloadThreads(cache.node, params);
        }*/

        if (cache && cache.node) {
            /*
            ставим timeout, чтобы все хендлеры из текущего запроса попали в кеш
            иначе получим ситуацию:
              - грузим messages, messages-body, message-nearest
              - в messages непрочитанное сообщение, для которого мы запросили body и nearest
              - в данный момент они еще в кеш не попали, т.к. сейчас обрабатывается messages, который загрузит body и nearest еще раз
             */
            window.setTimeout(function() {
                // предзагрузка писем и тредов
                preloadMessages(params, cache.node);

                Jane.events.trigger('messages.onsetcache', jpath(cache.node, '/.message.mid'));
            }, 1);
        }
    };

    function preloadMessages(params, data) {

        var hFolders = Jane.$H("folders");
        var type = 'inbox';

        // определяем тип применяемых правил и ограничений
        var folderID = params.current_folder;
        if (!folderID || folderID == hFolders.ids.inbox) { // если нет, то это входящие
            folderID = hFolders.ids.inbox;

        } else if (folderID in hFolders.symbols) { // для стандартных папок нет предзагрузки
            return;

        } else {
            type = 'user_folder';
        }

        if (params.thread_id) {
            type = 'thread';
        }

        var messages = data['message'];
        var unreadMessages = jpath(messages, '[.new]');
        var unreadMessagesCnt = unreadMessages.length;

        if (unreadMessagesCnt === 0) {
            return;
        }

        var allMessagesCnt = messages.length;
        var unreadPercent = Math.round(unreadMessagesCnt / allMessagesCnt * 100);

        var preloadMessagesArr = [];
        var PRELOAD_MSG_LIMIT = 10;

        switch (type) {
        case 'user_folder':
            // грузим первые 10, если непрочитанных меньше 10 или меньше 80% от всех писем в папке
            if (allMessagesCnt <= PRELOAD_MSG_LIMIT || unreadPercent <= 80) {
                preloadMessagesArr = filterMessagesAndGetIds(unreadMessages, folderID, 20, PRELOAD_MSG_LIMIT);
            }
            break;

        case 'thread': // пока тут логика такая же как во входящик
        /* falls through */
        default:
            // грузим все, если непрочитанных меньше 10 или меньше 30% от всех писем в папке
            if (allMessagesCnt <= PRELOAD_MSG_LIMIT || unreadPercent <= 30) { // грузим все
                preloadMessagesArr = filterMessagesAndGetIds(unreadMessages, folderID, 50);

            } else if (unreadPercent <= 80) {
                // грузим первые 10, если непрочитанных меньше 80% от всех писем в папке
                preloadMessagesArr = filterMessagesAndGetIds(unreadMessages, folderID, 50, 10);
            }
        }

        Daria.preloadMessages(preloadMessagesArr);
    }

    /**
     * Возвращает массив id первых N сообщений из массива, размер которых не превышает заданный.
     * @param {Object[]} messages Массив сообщений.
     * @param {String} folderID ID папки.
     * @param {Number} sizeLimit Лимит на размер сообщения.
     * @param {Number} [countLimit=Number.POSITIVE_INFINITY] Лимит на количество сообщений.
     * @return {Array}
     */
    function filterMessagesAndGetIds(messages, folderID, sizeLimit, countLimit) {
        countLimit = countLimit || Number.POSITIVE_INFINITY;

        var firstMessages = [];
        var hFolders = Jane.$H('folders');

        for (var i = 0, l = messages.length; i < l; i++) {
            var message = messages[i];
            var isThread = 'count' in message;
            if (
                isThread || /*для тредов не учитываем размер*/
                    // предкешируем, только если письмо находится в нормальной папке
                    (hFolders.isIncoming(message.fid) && messageHasValidSize(message, sizeLimit))
                ) {
                if (isThread) {
                    firstMessages.push([folderID, message.tid]);

                } else {
                    firstMessages.push(message.mid);
                }
                if (firstMessages.length >= countLimit) {
                    break;
                }
            }
        }

        return firstMessages;
    }

    /**
     * Проверяет, что письмо не больше заданного размера.
     * @param {Object} messageNode Нода письма.
     * @param {Number} size Предельный размер письма.
     * @return {Boolean}
     */
    function messageHasValidSize(messageNode, size) {
        return parseInt(messageNode['size'], 10) < size;
    }

    /**
     * Генерирует хэш с имейлами из списка писем для аватарок
     * @example
     * {
     *  "mid1": {
     *      "socail": true,
     *      "from": {
     *          "email": "e0@ya.ru",
     *          "ref": "dsdfafdsf"
     *      },
     *      "to": {
     *          "email": "e1@ya.ru",
     *          "ref": "dsafdasf"
     *      },
     *      "relply-to": {
     *          "email": "e2@ya.ru",
     *          "ref": "ffff"
     *      }
     *  },
     *  ...
     * }
     */
    hMessages.getEmails = function(params) {
        var result = {};
        var socials = jpath(Jane.$H('labels').data, '.label[.social].lid');
        var data = this.getCacheByParams(params);

        $.each(jpath(data, '.message'), function(i, message) {
            var item = result[(message.count ? 't' : '') + message.mid] = {};

            // определям с соцметкой ли письмо
            item.social = !!$.map(message.lid,function(lid) {
                return $.inArray(lid, socials) > -1 || null;
            }).length;

            // тип письма
            item.types = message.types;

            // берём по 1 имейлу каждого типа
            $.each(message.field, function(i, field) {
                item[field.type] = {
                    ref: field.ref,
                    email: field.email
                };
            });
        });

        return result;
    };

    /**
     * Возвращает количество страниц в пейджере.
     * @param {Object} params
     * @returns Number|Boolean
     */
    hMessages.getPagesCount = function(params) {
        var cache = hMessages.getRawCacheByParams(params);
        if (cache && cache.data && cache.data.node) {
            var threadPager = jpath(cache.data.node, '.details.pager')[0];
            if (threadPager) {
                return threadPager['pages-count'] ? parseInt(threadPager['pages-count'], 10) : false;
            }
        }
        return false;
    };

    /**
     * Считает количество писем в треде, которые находятся в данной папке.
     * Если возвращается false, то значит у треда есть пейджер и такое посчитать нельзя.
     * @param {Object} params
     * @param {String} params.thread_id
     * @param {String} params.current_folder
     * @returns Number|Boolean
     */
    hMessages.getCountThreadMessageInFolder = function(params) {
        var pagesCount = this.getPagesCount(params);
        //если страница одна, то можем посчитать
        if (pagesCount !== false && pagesCount == 1) {
            var cache = this.getCacheByParams(params);
            var folder = params['current_folder'] || Daria.Page.params.current_folder;
            var msgs = jpath(cache, '.message[.fid == "' + folder + '"]');
            return msgs && msgs.length;
        }

        return false;
    };

    /**
     * Удаляет письмо из списка писем.
     * @param {Object} params
     * @param {String} mid
     */
    hMessages.deleteMessage = function(params, mid) {
        var cache = this.getCacheByParams(params);
        if (cache && cache.data && cache.data.ids) {
            return Jane.Array.remove(cache.data.ids, mid) > -1;
        }

        return false;
    };

    /*
     * Проверяет пустой ли список.
     * @param {String|Object} key Ключ или параметры.
     * @returns Boolean
     */
    hMessages.isEmptyList = function(key) {
        var cache;
        if (typeof key === 'string') {
            cache = this.getRawCache(key);
        } else {
            cache = this.getRawCacheByParams(key);
        }
        return cache && cache.data && cache.data.ids.length === 0;
    };

    /**
     * Производит действия с письмами в тредах.
     * params и action аналогичны hMessage.grep
     * @param {Array} tids Массив TID'ов
     * @param {Object} params
     * @param {String} action
     */
    hMessages.doActionInThread = function(tids, params, action) {
        var hMessage = Jane.$H('message');
        for (var key in this.cache) {
            var cache = this.cache[key];
            // если есть кеш с таким tids
            if ($.inArray(cache.params.thread_id, tids) > -1) {
                hMessage.grep({
                    mids: cache.data.ids
                }, params, action);
            }
        }
    };

    /**
     * Вставляет новое сообщение в список писем папки.
     * @description Если есть заменяемое сообщение, то оно удаляется, а новое становится наверх списка.
     * В качестве заменяемого может выступать как и обновленный тред (тогда newMsgKey === replacedMsgKey),
     * так и письмо, образовавшее в тред с новым сообщением.
     * @param {Object} params Параметры списка.
     * @param {String} newMsgKey Ключ вставляемого сообщения.
     * @param {String} [replacedMsgKey] Ключ заменяемого сообщения.
     * @return {Boolean}
     */
    hMessages.insertMessage = function(params, newMsgKey, replacedMsgKey) {
        // копируем, потому что они будут меняться
        params = $.extend({}, params);
        params.page_number = '1';

        var result = false;

        // проходим по всем page_number и сдвигаем письма
        var rawCache;
        do {
            var cacheKey = this.getKey(params);
            rawCache = this.getRawCache(cacheKey);
            if (rawCache && rawCache.data) {
                // данные кеша
                var messagesCache = rawCache.data;
                // данные самого хендлера
                var messagesData = messagesCache.node;
                var messsagesPager = messagesData.details.pager;
                var messagesPerPage = messsagesPager['items-per-page'];

                // массив ids списка писем
                var ids = messagesCache.ids;
                if (ids) {
                    if (replacedMsgKey) {
                        var replacedIndex = Jane.Array.remove(ids, replacedMsgKey);
                        if (replacedIndex > -1) {
                            // больше не надо заменять
                            replacedMsgKey = null;
                        }
                    }

                    ids.unshift(newMsgKey);
                    if (ids.length > messagesPerPage) {
                        // запоминаем удаленный элемент, чтоб вставить его в последующие списки
                        newMsgKey = ids.splice(-1)[0];
                    } else {
                        // если письмо не выпало из списка, то дальше идти не надо
                        newMsgKey = null;
                    }
                    this.touch(cacheKey);

                    // обновляем пейджер только у первой страницы
                    if (!result) {
                        var newPagerXMLString = _makePagerXML(messsagesPager);
                        if (newPagerXMLString) {
                            messagesData.details.pager = newPagerXMLString;
                        }
                    }

                    result = true;
                }
            }

            // должна быть строка
            params.page_number = String(Number(params.page_number) + 1);

        } while (rawCache && newMsgKey);

        return result;
    };

    // aandrosov: ваще не знаю насколько правильно это работает
    // на yt и publiс сейчас разная и непонятная выдача
    function _makePagerXML(oxPager) {

        // Тег <pager> есть всегда, но пейджер рисуется только когда есть
        // либо предыдущая, либо следующая страницы.
        var hasPager = !oxPager.prev && !oxPager.next;

        var count = oxPager['items-count'];
        var perpage = parseInt(oxPager["items-per-page"], 10);
        var oldPagesCount = parseInt(oxPager["pages-count"], 10);

        // Пейджер есть, но без страниц, поэтому он и не изменится после добавления нового письма.
        if (hasPager && !count) {
            return null;
        }
        // И еще и fullpage, иначе был бы return на предыдущей строчке.
        if (!hasPager && !count) {
            // Появился пейджер, он без страниц, значит ровно такой.
            return {
                'items-count': 1,
                'pages-count': 1,
                'items-per-page': perpage
            };
        }

        count = parseInt(count, 10) + 1; // Добавляем новое письмо.
        var pagesCount = Math.ceil(count / perpage);
        if (pagesCount > 1 && pagesCount != oldPagesCount) { // Изменилось количество страниц.
            var currentPage = 1;
            var xml = {
                'current': currentPage,
                'items-count': count,
                'items-per-page': perpage,
                'pages-count': pagesCount
            };
            // Всегда на первой странице, а вторая страница тоже всегда есть.
            xml.next = 2;
            xml.pages = [];
            var start = Math.max(1, currentPage - 7);
            var end = Math.min(pagesCount, currentPage + 7);
            for (var i = start; i <= end; ++i) {
                xml.pages.push(i);
            }
            if (end + 1 < pagesCount) {
                xml.pages.push(pagesCount);
            }
            return xml;

        } else {
            oxPager["items-count"] = count; // Нужно только обновить xml пейджера.
            return null;
        }
    }

    /**
     * Очищает списки непрочитанных сообщений.
     */
    hMessages.clearUnreadsList = function() {
        hMessages.clearCache(onlyNewMessagesList);
    };

    function onlyNewMessagesList(key, cacheItem) {
        return cacheItem.params.extra_cond == 'only_new';
    }

    // Получал ли пользователь какие-нибудь сообщения, кроме приветственных
    hMessages.hasMessages = function() {
        var hSettings = Jane.$H('settings');
        if (hSettings.getSetting('has_inbox_message')) {
            return true;
        }

        var messagesCache = this.getCacheByPageParams();

        if (!messagesCache) {
            return false;
        }
        // Если в кеше есть какие-то письма кроме приветственных
        if (jpath(messagesCache, '/.message[.type != "12" && .dlid != "yadisk"]').length) {
            hSettings.setSettingOn('has_inbox_message');
            return true;

        }
        Jane.c('Не показываем рекламу так как в инбоксе нет писем кроме приветственных');
        return false;
    };

    /**
     * Возвращает есть ли сообщения на текущей странице
     * @returns {Boolean}
     */
    hMessages.hasMessagesOnPage = function() {
        return Boolean(jpath(this.getCacheByPageParams(), '.message').length);
    };

})();

/* ../../handlers/messages/messages.js end */

/* ../../handlers/messages/messages-pager.js begin */
(function() {
    var handler = new Handler("messages-pager",
        /* ../../handlers/messages/messages-pager.info.js begin */
{
    params: {
        current_folder : null
    }
}

/* ../../handlers/messages/messages-pager.info.js end */

    );

    // В выдаче хэндлерв есть только дата, на её основе строим большой и толстый JSON для пейджера
    handler.onsetcache = function(key, data) {
        var n = Jane.Common.n;
        var dataYear = data['year'];
        var dataMonth = data['month'];
        var dataDay = data['day'];

        var nowDate = new Date();
        var mDate = new Date(dataYear, dataMonth - 1, dataDay);

        // Если пейджер ничего не возвратил или вернулась кривая дата
        if (!dataYear || nowDate <= mDate) {
            this.cache[key].data = {};
            return;
        }

        var nowYear = nowDate.getFullYear();
        var mYear = mDate.getFullYear();

        var nowMonth = nowDate.getMonth() + 1;
        var mMonth = mDate.getMonth() + 1;

        var yearConfigs = [];
        var year = mYear;
        var month = mMonth;
        var yearConfig = {
            id: year,
            datePager: year,
            year: year,
            from: '01.01.' + year,
            to: '01.01.' + (year + 1),
            month: [],
            isYear: true
        };

        var infinityCounter = 0;
        var oldYearsIf = year >= Daria.Config.messagesMaxDate;
        // выполняем пока год и месяц не совпадут с текущим
        while ((year < nowYear) || (year == nowYear && month <= nowMonth)) {

            if (oldYearsIf) {
                yearConfig.month.push({
                    datePager: n(month) + '.' + year,
                    month: month - 1,
                    year: year,
                    from: '01.' + n(month) + '.' + year,
                    to: '01.' + (month < 12 ? n(month + 1) : n(1)) + '.' + (month < 12 ? year : year + 1),
                    id: n(month) + String(year)
                });
            }

            month++;
            if (month == 13) {
                month = 1;

                if (oldYearsIf) {
                    yearConfigs.push(yearConfig);
                } else if (yearConfigs.length === 0) {
                    yearConfigs.push({
                        id: year,
                        datePager: year,
                        year: year,
                        old: 1
                    });
                }
                year++;
                oldYearsIf = year >= Daria.Config.messagesMaxDate;
                if (oldYearsIf) {
                    yearConfig = {
                        id: year,
                        datePager: year,
                        year: year,
                        from: '01.01.' + year,
                        to: '01.01.' + (year + 1),
                        month: [],
                        isYear: true
                    };
                }
            }
            // счетчик итераций на всякий случай
            infinityCounter++;
            if (infinityCounter > 1000) {
                Jane.ErrorLog.send({
                    errorType: 'messages-pager.infinity',
                    dataYear: dataYear,
                    dataMonth: dataMonth,
                    dataDay: dataDay,
                    nowDate: nowDate.toString()
                });
                this.cache[key].data = {};
                return;
            }
        }
        if (yearConfig.month.length) {
            yearConfigs.push(yearConfig);
        }

        this.cache[key].data = {
            year: yearConfigs
        };
    };

})();

/* ../../handlers/messages/messages-pager.js end */

/* ../../handlers/messages/messages-sort.js begin */
(function() {

    var data = {
        "sort": [
            { "type": "from", "title": i18n('%Messages_Sort_By_from_title'), "order": [
                { "type": "desc", "title": i18n('%Messages_Sort_By_from_desc')},
                { "type": "asc", "title": i18n('%Messages_Sort_By_from_asc')}
            ]},
            { "type": "subject", "title": i18n('%Messages_Sort_By_subject_title'), "order": [
                { "type": "desc", "title": i18n('%Messages_Sort_By_subject_desc')},
                { "type": "asc", "title": i18n('%Messages_Sort_By_subject_asc')}
            ]},
            { "type": "date", "title": i18n('%Messages_Sort_By_date_title'), "order": [
                { "type": "desc", "title": i18n('%Messages_Sort_By_date_desc')},
                { "type": "asc", "title": i18n('%Messages_Sort_By_date_asc')}
            ]},
            { "type": "size", "title": i18n('%Messages_Sort_By_size_title'), "order": [
                { "type": "desc", "title": i18n('%Messages_Sort_By_size_desc')},
                { "type": "asc", "title": i18n('%Messages_Sort_By_size_asc')}
            ]}
        ]
    };

    new Jane.StaticJSHandler('messages-sort', {data: data});

})();

/* ../../handlers/messages/messages-sort.js end */

/* ../../handlers/messages/messages-thread-participants.js begin */
(function() {
    var hMessagesThreadParticipants = new Jane.Handler('messages-thread-participants',
        /* ../../handlers/messages/messages-thread-participants.info.js begin */
{
    params: {
        tids: null
    }
}

/* ../../handlers/messages/messages-thread-participants.info.js end */
);

    /**
     * @desc Группируем всех участников из всех кешей по mid их сообщений
     * Группировка кешируется до того момента, пока кеш хендлера не будет изменен.
     * После такого изменения группировка будет перестроена заново.
     * @returns {Object} Сгрупированные по mid участники
     */
    hMessagesThreadParticipants.getParticipantsGroupedByMid = function() {
        // если кеш был изменен с момента последнего построения группировки, то перестраиваем ее
        if (this.cacheIsDirty || !this.participantsGroupedByMid) {
            // проходимся по каждому кешу messages-thread-participant, формируя список участников
            var participants = [];
            for (var cacheKey in this.cache) {
                var cache = this.cache[cacheKey];
                participants = participants.concat(_.flatten(jpath(cache, '.data.threads.participants')));
            }

            // группируем участников по mid их сообщений
            this.participantsGroupedByMid = _.groupBy(participants, function(p) {return p.mid; });

            this.cacheIsDirty = false;
        }

        return this.participantsGroupedByMid;
    };

    /**
     * Метод обработки данных участников треда
     * @param {Object} thread — Тред для обработки
     * @returns {Object} Обработанный тред
     */
    hMessagesThreadParticipants.processThread = function(thread) {
        var that = this;

        var participants = thread.participants.filter(function(participant) {
            participant.from.aliasedEmail = that.getAliasedEmail(participant.from.email);

            if (participant.from) {
                return that.userEmails.indexOf(participant.from.aliasedEmail) === -1;
            } else {
                return false;
            }
        });

        // достаточно странный случай, когда переписка состоит только из моих адресов
        if (participants.length === 0) {
            // ищем участника, чей email совпадает с дефолтным email-ом ящика
            var participantWithDefaultEmail = _.find(thread.participants, function(participant) {
                return participant.from.aliasedEmail === that.defaultEmail;
            });

            if (participantWithDefaultEmail) {
                participants = [participantWithDefaultEmail];
            } else {
                // если не нашли участника с дефолтным email-ом, то берем первого
                participants = [thread.participants[0]];
            }
        }

        thread.participants = participants;

        thread.splittedAvatars = thread.participants.length > 1;

        // склеиваем участников для того, чтобы показать их всех вместе в title контейнера
        thread.joinedParticipants = _.flatten(jpath(thread, '.participants.from.displayName')).join(', ');

        return thread;
    };


    hMessagesThreadParticipants._superSetCache = hMessagesThreadParticipants.setCache;

    hMessagesThreadParticipants.setCache = function(key, data, params, timestamp, preserveTimestamp) {
        this.cacheIsDirty = true;
        this._superSetCache(key, data, params, timestamp, preserveTimestamp);
        return key;
    };

    hMessagesThreadParticipants.onsetcache = function(key, data) {
        var that = this;

        if (data) {
            if (!this.userEmails) {
                this.userEmails = $.map(Jane.$H('account-information').getAllUserEmails(), function(email) {
                    return that.getAliasedEmail(email);
                });
                this.defaultEmail = this.getAliasedEmail(Jane.$H('settings').getSetting('default_email'));
            }

            data.threads.forEach(function(thread) {
                var cacheKey = that.getKey({ tids: thread.threadId});

                // если кеш еще не нормализованный
                if (!thread.joinedParticipants) {
                    that.processThread(thread);
                    that.setCache(cacheKey, { threads: [thread]});
                }

            });
        }

        return data;
    };

    hMessagesThreadParticipants.getAliasedEmail = function(email) {
        if (email.indexOf('@') === -1) {
            throw new Error(Daria.supplant('hMessagesThreadParticipants.getAliasedEmail: string "{email}" is not a valid email',
                {email: email}));
        }

        var splittedEmail = email.split('@');

        return (splittedEmail[0].replace(/-/g, '.') + '@' + splittedEmail[1]).toLowerCase();
    };

    return hMessagesThreadParticipants;
})();



/* ../../handlers/messages/messages-thread-participants.js end */

/* ../../handlers/messages/do-messages.js begin */
new DoHandler("do-messages",
    /* ../../handlers/messages/do-messages.info.js begin */
{
    params: {
        ids: null,
        tids: null,
        movefile: null,
        action: null
    }
}


/* ../../handlers/messages/do-messages.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/messages/do-messages.js end */

/* ../../handlers/messages/do-label.js begin */
new DoHandler("do-label",
    /* ../../handlers/messages/do-label.info.js begin */
{
    params: {
        lid: null,
        ids: null,
        tids: null
    }
}


/* ../../handlers/messages/do-label.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/messages/do-label.js end */

/* ../../handlers/messages/message-type-labels.js begin */
(function() {
    /**
     * Типы писем и названия этих типов
     * @see http://wiki.yandex-team.ru/pochta/types/status
     */
    var labels = [
        { "type": 2, "label": i18n('%Messages_Title_By_Type_2') },
        { "type": 4, "label": i18n('%Messages_Title_By_Type_4') },
        { "type": 5, "label": i18n('%Messages_Title_By_Type_5') },
        { "type": 6, "label": i18n('%Messages_Title_By_Type_6') },
        { "type": 7, "label": i18n('%Messages_Title_By_Type_7') },
        { "type": 8, "label": i18n('%Messages_Title_By_Type_8') },
        { "type": 12, "label": i18n('%Messages_Title_By_Type_12') },
        { "type": 13, "label": i18n('%Messages_Title_By_Type_13') },
        { "type": 14, "label": i18n('%Messages_Title_By_Type_14') },
        { "type": 15, "label": i18n('%Messages_Title_By_Type_15') },
        { "type": 16, "label": i18n('%Messages_Title_By_Type_16') },
        { "type": 17, "label": i18n('%Messages_Title_By_Type_17') },
        { "type": 18, "label": i18n('%Messages_Title_By_Type_18') },
        { "type": 19, "label": i18n('%Messages_Title_By_Type_19') },
        { "type": 20, "label": i18n('%Messages_Title_By_Type_20') },
        { "type": 21, "label": i18n('%Messages_Title_By_Type_21') },
        { "type": 22, "label": i18n('%Messages_Title_By_Type_22') },
        { "type": 23, "label": i18n('%Messages_Title_By_Type_23') },
        { "type": 25, "label": i18n('%Messages_Title_By_Type_25') },
        { "type": 26, "label": i18n('%Messages_Title_By_Type_26') },
        { "type": 30, "label": i18n('%Messages_Title_By_Type_30') },
        { "type": 35, "label": i18n('%Messages_Title_By_Type_35') }
    ];

    var knownTypes = [];
    for (var i = 0, length = labels.length; i < length; i++) {
        knownTypes.push(labels[i].type);
    }

    new Jane.StaticJSHandler('message-type-labels', {
        data: {
            labels: labels,
            knownTypes: knownTypes
        }
    });

})();

/* ../../handlers/messages/message-type-labels.js end */

/* ../../handlers/messages/messages-title-types-filter.js begin */
(function() {
    /**
     * Типы писем, которые показываем в селекте «быстрый фильтр по типам писем»
     * @see Все типы в message-type-labels.js
     */
    var typesInFilter = [
        {
            type: '#inbox',
            isInbox: true,
            name: 'Входящие',
            label: i18n('%Folder_inbox'),
            icon: 'types-filter-inbox'
        },
        {
            type: '4',
            name: 'Люди',
            label: i18n('%Messages_Title_By_Type_4'),
            icon: 'types-filter-people'
        },
        {
            type: '5',
            name: 'Билеты',
            label: i18n('%Messages_Title_By_Type_5'),
            icon: 'types-filter-eticket'
        },
        {
            type: '35',
            name: 'Гостиницы',
            label: i18n('%Messages_Title_By_Type_35'),
            icon: 'types-filter-hotels'
        },
        {
            type: '14',
            name: 'Скидки',
            label: i18n('%Messages_Title_By_Type_14'),
            icon: 'types-filter-discounts'
        },
        {
            type: '18',
            name: 'Социальные сети',
            label: i18n('%Messages_Title_By_Type_18'),
            shortLabel: i18n('%Messages_Title_By_Type_18_Short'),
            icon: 'types-filter-social'
        }
    ];

    /**
     * Список айди типов, которые показываем в селекте
     * @type {Array}
     */
    var typeIdsInFilter = $.map(typesInFilter, function(typeDataObject) {
        return typeDataObject.type;
    });

    var hMessagesTitleTypesFilter = new Jane.StaticJSHandler('messages-title-types-filter', {
        data: {
            typesInFilter: typesInFilter,
            typeIdsInFilter: typeIdsInFilter
        }
    });

    /**
     * Возвращает русскоязычное название типа
     * @param {String|Number} type Значение типа
     * @returns {String|undefined}
     */
    hMessagesTitleTypesFilter.getTypeName = function(type) {
        var typeObj = _(typesInFilter).findWhere({type: String(type)}) || {};

        return typeObj.name;
    };

})();

/* ../../handlers/messages/messages-title-types-filter.js end */

/* ../../handlers/labels/do-label-edit.js begin */
new DoHandler("do-label-edit",
    /* ../../handlers/labels/do-label-edit.info.js begin */
{
    params: {
        lid: null,
        label_name: null,
        label_color: null
    }
}


/* ../../handlers/labels/do-label-edit.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/labels/do-label-edit.js end */

/* ../../handlers/messages/do-unlabel.js begin */
new DoHandler("do-unlabel",
    /* ../../handlers/messages/do-unlabel.info.js begin */
{
    params: {
        lid: null,
        ids: null,
        tids: null
    }
}


/* ../../handlers/messages/do-unlabel.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/messages/do-unlabel.js end */

/* ../../handlers/messages/message-attachments.js begin */
new Handler("message-attachments",
    /* ../../handlers/messages/message-attachments.info.js begin */
{
    params: {
        mid       : null
    }
}

/* ../../handlers/messages/message-attachments.info.js end */

);

(function(handler) {

    /**
     * Добавляет в данные об аттачах информацию об иконках
     * @param {Object} data  JSON-нода с данными об аттачах
     */
    handler.setIconInfo = function(data) {
        var attachments = jpath(data, '.attachment');
        $.each(attachments, function(i, attach) {
            var fileInfo = Daria.getExtensionInfo(attach.name);
            if (fileInfo.icon) {
                attach.icon = fileInfo.icon;
            }
        });
    };

    handler.onsetcache = function(key, data) {
        this.setIconInfo(data);
    };
})( Jane.$H('message-attachments') );

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/messages/message-attachments.js end */

/* ../../handlers/message/message.js begin */
(function(/**Daria*/Daria) {

    var THREAD_KEY_PREFIX = 't';

    var hMessage = new Handler("message",
        /* ../../handlers/message/message.info.js begin */
{
    params: {
        ids: null // FIXME: Заменить null на true, что должно означать обязательность параметра.
    }
}


/* ../../handlers/message/message.info.js end */

    );

    /* ------------------------------------------------------------------------------------------------------------- */

    hMessage._readInfo = {};
    hMessage._countInfo = {};

    hMessage.getCache = function(key, node) {
        if (node) {
            key = this.getKey({ ids: key}, node);
        }
        var cacheItem = this.cache[key];
        if (cacheItem) {
            return cacheItem.data;
        }
    };

    /**
     * Является ли ключ тредовым
     * @param {String} key
     */
    hMessage.isThreadKey = function(key) {
        return (key[0] === THREAD_KEY_PREFIX);
    };

// Ключом для блока является id письма.
    hMessage.getKey = function(params, node) {
        var treadPrefix = node && 'count' in node ? THREAD_KEY_PREFIX : '';
        var ids = params.ids;
        return ids ? treadPrefix + ids : null; // ids является обязательным параметром для этого хэндлера.
    };

    /* ------------------------------------------------------------------------------------------------------------- */
    hMessage._superSetCache = hMessage.setCache;

    hMessage.setCache = function(key, data, params, timestamp, preserveTimestamp) {
        params = {
            ids: data.mid
        };
        //key нужен только в хендлере messages, а он присылает всегда одну ноду
        key = this.getKey(params, data);
        this._superSetCache(key, data, params, timestamp, preserveTimestamp);
        return key;
    };

    /**
     * Специальный метод для хендлера messages, который распихивает информацию о письмах в кэш message
     * @param {Node} node Нода с информацией о письме.
     * @param {Number} timestamp
     * @return {String} Ключ сохраненного кэша.
     */
    hMessage._setCacheFromMessages = function(node, timestamp) {
        return hMessage.setCache(null, node, null, timestamp, true);
    };

    /**
     * В случае ошибки выводим плашку с информацией о ненайденом письме
     * @param {Object} response Данные полученные по запросу и данные об ошибке
     * @return {Object} Объект с данными ошибки
     */
    hMessage.getError = function(response) {
        return response.error;
    };

    hMessage.onsetcache = function(key, data) {
        this._readInfo[key] = !('new' in data);
        var count = parseInt(data.count, 10) || 1;
        this._countInfo[key] = count;

        // если читаем письмо (count === 1), то достаем информации о треде, она пригодится при автообновлении
        // пригодится она в случае, если приходит письмо, которое с текущим образует тред.
        // проверка на data.tid нужна, потому что для удаленных и спам tid'а нет
        if (count == 1 && data.tid) {
            var threadKey = THREAD_KEY_PREFIX + data.tid;
            // чтобы не перетирать правильную информацию о треде
            if (!(threadKey in this._countInfo)) {
                this._countInfo[threadKey] = 1;
            }
        }

        if (!$.isEmptyObject(data.flags)) {
            if (data.flags.aviaeticket) {
                data.eticket = Daria.ETicket.create(data);
                if (data.eticket) {
                    data.eticket.update();
                }
            }

            if (data.flags.money) {
                data.money = Daria.Money.Message.create(data);
                if (data.money) {
                    data.money.prepare();
                }
            }
        }

        // Собранное время
        var chunks = data.date.chunks;
        data.date.ts = new Date(chunks.year, chunks.month, chunks.date, chunks.hours, chunks.minutes).getTime();
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    /**
     * Возвращает FolderID письма.
     * @param {String} id ID письма
     * @return {String}
     */
    hMessage.getFolderId = function(id) {
        var message = this.getCache(id);
        return message && message.fid || null;
    };

    /* ------------------------------------------------------------------------------------------------------------- */

// FIXME: Как-то я <s>эту булочку</s> этот список условий видел уже неоднократно. Как бы этого избежать?
    hMessage.isMatch = function(id, params) {
        params = params || Page.params;

        var page_number = params.page_number || 1;
        if (page_number != 1) {
            return false;
        } // Письмо прилетает только в первую страницу.

        var fid = params.current_folder;
        var lid = params.current_label;
        var tid = params.thread_id;
        var extra = params.extra_cond;
//    var threaded = Jane.$H("settings").isThreaded();

        var message_fid = hMessage.getFolderId(id);
        var hFolders = Jane.$H("folders");

        var date = params.datePager;

        if (((fid && hMessage.inFolder(id, fid)) && (!date || date && hMessage.inDateRange(id, date))) || // В папке.
            (lid && hMessage.hasLabel(id, lid)) || // В метке.
            (tid && hMessage.inThread(id, tid)) || // В треде.
            (params['goto'] == 'all' && (
                (extra == 'only_new' && hMessage.isNew(id) && !hFolders.spamOrTrash(message_fid)) || // В непрочитанных и письмо пришло не в удаленные или спам
                    (extra == 'only_atta' && hMessage.hasAttachment(id)) || // С аттачем.
                    !extra) // Во всех письмах.
                )) {
            return true;
        }

        return false; // Письмо не попадает в текущий список папок.
    };

    /**
     * Метод определяет, попадает ли письмо в заданый диапозон дат
     * @param {String} id — mid письма
     * @param {String} date — Дата в формате "MM.YYYY" и "YYYY"
     * @return {Boolean}
     */
    hMessage.inDateRange = function(id, date) {
        var message = this.getCache(id);

        if (!message) {
            return false;
        }

        var dateRegExp = /^((\d{2})\.)?(\d{4})$/;
        if (dateRegExp.test(date)) {

            var incDate = Daria.MessagesPager.incDate;

            var fromDate;
            var toDate;

            date = date.match(dateRegExp);

            var month = Number(date[2]);
            var year = Number(date[3]);

            // FIXME: Будь мужиком и вынеси уже эту логику в общие модули!!!
            if (month) {
                fromDate = new Date(year, month - 1).getTime();
                toDate = incDate(year, month);
                toDate = new Date(toDate[0], toDate[1] - 1).getTime();
            } else {
                fromDate = new Date(year, 0).getTime();
                toDate = new Date(year, 11).getTime();
            }

            date = jpath(message, ".date.timestamp")[0];

            if (date < toDate && date > fromDate) {
                return true;
            }
        }

        return false;
    };

    hMessage.isNew = function(id) {
        var message = this.getCache(id);
        return Boolean(message && message["new"]);
    };

    /**
     * Возвращает true, если письмо находится в спаме.
     * @param {String} mid MID письма
     * @return {Boolean}
     */
    hMessage.isSpam = function(mid) {
        return Jane.$H("folders").isFolder(this.getFolderId(mid), "spam");
    };

    /**
     * Возвращает true, если это письмо - нотификация о неотвеченном письме.
     * @param {String} mid MID письма.
     * @return {Boolean}
     */
    hMessage.isNoreplyNotification = function(mid) {
        var notifyLabel = Jane.$H("labels").getLabelByName('SystMetkaWJDT:NOTIFY');
        return notifyLabel && this.hasLabel(mid, notifyLabel.lid);
    };

    hMessage.hasAttachment = function(id) {
        var message = this.getCache(id);
        return message && jpath(message, '.flags.attachment')[0];
    };

    /**
     * Возвращает true, если у письма есть метка lid.
     * @param {String} mid MID письма
     * @param {String} lid LID метки.
     * @return {Boolean}
     */
    hMessage.hasLabel = function(mid, lid) {
        var message = this.getCache(mid);
        return message ? $.inArray(lid, message.lid) > -1 : false;
    };

    hMessage.inFolder = function(id, fid) {
        var message = this.getCache(id);
        return message && message.fid === fid;
    };

    hMessage.inThread = function(id, tid) {
        var message = this.getCache(id);
        return message && message.tid === tid;
    };

    /**
     * Возвращает tid письма.
     * @param {String} mid MID письма.
     * @return {String}
     */
    hMessage.getThreadId = function(mid) {
        var message = this.getCache(mid);
        if (message) {
            return message.tid;
        }
        return null;
    };

    hMessage.getUrl = function(id) {
        var inDraft = this.inFolder(id, Jane.$H('folders').ids.draft);
        return '#' + ( inDraft ? 'compose' : 'message' ) + '/' + id;
    };

    /**
     * Получение первого номера типа письма.
     *
     * @param {String} mid MID письма
     * @return {String|Null} первый номер типа
     */
    hMessage.getSOLabel = function(mid) {
        return this.getSOLabels(mid)[0] || null;
    };

    /**
     * Получение всех типов письма.
     *
     * @param {String} mid MID письма
     * @return {Array} типы писем
     */
    hMessage.getSOLabels = function(mid) {
        var message = this.getCache(mid);

        if (!message) {
            return [];
        }

        if (typeof message.types === 'undefined') {
            return [];
        }

        return message.types.split('\n');
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    hMessage._grep = function(ids, idsPrefix, params, action) {
        var updatedIDs = [];
        if ($.isArray(ids)) {
            for (var i = 0, j = ids.length; i < j; i++) {
                if (this[action](idsPrefix + ids[i], params)) {
                    updatedIDs.push(ids[i]);
                }
            }
        }
        return updatedIDs;
    };

    /**
     * Проходит по списку id-шников и вызывает для каждого из них action.
     * Возвращает список id-шников, для которых action вернул true.
     * @param {Object} ids Объект с id писем и тредов
     * @param {Array} ids.mids Массив mid'ов.
     * @param {Array} ids.tids Массив tid'ов.
     * @param {Object} params Параметры.
     * @param {String} action Действие.
     * @return {Object}
     */
    hMessage.grep = function(ids, params, action) {
        var mids = this._grep(ids.mids, '', params, action);
        var tids = this._grep(ids.tids, THREAD_KEY_PREFIX, params, action);
        if (mids[0] || tids[0]) {
            return {
                mids: mids,
                tids: tids
            };
        }
        return false;
    };

    /**
     * Ставит метку на письмо.
     * В случае, если метки еще не было, возвращается true, иначе false.
     * @param {String} mid
     * @param {Object} params
     * @return {Boolean}
     */
    hMessage.label = function(mid, params) {
        var lid = params.current_label;
        var message = this.getCache(mid);
        if (message && message.lid) {
            // если такой метки еще нет
            if ($.inArray(lid, message.lid) === -1) {
                message.lid.push(lid);
                return true;
            }
        }

        return false;
    };

// Удаляет из XML письма метку. В случае, если метка была, возвращается true, иначе false.
    hMessage.unlabel = function(id, params) {
        var lid = params.current_label;
        var message = this.getCache(id);
        if (message && message.lid) {
            return Jane.Array.remove(message.lid, lid) > -1;
        }
        return false;
    };

// Помечает письмо как прочитанное. Если оно еще не было прочитано, возвращается true, иначе false.
    hMessage.mark = function(id) {
        var message = this.getCache(id);
        if (!message) {
            return false;
        }
        var newNode = 'new' in message;

        this._readInfo[id] = true;

        if (newNode) {
            delete message['new'];
            return true;
        }

        return false;
    };

// Помечает письмо как непрочитанное. Если оно было прочитано, возвращается true, иначе false.
    hMessage.unmark = function(id) {
        var message = this.getCache(id);
        if (!message) {
            return false;
        }
        var newNode = 'new' in message;

        this._readInfo[id] = false;

        if (!newNode) {
            message['new'] = this._countInfo[id];
            return true;
        }

        return false;
    };

// Возвращает отформатированную строку для полей to и from. Пример:
// "Stepan Reznikov" <stepanvr@yandex.ru>, "Василий Пупкин" <vasily@pupkin.ru>
    hMessage.getAddressField = function(id, field, excludeUserAddresses) {
        var fields = this.getFieldsByType(id, field);
        return Daria.formatContacts(fields, excludeUserAddresses);
    };

// Возвращает емейл на который было получено письмо.
// для входящих писем ищет среди адресатов текущего пользователя
    hMessage.getToEmail = function(id) {
        var message = this.getCache(id);
        if (!message) {
            return '';
        }
        var value = '';
        var items = this.getFieldsByType(id, 'to');
        var userEmails = Jane.$H('account-information').getAllUserEmails();

        $.each(items, function(i) {
            var email = items[i]['email'];
            if (!email) {
                return true;
            }
            if ($.inArray(email, userEmails) > -1) {
                value = email;
                return false;
            }
        });

        return value;
    };

    /**
     * Возвращает email из reply-to
     * @param {String} id
     */
    hMessage.getReplyToEmail = function(id) {
        return this.getFieldsByType(id, 'reply-to')[0].email || '';
    };

    hMessage.getReplyToName = function(id) {
        return this.getFieldsByType(id, 'reply-to')[0].name || '';
    };

// возвращает все email-ы из поля to
    hMessage.getToEmails = function(id) {
        var items = this.getFieldsByType(id, 'to');
        return $.map(items, function(a) {
            return a['email'] || null;
        });
    };

    hMessage.getToNames = function(id) {
        var items = this.getFieldsByType(id, 'to');
        return $.map(items, function(a) {
            return a['name'] || null;
        });
    };

    hMessage.getFromName = function(id) {
        var message = this.getCache(id);
        if (message) {
            var field = this.getFieldsByType(id, 'from')[0];
            if (field && field.name) {
                return field.name;
            }
        }
        return '';
    };

    hMessage.getFromEmail = function(id) {
        var message = this.getCache(id);
        if (message) {
            var field = this.getFieldsByType(id, 'from')[0];
            if (field && field.email) {
                return field.email;
            }
        }
        return '';
    };

    /**
     * Возвращает тему письма.
     * @param {String} id MID письма.
     * @param {Boolean} [preventPrefixAddition=false] Не добавлять префиксы "Re:" или "Fwd:"
     * @return {String}
     */
    hMessage.getSubject = function(id, preventPrefixAddition) {
        var message = this.getCache(id);
        if (!message) {
            return '';
        }
        var prefix = '';
        if (!preventPrefixAddition && message['subject_prefix']) {
            prefix = message['subject_prefix'] + ' ';
        }
        return prefix + message['subject'];
    };

    hMessage.getDate = function(id) {
        var message = this.getCache(id);
        if (!message) {
            return '';
        }
        var result = '';
        var date = jpath(message, ".date.iso")[0];

        if (date) {
            result = date.replace(/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})$/, '$3.$2.$1');
        }

        return result;
    };

    hMessage.getTime = function(id) {
        var message = this.getCache(id);
        if (!message) {
            return '';
        }
        var result = '';
        var date = jpath(message, ".date.iso")[0];

        if (date) {
            result = date.replace(/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2})$/, '$4:$5');
        }

        return result;
    };

    hMessage.getDateTime = function(id) {
        return this.getDate(id) + ', ' + this.getTime(id);
    };

    hMessage.getEmailRef = function(mid, email) {
        var message = this.getCache(mid);
        if (!message) {
            return;
        }

        return jpath(message, '.field[.email=="' + email + '"].ref')[0];
    };

    hMessage._getInfoIterator = function(ids, data, flags, tids) {
        if (ids) {
            ids = [].concat(ids);
            tids = tids ? THREAD_KEY_PREFIX : '';
            var idsLength = ids.length;
            data.count += idsLength;

            for (var i = 0; i < idsLength; i++) {
                var id = ids[i];
                var message = hMessage.getCache(tids + id);
                // если хендлеры мы уже удалили, а список еще не перерисовался, то message может не быть
                if (message) {
                    if (flags.labels) {
                        $.each(message.lid, process);
                    }
                    if (flags.folders) {
                        var fid = message.fid;
                        data.folders[fid]++;
                    }
                    if (flags.marks) {
                        if ('new' in message) {
                            data.unread++;
                        } else {
                            data.read++;
                        }
                    }
                }
            }
        }

        function process() {
            if (this in data.labels) {
                data.labels[this]++;
            }
        }
    };

    hMessage.getInfo = function(ids, flags) {
        var data = {
            count: 0,
            read: 0,
            unread: 0,
            labels: {},
            folders: {}
        };

        flags = flags || {};

        if (flags.labels) {
            data.labels = Jane.$H('labels').getLabelsHash();
        }

        if (flags.folders) {
            data.folders = Jane.$H('folders').getFoldersHash();
        }

        this._getInfoIterator(ids.ids, data, flags);
        this._getInfoIterator(ids.tids, data, flags, true);

        return data;
    };

    /**
     * Возвращает информацию о выделенных элементах: сколько всего выделено, сколько их них непрочитанно.
     * Возвращает хэш {unread: Number, all: Number }.
     * @param {Object} ids
     * @param {Object} [ids.mids] Массив писем.
     * @param {Object} [ids.tids] Массив тредов.
     * @return {Object}
     */
    hMessage.getSelectedInfo = function(ids) {
        var readInfo = this._readInfo;
        var countsInfo = this._countInfo;

        var readCount = 0;
        var allCount = 0;
        var i;
        var j;
        var id;
        var cnt;
        if (ids.mids) {
            for (i = 0, j = ids.mids.length; i < j; i++) {
                id = ids.mids[i];
                cnt = countsInfo[id];
                if (readInfo[id]) {
                    readCount += cnt;
                }
                allCount += cnt;
            }
        }

        if (ids.tids) {
            for (i = 0, j = ids.tids.length; i < j; i++) {
                id = THREAD_KEY_PREFIX + ids.tids[i];
                cnt = countsInfo[id];
                if (readInfo[id]) {
                    readCount += cnt;
                }
                allCount += cnt;
            }
        }

        return {
            read: readCount,
            all: allCount
        };
    };

    /**
     * Возвращает true, если на письме есть социальные метки.
     * @param {String} mid
     * @return Boolean
     */
    hMessage.hasSocialLabels = function(mid) {
        var msg = this.getCache(mid);
        if (msg) {
            var lids = msg.lid;
            if (lids) {
                var hLabels = Jane.$H("labels");
                for (var i = 0, j = lids.length; i < j; i++) {
                    if (hLabels.isSocial(lids[i])) {
                        return true;
                    }
                }
            }
        }

        return false;
    };

    hMessage.COUPON_SERVICE_TYPES = [13, 14];

    /**
     * Возвращает true, если письмо от скидочного
     * сервиса
     * @param {Object} msg
     * @return Boolean
     */
    hMessage.isCouponService = function(msg) {
        // длина пересечения массивов правильных типов и типов письма должна быть равна длине массива правильных типов
        var correctTypes = hMessage.COUPON_SERVICE_TYPES;
        return msg && _.intersection(correctTypes, msg.type).length == correctTypes.length;
    };

    /**
     * Обновляет в тредах количество непрочитанных писем.
     * Возвращает массив tid'ов, которые надо перерисовать в DOM'e
     * @param {String} action Действие (mark/unmark).
     * @param {Object} threads Хэш тредов {'tid': 'количество_затронутых_писем'}
     * @return {Array}
     */
    hMessage.updateThreadsUnreadCount = function(action, threads) {
        var needUpdateTIDs = [];

        for (var tid in threads) {
            var key = THREAD_KEY_PREFIX + tid;
            var threadCache = this.getCache(key);
            if (threadCache) {
                // берем старое число непрочитанных сообщений
                var oldUnreadCnt = threadCache['new'] || 0;
                var newUnreadCnt;

                // считаем новое число непрочитанных сообщений
                if (action == 'mark') {
                    newUnreadCnt = oldUnreadCnt - threads[tid].length;
                } else {
                    newUnreadCnt = oldUnreadCnt + threads[tid].length;
                }
                // на всякий случай, чтобы не ушли в минус
                newUnreadCnt = Math.max(0, newUnreadCnt);

                this._readInfo[key] = newUnreadCnt === 0;

                // если количество больше 0, то обноляем ноду в xml-кеше
                if (newUnreadCnt) {
                    threadCache['new'] = newUnreadCnt;

                } else {
                    // если больше нет непрочитанных - удаляем ноду
                    delete threadCache['new'];
                }

                if (
                // если помечаем письма прочитанными и непрочитанных стало 0
                    (action == 'mark' && newUnreadCnt === 0) ||
                        // если помечаем письма непрочитанными и непрочитанных стало > 0
                        (action == 'unmark' && newUnreadCnt > 0)
                    ) {
                    //добавляем в массив тредов, которые надо перерисовать
                    needUpdateTIDs.push(tid);
                }
            }
        }

        return needUpdateTIDs;
    };

    hMessage.getThreadCount = function(tid) {
        return this._countInfo[THREAD_KEY_PREFIX + tid];
    };

    hMessage.updateThreadInfo = function(tid, message) {
        var threadKey = THREAD_KEY_PREFIX + tid;
        var knownThreadCache = this.getCache(threadKey);
        if (knownThreadCache) {
            this._countInfo[threadKey] = ++knownThreadCache.count;

            if (message['new']) {
                this._readInfo[threadKey] = false;
                var oldUnreadCount = knownThreadCache['new'];
                knownThreadCache['new'] = oldUnreadCount ? ++oldUnreadCount : 1;
            }

            // если письмо пришло в эту папку, то обновляем from/to у треда
            if (message.fid == knownThreadCache.fid) {
                knownThreadCache.field = message.field;
            }
        }
    };

    hMessage.getUnreadCount = function(id, thread) {
        var cache = this.getCache((thread ? 't' : '') + id);
        if (cache) {
            return cache['new'];
        }
        return 0;
    };

    hMessage.getEmails = function(id) {
        var result = {};
        var message = this.getCache(id);
        if (message) {
            var emls = message.field;
            $.each(emls, function(i, field) {
                //FIXME: в result попадет последний, какой смысл тогда ходить по всем?
                var item = result[field.type] = {};
                var name = field['name'];
                var email = field['email'];

                if (email) {
                    //FIXME: ref нет
                    item.ref = field.ref;
                    item.email = email;
                }

                if (name) {
                    item.name = name;
                }
            });
        }

        return result;
    };

    /**
     * Возвращает true, если письмо от службы поддержки.
     * @param {String} mid MID письма
     * @return {Boolean}
     */
    hMessage.isYaSupport = function(mid) {
        var supportLID = Jane.$H('labels').getLabelByName('yasupport');
        return supportLID ? this.hasLabel(mid, supportLID.lid) : false;
    };

    hMessage.isBodyAutoExpand = function(mid) {
        var msg = this.getCache(mid);
        if (!msg) {
            return false;
        }

        var lids = msg.lid;

        if (!lids || !lids.length) {
            return false;
        }

        var hLabels = Jane.$H('labels');
        var j = 0;
        var l = lids.length;
        var label;
        var regLabelName = /^(vtnrf0roemru|vtnrf0habrahabr|vtnrf0livejournal)$/;

        for (; j < l; j++) {
            label = hLabels.getLabelById(lids[j]);
            if (label && regLabelName.test(label.name)) {
                return true;
            }
        }

        return false;
    };

    /**
     * Возвращает указанные поля (to, from, cc, ...)
     * @param {String} mid MID.
     * @param {String} type Тип.
     * @returns Array
     */
    hMessage.getFieldsByType = function(mid, type) {
        return jpath(this.getCache(mid), '.field[.type == "' + type + '"]');
    };

    /**
     * Возвращает firstline
     * @param {String} mid MID.
     * @returns String
     */
    hMessage.getFirstline = function(mid) {
        var cache = this.getCache(mid);
        return cache ? cache.firstline || '' : '';
    };

    /**
     * @desc Проверяет что письмо, ялвяется письмо-тредом.
     * Письмо у которого нету message-body
     * @param {String} message Объект письмо. Письмо-тред сохраняется
     * в модели Message с префиксом THREAD_KEY_PREFIX.
     * @return {Boolean}
     */
    hMessage.isThread = function(message) {
        return Boolean(message.count);
    };
})(Daria);


/* ../../handlers/message/message.js end */

/* ../../handlers/message/message-body.js begin */
new Handler("message-body",
    /* ../../handlers/message/message-body.info.js begin */
{
    params: {
        ids: null,
        charset: null,
        is_spam: false,
        hid: null
    }
}


/* ../../handlers/message/message-body.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

(function(/**Daria*/Daria) {
    function _parseDate(date) {
        var d = String(date).match(/^(\d+)-(\d+)-(\d+) (\d+):(\d+):(\d+)$/);

        if (!d) {
            return null;
        }

        return new Date(parseInt(d[1], 10), parseInt(d[2], 10) - 1, parseInt(d[3], 10), parseInt(d[4], 10), parseInt(d[5], 10), parseInt(d[6], 10)).getTime();
    }

    var hMessageBody = Jane.$H('message-body');

    hMessageBody.onsetcache = function(key, data, params) {
        data.info = data.info || {};

        Jane.$H('message-attachments').setIconInfo(data);

        // DARIA-29995 - Локализация размера аттача на фронтенде
        var date = jpath(data, '.info.date')[0];
        var chunks;
        var timestamp;

        if (date) {
            chunks = date.chunks;
            timestamp = new Date(chunks.year, chunks.month, chunks.date, chunks.hours, chunks.minutes).getTime();
            date.full = this.fullDate(timestamp);
        }

        var hMessage = Jane.$H('message');
        data['is-spam'] = hMessage.isSpam(params.ids);
        data['is-support'] = hMessage.isYaSupport(params.ids);
        data['is-noreply-notification'] = hMessage.isNoreplyNotification(params.ids);
        // Определяем, нужно ли скрывать картинки в данном письме (DARIA-3588)
        if (data['is-spam'] || data['phishing']) {
            data['hide-imgs'] = true;
        }

        var i;
        var j;

        // XXX(maksimrv): Надо разобраться и вынести этот код в отдельную функцию!!
        var flights = jpath(data, '.facts.ticket.flight');
        if (flights && flights.length) {
            var dateReplace = function(data) {
                if (data.arrival) {
                    data.arrival = _parseDate(data.arrival);
                    if (!data.arrival) {
                        delete data.arrival;
                    }
                }

                if (data.departure) {
                    data.departure = _parseDate(data.departure);
                    if (!data.departure) {
                        delete data.departure;
                    }
                }
            };

            for (i = 0; i < flights.length; i++) {
                dateReplace(flights[i]);
                for (j = 0; j < flights[i].trip.length; j++) {
                    dateReplace(flights[i].trip[j]);
                }
            }
        }

        var hotelInformations = data.facts && data.facts.hotels;
        if (Array.isArray(hotelInformations) && hotelInformations.length) {
            for (i = 0; i < hotelInformations.length; i++) {
                this.prepareHotelInformationOnSetCache(hotelInformations[i]);
            }
            data.facts.hotels = hotelInformations;
        }

        //fix narod atts
        var atts = data.attachment;
        if (atts) {
            for (i = 0, j = atts.length; i < j; i++) {
                var attach = atts[i];
                if (attach.narod) {
                    var name = attach.name;
                    var splittedName = Daria.splitName(name);
                    attach['filename'] = splittedName[0];
                    attach['fileext'] = splittedName[1] ? '.' + splittedName[1] : '';
                    attach['name-uri-encoded'] = encodeURIComponent(name);
                    attach['preview-src'] = attach.preview;
                } else {
                    // workaround для DARIA-17244
                    if (attach['fileext'] == '.wdp') {
                        // для wdp файлов не показываются превью, поэтому удаляем у них preview-supported
                        delete attach['preview-supported'];
                    }
                }
            }
        }
    };

    hMessageBody.getEmailRef = function(mid, email) {
        var messageBody = this.getCacheByParams({ ids: mid });
        if (!messageBody) {
            return;
        }

        return jpath(messageBody, '.info.field[.email=="' + email + '"].ref')[0];
    };

    /**
     * Преобразование данных о гостинице.
     * Нужно привести время в timestamp для того, чтобы
     * дальше можно было безопасно работать с Jane.date.format
     */
    hMessageBody.prepareHotelInformationOnSetCache = function(hotelInfo) {
        hotelInfo['check-inn_timestamp'] = _parseDate(hotelInfo['check-inn_date']);
        hotelInfo['check-out_timestamp'] = _parseDate(hotelInfo['check-out_date']);
        hotelInfo['cancellation_timestamp'] = _parseDate(hotelInfo['cancellation_date']);
    };

    /**
     * Преобразует дату в timestamp
     * в timestamp
     *
     * @param {String|Object} date Дата в формате (\d+)-(\d+)-(\d+) (\d+):(\d+):(\d+)
     * @return {String} timestamp
     */
    hMessageBody.parseDate = _parseDate;

    /**
     * Возвращает тип первого тела письма.
     * @param {String} mid MID письма.
     * @return {String} "plain"/"html"
     */
    hMessageBody.getSubtype = function(mid) {
        var messageBody = this.getCacheByParams({ ids: mid });
        return jpath(messageBody, ".body.subtype")[0];
    };

    // Возвращает отформатированную строку для полей cc, bcc, reply-to. Пример:
    // "Stepan Reznikov" <stepanvr@yandex.ru>, "Василий Пупкин" <vasily@pupkin.ru>
    hMessageBody.getAddressField = function(id, field, excludeUserAddresses) {
        var messageBody = this.getCacheByParams({ ids: id });
        if (messageBody) {
            var fields = jpath(messageBody, '.info.field[.type == "' + field + '"]');
            return Daria.formatContacts(fields, excludeUserAddresses);
        }
        return '';
    };

    /**
     * Возвращает отправителей заданного типа и вырезает из них exclude,
     * в общем случае вырезает все пользовательские имейлы
     * @param {String} mid
     * @param {String} type reply-to|from|to|cc|bcc
     * @param {Array} [exclude] массив имейлов, которые нужно вырезать
     * @return Array массив field-ов
     */
    hMessageBody.filterRecipients = function(mid, type, exclude) {
        exclude = exclude || Jane.$H('account-information').getAllUserEmails();
        exclude = $.map(exclude, function(email) {
            return email.replace(/-/g, '.').toLowerCase();
        });
        var map = function(f) {
            return $.inArray(f.email.replace(/-/g, '.').toLowerCase(), exclude) === -1 ? f : null;
        };
        return $.map(hMessageBody.getFieldsByType(mid, type), map);
    };

    /**
     * Возвращает форматированные строки с получателями при ответе на письмо.
     * @param {String} mid
     * @param {Boolean} [replyAll=false]  Если true, то возвращаются все получатели (логика "Ответить всем")
     * @returns Object  Объект вида {to: '<addresses>', cc: '<addresses>'},
     *                    где <addresses> - форматированная строка вида 'Друг <friend@ya.ru>, Враг <enemy@ya.ru>'
     */
    hMessageBody.getRecipients = function(mid, replyAll) {
        // преобразуе массив fields в строку
        var format = function(fields) {
            return Daria.formatContacts(fields, false);
        };
        // получает fields заданого типа и вырезает из них exclude имейлы
        var filter = function(type, exclude) {
            return hMessageBody.filterRecipients(mid, type, exclude);
        };

        var to = filter('reply-to');
        if (!to.length) {
            to = filter('from');
        }
        // письмо от самого себя (reply-to и from выфильтровались)
        if (!to.length || replyAll) {
            to = to.concat(filter('to'));
        }
        if (!to.length) {
            to = filter('from', []);
        }


        // Удаляем дубликаты, так как возможен следующий кейс:
        // https://jira.yandex-team.ru/browse/DARIA-33646
        to = _.uniq(to, 'email');

        var cc = replyAll ? filter('cc') : [];

        return { to: format(to), cc: format(cc) };
    };

    /**
     * Определяет, можно ли "Ответить всем" на данное письмо
     * @param {String} mid
     */
    hMessageBody.allowedReplyAll = function(mid) {
        var that = this;
        var count = function(field) {
            return that.filterRecipients(mid, field).length;
        };

        var countTo = count('to');
        if (countTo === 1) {
            var recipient = this.filterRecipients(mid, 'to').pop();
            if (Daria.isCAEmail(recipient.email)) {
                countTo = 0;
            }
        }

        // если в переписке с пользователем учавствует больше одного адресата,
        // то нужно показать кнопку "ответить всем"
        return ( count('from') || count('in-reply-to') ) + countTo + count('cc') > 1;
    };

    /**
     * Количество участников
     * @param {String} mid
     */
    hMessageBody.participantsCount = function(mid) {
        return this.filterRecipients(mid, 'to').length + this.filterRecipients(mid, 'cc').length;
    };

    hMessageBody.getFieldsByType = function(mid, type) {
        return jpath(this.getCacheByParams({ids: mid}), '.info.field[.type == "' + type + '"]');
    };

    /**
     * Получение поля по имени и миду
     * @param  {String} mid
     * @param  {String} name
     * @return {Array}
     */
    hMessageBody.getInfo = function(mid, name) {
        return jpath(this.getCacheByParams({ids: mid}), '.info.' + name);
    };

    /**
     * Возвращает заголовок Message-Id письма
     * @param {String} mid
     * @return {String}
     */
    hMessageBody.getMessageId = function(mid) {
        var messageBody = this.getCacheByParams({ ids: mid });
        return messageBody ? messageBody.info['message-id'] : null;
    };

    /**
     * Возвращает заголовок In-reply-to письма
     * @param {String} mid
     * @return {String}
     */
    hMessageBody.getInReplyTo = function(mid) {
        var messageBody = this.getCacheByParams({ ids: mid });
        return messageBody ? messageBody.info['in-reply-to'] : null;
    };

    hMessageBody.getReferences = function(id) {
        var messageBody = this.getCacheByParams({ ids: id });
        return messageBody ? messageBody.info['references'] : null;
    };

    /**
     * Возвращает массив вложений письма.
     * @param {String} mid
     * @param {String} hid
     * @return {Array}
     */
    hMessageBody.getAttachments = function(mid, hid) {
        var params = {
            ids: mid
        };
        if (hid) {
            params.hid = hid;
        }
        var cache = this.getCacheByParams(params);
        return cache ? cache.attachment : [];
    };

    hMessageBody.hasVideoLinks = function(id, services) {
        var messageBody = this.getCacheByParams({ ids: id });

        if (!messageBody) {
            return false;
        }

        var videolinks = jpath(messageBody, '.body.video_link');

        if (services) {
            return $.map(videolinks,function(link) {
                var service = ($(link).attr('hosting_name') || '').toLowerCase();
                return $.inArray(service, services) != -1 || null;
            }).length;
        } else {
            return videolinks.length > 0;
        }
    };

    hMessageBody.hasInlineAttachments = function(id) {
        var messageBody = this.getCacheByParams({ ids: id });
        if (messageBody) {
            return jpath(messageBody, '.attachment[!.narod]') > 0;
        }
        return false;
    };

    /**
     * Возвращает аттач по cid (inline-image id).
     * @param {String} mid MID письма.
     * @param {String} cid CID инлайновой картинки
     * @returns Object
     */
    /*
    hMessageBody.getAttachmentByCid = function(mid, cid) {
        var cache = this.getCacheByParams({
            ids: mid
        });
        if (cache) {
            return jpath(cache, '.attachment[.cid == "' + cid +'"]')[0];
        }
        return null;
    };
    */


    /**
     * Кеш обработанных html.
     * @type {Object}
     * @private
     */
    hMessageBody._htmlCache = {};

    /**
     * STID'ы писем о сборщиках
     * @type {Array}
     */
    hMessageBody._COLLECTOR_MSG_STIDS = [
        '102.66466005.241046198820547232969001058',
        '102.66466005.157526963565013225811429732',
        '102.66466005.134090406637961488505874094',
        '102.66466005.776572722362711757375188712',
        '102.66466005.856799731918248093078980991'
    ];

    /**
     * Возвращает обработанный html письма для композа.
     * @param {String} mid MID письма
     */
    hMessageBody.getComposeHTML = function(mid) {
        var msgBody = this.getCacheByParams({
            ids: mid
        });
        var result = [];
        if (msgBody && $.isArray(msgBody.body)) {
            for (var i = 0, j = msgBody.body.length; i < j; i++) {
                result.push(msgBody.body[i].content);
            }
        }
        return result;
    };

    /**
     * Возвращает обработанный html письма для черновика.
     * @param {String} mid MID письма
     * @param {String} [mode] MIME-тип
     * @returns String
     */
    hMessageBody.getDraftHTML = function(mid, mode) {
        var msgBody = this.getCacheByParams({
            ids: mid
        });
        // для черновика возвращаем первое тело письма
        if (msgBody && $.isArray(msgBody.body)) {
            var firstBody;
            // ищем первое тело с такой mode и без name
            if (mode) {
                firstBody = jpath(msgBody, '.body[.subtype == "' + mode + '" && .name == ""]')[0];
            }
            // если нет, то просто первое
            if (!firstBody) {
                firstBody = msgBody.body[0];
            }
            if (firstBody) {
                return firstBody.content;
            }
        }
        return '';
    };

    /**
     * Возвращает обработанный html письма.
     *
     * @param {Object} params Параметры письма.
     * @param {String} params.ids MID письма
     * @param {String} [params.hid] HID части письма
     * @param {String} [params.charset] Кодировка письма
     * @param {Object} [params.forceShowImages] форсированный показ картинок
     * @param {Object} [params.forceShowHrefs] форсированный показ ссылок
     *
     * @returns Node[]
     */
    hMessageBody.getHTML = function(params) {
        var cache = this.getCacheByParams(params);
        var mid = params.ids;

        // cache.error выставляется в message-body.wmi, если не удается распарсить письмо
        if (cache && !cache.error) {
            if (this.isCollectorMessage(mid)) {
                return [Jane.tt('mail-message:message-body-collector-msg', { lang: this.getDefaultLangId() })];

            } else if (cache['is-noreply-notification']) {
                return [Jane.tt('mail-message:message-body-noreply-notification')];
            }

            var className = ['b-message-body'];
            var firstBody = cache.body[0];
            var fullMessageLink = '';

            // если первое тело текстовое
            if (/*тела может и не быть*/firstBody && firstBody.subtype == 'plain') {
                className.push('b-message-body_plain-text');

                // в настройках включен моноширный шрифт
                if (Jane.$H('settings').isSet('use_monospace_in_text')) {
                    className.push('b-message-body_monospace');
                }

            }

            if (firstBody && firstBody.trimmed) {
                fullMessageLink = '<div class="b-message-body__full-text">' +
                    '<a target="_blank"' +
                    'class="b-link b-link_w daria-action"' +
                    'data-action="common.clck"' +
                    'data-params="metrika=Скачать письмо целиком:клик"' +
                    'href="handlers/message-source/' + mid + '/yandex_email.eml?download=1">' +
                    i18n('%Message_Download_Full_Text') +
                    '</a>' +
                '</div>';

                Jane.ErrorLog.send({
                    'event': 'message.trimmed',
                    'stid': cache.info.stid
                });

                Jane.c(['Скачать письмо целиком', 'показ']);
            }

            var result = [];

            var fakeDiv = document.createElement('div');
            fakeDiv.innerHTML =
                '<div class="' + className.join(' ') + '">' +
                '<div class="b-message-body__content" data-lang="' + ((firstBody && firstBody.lang) || 0) + '"></div>' +
                fullMessageLink +
                '</div>';

            var bodyContentNode = fakeDiv.getElementsByTagName('div')[1];

            var hasPhishingBody = false;

            // Препроцессинг писем
            for (var i = 0, j = cache.body.length; i < j; i++) {
                // прикрепляем каждое тело в bodyContentNode
                var processedBodyNodes = this._processBody(cache.body[i], params);

                hasPhishingBody = hasPhishingBody || cache.body[i]['phishing'];

                for (var k = 0, l = processedBodyNodes.length; k < l; k++) {
                    bodyContentNode.appendChild(processedBodyNodes[k]);
                }
            }

            var isSupport = cache['is-support'];
            var hasLinksOrImages = cache['has-links'] || cache['has-img'];
            var isSpam = cache['is-spam'];

            var forceShowImagesAndHrefs = params.forceShowImages && params.forceShowHrefs;

            // Если это не саппорт и при этом это спам с ссылками или картинками,
            // либо фишинг - рисуем сообщение о непоказе картинок и ссылок
            // Если проставлен forceShowImagesAndHrefs, то не рисуем нотификатор
            if (!forceShowImagesAndHrefs && !isSupport && (hasLinksOrImages && isSpam || hasPhishingBody)) {
                var context = {
                    'has-img': cache['has-img'],
                    'has-links': cache['has-links'],

                    'is-spam': isSpam,
                    'is-support': isSupport,
                    'phishing': hasPhishingBody,

                    'mid': mid
                };

                var messageNotice = Jane.tt('mail-message:message-body-notice', context, ['folders']);
                result.push(messageNotice);
                Jane.c('Сообщение о непоказе картинок и ссылок в спаме', 'Показ');
            }

            result.push(fakeDiv.firstChild);

            return result;
        }

        Jane.ErrorLog.send({
            errorType: 'message-body.error',
            params: Jane.Page.params2query(params),
            msgBodyError: cache && cache.error
        }, Object.keys(this.cache).join('|'));

        return [Jane.tt('mail-message:message-body-error')];
    };

    /**
     * Возвращает id дефолтного языка письма (определяется по текущей локале).
     * @returns Number
     */
    hMessageBody.getDefaultLangId = function() {
        switch (Daria.locale) {
        case "ru":
        case "be":
            return 1;
        case "en":
            return 2;
        case "uk":
            return 5;
        case "tr":
            return 44;
        default:
            return 0;
        }
    };

    /**
     * Обрабатываем тело письма.
     * @param {String} body
     * @param {Object} params Параметры кеша.
     * @return {*}
     */
    hMessageBody._processBody = function(body, params) {
        var mid = params.ids;
        var bodyNode = Daria.MessageProcess.processBody(body.content, params);
        var bodyNodes = $(bodyNode).contents().get();

        // небольшие вставки к письму
        var bodyHTMLPrefix = '';
        if (body.type == 'message' && body.subtype == 'delivery-status') {
            bodyHTMLPrefix = '<p>' + i18n('%Message_Delivery_Status') + '</p>';
        }

        var bodyPrefix = $(bodyHTMLPrefix).get();

        if (body.lattach && body.lattach.length) {
            var lattach = Jane.tt('mail-common:attached-message-inline', {
                hids: body.lattach,
                mid: mid
            }, ['message-body'], { ids: mid });

            bodyNodes.unshift.apply(bodyNodes, $(lattach).get());
        }

        if (body.rattach && body.rattach.length) {
            var rattach = Jane.tt('mail-common:attached-message-inline', {
                hids: body.rattach,
                mid: mid
            }, ['message-body'], { ids: mid });

            bodyNodes.push.apply(bodyNodes, $(rattach).get());
        }

        return bodyPrefix.concat(bodyNodes);
    };

    /**
     * Возвращает true, если это приветственное письмо о сборщиках.
     * @param {String} mid
     * @return {Boolean}
     */
    hMessageBody.isCollectorMessage = function(mid) {
        var stid = this.getSTID(mid);
        return stid ? $.inArray(stid, this._COLLECTOR_MSG_STIDS) > -1 : null;
    };

    /**
     * Возвращает STID (storage id) письма.
     * @param {String} mid
     * @return {String}
     */
    hMessageBody.getSTID = function(mid) {
        var cache = this.getCacheByParams({
            ids: mid
        });

        return cache ? cache.info.stid : null;
    };

    /**
     * Возвращает первое тело письма в том виде, в котором оно пришло из WMI.
     * @param {String} mid
     * @return String
     */
    hMessageBody.getRawFirstBody = function(mid) {
        var cache = this.getCacheByParams({
            ids: mid
        });
        if (cache && cache.body[0]) {
            return cache.body[0].content || '';
        }
        return '';
    };

    /**
     * Формирование тела письма для ответа
     */
    hMessageBody.getReplyBody = function(mid, mode, fromEmail) {
        var hSettings = Jane.$H('settings');
        var hMessage = Jane.$H('message');
        var result = '';
        var lang;

        if (hSettings.isSet('enable_quoting')) { // Если есть настройка "Цитировать исходное письмо при ответе"

            var date = hMessage.getDateTime(mid);
            // [DARIA-25433] убрано экранирование кавычек
            var from = hMessage.getAddressField(mid, 'from').replace(/\\"/g, '"');
            var body = this.getComposeHTML(mid);
            lang = Daria.Translate.getLangByMid(mid) || Daria.Translate.defineLanguage(body);

            if (mode === 'html') {
                // Квотируем для html
                body = Daria.Html2Text.quoteHtml(body);
                result += '<div><br/></div><div><br/></div><div>' + date + ', ' + _.escape(from) + ':</div>';
                result += body;

            } else {
                result += Daria.Html2Text.html2text(body); // Конвертим в plain text
                // Вырезаем подпись [DARIA-2304]
                // Пока от релиза оторвали
                //result = result.replace(/\n--\s?(\n|\r)[\s\S]*/, '');
                // Квотируем
                result = Daria.Html2Text.quoteText(result);
                result = '\n\n' + date + ', ' + from + ':\n' + result;
            }
        }

        return hSettings.signature.appendToBody(result, mode, null, fromEmail, lang);
    };

    /**
     * Формирование тела письма для пересылки
     */
    hMessageBody.getForwardBody = function(mid, mode, fromEmail) {
        var hSettings = Jane.$H('settings');
        var hMessage = Jane.$H('message');
        var result = '';

        var date = hMessage.getDateTime(mid);
        // [DARIA-25433] убрано экранирование кавычек
        var from = hMessage.getAddressField(mid, 'from').replace(/\\"/g, '"');
        var body = this.getComposeHTML(mid);
        var lang = Daria.Translate.getLangByMid(mid) || Daria.Translate.defineLanguage(body);

        body = '<div class="normalize">' + body + '</div>';

        if (mode === 'html') {
            result += '<div><br/></div><div><br/></div><div>-------- ' + i18n('%Compose_Forward_Start') + '--------</div>';
            result += '<div>' + date + ', ' + _.escape(from) + ':</div><div><br/></div>';
            result += body;
            result += '<div><br/></div><div>-------- ' + i18n('%Compose_Forward_End') + ' --------</div>';
        } else {
            result += '\n\n-------- ' + i18n('%Compose_Forward_Start') + '  --------';
            result += '\n' + date + ', ' + from + ':\n\n';
            result += Daria.Html2Text.html2text(body); // Конвертим в plain text
            result += '\n-------- ' + i18n('%Compose_Forward_End') + ' --------';
        }

        return hSettings.signature.appendToBody(result, mode, true, fromEmail, lang);
    };

    /**
     * Формирование тела письма для черновика
     */
    hMessageBody.getDraftBody = function(mid, mode) {
        var body = this.getDraftHTML(mid, mode);

        if (mode === 'plain') {
            body = Daria.Html2Text.html2text(body);
            body = _.unescape(body);
        }

        return body;
    };

    /**
     * @desc Форматирование даты. Оригинальная функция была в js4wmi.
     * FIXME(maksimrv): Находится тут только ради тестирования. Если
     * найдем еще места где нужна такая функция вынесем в Daria.
     */
    hMessageBody.fullDate = function(timestamp) {
        var messageDate = new Date();
        // $.now нужно для тестов
        var nowDate = new Date($.now());

        messageDate.setTime(timestamp);

        if (nowDate.getFullYear() === messageDate.getFullYear()) {
            // short form
            return Jane.Date.format('%Date_df_in_HM', timestamp);
        }

        return Jane.Date.format('%Date_dBY_year_in_HM', timestamp);
    };

    hMessageBody._getLocationsData = function(ids) {
        return _.flatten(jpath(this.getCacheByParams({ids: ids}), '.facts.addr'));
    };

    /**
     * Недостаточно точные адреса, либо адреса без geo_addr
     * Все те адреса, которые не отдает getLocations
     *
     * @param {string} ids Айдишник письма
     * @returns {Object[]}
     */
    hMessageBody.getInvalidLocations = function(ids) {
        return _.difference(this._getLocationsData(ids), this.getLocations(ids));
    };

    /**
     * Все достаточно точные факты адресов
     * @param {string} ids Айдишник письма
     * @returns {Object[]}
     */
    hMessageBody.getLocations = function(ids) {
        return _(this._getLocationsData(ids))
            .filter(function(address) {
                return typeof address.geo_addr === 'string' && //Есть полный адрес
                    _.isPlainObject(address.addr); //И есть часть факта, которая отвечает за адрес внутри города
            })
            .filter(function(address) {
                //Либо есть улица
                if (typeof address.addr.street === 'string') {
                    return true;
                }

                //Либо есть информация хотя бы о двух сущностях в адресе
                return _.keys(address.addr).length > 1;
            })
            .valueOf();
    };


})(Daria);


/* ../../handlers/message/message-body.js end */

/* ../../handlers/message/message-in-reply-to.js begin */
new Handler("message-in-reply-to",
    /* ../../handlers/message/message-in-reply-to.info.js begin */
{
    params: {
        mid: null
    }
}


/* ../../handlers/message/message-in-reply-to.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/message/message-in-reply-to.js end */

/* ../../handlers/message/message-nearest.js begin */
(function() {

    var handler = new Handler("message-nearest",
        /* ../../handlers/message/message-nearest.info.js begin */
{
    params: {
        ids: null
    }
}


/* ../../handlers/message/message-nearest.info.js end */

    );

    handler.getNearestMessages = function(id) {
        var result = {prev: null, current: null, next: null};
        var messages = jpath(this.getCacheByParams({ids: id}), '.message');

        $.each(messages, function(i, message) {
            $.each(['next', 'prev', 'current'], function(i, type) {
                if (message[type]) {
                    result[type] = message;
                }
            });
        });

        return result;
    };

    /**
     * Возвращает MID следующего письма.
     * @param {Object} params Параметры хендлера.
     * @returns {String}
     */
    handler.getNextMid = function(params) {
        var cache = this.getCacheByParams(params);
        if (cache) {
            return jpath(cache, '.message[.next].mid')[0] || null;
        }

        return null;
    };

})();

/* ../../handlers/message/message-nearest.js end */

/* ../../handlers/message/message-thread-nearest.js begin */
(function() {

    var handler = new Handler("message-thread-nearest",
        /* ../../handlers/message/message-thread-nearest.info.js begin */
{
    params: {
        ids: null
    }
}


/* ../../handlers/message/message-thread-nearest.info.js end */

    );

    var hNearest = Jane.$H("message-nearest");

    handler.getNearestMessages = hNearest.getNearestMessages;

    /**
     * Мысли на тему... попробовал кэшировать треды, чтобы при переходу по списку тредов,
     * этот блок не грузился вообще, только когда нужно загрузить следующую страницу блока
     * кажется, что такая оптимизация пока не нужна, но может быть полезна,
     * когда появятся остальные вкладки, поэтому пока оставлю
     */
    /*
    handler.onsetcache = function(key, data, params){
        var that = this;
        var timestamp = new Date()-0;
        var ids = Daria.XML.selectNodes(data, "messages/list/message/@id");
        $.each(ids, function(i, a){
            if (i === 0 || i === ids.length - 1) {
                return true;
            }
            var id = Daria.nodeValue(a);
            var params = $.extend({}, params, {ids: id});
            var key = that.getKey(params);

            that.cache[key] = {
                data: data,
                timestamp: timestamp,
                params: params
            };
        });
    }
    */

})();

/* ../../handlers/message/message-thread-nearest.js end */

/* ../../handlers/message/message-history-nearest.js begin */
/* ------------------------------------------------------------------------------------------------------------- */
new Handler("message-history-nearest",
    /* ../../handlers/message/message-history-nearest.info.js begin */
{
    params: {
        ids     : null,
        tab     : null
    }
}

/* ../../handlers/message/message-history-nearest.info.js end */

);
/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/message/message-history-nearest.js end */

/* ../../handlers/message/message-narod-attach.js begin */
new Handler("message-narod-attach",
    /* ../../handlers/message/message-narod-attach.info.js begin */
{
    params: {
        url: null
    }
}


/* ../../handlers/message/message-narod-attach.info.js end */

);

/* ../../handlers/message/message-narod-attach.js end */

/* ../../handlers/message/do-unsubscribe.js begin */
new DoHandler('do-unsubscribe',
    /* ../../handlers/message/do-unsubscribe.info.js begin */
{
    params: {
        ids: null
    }
}

/* ../../handlers/message/do-unsubscribe.info.js end */

);

/* ../../handlers/message/do-unsubscribe.js end */

/* ../../handlers/suggest/do-history-suggest-delete.js begin */
new DoHandler('do-history-suggest-delete',
    /* ../../handlers/suggest/do-history-suggest-delete.info.js begin */
{
    params: {}
}

/* ../../handlers/suggest/do-history-suggest-delete.info.js end */

);

/* ../../handlers/suggest/do-history-suggest-delete.js end */


/* ../../handlers/settings/do-folder-update.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-folder-update",
    /* ../../handlers/settings/do-folder-update.info.js begin */
{
    params: {
        fid: null
    }
}

/* ../../handlers/settings/do-folder-update.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/settings/do-folder-update.js end */

/* ../../handlers/settings/second-level-zones.js begin */
new Jane.ArmourHandler('second-level-zones',
    /* ../../handlers/settings/second-level-zones.info.js begin */
{
    params: {
    }
}


/* ../../handlers/settings/second-level-zones.info.js end */

);

$.extend(Jane.$H('second-level-zones'), {
    onsetcache: function(key, data) {
        this.data = jpath(data, '.zone');
    },

    /**
     * Возвращает домен второго или третьего уровня, исходя из своего списка зон
     * @param {String} email имейл или домен
     */
    getDomain: function(email) {
        var domain = email.replace(/^[^@]+@/, '');
        var split = domain.split('.');

        if (split.length > 2) {
            split = $.inArray(split.slice(-2).join('.'), this.data) > -1 ?
                split.slice(-3) : // то выбираем домен третьего уровня
                split.slice(-2);  // иначе домен второго уровня
        }

        return split.join('.');
    }
});



/* ../../handlers/settings/second-level-zones.js end */

/* ../../handlers/settings/service-emails.js begin */
(function(/**Jane*/Jane) {
    var hServiceEmails = new Jane.ArmourHandler("service-emails");

    hServiceEmails.onsetcache = function(key, data) {
        this.data = data;
    };

    hServiceEmails.is = function(email) {
        var sp = email.split('@');
        var check = {
            'login': sp[0],
            'domain': sp[1],
            'full': email
        };

        // если списки не подгружены, то показываем всё
        if (!this.data) {
            return false;
        }

        for (var type in check) {
            if ($.inArray(check[type], this.data[type]) !== -1) {
                return true;
            }
        }

        return false;
    };
})(Jane);

/* ../../handlers/settings/service-emails.js end */

/* ../../handlers/settings/user-emails.js begin */
(function(/**Jane*/Jane) {

    var data = [
        "yandex.ru",
        "ya.ru",
        "yandex.com.tr",
        "narod.ru",
        "yandex.ua",
        "yandex.kz",
        "yandex.com",
        "yandex.by",
        "rambler.ru",
        "lenta.ru",
        "myrambler.ru",
        "autorambler.ru",
        "ro.ru",
        "r0.ru",
        "mail.ru",
        "inbox.ru",
        "bk.ru",
        "list.ru",
        "gmail.com",
        "googlemail.com",
        "ukr.net",
        "meta.ua",
        "bigmir.net",
        "ngs.ru",
        "km.ru",
        "freemail.ru",
        "bossmail.ru",
        "girlmail.ru",
        "safebox.ru",
        "megabox.ru",
        "boymail.ru",
        "pochta.ru",
        "qip.ru",
        "fromru.com",
        "front.ru",
        "hotbox.ru",
        "hotmail.ru",
        "krovatka.su",
        "land.ru",
        "mail15.com",
        "mail333.com",
        "newmail.ru",
        "nightmail.ru",
        "nm.ru",
        "pisem.net",
        "pochtamt.ru",
        "pop3.ru",
        "rbcmail.ru",
        "smtp.ru",
        "5ballov.ru",
        "aeterna.ru",
        "ziza.ru",
        "memori.ru",
        "photofile.ru",
        "fotoplenka.ru",
        "pochta.com",
        "hotmail.com",
        "live.com",
        "yahoo.com",
        "ymail.com",
        "rocketmail.com",
        "mynet.com",
        "mynet.com.tr",
        "aol.com",
        "ygm.com",
        "love.com",
        "wow.com",
        "games.com",
        "nextmail.ru",
        "programist.ru",
        "toplemon.ru",
        "chat.ru",
        "gypost.com",
        "email.ru",
        "aport.ru",
        "omen.ru",
        "email.ru",
        "imail.ru",
        "atrus.ru",
        "au.ru",
        "fax.ru",
        "7do.ru",
        "timeweb.ru",
        "moiemail.ru",
        "infobox.ru",
        "proboga.com",
        "me.com",
        "alkent.net",
        "amele.com",
        "anadol.net",
        "aofnet.net",
        "aruz.net",
        "beytepe.net",
        "bilkent.net",
        "bogazici.net",
        "boun.net",
        "ceyhan.org",
        "fintur.net",
        "gazi.net",
        "gediz.net",
        "hisar.org",
        "holyfire.com",
        "iett.net",
        "kuyu.net",
        "lise.net",
        "mafya.com",
        "melek.org",
        "metu.net",
        "milliyet.net",
        "nemrut.org",
        "odtu.com",
        "olympist.net",
        "raksnet.org",
        "sebil.com",
        "telsim.org",
        "turkcell.org",
        "turnet.org",
        "efes.net.tr",
        "meta.ua",
        "Mail.ua",
        "e-mail.ua",
        "i.ua",
        "ua.fm",
        "email.ua",
        "3g.ua",
        "gala.net",
        "ukr.net",
        "bigmir.net",
        "a.ua",
        "forenet.info",
        "ukrtelecom.ua",
        "mauimail.com",
        "gmx.com",
        "gmx.usa",
        "pobox.com",
        "mymail.com",
        "141.com",
        "inbox.com",
        "zoho.com",
        "bigstring.com",
        "fastmail.fm",
        "ovi.com",
        "box.az",
        "ok.kz",
        "seznam.cz",
        "post.cz",
        "spoluzaci.cz",
        "stream.cz",
        "firmy.cz",
        "centrum.cz"
    ];

    var hUserEmails = new Jane.StaticJSHandler('user-emails', {data: data});

    /**
     * Определяет челеовеческий ли это имейл (или домен от имейла)
     * @param {String} email
     */
    hUserEmails.is = function(email) {
        var sp = email.split('@');
        var domain = sp[1] || email;

        return $.inArray(domain, this._staticData) > -1;
    };

})(Jane);



/* ../../handlers/settings/user-emails.js end */

/* ../../handlers/settings/settings.js begin */
/**
 * @fileOverview Тут находятся расширения hSettings для почты
 */
(function(/**Jane*/Jane) {

    var hSettings = Jane.$H('settings');

    /**
     * Возвращает объект с последними открытыми письмами в папках.
     * @return {Object}
     */
    hSettings.getLOM = function() {
        if (!this._lastOpenMsgs) {
            try {
                this._lastOpenMsgs = $.parseJSON(decodeURIComponent(this.getSetting('last_open_msg')) || '{}');
            } catch(e) {
            }
            this._lastOpenMsgs = $.isPlainObject(this._lastOpenMsgs) ? this._lastOpenMsgs : {};
        }

        return this._lastOpenMsgs;
    };

    /**
     * Возвращает последнее открытое письмо для указанной папки.
     * Если возвращает false, то параметры - неправильные.
     * @param {Object} params Параметры запроса.
     * @return {String}
     */
    hSettings.getLOMByParams = function(params) {
        if (this._validLOMParams(params)) {
            var LOM = this.getLOM();
            return LOM[params['current_folder']];
        }
        return false;
    };

    /**
     * Проверят валидность параметров для сохранения в последнее открытое письмо.
     * @param {Object} params Параметры запроса.
     * @return {Boolean}
     * @private
     */
    hSettings._validLOMParams = function(params) {
        // в конце проверяем, что у нас все-таки есть current_folder и это не спам или удаленные
        return Daria.params4SimplePath(params) && !Jane.$H('folders').spamOrTrash(params['current_folder']);
    };

    /**
     * Сохраняет последнее открытое письмо для указанной папки.
     */
    hSettings.saveLOM = function(params) {
        //теоретически тут может быть, что мы не влезем в 4000 символов, пока забиваем на эту проблему.
        //как вариант обхода 4000 символов, можно хранить каждую папка отдельно last_open_msg_<fid> = <mid>, но тогда прочищать будет сложнее
        if (!this._validLOMParams(params)) {
            return false;
        }


        var fid = params['current_folder'];
        var data = this.getLOM();
        data[fid] = params['ids'] || 't' + params['thread_id'];

        var hFolders = Jane.$H('folders');

        // простой strngify для объекта
        var json = [];
        for (var i in data) {
            // проверяем что папка из настроек все еще есть в folders
            // если папки нет, то забываем про нее
            if (hFolders.getFolderById(i)) {
                json.push('"' + i + '":"' + data[i] + '"');
            }
        }
        var lastOpenMsgs = '{' + json.join(',') + '}';


        // запись без обновления кэша
        this.setSettings({
            last_open_msg: encodeURIComponent(lastOpenMsgs)
        }, null, true);
    };

    /**
     * Удаляет данные о послденем отрытом письме.
     * @param {String} fid FolderID
     */
    hSettings.deleteLOM = function(fid) {
        delete this.getLOM()[fid];
    };

})(Jane);

/* ../../handlers/settings/settings.js end */

/* ../../handlers/settings/signature-langs.js begin */
(function() {
    new Jane.StaticJSHandler('signature-langs', {
        data: {
            langs: [
                { abbr: 'ru', 'short': 'Ru', name: 'Русский' },
                { abbr: 'en', 'short': 'En', name: 'English' },
                { abbr: 'uk', 'short': 'Ua', name: 'Українська' },
                { abbr: 'be', 'short': 'By', name: 'Беларуская' },
                { abbr: 'tr', 'short': 'Tr', name: 'Türkçe'  }
            ]
        }
    });
})();

/* ../../handlers/settings/signature-langs.js end */

/* ../../handlers/mail/do-mail-reset-recent-counter.js begin */
new Jane.DoHandler('do-mail-reset-recent-counter');

// DARIA-17618 - Обнулять счётчик свежих писем из вёрстки
Jane.events.bind('pageVisible.change', function() {
    if (Jane.watcher.get('pageVisible')) {
        Jane.Handler.doAll(['do-mail-reset-recent-counter']);
    }
});

/* ../../handlers/mail/do-mail-reset-recent-counter.js end */


/* ../../handlers/abook/abook-contact.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("abook-contact",
    /* ../../handlers/abook/abook-contact.info.js begin */
{
    params: {
        email: null,
        cid: null
    }
}


/* ../../handlers/abook/abook-contact.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

$.extend(Jane.$H('abook-contact'), {
    /**
     * Возвращает в виде объекта информацию о контакте:
     * {
     *  cid: '123'
     *  name: {
     *      first: 'Gennadiy',
     *      middle: 'Petrovich',
     *      last: 'Lastochkin'
     *  },
     *  email: ['gennadiy@gmail.com', 'genchik@ya.ru']
     * }
     * если email всего один, то он ввиде строки, а не массива
     *
     * Можно регулировать результат флагами:
     *  onlyFirstEmail - только первый имейл
     *  joinName - склеить имя в одну строку
     * @param {String} cid
     * @param {Object} flags
     * @type Object
     */
    getContactInfo: function(cid, flags) {
        flags = flags || {};
        var data = this.getCacheByParams({cid: cid});

        return data ? this._getContactInfo(data.contact[0], flags) : {};
    },

    /**
     * Распаршивает конкретный тэг, выход описан в getContactInfo
     * @private
     * @param {Node} contact
     * @param {Object} flags
     */
    _getContactInfo: function(contact, flags, options) {
        options = options || {};
        if (!contact) {
            return {};
        }

        var cid = contact.cid;
        var name = contact.name;
        var emails = $.map(contact.email, function(e) { return e.value; });

        if (flags.joinName) { name = name.full || ''; }
        if (flags.onlyFirstEmail) {
            var index = options.email ? $.inArray(options.email, emails) : 0;
            emails = emails[index > -1 ? index : 0];
        }

        if (emails.length == 1) { emails = emails[0]; }

        return {
            cid: cid,
            name: name,
            email: emails
        };
    }
});

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/abook-contact.js end */

/* ../../handlers/abook/abook-contacts.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

(function() {

    var hAbookContacts = new Handler('abook-contacts',
        /* ../../handlers/abook/abook-contacts.info.js begin */
{
    params: {
        q: null,
        cid: null,
        extended: null,
        tid: null,
        emails: null,
        popular: null,
        pagesize: null,
        page: null,
        skip: null,

        /**
         * @type string 'selected' используется для получения всех выбранных контактов.
         */
        mode: null
    }
}

/* ../../handlers/abook/abook-contacts.info.js end */

    );

    /* ------------------------------------------------------------------------------------------------------------- */
    $.extend(hAbookContacts, {

        /**
         * На вход массив с имелами, на выходе массив с контактами
         * интерфейс такойже как и у Jane.$H('abook-contact').getContactInfo
         * @param {Array} emails
         * @param {Object} flags
         * @type Array
         */
        // TODO: Что за дьявольщина?
        getContactsInfoByEmails: function(emails, flags) {
            var res = [];
            flags = flags || {};
            var contacts = this.getCacheByParams({emails: emails.join(',')});
            if (!contacts) {
                return res;
            }

            $.each(emails, function(i, email) {
                var contact = jpath(contacts, '.contact[.email.value == "' + email + '"]')[0];
                if (contact) {
                    res.push( Jane.$H('abook-contact')._getContactInfo(contact, flags, {email: email}) );
                }
            });
            return res;
        },

        /**
         * Генерирует хэш с имейлами из списка контактов для аватарок
         * @example
         * {
         *  "cid1": {
         *      "email": "ref",
         *      "ivan@ya.ru": "sdfsdfsdf",
         *      "petr@ya.ru": "adffdd98f"
         *      ...
         *  },
         *  ...
         * }
         */
        // TODO: Refactor
        getContactsEmails: function(params, onlyFirstEmail) {
            var result = {};
            var tid = Number(params.tid) || 0;

            if (params.cid) {
                $.each(this.cache, function(key, item) {
                    var contact = jpath(item.data, '.contact[.cid == "' + params.cid + '" && .email]')[0];
                    if (contact) {
                        parseContact(contact);
                        return false;
                    }
                });
            } else {
                // поля email может не быть
                jpath(this.getCacheByParams(params), 'contact[.email]').forEach(parseContact);
            }

            function parseContact(contact) {
                var cid = contact.cid;
                var added = false;

                contact.email.forEach(function(emailInfo) {
                    if (onlyFirstEmail && added) {
                        return;
                    }

                    var email = emailInfo.value;
                    if (!email) {
                        return;
                    }

                    if (tid && tid !== -10 && emailInfo.tags.indexOf(tid) === -1) {
                        return;
                    }

                    result[cid] = result[cid] || {};
                    result[cid][email] = emailInfo.ref;
                    added = true;
                });
            }

            return result;
        },

        /**
         * Вытаскивает данные контакта из кеша страниц с контактами.
         * @param {string} cid айдишник контакта
         * @return {Object|null} объект с информацией о контакте
         */
        getContactData: function(cid) {
            /**
             * Не берем данные из кеша по ключу 'popular'.
             */
            for (var prop in this.cache) {
                var contact = jpath(this.cache[prop], '.data.contact[.cid == "' + cid + '"]')[0];
                /**
                 * NOTE: Фильтруем кеш, так как по некоторым ключам запросов к хендлеру "abook-contacts"
                 * выдается неполная информация. Нам нужны только записи, где email это массив.
                 */
                if (contact && Array.isArray(contact.email)) {
                    return contact;
                }
            }
            return null;
        },

        /**
         * Вытаскивает данные контакта из кеша страниц с контактами по емейлу
         * @param {string} email email контакта
         * @return {Object|null} объект с информацией о контакте
         **/
        getContactDataByEmail: function(email) {
            /**
             * Не берем данные из кеша по ключу 'popular'.
             */
            for (var prop in this.cache) {
                var contact = jpath(this.cache[prop], '.data.contact[.email.value == "' + email + '"]')[0];
                /**
                 * NOTE: Фильтруем кеш, так как по некоторым ключам запросов к хендлеру "abook-contacts"
                 * выдается неполная информация. Нам нужны только записи, где email это массив.
                 */
                if (contact && Array.isArray(contact.email)) {
                    return contact;
                }
            }
            return null;
        },

        /**
         * Возвращает массив о контактов
         * @param {Array} cids массив сидов
         * @return {Array} массив данных контактов
         */
        getContactsData: function(cids) {
            var that = this;

            return $.map(cids, function(cid) {
                return that.getContactData(cid);
            });
        },

        /**
         * Возвращает общий список mcid'ов по списку cid'ов.
         * @param {Array} cids
         * @param {string|number} [tid] для фильтрации по группе
         * @return {Array}
         */
        getMcids: function(cids, tid) {
            var tidNum = Number(tid);
            var contacts = Jane.$H('abook-contacts').getContactsData(cids);
            var mcids = [];

            contacts.forEach(function(contact) {
                if (contact.email) {
                    contact.email.forEach(function(emailObj) {
                        // Группа -10 (контакты с телефона) не ставится на емейлы (только на контакт),
                        // по этому в случае группы -10, берем все емейлы контакта.
                        if ((!tid || tidNum === -10) || emailObj.tags.indexOf(tidNum) !== -1 ) {
                            mcids.push(contact.cid + '.' + emailObj.id);
                        }
                    });
                }
            });
            return mcids;
        },

        /**
         * Полное удаление контактов.
         * @param {Array} cids массив сидов для удаления
         * @return {$.Promise}
         */
        removeContacts: function(cids) {
            var defer = $.Deferred();
            Jane.Handler.doAll(['do-abook-person-delete', 'abook-groups'], { cid: cids }, function(data) {
                var error = jpath(data, '.handlers[0].error')[0];

                if (error) {
                    Daria.Statusline.showMsg({
                        body: i18n('%АК_фэйл'),
                        body3: i18n('%3pane_АК_фэйл')
                    });
                    defer.reject(error);
                } else {
                    Daria.Autocompleter.getContact().flushCache();
                    Jane.$H('abook-contact').clearCache();
                    Jane.$H('abook-contacts').clearCache();
                    Jane.$H('abook-letters').clearCache();

                    // TODO: Заменить на Jane.$B('app').run()
                    Jane.$B('left-box').run();
                    Jane.$B('mail-right-box').getActive().run();

                    var cidsCount = cids.length;
                    Daria.Statusline.showMsg({
                        body: i18n('%АК_Контактов_Удалено', cidsCount),
                        body3: i18n('%АК_Контактов_Удалено', cidsCount)
                    });

                    defer.resolve();
                }
            });
            return defer.promise();
        }
    });

    /* ------------------------------------------------------------------------------------------------------------- */

    hAbookContacts.baseGetCache = hAbookContacts.getCache;

    hAbookContacts.getCache = function(params) {
        if (params.indexOf('mode=selected') !== -1) {
            return {
                contact: this.getContactsData(Jane.Block.Abook.getSelected()),
                count: 2,
                pager: {
                    'current': 0,
                    'pages-count': 1
                }
            };
        } else {
            return this.baseGetCache.apply(this, arguments);
        }
    };

    /* ------------------------------------------------------------------------------------------------------------- */

})();

/* ../../handlers/abook/abook-contacts.js end */

/* ../../handlers/abook/abook-groups.js begin */
/* ------------------------------------------------------------------------------------------------------------- */
(function() {
    var hAbookGroups = new Handler('abook-groups');

    hAbookGroups.onsetcache = function(key, data) {
        var phoneGroup = jpath(data, '.tag[.tid == "-10"]')[0];
        if (phoneGroup) {
            phoneGroup.title = i18n('%AK_Phone_Contacts');
        }
        this.data = data;
    };

    hAbookGroups.getGroupByTitle = function(name) {
        return jpath(this.data, '.tag[.title == "' + name + '"]')[0];
    };

    hAbookGroups.getGroupByTid = function(tid) {
        return jpath(this.data, '.tag[.tid == "' + tid + '"]')[0];
    };

    hAbookGroups.getContactsCount = function(_params) {
        function getCid(mcid) {
            return String(mcid).split('.')[0];
        }
        var uniqueCids = _params.mcids.map(getCid);
        return $.unique(uniqueCids).length;
    };

    /**
     * Добавление меток групп на письма/контакты.
     * @param {Object} params
     *   @param {number|string} params.tid
     *   @param {Array} params.mids Список mcid'ов и/или cid'ов
     * @returns {*}
     */
    hAbookGroups.addToGroup = function(params) {
        var _params = {
            tids: [params.tid],
            mcids: params.mcids,
            action: 'add'
        };
        /**
         * В группу "с телефона" можно помещать только контакты целиком.
         * @see https://st.yandex-team.ru/MYCONT-1028
         */
        if (_params.tid === -10) {
            _params.mcids = $.unique(_params.mcids.map(function(mcid) {
                return String(mcid).split('.')[0];
            }));
        }
        return query(_params).then(function() {
            var textForStatus = ' ' + hAbookGroups.getGroupByTid(params.tid).title;
            if (hAbookGroups.getContactsCount(_params) > 1) {
                textForStatus = i18n('%AK_add_contacts_to_group') + textForStatus;
            } else {
                textForStatus = i18n('%AK_add_contact_to_group') + textForStatus;
            }
            Daria.Statusline.showMsg({
                body: textForStatus,
                body3: textForStatus
            });
        });
    };

    /**
     * Снятие меток групп с писем/контактов.
     * @param {Object} params
     *   @param {Array} params.tids
     *   @param {Array} params.mids Список mcid'ов и/или cid'ов
     * @returns {*}
     */
    hAbookGroups.removeFromGroup = function(params) {
        return query({
            tids: params.tids,
            mcids: params.mcids,
            action: 'rm'
        });
    };

    function query(params) {
        var defer = $.Deferred();
        var tids = params.tids;
        var mcids = params.mcids;

        if (!tids.length || !mcids.length) {
            return;
        }

        var handlerParams = {
            tid: tids,
            mcid: mcids,
            action: params.action
        };

        Handler.doAll(['do-abook-group-edit-contacts'], handlerParams, function() {
            Daria.Autocompleter.getContact().flushCache();
            Daria.Dropdown.closeAll();

            Jane.$H('abook-groups').clearCache();
            Jane.$H('abook-contact').clearCache();
            Jane.$H('abook-contacts').clearCache();

            defer.resolve();
        });

        return defer.promise();
    }
})();
/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/abook-groups.js end */

/* ../../handlers/abook/abook-invite.js begin */
new Jane.Handler("abook-invite",
    /* ../../handlers/abook/abook-invite.info.js begin */
{
    params: {
        email: null
    }
}
/* ../../handlers/abook/abook-invite.info.js end */

);

/* ../../handlers/abook/abook-invite.js end */

/* ../../handlers/abook/abook-letters.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("abook-letters",
    /* ../../handlers/abook/abook-letters.info.js begin */
{
    params: {
        tid: null
    }
}

/* ../../handlers/abook/abook-letters.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/abook-letters.js end */

/* ../../handlers/abook/abook-suggest.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("abook-suggest",
    /* ../../handlers/abook/abook-suggest.info.js begin */
{
    params: {
        popup: null,
        domain: null,
        all: null,
        q: null,
        mcid: null,
        climit: null,
        glimit: null,
        phone: null     // must - обязательное наличие номера телефона в контакте
    },
    type: "js",
    ckey: true
}


/* ../../handlers/abook/abook-suggest.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/abook-suggest.js end */

/* ../../handlers/abook/abook-suggest-report.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("abook-suggest-report",
    /* ../../handlers/abook/abook-suggest-report.info.js begin */
{
    params: {
        uid: null,
        q: null,
        section: null,
        title: null,
        id: null
    }
}

/* ../../handlers/abook/abook-suggest-report.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/abook-suggest-report.js end */

/* ../../handlers/abook/do-abook-invite-send.js begin */
new Jane.Handler("do-abook-invite-send",
    /* ../../handlers/abook/do-abook-invite-send.info.js begin */
{
    params: {
        mcid: null
    }
}
/* ../../handlers/abook/do-abook-invite-send.info.js end */

);

/* ../../handlers/abook/do-abook-invite-send.js end */

/* ../../handlers/abook/do-abook-person-add.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-person-add",
    /* ../../handlers/abook/do-abook-person-add.info.js begin */
{
    params: {
        first_name: null,
        last_name: null,
        b_day: null,
        b_month1: null,
        b_year: null,
        tel_list: null,
        descr: null,
        mail_addr: null,
        tags: null
    }
}


/* ../../handlers/abook/do-abook-person-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-person-add.js end */

/* ../../handlers/abook/do-abook-person-delete.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-person-delete",
    /* ../../handlers/abook/do-abook-person-delete.info.js begin */
{
    params: {
        cid: null
    }
}


/* ../../handlers/abook/do-abook-person-delete.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-person-delete.js end */

/* ../../handlers/abook/do-abook-person-update.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-person-update",
    /* ../../handlers/abook/do-abook-person-update.info.js begin */
{
    params: {
        person_id: null,
        first_name: null,
        middle_name: null,
        last_name: null,
        b_day: null,
        b_month1: null,
        b_year: null,
        tel_list: null,
        descr: null,
        rec_id: null,
        del: null,
        mail_addr: null
    }
}

/* ../../handlers/abook/do-abook-person-update.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-person-update.js end */

/* ../../handlers/abook/do-abook-group-add.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-group-add",
    /* ../../handlers/abook/do-abook-group-add.info.js begin */
{
    params: {
        title: null,
        mcid: null
    }
}


/* ../../handlers/abook/do-abook-group-add.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-group-add.js end */

/* ../../handlers/abook/do-abook-group-edit.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-group-edit",
    /* ../../handlers/abook/do-abook-group-edit.info.js begin */
{
    params: {
        tid: null,
        title: null
    }
}


/* ../../handlers/abook/do-abook-group-edit.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-group-edit.js end */

/* ../../handlers/abook/do-abook-group-edit-contacts.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-group-edit-contacts",
    /* ../../handlers/abook/do-abook-group-edit-contacts.info.js begin */
{
    params: {
        tid: null,
        action: null,
        mcid: null
    }
}


/* ../../handlers/abook/do-abook-group-edit-contacts.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-group-edit-contacts.js end */

/* ../../handlers/abook/do-abook-group-remove.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-abook-group-remove",
    /* ../../handlers/abook/do-abook-group-remove.info.js begin */
{
    params: {
        tid: null
    }
}


/* ../../handlers/abook/do-abook-group-remove.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/abook/do-abook-group-remove.js end */

/* ../../handlers/abook/abook-band-info.js begin */
new DoHandler('abook-band-info',
    /* ../../handlers/abook/abook-band-info.info.js begin */
{
    params: {
        email: null
    }
}

/* ../../handlers/abook/abook-band-info.info.js end */

);


/* ../../handlers/abook/abook-band-info.js end */


/* ../../handlers/collector/collector.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("collector",
    /* ../../handlers/collector/collector.info.js begin */
{
    params: {
        popid: null/*,
        email: null*/
    }
}


/* ../../handlers/collector/collector.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/collector.js end */

/* ../../handlers/collector/collector-settings.js begin */
(function() {

    // значения по умолчанию для протоколов, общие для всех сборщиков
    // могут быть переопределены в настройке конкретного сборщика
    var DefaultConfig = {
        useSSL: true,
        useProtocol: Daria.IS_CORP ? 'imap' : 'pop',
        imap: {port: 143, tpl: 'login@domain', ssl: {port: 993}},
        pop: {port: 110, tpl: 'login@domain', ssl: {port: 995}}
    };
    var CollectorSettings;

    CollectorSettings = new Jane.Handler('collector-settings');

    CollectorSettings.onsetcache = function(key, data) {
        this.data = data;
    };

    CollectorSettings.getDefaultConfig = function(useProtocol, useSSL) {
        var conf = $.extend({}, DefaultConfig);

        if (typeof useProtocol === 'undefined' || useProtocol === null) {
            useProtocol = conf.useProtocol;
        }

        $.extend(conf, conf[useProtocol]);

        if (typeof useSSL === 'undefined' || useSSL === null) {
            useSSL = conf.useSSL;
        }

        if (useSSL) {
            $.extend(conf, conf[useProtocol]['ssl'] || {});
        }

        conf.useProtocol = useProtocol;
        conf.useSSL = useSSL;
        delete conf.imap;
        delete conf.pop;
        delete conf.ssl;

        return conf;
    };

    /**
     * @desc Возвращает объект с настройками
     * сборщика для определенного(в параметре 'name') домена.
     *
     * @param {String} name The name of property
     * @return {Object|Null} The object with
     * settings for specific domain.
     */
    CollectorSettings.getByDomain = function(name, useProtocol, useSSL) {
        if (!name) {
            return null;
        }

        var conf;

        for (var i = 0, l = this.data.length; i < l; i++) {
            var e = this.data[i];
            if (e.name && $.inArray(name, e.name) > -1) {
                conf = $.extend(true, {}, DefaultConfig, e);
                break;
            }
        }

        if (!conf) {
            return null;
        }

        if (typeof useProtocol === 'undefined' || useProtocol === null) {
            useProtocol = conf.useProtocol;
        }

        if (!conf[useProtocol]) {
            return null;
        }

        $.extend(conf, conf[useProtocol]);

        if (typeof useSSL === 'undefined' || useSSL === null) {
            useSSL = conf.useSSL;
        }

        if (useSSL) {
            if (!conf[useProtocol]['ssl']) {
                return null;
            }

            $.extend(conf, conf[useProtocol]['ssl'] || {});
        }

        conf.useProtocol = useProtocol;
        conf.useSSL = useSSL;
        delete conf.imap;
        delete conf.pop;
        delete conf.name;
        delete conf.ssl;

        return conf;
    };

    /**
     * Export module.
     */
    return CollectorSettings;

})();

/* ../../handlers/collector/collector-settings.js end */

/* ../../handlers/collector/collector-texts.js begin */
new Jane.Handler("collector-texts");

/* ../../handlers/collector/collector-texts.js end */

/* ../../handlers/collector/collectors.js begin */
/**
 * @desc Возвращает данные
 * о сборщиках созданных пользователем.
 */

(function() {
    var Collectors = new Jane.Handler("collectors");

    Collectors.onsetcache = function(key, data) {
        if (data) {
            for (var i = 0; i < data.length; i++) {
                if (data[i].last_connect) {
                    data[i].human_time = Jane.Date.humanDate(new Date(data[i].last_connect * 1000));
                }
            }
        }
        this.data = data;
    };

    Collectors.exists = function(email) {
        if (this.data) {
            for (var i = 0; i < this.data.length; i++) {
                if (this.data[i].email == email) {
                    return true;
                }
            }
        }
        return false;
    };

    Collectors.getById = function(id) {
        if (this.data && this.data.length) {
            for (var i = 0, len = this.data.length; i < len; i++) {
                var collector = this.data[i];

                if (collector.popid == id) {
                    return collector;
                }
            }
        }

        return null;
    };

    /**
     * @return {Number} Возвращает количество
     * созданных сборщиков.
     */
    Collectors.getCount = function() {
        return this.data ? this.data.length : 0;
    };
}(this));

/* ../../handlers/collector/collectors.js end */

/* ../../handlers/collector/do-collector-check.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-check",
    /* ../../handlers/collector/do-collector-check.info.js begin */
{
    params: {
        popid: null,
        server: null,
        port: null,
        login: null,
        password: null,
        use_ssl: null,
        no_delete_msg: 'off',
        protocol: null
    }
}

/* ../../handlers/collector/do-collector-check.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-check.js end */

/* ../../handlers/collector/do-collector-create.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-create",
    /* ../../handlers/collector/do-collector-create.info.js begin */
{
    params: {
        server: null,
        login: null,
        password: null,
        port: null,
        use_ssl: null,
        email: null,
        no_delete_msg: 'off',
        abook_sync: null,
        mark_old_as_read: null,
        protocol: null
    }
}

/* ../../handlers/collector/do-collector-create.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-create.js end */

/* ../../handlers/collector/do-collector-edit.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-edit",
    /* ../../handlers/collector/do-collector-edit.info.js begin */
{
    params: {

        // settings_rpopper_edit
        popid: null,
        server: null,
        login: null,
        password: null,
        port: null,
        use_ssl: null,
        email: null,
        no_delete_msg: null,
        abook_sync: null,
        mark_old_as_read: null,
        protocol: null,

        // settings_filter_delete
        id: null,

        // settings_filter_create
        filter_name: null,
        // popid: null, - уже объявлен выше
        cliker_folder: null,
        cliker_label: null,
        move_folder: null,
        move_label: null
    }
}

/* ../../handlers/collector/do-collector-edit.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-edit.js end */

/* ../../handlers/collector/do-collector-remove.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-remove",
    /* ../../handlers/collector/do-collector-remove.info.js begin */
{
    params: {
        popid: null,
        fids: null
    }
}


/* ../../handlers/collector/do-collector-remove.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-remove.js end */

/* ../../handlers/collector/do-collector-on.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-on",
    /* ../../handlers/collector/do-collector-on.info.js begin */
{
    params: {
        popid: null
    }
}

/* ../../handlers/collector/do-collector-on.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-on.js end */

/* ../../handlers/collector/do-collector-off.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-collector-off",
    /* ../../handlers/collector/do-collector-off.info.js begin */
{
    params: {
        popid: null
    }
}

/* ../../handlers/collector/do-collector-off.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/collector/do-collector-off.js end */

/* ../../handlers/collector/do-collector-run.js begin */
new DoHandler("do-collector-run",
    /* ../../handlers/collector/do-collector-run.info.js begin */
{
    params: {

        // settings_rpopper_edit
        popid: null
    }
}


/* ../../handlers/collector/do-collector-run.info.js end */

);

/* ../../handlers/collector/do-collector-run.js end */

/* ../../handlers/informers/informer-done.js begin */
new Handler("informer-done",
    /* ../../handlers/informers/informer-done.info.js begin */
{
    params: {
        type: null
    }
}


/* ../../handlers/informers/informer-done.info.js end */

);

/* ../../handlers/informers/informer-done.js end */

/* ../../handlers/informers/send-report.js begin */
new Handler("send-report",
    /* ../../handlers/informers/send-report.info.js begin */
{
    params: {
        company: null,
        type: null,
        comment: null,
        uid: null
    }
}

/* ../../handlers/informers/send-report.info.js end */

);

/* ../../handlers/informers/send-report.js end */

/* ../../handlers/informers/company-info.js begin */
new Jane.ArmourHandler("company-info",
    /* ../../handlers/informers/company-info.info.js begin */
{
    params: {
        url: null,
        region: null
    }
}

/* ../../handlers/informers/company-info.info.js end */

);

/* ../../handlers/informers/company-info.js end */

/* ../../handlers/informers/company-info-check.js begin */
(function() {

    var hCompanyInfoCheck = new Jane.ArmourHandler("company-info-check",
        /* ../../handlers/informers/company-info-check.info.js begin */
{
    params: {
        urls: null
    }
}

/* ../../handlers/informers/company-info-check.info.js end */

    );

    $.extend(hCompanyInfoCheck, Daria.UniqHandler, {
        uniqName: 'urls',
        uniqPath: 'url',
        uniqFromJSON: function(json, uniq) {
            return jpath(json, '.url[. == "' + _.escape(uniq) + '"]')[0];
        }
    });

})();

/* ../../handlers/informers/company-info-check.js end */

/* ../../handlers/informers/flight-info.js begin */
(function() {
    var hFlightInfo = new Jane.Handler("flight-info",
        /* ../../handlers/informers/flight-info.info.js begin */
{
    params: {
        date: null,
        number: null,
        from_geoid: null,
        reminder: null,
        direction: null
    }
}

/* ../../handlers/informers/flight-info.info.js end */

    );

    hFlightInfo.onsetcache = function(key, cache) {
        if (cache.arrival) {
            cache.arrival = parseDate(cache.arrival);
            if (!cache.arrival) {
                delete cache.arrival;
            }
        }

        if (cache.departure) {
            cache.departure = parseDate(cache.departure);
            if (!cache.departure) {
                delete cache.departure;
            }
        }
    };

    function parseDate(date) {
        var d = String(date).match(/^(\d+)-(\d+)-(\d+) (\d+):(\d+):(\d+)$/);
        if (!d) {
            return null;
        }

        return new Date(parseInt(d[1], 10), parseInt(d[2], 10) - 1, parseInt(d[3], 10), parseInt(d[4], 10), parseInt(d[5], 10), parseInt(d[6], 10)).getTime();
    }
})();

/* ../../handlers/informers/flight-info.js end */

/* ../../handlers/informers/staff-info.js begin */
(function(/**Jane*/Jane) {
    var hStaffInfo = new Jane.ArmourHandler('staff-info',
        /* ../../handlers/informers/staff-info.info.js begin */
{
    params: {
        login: null
    }
}

/* ../../handlers/informers/staff-info.info.js end */

    );

    hStaffInfo.isCached = function(key) {
        return !/login=/.test(key) || Jane.Handler.prototype.isCached.apply(this, arguments);
    };

    hStaffInfo.getCache = function(key) {
        return !/login=/.test(key) && {} || Jane.Handler.prototype.getCache.apply(this, arguments);
    };

    hStaffInfo.onsetcache = function(key, data, params) {
        if (!data) {
            return;
        }

        var timestamp = new Date() - 0;

        if (data.phones && data.phones.mobile) {
            data.phones.mobile = data.phones.mobile.split(', ');
        }
        if (data.position) {
            var position = data.position.split(' ');
            var limit = 3;
            for (var i = 0; i < position.length && i < limit; i++) {
                if (position[i].length < 4) {
                    limit++;
                    break;
                }
            }
            if (position.length > limit) {
                data.position_short = position.slice(0, limit).join(' ') + '...';
            } else {
                data.position_short = data.position;
            }
        }

        if (data.userpic) {
            data.userpic = data.userpic.replace(/^https?:/, '');
        }

        // Убрать логин пользователя в начале ссылки
        var rLogin = new RegExp('\/\/' + data.login + '\\.');
        if (data.services) {
            $.map(data.services, function(service) {
                service.url = (service.url || '').replace(/^http:/, '');
                service.type = service.url.replace(rLogin, '//').replace(/\/\/([^\.]+).*/, '$1');
                return service;
            });
        }

        if (data.gap && data.gap.text) {
            data.gap.text = data.gap.text.replace('&amp;nbsp;', '&#160;').replace('до ', 'до&#160;');
        }

        this.cache[key] = {
            data: data,
            timestamp: timestamp,
            params: params
        };
    };

    /**
     * Формирование ссылки на стаф по email
     * @param {String} email
     * @return {String} undefined, если не корп. email, или получение ссылки выполняется не со стафа
     */
    hStaffInfo.getLinkStaffByEmail = function(email) {
        // FIXME(rikishi) неправильно подставлять логин из email в ссылку на стаф
        // это будет работать только для yandex-team адресов
        // для yamoney логины могут отличаться
        if (!Daria.isYateamEmail(email)) {
            return;
        }

        return Jane.Config['staff-host'] + '/' + email.split('@')[0];
    };

})(Jane);


/* ../../handlers/informers/staff-info.js end */

/* ../../handlers/informers/currency-rates.js begin */
(function() {
    new Jane.Handler('currency-rates',
        /* ../../handlers/informers/currency-rates.info.js begin */
{
    params: {
        toGeoid: null,   // geoid региона, для которого должны расчитать курс в валюте региона fromGeoid
        fromGeoid: null
    },
    maxage: 43200 // 12 часов
}

/* ../../handlers/informers/currency-rates.info.js end */

    );
})();

/* ../../handlers/informers/currency-rates.js end */

/* ../../handlers/informers/weather.js begin */
(function() {
    var hWeather = new Jane.Handler('weather',
        /* ../../handlers/informers/weather.info.js begin */
{
    params: {
        geoid: null,
        date: null
    }
}

/* ../../handlers/informers/weather.info.js end */

    );
    return hWeather;
}());

/* ../../handlers/informers/weather.js end */

/* ../../handlers/groupon-topics/groupon-topics.js begin */
(function() {
    var data = {
        /* ../../handlers/groupon-topics/groupon-topics.data.js begin */
    'labels': [
    {
        label: i18n('%Promo_groupon_label_1'),
        img: Jane.getEntity("b-mail-icon_fitness.png")
    },
    {
        label: i18n('%Promo_groupon_label_2'),
        img: Jane.getEntity("b-mail-icon_relax.png")
    },
    {
        label: i18n('%Promo_groupon_label_4'),
        img: Jane.getEntity("b-mail-icon_shoes.png")
    },
    {
        label: i18n('%Promo_groupon_label_8'),
        img: Jane.getEntity("b-mail-icon_haircut.png")
    },
    {
        label: i18n('%Promo_groupon_label_38'),
        img: Jane.getEntity("b-mail-icon_camera.png")
    },
    {
        label: i18n('%Promo_groupon_label_39'),
        img: Jane.getEntity("b-mail-icon_clothes.png")
    },
    {
        label: i18n('%Promo_groupon_label_20'),
        "filter-label": i18n('%Promo_groupon_label_20_1'),
        img: Jane.getEntity("b-mail-icon_avia-ticket.png")
    },
    {
        label: i18n('%Promo_groupon_label_19'),
        img: Jane.getEntity("b-mail-icon_cosmetica.png")
    },



    {
        label: i18n('%Promo_groupon_label_3'),
        img: Jane.getEntity("b-mail-icon_knife.png")
    },
    {
        label: i18n('%Promo_groupon_label_5'),
        img: Jane.getEntity("b-mail-icon_hard-drive.png")
    },
    {
        label: i18n('%Promo_groupon_label_6'),
        "filter-label": i18n('%Promo_groupon_label_6_1'),
        img: Jane.getEntity("b-mail-icon_frying-pan.png")
    },
    {
        label: i18n('%Promo_groupon_label_7'),
        "filter-label": i18n('%Promo_groupon_label_7_1'),
        img: Jane.getEntity("b-mail-icon_pan.png")
    },
    {
        img: Jane.getEntity("b-mail-icon_furniture.png"),
        label: i18n('%Promo_groupon_label_9')
    },
    {
        label: i18n('%Promo_groupon_label_10'),
        img: Jane.getEntity("b-mail-icon_dry-cleaning.png")
    },
    {
        label: i18n('%Promo_groupon_label_11'),
        img: Jane.getEntity("b-mail-icon_electrovarka.png")
    },
    {
        label: i18n('%Promo_groupon_label_12'),
        img: Jane.getEntity("b-mail-icon_gps.png")
    },
    {
        label: i18n('%Promo_groupon_label_13'),
        img: Jane.getEntity("b-mail-icon_yoga.png")
    },
    {
        label: i18n('%Promo_groupon_label_14'),
        img: Jane.getEntity("b-mail-icon_hranenie-shin.png")
    },
    {
        label: i18n('%Promo_groupon_label_15'),
        img: Jane.getEntity("b-mail-icon_robot-pilesos.png")
    },
    {
        label: i18n('%Promo_groupon_label_16'),
        img: Jane.getEntity("b-mail-icon_smartphone.png")
    },
    {
        label: i18n('%Promo_groupon_label_17'),
        img: Jane.getEntity("b-mail-icon_couch.png")
    },
    {
        label: i18n('%Promo_groupon_label_18'),
        img: Jane.getEntity("b-mail-icon_restaurant.png")
    },
    {
        label: i18n('%Promo_groupon_label_21'),
        img: Jane.getEntity("b-mail-icon_manicure.png")
    },
    {
        label: i18n('%Promo_groupon_label_22'),
        "filter-label": i18n('%Promo_groupon_label_22_1'),
        img: Jane.getEntity("b-mail-icon_cleaning.png")
    },
    {
        label: i18n('%Promo_groupon_label_23'),
        "filter-label": i18n('%Promo_groupon_label_23_1'),
        img: Jane.getEntity("b-mail-icon_bokali.png")
    },
    {
        label: i18n('%Promo_groupon_label_24'),
        img: Jane.getEntity("b-mail-icon_krovati.png")
    },
    {
        label: i18n('%Promo_groupon_label_25'),
        img: Jane.getEntity("b-mail-icon_planshet.png")
    },
    {
        label: i18n('%Promo_groupon_label_26'),
        img: Jane.getEntity("b-mail-icon_tv.png")
    },
    {
        label: i18n('%Promo_groupon_label_27'),
        "filter-label": i18n('%Promo_groupon_label_27_1'),
        img: Jane.getEntity("b-mail-icon_computer.png")
    },
    {
        label: i18n('%Promo_groupon_label_28'),
        "filter-label": i18n('%Promo_groupon_label_28'),
        img: Jane.getEntity("b-mail-icon_computer.png")
    }
    ,
    {
        label: i18n('%Promo_groupon_label_29'),
        img: Jane.getEntity("b-mail-icon_fridge.png")
    },
    {
        label: i18n('%Promo_groupon_label_30'),
        img: Jane.getEntity("b-mail-icon_watch.png")
    },
    {
        label: i18n('%Promo_groupon_label_31'),
        "filter-label": i18n('%Promo_groupon_label_31_1'),
        img: Jane.getEntity("b-mail-icon_printer.png")
    },
    {
        label: i18n('%Promo_groupon_label_32'),
        img: Jane.getEntity("b-mail-icon_videoregistrator.png")
    },
    {
        label: i18n('%Promo_groupon_label_33'),
        img: Jane.getEntity("b-mail-icon_disk.png")
    },
    {
        label: i18n('%Promo_groupon_label_34'),
        img: Jane.getEntity("b-mail-icon_e-book.png")
    },
    {
        label: i18n('%Promo_groupon_label_35'),
        img: Jane.getEntity("b-mail-icon_monitor.png")
    },
    {
        label: i18n('%Promo_groupon_label_36'),
        img: Jane.getEntity("b-mail-icon_car-stereo.png")
    },
    {
        label: i18n('%Promo_groupon_label_37'),
        img: Jane.getEntity("b-mail-icon_lens.png")
    }
],

    'promo-labels':

[
    {
        label: i18n('%Promo_groupon_label_1'),
        theme: 'fitness'
    },
    {
        label: i18n('%Promo_groupon_label_2'),
        theme: 'relax'
    },
    {
        label: i18n('%Promo_groupon_label_4'),
        theme: 'shoes'
    },
    {
        label: i18n('%Promo_groupon_label_8'),
        theme: 'haircut'
    },
    {
        label: i18n('%Promo_groupon_label_38'),
        theme: 'camera'
    },
    {
        label: i18n('%Promo_groupon_label_39'),
        theme: 'clothes'
    },
    {
        label: i18n('%Promo_groupon_label_20'),
        theme: 'avia-tickets'
    },
    {
        label: i18n('%Promo_groupon_label_19'),
        theme: 'cosmetics'
    }
]

/* ../../handlers/groupon-topics/groupon-topics.data.js end */

    };

    new Jane.StaticJSHandler('groupon-topics', {
        data: {
            labels: data['labels'],
            'promo-labels': data['promo-labels'],
            'groupon-emails': ["daily@deals.groupon.ru", "daily@e.groupon.ru", "no-reply@groupon.ru"],
            exclude: ["vtnrf0grouponsite"]
        }
    });

}());

/* ../../handlers/groupon-topics/groupon-topics.js end */

/* ../../handlers/informers/money-payment-info.js begin */
(function() {
    new Jane.ArmourHandler('money-payment-info',
        /* ../../handlers/informers/money-payment-info.info.js begin */
{
    params: {
        receiver: null
    },
    maxage: 60
}

/* ../../handlers/informers/money-payment-info.info.js end */

    );
})();

/* ../../handlers/informers/money-payment-info.js end */


/* ../../handlers/compose/postcards.js begin */
// открытки зависят от продукта, который передается в handlers.jsx как _product
new Handler('postcards');
/* ../../handlers/compose/postcards.js end */

/* ../../handlers/compose/do-send.js begin */
new DoHandler("do-send",
    /* ../../handlers/compose/do-send.info.js begin */
{
    params: {
        "fid" : null,
        "idcs" : null,
        "mark_as" : null,
        "where" : null,
        "retpath" : null,
        "ttype" : null,
        "style" : null,
        "nosend" : null,
        "inreplyto" : null,
        "references" : null,
        "get_abook" : null,
        "nosave" : null,
        "ids" : null,
        "parts" : null,
        "autosave" : null,
        "overwrite" : null,
        "confirm_limit" : null,
        "ign_overwrite" : null,
        "from_mailbox" : null,
        "from_name" : null,
        "store_fid" : null,
        "store_name" : null,
        "to" : null,
        "cc" : null,
        "bcc" : null,
        "subj" : null,
        "html" : null,
        "send" : null,
        "doit" : null,
        "saveDraft" : null,
        "att" : null,
        "att_ids" : null,
        "narod_att" : null,
        "returl" : null,
        "captcha_entered" : null,
        "captcha_key" : null,
        "compose_check" : null,
        "lids" : null,
        "mark_ids" : null,
        "charset" : null,
        "strict_charset" : null,
        "notify_on_send" : null,
        "phone" : null
    }
}


/* ../../handlers/compose/do-send.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../handlers/compose/do-send.js end */

/* ../../handlers/compose/letter-templates.js begin */
(function() {
    var doneKeys = [
        "резюме",
        "?:^| )(отч[ёе]ты?)(?: |$",
        "реквизиты?",
        "прайсы?",
        "коммерческ[ио]е предложени[ея]",
        "анкет[ыа]",
        "?:^| )(сотрудничество)(?: |$",
        "предложени[ея]",
        "приглашени[ея] на собеседовани[ея]",
        "?:^| )(сч[ёе]та?)(?: |$",
        "?:^| )(договор[аы]?)(?: |$",
        "?:^| )(запросы?)(?: |$",
        "приглашени[ея]"
    ];

    var doneTexts = [
        "резюме",
        "отчёты",
        "реквизиты",
        "прайсы",
        "коммерческие предложения",
        "анкеты",
        "предложения о сотрудничестве",
        "предложения",
        "приглашения на собеседование",
        "счета",
        "договоры",
        "запросы",
        "приглашения"
    ];

    new Jane.StaticJSHandler('letter-templates', {
        data: {
            'done-keys': doneKeys,
            'done-texts': doneTexts
        }
    });

}());

/* ../../handlers/compose/letter-templates.js end */

/* ../../handlers/social/social-profile.js begin */
new Handler("social-profile",
    /* ../../handlers/social/social-profile.info.js begin */
{
    params: {
        service: null
    }
}

/* ../../handlers/social/social-profile.info.js end */

);

/* ../../handlers/social/social-profile.js end */

/* ../../handlers/social/social-profiles.js begin */
new Jane.ArmourHandler('social-profiles',
    /* ../../handlers/social/social-profiles.info.js begin */
{
    params: {
        refs: null
    }
}

/* ../../handlers/social/social-profiles.info.js end */

);

Jane.$H('social-profiles').getCacheByEmail = function(email) {
    var result = null;

    $.each(this.cache || {}, function(key, item) {
        if (key.split(':').pop() == email) {
            result = item.data;
        }
    });

    return result;
};

/* ../../handlers/social/social-profiles.js end */

/* ../../handlers/social/social-profiles-reset.js begin */
new Handler('social-profiles-reset',
    /* ../../handlers/social/social-profiles-reset.info.js begin */
{
    params: {
        emails: null
    }
}

/* ../../handlers/social/social-profiles-reset.info.js end */

);

/* ../../handlers/social/social-profiles-reset.js end */

/* ../../handlers/social/social-info.js begin */
new Jane.ArmourHandler("social-info",
    /* ../../handlers/social/social-info.info.js begin */
{
    params: {
        email: null
    }
}

/* ../../handlers/social/social-info.info.js end */

);

/* ../../handlers/social/social-info.js end */

/* ../../handlers/social/social-avatars.js begin */
new Jane.ArmourHandler('social-avatars',
    /* ../../handlers/social/social-avatars.info.js begin */
{
    params: {
        refs: null
    }
}

/* ../../handlers/social/social-avatars.info.js end */

);

(function() {

    var hSocialAvatars = Jane.$H('social-avatars');
    /*
    var cache = {};
    */
    $.extend(hSocialAvatars, Daria.UniqHandler, {
        uniqName: 'refs',
        uniqPath: 'avatar',
        uniqFromJSON: function(json, uniq) {
            return jpath(json, '.avatar[.ref == "' + _.escape(uniq.split(':').shift()) + '"]')[0];
        }
    });

})();

/* ../../handlers/social/social-avatars.js end */

/* ../../handlers/social/social-redirect.js begin */
new Handler("social-redirect",
    /* ../../handlers/social/social-redirect.info.js begin */
{
    params: {
        service: null
    }
}


/* ../../handlers/social/social-redirect.info.js end */

);

/* ../../handlers/social/social-redirect.js end */

/* ../../handlers/social/facebook-badge.js begin */
new Handler("facebook-badge",
    /* ../../handlers/social/facebook-badge.info.js begin */
{
    params: {
        email: null
    }
}

/* ../../handlers/social/facebook-badge.info.js end */

);


/* ../../handlers/social/facebook-badge.js end */

/* ../../handlers/journal/journal.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("journal",
    /* ../../handlers/journal/journal.info.js begin */
{
    maxage: 1
}


/* ../../handlers/journal/journal.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/journal/journal.js end */


/* ../../handlers/passport/phone-check.js begin */
/**
 * @deprecated Use `userphones.js`
 */
new Handler("phone-check",
    /* ../../handlers/passport/phone-check.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phone-check.info.js end */

);

(function(phoneCheck) {

    // Проверяет провалидирован номер или нет
    phoneCheck.isValidated = function(number) {
        var data = this.getCacheByParams();
        number = phoneCheck.normalize(number);
        return jpath(data,'.[.number == "' + number + '"]').length;
    };

    // Приводим телефон к международному формату
    // DARIA-25623
    phoneCheck.normalize = function(number) {
        number = (number || '').replace(/^8/,'+7');
        return number;
    };

}(Jane.$H('phone-check')));


/* ../../handlers/passport/phone-check.js end */

/* ../../handlers/passport/userphones.js begin */
(function() {
    'use strict';
    var hUserPhones = new Jane.Handler("userphones", /* ../../handlers/passport/userphones.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/userphones.info.js end */
);

    $.extend(hUserPhones, Jane.PromiseHandlerMixin);

    /**
     * Полученине активного номера телефона
     * @return {Object}
     */
    hUserPhones.getActivePhone = function() {
        var data = this.getCacheByParams() || {};
        return jpath(data, '.phone[.active == "1" && .valid == "valid"]')[0];
    };

    /**
     * @desc Проверяет есть ли у пользователя активный номер
     *
     * @deprecated
     * @return {Boolean} Есть или нет активный номер
     */
    hUserPhones.hasActiveNumber = function() {
        var data = this.getCacheByParams();
        var isActiveNumber = Boolean(jpath(data, '.phone[.active == "1" && .valid == "valid"]').length);
        return isActiveNumber;
    };

    /**
     * Проверяет провалидирован номер или нет
     *
     * @deprecated
     * @param {String} number The phone number
     * @return {Boolean} Is phone validated
     */
    hUserPhones.isValidated = function(number) {
        var data = this.getCacheByParams();
        number = hUserPhones.normalize(number);
        return Boolean(jpath(data, '.phone[.number == "' + number + '" && .valid == "valid"]').length);
    };

    /**
     * Приводим телефон к международному формату
     *
     * @see DARIA-25623
     * @param  {String} [number] [description]
     * @return {String}
     * @example
     *     hUserPhones.normalize('8 000 000 00 00') //-> +7 000 000 00 00
     */
    hUserPhones.normalize = function(number) {
        number = (number || '').replace(/^8/, '+7');
        return number;
    };

    /**
     * Получаем нужный нам телефон
     *
     * @param  {String} phoneNumber номер телефона
     * @return {Object} Данные телефона
     */
    hUserPhones.getPhone = function(phoneNumber) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is missing');
        }

        var done = function(phones) {
            var phone = $.grep(phones, function(phone) {
                return phone.number === phoneNumber;
            });

            phone = (phone.length) ? phone[0] : null;

            return phone;
        };

        return this._exec().then(done);
    };

    /**
     * Отдает все телефоны
     * @param {Boolean} [getFromCache] Брать данные по телефонам из кэша, если это возможно
     * @return {Promise}
     */
    hUserPhones.getAll = function(getFromCache) {
        return this._exec(null, getFromCache);
    };

    /**
     * Обработка входных данных
     *
     * @todo  Перенести в filters.jsx, так для этого нужен рефакторинг - решено было не делать этого в
     * рамках создания компонента валидации
     *
     * @override
     * @param  {Object} phonesData
     * @return {Object}
     */
    hUserPhones._parse = function(phonesData) {
        var HOUR = 60 * 60 * 1000;
        var PASSPORT_TIMEZONE_IN_MS = 4 * HOUR;
        var rePassportDate = /^(\d{4})-(\d{2})-(\d{2})/;
        /**
         * Приведение данных из паспорта к нормальному виду
         */
        var fixPhoneFormat = function(ix, phone) {
            // Приводим дату из строки в миллисекунды и получаем UTC, прибавляя смещение часового пояса
            var fixedValidationDate = new Date(phone.validation_date.replace(rePassportDate, "$2/$3/$1")).getTime();
            phone.validation_date = fixedValidationDate - PASSPORT_TIMEZONE_IN_MS;

            // Приводим 1/0 к true/false
            phone.active = Boolean(parseInt(phone.active, 10));
            phone.autoblocked = Boolean(parseInt(phone.autoblocked, 10));
            phone.cyrillic = Boolean(parseInt(phone.cyrillic, 10));
            // FIXME(hexode): можно удалить условие после перехода на модель с защищенными и простыми телефонами
            if (phone.secure) {
                phone.secure = Boolean(parseInt(phone.secure, 10));
            }

            return phone;
        };

        phonesData = $.each(jpath(phonesData, 'phone'), fixPhoneFormat);

        return phonesData;
    };


}(Jane.$H('userphones')));

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/passport/userphones.js end */

/* ../../handlers/passport/userinfo.js begin */
(function() {
    'use strict';

    var hUserInfo = new Jane.Handler("userinfo", /* ../../handlers/passport/userinfo.info.js begin */
{
    params: {},
    ckey: true
}

/* ../../handlers/passport/userinfo.info.js end */
);

    hUserInfo.get = function(queryParams) {
        return hUserInfo._exec(queryParams || {}, true);
    };

    hUserInfo.hasHint = function() {
        return hUserInfo.get().then(_.property('hasHint'));
    };

    $.extend(hUserInfo, Jane.PromiseHandlerMixin);

}());

/* ../../handlers/passport/userinfo.js end */

/* ../../handlers/passport/phone-register.js begin */
(function() {
    'use strict';
    var hPhoneRegister = new Jane.ArmourHandler("phone-register",/* ../../handlers/passport/phone-register.info.js begin */
{
    ckey: true
}

/* ../../handlers/passport/phone-register.info.js end */
);

    $.extend(hPhoneRegister, Jane.PromiseHandlerMixin);

    var passportErrors = {
        "DONTKNOWYOU": i18n("%ValidatePhoneError_dontknow"),
        "NONUMBER": i18n("%ValidatePhoneError_nonumber"),
        "NOROUTE": i18n("%ValidatePhoneError_badnumformat"),
        "BADNUMFORMAT": i18n("%ValidatePhoneError_badnumformat"),
        "VALEXEEDED": i18n("%ValidatePhoneError_valexeeded_register"),
        "TEMPORARYBLOCK": i18n("%ValidatePhoneError_temporaryblock"),
        "NUMEXISTS": i18n("%ValidatePhoneError_numexist"),
        // У данного аккаунта уже есть подтвержденный телефон, и добавить ещё один нельзя
        "CONFIRMED_NUMBER_EXISTS": i18n("%ValidatePhoneError_phonexist"),
        // У данного аккаунта телефон или уже добавлен, но ещё не подтвержден,
        // или уже есть, но находится в процессе удаления; в любом случае, начать новую валидацию нельзя
        "UNFINISHED_OP_EXISTS": i18n("%ValidatePhoneError_phonexist"),
        "NUMBINDLIMIT": i18n('%ValidatePhoneError_NUMBINDLIMIT')
    };

    hPhoneRegister.parseError = function(status) {
        var message = passportErrors[status];
        //пришел какой-то непонятный статус
        if (!message) {
            message = passportErrors['DONTKNOWYOU'];
        }
        return message;
    };

    /**
     * Регистрирует защищенный или простой телефон и высылает код потверждения на номер телефона
     *
     * @param  {String} phoneNumber     Номер телефона
     * @param  {Boolean} [secure=false] Признак защищенности телефона(true - защищенный, false - простой)
     *
     * @return {Promise}
     */
    hPhoneRegister.register = function(phoneNumber, secure) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is missing');
        }

        var params = {
            number: phoneNumber
        };

        params.secure = ( secure ) ? 'yes' : 'no';

        var done = function(/*registerStatus*/) {
            return Jane.$H('userphones').getPhone(phoneNumber);
        };

        return this._exec(params).then(done);
    };

    /**
     * Выслать код потверждения повторно
     *
     * @param  {Object} phoneNumber Номер телефона
     * @return {Promise}
     */
    hPhoneRegister.resendCode = function(phoneNumber) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is missing');
        }

        var params = {
            number: phoneNumber
        };

        var done = function(/*resendingStatus*/) {
            return Jane.$H('userphones').getPhone(phoneNumber);
        };

        return this._exec(params).then(done);
    };

    /**
     * Проверка на успешность выполнения хэндлера
     *
     * @override
     * @param  {Object} resendingStatus Результат выполнения хэндлера
     * @return {Boolean}
     */
    hPhoneRegister._checkSuccessResult = function(resendingStatus) {
        if (resendingStatus.added || resendingStatus.revalidated) {
            return true;
        }
    };

    /**
     * Парсит данные при удачном исходе конфирмации
     *
     * @override
     * @param  {*} data
     * @return {*}
     */
    hPhoneRegister._parse = function(data) {
        data.phone.added = Boolean(data.phone.added);

        return data.phone;
    };

    /**
     * @deprecated
     * @return {String}
     */
    hPhoneRegister.getNumber = function() {
        var cache = this.getCacheByParams();
        return jpath(cache, ".phone.number")[0] || Jane.$H("settings").getSetting('phone-number') || "";
    };
    /**
     * Получить отформатированный номер
     *
     * @deprecated данная функциональность перезжает в компонент валидации
     * @param  {String} number
     * @return {String}
     */
    hPhoneRegister.getFormattedNumber = function(number) {
        var n;
        number = number || this.getNumber();
        if (!number) {
            return '';
        }
        n = number.match(/^(\+?7)(\d{3})(\d{3})(\d{2})(\d{2})$/);
        // Форматируем только Российские номера
        if (n) {
            return "{1} ({2}) {3}-{4}-{5}".replace(/{(\d)}/g, function(full, part) {
                return part && n[part];
            });
        }

        return number;
    };

})();

/* ../../handlers/passport/phone-register.js end */

/* ../../handlers/passport/phone-confirm.js begin */
(function(/**Jane*/Jane) {
    'use strict';

    var hPhoneConfirm = new Jane.ArmourHandler("phone-confirm", /* ../../handlers/passport/phone-confirm.info.js begin */
{
    ckey: true
}

/* ../../handlers/passport/phone-confirm.info.js end */
);

    $.extend(hPhoneConfirm, Jane.PromiseHandlerMixin);

    var errors = {
        "DONTKNOWYOU": i18n("%ValidatePhoneError_dontknow"),
        "NOCODE": i18n("%ValidatePhoneError_nocode"),
        "BADCODEFORMAT": i18n("%ValidatePhoneError_badcodeformat"),
        "NOVALIDCODE": function(left) {
            return i18n("%ValidatePhoneError_novalidcode", left);
        },
        "VALEXEEDED": i18n("%ValidatePhoneError_valexeeded"),
        "TEMPORARYBLOCK": i18n("%ValidatePhoneError_temporaryblock")
    };

    hPhoneConfirm.parseError = function(status) {
        var message = typeof errors[status] == "function" ?
            errors[status].apply(this, [].slice.call(arguments, 1)) :
            errors[status];

        //пришел какой-то непонятный статус
        if (!message) {
            message = errors['DONTKNOWYOU'];
        }
        return message;
    };

    /**
     * Потверждает телефон кодом
     *
     * @param  {String} phoneNumber - Номер телефона
     * @param  {String} code        - Код
     * @return {Promise}
     */
    hPhoneConfirm.confirm = function(phoneNumber, code) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is undefined');
        }
        if (!code) {
            throw new ReferenceError('Required parameter code is undefined');
        }

        var params = {
            code: code,
            number: phoneNumber
        };

        var done = function(/*confirmStatus*/) {
            return Jane.$H('userphones').getPhone(phoneNumber);
        };

        return this._exec(params).then(done);
    };

    /**
     * Проверка на успешность выполнения хэндлера
     *
     * @override
     * @param  {Object} confirmStatus Результат выполнения хэндлера
     * @return {Boolean}
     */
    hPhoneConfirm._checkSuccessResult = function(confirmStatus) {
        if (!confirmStatus) {
            return false;
        }
        if (confirmStatus.valid) {
            return true;
        }
    };

    /**
     * Парсит данные при удачном исходе конфирмации
     *
     * @override
     * @param  {*} data
     * @return {*}
     */
    hPhoneConfirm._parse = function(data) {
        data = data.phone;
        data.current = Boolean(parseInt(data.current, 10));
        data.valid = Boolean(parseInt(data.valid, 10));
        return data;
    };


}(Jane));

/* ../../handlers/passport/phone-confirm.js end */

/* ../../handlers/passport/phone-delete.js begin */
/* global Handler:false */
(function() {
    'use strict';

    var hPhoneDelete = new Handler('phone-delete', /* ../../handlers/passport/phone-delete.info.js begin */
{
    ckey: true,
    params: {
        uid:    null,
        number: null,
        sender: null
    }
}

/* ../../handlers/passport/phone-delete.info.js end */
);

    $.extend(hPhoneDelete, Jane.PromiseHandlerMixin);

    /**
     * Удаляет простой телефон. Если телефон защищенный, то начинает его удаление(при этом его не удаляет)
     *
     * @param {String} phoneNumber  - Номер телефона
     *
     * @return {Promise}
     */
    hPhoneDelete.remove = function(phoneNumber) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is missing');
        }

        return this._exec({number: phoneNumber});
    };

    /**
     * Проверка на успешность выполнения хэндлера
     *
     * @override
     * @param  {Object} deleteInfo Результат выполнения хэндлера
     * @return {Boolean}
     */
    hPhoneDelete._checkSuccessResult = function(deleteInfo) {
        if (/^(OK|STARTED)$/.test(deleteInfo.status)) {
            return true;
        }
    };

})();


/* ../../handlers/passport/phone-delete.js end */

/* ../../handlers/passport/phone-prolong.js begin */
/* global Handler:false */
(function() {
    'use strict';

    var hPhoneProlong = new Handler('phone-prolong', /* ../../handlers/passport/phone-prolong.info.js begin */
{
    ckey: true,
    params: {
        uid:    null,
        number: null,
        sender: null
    }
}

/* ../../handlers/passport/phone-prolong.info.js end */
);

    $.extend(hPhoneProlong, Jane.PromiseHandlerMixin);

    /**
     * Пролонгирует телефон
     *
     * @param {String} phoneNumber  - Номер телефона
     *
     * @return {Promise} Возвращает промис, но резолвит его в случае успеха промисом запроса телефона
     */
    hPhoneProlong.prolong = function(phoneNumber) {
        if (!phoneNumber) {
            throw new ReferenceError('Required parameter phoneNumber is undefined');
        }

        var done = function(/*prolongInfo*/) {
            return Jane.$H('userphones').getPhone(phoneNumber);
        };

        return this._exec({number: phoneNumber}).then(done);
    };

    /**
     * Проверка на успешность выполнения хэндлера
     *
     * @override
     * @param  {Object} prolongInfo Результат выполнения хэндлера
     * @return {Boolean}
     */
    hPhoneProlong._checkSuccessResult = function(prolongInfo) {
        if (prolongInfo.status === 'OK') {
            return true;
        }
    };

})();


/* ../../handlers/passport/phone-prolong.js end */

/* ../../handlers/passport/phone-debug.js begin */
(function(Jane) {
    "use strict";

    var hPhoneDebug = new Jane.Handler('phone-debug', /* ../../handlers/passport/phone-debug.info.js begin */
{
    ckey: true
}

/* ../../handlers/passport/phone-debug.info.js end */
);

    $.extend(hPhoneDebug, Jane.PromiseHandlerMixin);

    hPhoneDebug.getInfo = function() {
        return this._exec();
    };

})(Jane);

/* ../../handlers/passport/phone-debug.js end */

/* ../../handlers/passport/phone-unconfirmed.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("phone-unconfirmed",
    /* ../../handlers/passport/phone-unconfirmed.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phone-unconfirmed.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

(function(hPhoneUnconfirmed, Jane, jpath) {
    hPhoneUnconfirmed.isCached = function() {
        return false;
    };

    hPhoneUnconfirmed.onsetcache = function(key, data) {
        this.data = data;
    };

    hPhoneUnconfirmed.hasUnconfirmed = function() {
        return jpath(this.data, '.phone[.valid != "valid"]').length > 0;
    };

    hPhoneUnconfirmed.getNumber = function() {
        var cache = this.getCacheByParams();

        if (cache) {
            return jpath(cache, ".phone.number")[0];
        }

        return '';
    };

    hPhoneUnconfirmed.getIdByNumber = function(number) {
        var cache = this.getCacheByParams();

        if (number && cache) {
            return jpath(cache, '.phone[.number == "' + number + '"].id')[0];
        }

        return '';
    };
})(Jane.$H("phone-unconfirmed"), Jane, jpath);

/* ../../handlers/passport/phone-unconfirmed.js end */


/* ../../handlers/passport/get-link-app.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("get-link-app",
    /* ../../handlers/passport/get-link-app.info.js begin */
{
    params: {
        app: "mail-wpv",
        lang: null,
        phone_full: null,
        remote_ip: null,
        personal_data: null
    }
}

/* ../../handlers/passport/get-link-app.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/passport/get-link-app.js end */


// Новое телефонное апи паспорта
// менеджер трэков
/* ../../handlers/passport/phoneapi/track-manager.js begin */
(function() {
    'use strict';

    var format = Daria.supplant;

    /**
     * Менеджер по хранению трэков
     *
     * @class
     * @param {String} eventNamespace нейспейс нужен, чтобы разделять события менеджеров
     *
     */
    var TrackManager = Jane.Handler.TrackManager = function(eventNamespace) {
        this.eventNamespace = eventNamespace;

        /**
         * Хранилище трэков
         * number -> trackId
         *
         * @see track_id README.md
         */
        this.trackIds = {};
    };

    // Время протухания трэка
    var TRACK_ID_EXPIRATION_TIMEOUT = 40 * 60 * 1000;

    var proto = TrackManager.prototype;
    // Добавим функциональность pub/sub
    $.extend(proto, Daria.PubSubMixin);

    proto.getTrackId = function(number) {
        return this.trackIds[number].trackId;
    };

    proto.getTrackIdExpireDate = function(number) {
        return this.trackIds[number].expireDate;
    };

    proto.getResendCodeTimeout = function(number) {
        return this.trackIds[number].denyResendUntil * 1000 - Daria.now();
    };

    proto.setTrackId = function(number, trackId, denyResendUntil) {
        var that = this;
        this.trackIds[number] = {
            trackId: trackId,
            expireDate: Daria.now() + TRACK_ID_EXPIRATION_TIMEOUT
        };

        if (denyResendUntil) {
            this.trackIds[number].denyResendUntil = denyResendUntil;
        }
        setTimeout(function() {
            var eventName = format('{eventNamespace}.{trackId}-expired', {
                eventNamespace: that.eventNamespace,
                trackId: trackId
            });
            that.trigger(eventName, {name: 'track_expired'});
        }, TRACK_ID_EXPIRATION_TIMEOUT);
    };

    proto.updateTrackId = function(number, trackId, denyResendUntil) {
        this.trackIds[number].denyResendUntil = denyResendUntil;
    };

    proto.isTrackExpired = function(number) {
        return this.getTrackIdExpireDate(number) < Daria.now();
    };

     /**
      * Подписывает на истечение срока годности trackId для конкретного телефона
      *
      * @param {String} number Номер телефона
      * @param {Function} listener
      */
    proto.onTrackIdExpired = function(number, listener) {
        var eventName = format('{eventNamespace}.{trackId}-expired', {
            trackId: this.getTrackId(number),
            eventNamespace: this.eventNamespace
        });

        this.once(eventName, listener);
    };

    /**
     * Отвязывает обработчик от события истечения срока действия трэка
     *
     * @param {String} number Номер телефона
     * @param {Function} listener
     */
    proto.offTrackIdExpired = function(number, listener) {
        var eventName = format('{eventNamespace}.{trackId}-expired', {
            trackId: this.getTrackId(number),
            eventNamespace: this.eventNamespace
        });

        this.off(eventName, listener);
    };

})();

/* ../../handlers/passport/phoneapi/track-manager.js end */

// Создание защищенного номера и альяса на его основе
/* ../../handlers/passport/phoneapi/aliasify-bind.js begin */
(function() {
    'use strict';
    // TODO: aliasify-bind и aliasify-bound объединить в один хэндлер

    var hAliasifyBind = new Jane.Handler("aliasify-bind", /* ../../handlers/passport/phoneapi/aliasify-bind.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phoneapi/aliasify-bind.info.js end */
);

    $.extend(hAliasifyBind, Jane.PromiseHandlerMixin);
    var format = Daria.supplant;

    // Менеджер по управлению трэками
    var trackManager = new Jane.Handler.TrackManager(hAliasifyBind.name);
    $.extend(hAliasifyBind, trackManager);

    /**
     * Хэндлер выполнен успешно, если поле status = ok
     * @override
     */
    hAliasifyBind._checkSuccessResult = function(data) {
        return data.status === 'ok';
    };

    hAliasifyBind._parse = function(data) {
        if (data.deny_resend_until) {
            data.deny_resend_until = parseInt(data.deny_resend_until, 10);
        }

        return data;
    };

    /**
     * Инициирует создание защищенного номера и телефонного альяса на его основе
     *
     * @param {String} number номер в международном формате (+79501231212)
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBind.submit = function(number) {
        return this._exec({number: number, method: 'submit'}).then(this.onsubmit.bind(this));
    };

    hAliasifyBind.onsubmit = function(submitResult) {
        var number = submitResult.number.original;
        var trackId = submitResult.track_id;
        var denyResendUntil = submitResult.deny_resend_until;

        this.setTrackId(number, trackId, denyResendUntil);
        return submitResult;
    };

    /**
     * Запрашивает повторную отправку смс с кодом потверждения
     *
     * @param {String} number номер в международном формате (+79501231212)
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBind.resend = function(number) {
        return this._exec({
            // для того, чтобы смс пришло с тем же кодом, надо отсылать старый track_id(полученный от submit)
            trackId: this.getTrackId(number),
            number: number,
            method: 'submit'
        }).then(this.onresend.bind(this));
    };

    /**
     * Извлечение и обновление данных о трэке
     */
    hAliasifyBind.onresend = function(resendResult) {
        var number = resendResult.number.original;
        var trackId = resendResult.track_id;
        var denyResendUntil = resendResult.deny_resend_until;

        this.updateTrackId(number, trackId, denyResendUntil);
        return resendResult;
    };

    /**
     * Проверка кода из смс, пароля, привязка номера к аккаунту, создание алиаса.
     *
     * @param {String} number    номер в международном формате (+79501231212)
     * @param {String} code      код полученный из смс
     * @param {String} password  <кэп>пароль</кэп>
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBind.commit = function(number, code, password) {
        var trackId = this.getTrackId(number);

        if (!trackId) {
            var msg = 'No trackId for phone with number {number}';
            throw new Error(format(msg, {number: number}));
        }

        var commitParams = {
            number: number,
            code: code,
            password: password,
            trackId: trackId,
            method: 'commit'
        };

        return this._exec(commitParams);
    };
})();


/* ../../handlers/passport/phoneapi/aliasify-bind.js end */

// Создание альяса на базе имеющегося защищенного номера
/* ../../handlers/passport/phoneapi/aliasify-bound.js begin */
(function() {
    'use strict';

    var hAliasifyBound = new Jane.Handler("aliasify-bound", /* ../../handlers/passport/phoneapi/aliasify-bound.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phoneapi/aliasify-bound.info.js end */
);

    $.extend(hAliasifyBound, Jane.PromiseHandlerMixin);

    // Менеджер по управлению трэками
    var trackManager = new Jane.Handler.TrackManager(hAliasifyBound.name);
    $.extend(hAliasifyBound, trackManager);

    /**
     * Хэндлер выполнен успешно, если поле status = ok
     *
     * @override
     * @param {Object} data данные хэндлера
     *
     * @returns {Boolean}
     */
    hAliasifyBound._checkSuccessResult = function(data) {
        return data.status === 'ok';
    };

    /**
     * Инициирует создание телефонного альяса на базе *существующего* защищенного номера
     *
     * @description Предполагается, что с клиентской стороны произведена проверка на наличие защищенного телефона,
     * и так как он имеется и может быть только один, то в ручку его передавать не требуется
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBound.submit = function() {
        return this._exec({method: 'submit'}).then(this.onsubmit.bind(this));
    };

    hAliasifyBound.onsubmit = function(submitResult) {
        var number = submitResult.number.original;
        var trackId = submitResult.track_id;
        var denyResendUntil = submitResult.deny_resend_until;

        this.setTrackId(number, trackId, denyResendUntil);

        return submitResult;
    };

    /**
     * Запрашивает повторную отправку смс с кодом потверждения
     *
     * @param {String} number номер в международном формате (+79501231212)
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBound.resend = function(number) {
        return this._exec({
            // для того, чтобы смс пришло с тем же кодом, надо отсылать старый track_id(полученный от submit)
            trackId: this.getTrackId(number),
            method: 'submit'
        }).then(this.onresend.bind(this));
    };

    /**
     * Извлечение и обновление данных о трэке
     */
    hAliasifyBound.onresend = function(resendResult) {
        var number = resendResult.number.original;
        var trackId = resendResult.track_id;
        var denyResendUntil = resendResult.deny_resend_until;

        this.updateTrackId(number, trackId, denyResendUntil);
        return resendResult;
    };

    /**
     * Проверка кода из смс, создание алиаса.
     *
     * @param {String} number    Нужен для получения трэка
     * @param {String} code      код полученный из смс
     *
     * return {Promise} возвращает промис с результатом операции
     */
    hAliasifyBound.commit = function(number, code) {
        var trackId = this.getTrackId(number);

        if (!trackId) {
            throw new Error('No trackId found');
        }

        var commitParams = {
            code: code,
            trackId: trackId,
            method: 'commit'
        };
        return this._exec(commitParams);
    };
})();


/* ../../handlers/passport/phoneapi/aliasify-bound.js end */

// Наличие альяса у пользователя
/* ../../handlers/passport/phoneapi/alias-exist.js begin */
(function() {
    'use strict';

    var hAliasExist = new Jane.Handler("alias-exist", /* ../../handlers/passport/phoneapi/alias-exist.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phoneapi/alias-exist.info.js end */
);

    $.extend(hAliasExist, Jane.PromiseHandlerMixin);

    /**
     * Проверяет наличие и принадлежность телефонного альяса пользователю
     * @param {String} number телефон в формате +79211212123
     */
    hAliasExist.check = function(number) {
        var login = number.replace('+', '');
        return this._exec({login: login});
    };

})();


/* ../../handlers/passport/phoneapi/alias-exist.js end */

// Отладочная информация по трэку
/* ../../handlers/passport/phoneapi/track-info.js begin */
(function() {
    'use strict';

    var hTrackInfo = new Jane.Handler("track-info", /* ../../handlers/passport/phoneapi/track-info.info.js begin */
{
    params: {},
    ckey: true
}


/* ../../handlers/passport/phoneapi/track-info.info.js end */
);

    $.extend(hTrackInfo, Jane.PromiseHandlerMixin);

    /**
     * Получение отладочной информации по trackId
     *
     * @param {String} trackId
     *
     * @returns {Promise}
     */
    hTrackInfo.get = function(trackId) {
        return this._exec({trackId: trackId});
    };

})();

/* ../../handlers/passport/phoneapi/track-info.js end */


// Шаблоны контрольных вопросов
/* ../../handlers/passport/security-questions/security-questions-patterns.js begin */
(function() {
    'use strict';

    var questions = [
        i18n('%Promo_security_question_1'),
        i18n('%Promo_security_question_2'),
        i18n('%Promo_security_question_3'),
        i18n('%Promo_security_question_4'),
        i18n('%Promo_security_question_5'),
        i18n('%Promo_security_question_6'),
        i18n('%Promo_security_question_7'),
        i18n('%Promo_security_question_8'),
        i18n('%Promo_security_question_9'),
        i18n('%Promo_security_question_10'),
        i18n('%Promo_security_question_11'),
        i18n('%Promo_security_question_12'),
        i18n('%Promo_security_question_13'),
        i18n('%Promo_security_question_14'),
        i18n('%Promo_security_question_15'),
        i18n('%Promo_security_question_16'),
        i18n('%Promo_security_question_17'),
        i18n('%Promo_security_question_18'),
        i18n('%Promo_security_question_19'),
        i18n('%Promo_security_question_20'),
        i18n('%Promo_security_question_21')
    ];

    /**
     * Шаблоны контрольных вопросов
     */
    var hSecurityQuestionsPatterns = new Jane.StaticJSHandler("security-questions-patterns", {
        data: questions
    });

    /**
     * Получить список всех вопросов
     *
     * @returns {Array}
     */
    hSecurityQuestionsPatterns.getAll = function() {
        return this.getCache();
    };
})();

/* ../../handlers/passport/security-questions/security-questions-patterns.js end */

// Создание контрльных вопросов
/* ../../handlers/passport/security-questions/security-questions.js begin */
(function() {
    'use strict';

    /**
     * Шаблоны контрольных вопросов
     */
    var hSecurityQuestionsPatterns = new Jane.Handler("security-questions");
    $.extend(hSecurityQuestionsPatterns, Jane.PromiseHandlerMixin);

    /**
     * Создать 3 контрольных вопроса
     *
     * @param {Object} params
     * @param {string} params.question1
     * @param {string} params.question2
     * @param {string} params.question3
     * @param {string} params.answer1
     * @param {string} params.answer2
     * @param {string} params.answer3
     *
     * @returns {Array}
     */
    hSecurityQuestionsPatterns.create = function(params) {
        return this._exec(params);
    };
})();

/* ../../handlers/passport/security-questions/security-questions.js end */


/* ../../handlers/translate/translate.js begin */
(function() {

    var hTranslate = new Handler("translate",
        /* ../../handlers/translate/translate.info.js begin */
{
    params : {
        text: null,
        lang: null,
        format: null,
        srv: "yamail"
    }
}

/* ../../handlers/translate/translate.info.js end */

    );

    hTranslate.onsetcache = function(key, data) {
        this.data = data;
    };

})();

/* ../../handlers/translate/translate.js end */

/* ../../handlers/avatar/avatar.js begin */
new Handler("avatar",
    /* ../../handlers/avatar/avatar.info.js begin */
{
    params : {
        email : null
    }
}


/* ../../handlers/avatar/avatar.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/avatar/avatar.js end */

/* ../../handlers/captcha/captcha.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("captcha",
    /* ../../handlers/captcha/captcha.info.js begin */
{
    params: {
        type : null
    }
}


/* ../../handlers/captcha/captcha.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/captcha/captcha.js end */

/* ../../handlers/captcha/captcha-check.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("captcha-check",
    /* ../../handlers/captcha/captcha-check.info.js begin */
{
    params: {
        type: null,
        captcha_key: null,
        captcha_entered: null
    }
}

/* ../../handlers/captcha/captcha-check.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/captcha/captcha-check.js end */


// wch
/* ../../handlers/lenta-bundles-short/lenta-bundle-subscribe.js begin */
new Handler("lenta-bundle-subscribe");

/* ../../handlers/lenta-bundles-short/lenta-bundle-subscribe.js end */


/* ../../handlers/geo/geo-coder.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("geo-coder",
    /* ../../handlers/geo/geo-coder.info.js begin */
{
    params: {
        geocode : null,
        ll: null
    }
}


/* ../../handlers/geo/geo-coder.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/geo/geo-coder.js end */

/* ../../handlers/geo/geo-ip.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("geo-ip",
    /* ../../handlers/geo/geo-ip.info.js begin */
{
    params: {

    }
}


/* ../../handlers/geo/geo-ip.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/geo/geo-ip.js end */

/* ../../handlers/geo/map-data.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("map-data",
    /* ../../handlers/geo/map-data.info.js begin */
{
    params: {
        address: null
    }
}


/* ../../handlers/geo/map-data.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/geo/map-data.js end */


/* ../../handlers/ppyrus/do-ppyrus-create.js begin */
(function(/**Jane*/Jane) {

    /**
     * @name Daria.hPpyrusList
     * @augments Jane.Handler
     */
    new Jane.DoHandler('do-ppyrus-create',
        /* ../../handlers/ppyrus/do-ppyrus-create.info.js begin */
{
    params: {
    }
}

/* ../../handlers/ppyrus/do-ppyrus-create.info.js end */

    );

})(Jane);

/* ../../handlers/ppyrus/do-ppyrus-create.js end */

/* ../../handlers/ppyrus/do-ppyrus-delete.js begin */
new DoHandler('do-ppyrus-delete',
    /* ../../handlers/ppyrus/do-ppyrus-delete.info.js begin */
{
    params: {
        spec: null
    }
}

/* ../../handlers/ppyrus/do-ppyrus-delete.info.js end */

);

/* ../../handlers/ppyrus/do-ppyrus-delete.js end */

/* ../../handlers/ppyrus/ppyrus-list.js begin */
(function(/**Jane*/Jane) {

    // Works out the number of days between two dates
    function daysBetween(start, end) {
        start = Date.UTC(start.getFullYear(), start.getMonth(), start.getDate());
        end = Date.UTC(end.getFullYear(), end.getMonth(), end.getDate());
        return (end - start) / 86400000;
    }

    /**
     * @name Daria.hPpyrusList
     * @augments Jane.Handler
     */
    var hPpyrusList = new Jane.Handler('ppyrus-list', { maxage: 300 });

    hPpyrusList.onsetcache = function(key, cache) {
        $.each(cache, this._processItem);
    };

    hPpyrusList._processItem = function(i, item) {
        if (!item.lastUpdated) {
            return '';
        }

        var now = new Date();
        var lastUpdate = new Date(item.lastUpdated);
        if (daysBetween(lastUpdate, now) === 0) {
            item.showDate = i18n('%Short_Date_1', Jane.Common.n(lastUpdate.getHours()), Jane.Common.n(lastUpdate.getMinutes()));
        } else {
            item.showDate = i18n('%Short_Date_2', Jane.Common.n(lastUpdate.getDate()), Jane.Common.n(lastUpdate.getMonth()));
        }
    };

    /**
     * Добавляет новое письмо в список.
     * @param {Object} newProject
     */
    hPpyrusList.add = function(newProject) {
        var cache = this.getCacheByParams();
        if (cache) {
            cache.unshift(newProject);
            this.touch();
        }

    };

})(Jane);

/* ../../handlers/ppyrus/ppyrus-list.js end */


/* ../../handlers/calendar/get-event.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("get-event",
    /* ../../handlers/calendar/get-event.info.js begin */
{
    params: {
        data: null
    }
}

/* ../../handlers/calendar/get-event.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/get-event.js end */

/* ../../handlers/calendar/get-event-ics.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("get-event-ics",
    /* ../../handlers/calendar/get-event-ics.info.js begin */
{
    params: {
        ids: null,
        hid: null
    }
}

/* ../../handlers/calendar/get-event-ics.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/get-event-ics.js end */

/* ../../handlers/calendar/save-event.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

new Handler("save-event",
    /* ../../handlers/calendar/save-event.info.js begin */
{
    params: {
        data: null
    },
    ckey: true
}

/* ../../handlers/calendar/save-event.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/save-event.js end */

/* ../../handlers/calendar/get-flight-reminder-info.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new Handler("get-flight-reminder-info",
    /* ../../handlers/calendar/get-flight-reminder-info.info.js begin */
{
    params: {
        mid: null,
        ticketId: null
    }
}

/* ../../handlers/calendar/get-flight-reminder-info.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/get-flight-reminder-info.js end */

/* ../../handlers/calendar/set-flight-reminder.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("set-flight-reminder",
    /* ../../handlers/calendar/set-flight-reminder.info.js begin */
{
    params: {
        mid: null,
        ticketId: null
    }
}

/* ../../handlers/calendar/set-flight-reminder.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/set-flight-reminder.js end */

/* ../../handlers/calendar/delete-flight-reminder.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("delete-flight-reminder",
    /* ../../handlers/calendar/delete-flight-reminder.info.js begin */
{
    params: {
        ticketId: null
    }
}

/* ../../handlers/calendar/delete-flight-reminder.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/delete-flight-reminder.js end */

/* ../../handlers/calendar/send-promise-sms.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler('send-promise-sms',
    /* ../../handlers/calendar/send-promise-sms.info.js begin */
{
    ckey: true
}

/* ../../handlers/calendar/send-promise-sms.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/calendar/send-promise-sms.js end */

/* ../../handlers/calendar/get-user-events.js begin */
(function() {
    /**
     * Хэндлер получения списка событий пользователя по указанному интервалу
     * @desc
     * Передаваемые данные:
     *  params = {
     *      from: <string> - с какой даты запрашиваются события. Например, '2014-04-04',
     *      to: <string> - по какую дату запрашиваются события. Например, '2014-04-05',
     *  }
     * @link https://wiki.yandex-team.ru/Calendar/api/new-web#get-user-events
     * @type {Handler}
     */
    var hGetUserEvents = new Handler("get-user-events",
        /* ../../handlers/calendar/get-user-events.info.js begin */
{
    params: {
        from: '',
        to: ''
    }
}

/* ../../handlers/calendar/get-user-events.info.js end */

    );

    /**
     * Обработка данных перед записью в кэш
     * @param {string} handlerKey ключ записи
     * @param {Object} data данные
     */
    hGetUserEvents.onsetcache = function(handlerKey, data) {
        var that = this;
        if ($.isArray(data.events)) {
            data.hoursOfDay = new Array(24);
            data.containersOfEvents = that.getContainersOfEvents(data.events);
        } else {
            Jane.ErrorLog.send({
                errorType: "HandlerError",
                name: 'get-user-events',
                reason: 'calendar_get-user-events_failed'
            });
        }
    };

    /**
     * Получает значение часов переданной даты с учетом минут
     * Например,
     * 12ч 15мин = 12,25ч
     * @param {Date} date объект даты
     * @returns {number} значение часов переданной даты
     */
    hGetUserEvents.getHours = function(date) {
        return date.getHours() + date.getMinutes() / 60;
    };

    /**
     * Формирует массив контейнеров событий
     * @param {Array} events массив событий
     * @returns {Array} массив контейнеров событий
     */
    hGetUserEvents.getContainersOfEvents = function(events) {
        var that = this;
        var eventsLength = events.length;

        return $.map(events, function(event, eventIndex) {
            if (event.skip) {
                return;
            }

            that.setEventData(event);

            var containerOfEvents = {
                startTs: event.startTs,
                endTs: event.endTs
            };
            var containerEvents = [event];
            var eventStartTimestamp = event.startDate.getTime();
            var eventEndTimestamp = event.viewEndDate.getTime();

            var i;

            for (i = eventIndex + 1; i < eventsLength; i++) {
                var nextEvent = events[i];
                that.setEventData(nextEvent);

                var nextEventStartTimestamp = nextEvent.startDate.getTime();
                var nextEventEndTimestamp = nextEvent.viewEndDate.getTime();

                // Если следующее событие пересекается с текущим, то оно должно войти в массив включенных (events)
                // и проигнорироваться для вывода как отдельное событие
                // Определяем пересечение интервалов событий:
                // Т.к. все события идут по попрядку их возникновения, то достаточно проверить, что стартовая точка
                // следующего события входит в интервал распаршиваемого.
                // В этом случае, следующее событие помещается в список events,
                // а конечная точка оригинального события, при необходимости, расширяется до следующего.
                if (nextEventStartTimestamp >= eventStartTimestamp && nextEventStartTimestamp < eventEndTimestamp) {
                    // Сдвиг конечной точки распаршиваемого события
                    if (eventEndTimestamp < nextEventEndTimestamp){
                        containerOfEvents.endTs = nextEvent.endTs;
                        eventEndTimestamp = nextEventEndTimestamp;
                    }
                    containerEvents.push(nextEvent);
                    nextEvent.skip = true;
                }
            }

            containerOfEvents.events = containerEvents;
            that.setEventData(containerOfEvents);

            return containerOfEvents;
        });
    };

    /**
     * Устанавливает данные к событию
     * @param {Object} event объект события
     */
    hGetUserEvents.setEventData = function(event) {
        var startDate = new Date(event.startTs);
        var endDate = new Date(event.endTs);
        var intervalInHours = (endDate.getTime() - startDate.getTime()) / Jane.Date.HOUR;
        intervalInHours = Number(intervalInHours.toFixed(2));

        /**
         * Т.к. событие может быть очень коротким, то для удобства его вывода пользователю используется понятие
         * визуальной даты окончания события и визуальной продолжительности события.
         */
        var viewEndDate = endDate;
        var viewIntervalInHours = intervalInHours;
        var minimalViewInterval = Daria.timify({minutes: 15}, 'hours');
        if (intervalInHours < minimalViewInterval) {
            viewIntervalInHours = minimalViewInterval;
            viewEndDate = _.clone(startDate);
            viewEndDate.setMinutes(startDate.getMinutes() + 15);
        }

        $.extend(event, {
            // Реальная дата начала события
            startDate: startDate,
            // Реальная дата окончания события
            endDate: endDate,
            // Визуальная дата окончания события
            viewEndDate: viewEndDate,
            // Строковое представление даты начала события
            startStringHour: Jane.Date.format('%Date_HM__colon', startDate),
            // Строковое представление даты окончания события
            endStringHour: Jane.Date.format('%Date_HM__colon', endDate),
            // Час начала события с учетом минут
            startInHours: this.getHours(startDate),
            // Реальная продолжительность события в часах
            intervalInHours: intervalInHours,
            // Визуальная продолжительность события в часах
            viewIntervalInHours:  viewIntervalInHours,
            // Строковое представление продолжительности
            stringDate: Jane.Date.getDaysInterval(startDate, endDate)
        });
    };

    /**
     * Получает контейнер событий по индексу из переданных данных
     * @param {Object} handlerData данные хэндлера
     * @param {number} eventIndex индекс события
     * @returns {Object|undefined} данные о событии
     */
    hGetUserEvents.getContainerOfEvents = function(handlerData, eventIndex) {
        return jpath(handlerData, '.containersOfEvents[' + eventIndex + ']')[0];
    };

})();

/* ../../handlers/calendar/get-user-events.js end */


/* ../../handlers/disk/disk-resources.js begin */
(function(/**Jane*/Jane, /**Daria*/Daria) {

    /**
     * Хендлер списка ресурсов в папке.
     * @type {Handler}
     */
    var hDiskResources = new Handler('disk-resources',
        /* ../../handlers/disk/disk-resources.info.js begin */
{
    params: {
        path: null,
        offset: null,
        sort: null,
        order: null
    }
}
/* ../../handlers/disk/disk-resources.info.js end */

    );

    /**
     * `setCache` переопределяется для того, чтобы дополнительные порции
     * ресурсов в конечном счете попадали не в кеши хендлеров с ключами
     * `path=X&offset=Y`, а всегда в `path=X`. Иными словами, данные для
     * порционных хендлеров перенаправляются в основной, используемый для
     * отрисовки, хендлер.
     */
    hDiskResources.setCache = function(key, data, params, timestamp, preserveTimestamp) {
        var pathKey = this.getKey({
            path: params.path,
            sort: params.sort,
            order: params.order
        });

        var cache = this.getCache(pathKey);

        var portion = jpath(data, '.resource.resource')[0];

        // Условие ниже отрабатывает когда происходит первоначальная загрузка
        // непорционного хендлера (с ключем вида `path=X`).
        if (!cache) {
            cache = data;
            cache.offset = portion && portion.length;
        } else {
            var resource = jpath(cache, '.resource')[0];

            // Ресурсы из порции добавляются в основной кеш.
            if (resource && portion) {
                Array.prototype.push.apply(resource.resource, portion);
                cache.offset += portion.length;
            }
        }

        // Когда больше грузить нечего, можно выставить специальный флаг,
        // чтобы предотвратить дальнейшие запросы.
        cache.complete = portion && portion.length === 0;

        return Jane.Handler.prototype.setCache.call(this, pathKey, cache, params, timestamp, preserveTimestamp);
    };

    /**
     * Тут просто немного корректируются данные, например, у ссылок на превью
     * надо адаптировать хосты.
     */
    hDiskResources.onsetcache = function(key, data) {
        var resources = jpath(data, '.resource.resource')[0];

        if ($.isArray(resources)) {
            $.each(resources, normalizeSizes);
        }
    };

    /**
     * Сохраняет выделение ресурса.
     * @param  {String} path Идентификатор (путь) выбранного ресурса
     */
    hDiskResources.select = function(path) {
        if (path && path !== this.selected) {
            var before = this.selected;

            this.selected = path;

            Jane.events.trigger('disk-resources.selected', {
                before: before,
                now: path
            });
        }
    };

    /**
     * Сбрасывает выделение ресурса.
     */
    hDiskResources.deselect = function() {
        var before = this.selected;

        this.selected = null;

        Jane.events.trigger('disk-resources.selected', {
            before: before
        });
    };

    /**
     * Запускает операцию прикрепления ресурса из Диска в папку Почтовые
     * вложения.
     * @param  {String} path Путь до прикрепляемого ресурса
     * @return {$.Deferred} Промис, который выполнится при завершении операции
     */
    hDiskResources.attach = function(path) {
        var deferred = $.Deferred();
        var that = this;

        function attach(src, dst) {
            Jane.Handler.doAll(['do-disk-attach-file'], { src: src, dst: dst }, function(response) {
                var result = jpath(response, '.handlers')[0];

                if (!result) {
                    return deferred.reject();
                }

                if (result.error) {
                    that.clearCache();
                    return deferred.reject(result.error.data || result.error);
                }

                if (result.data && result.data.oid) {
                    var params = {
                        oid: result.data.oid,
                        meta: 'short_url,public,size,public_hash'
                    };

                    that.poll(params).done(function(operation) {
                        var resource = operation.file || operation.folder;

                        resource.type = operation.file ? 'file' : 'dir';

                        deferred.resolve({
                            url: resource.meta && resource.meta.short_url,
                            name: resource.name,
                            type: resource.type,
                            size: resource.meta && resource.meta.size,
                            hash: resource.meta && resource.meta.public_hash
                        });
                    }).fail(function(data) {
                        deferred.reject(data);
                    });
                } else {
                    deferred.reject();
                }
            });
        }

        attach(path);

        return deferred.promise();
    };

    /**
     * Запрашивает публичную ссылку на превью файла.
     * @param  {String} hash Поле `private_hash` ресурса
     * @return {$.Deferred} Промис, который выполнится при получении ссылки
     */
    hDiskResources.getPreview = function(hash) {
        var deferred = $.Deferred();
        var params = {
            private_hash: hash,
            meta: 'preview'
        };

        Jane.Handler.doAll(['do-disk-get-public-preview'], params, function(response) {
            var preview = jpath(response, '.handlers.data.resource.meta.preview')[0];

            if (!preview) {
                return deferred.reject();
            } else {
                return deferred.resolve(preview);
            }
        });

        return deferred.promise();
    };

    /**
     * Опрашивает статус выполнения операции до ее завершения или провала.
     * @param  {Object} params Параметры запроса ручки, как минимум нужен `params.oid`
     * @return {$.Deferred} Промис, который выполнится при окончании операции.
     */
    hDiskResources.poll = function(params) {
        var deferred = $.Deferred();
        var POLL_TACT = 1500;

        function request() {
            Jane.Handler.doAll(['do-attach-file-status'], params, function(response) {
                var operation = jpath(response, '.handlers.data.operation')[0];

                if (!operation) {
                    return deferred.reject();
                }

                var status = operation.status;

                if (status === 'EXECUTING' || status === 'WAITING') {
                    window.setTimeout(request, POLL_TACT);
                } else if (status == 'FAILED') {
                    deferred.reject(status.error);
                } else if (status == 'DONE') {
                    deferred.resolve(operation);
                }
            });
        }

        request();

        return deferred.promise();
    };

    /**
     * Запускает подгрузку следующей порции листинга папки.
     * @param  {Object} params Параметры хендлера
     * @return {$.Deferred} Промис, который выполнится при получении порции или
     *                      при окончательной загрузке листинга
     */
    hDiskResources.loadMore = function(params) {
        var deferred = $.Deferred();
        var that = this;

        var cache = that.getCacheByParams(params);

        if (cache.complete) {
            return deferred.resolve();
        }

        Jane.Handler.doAll(
            ['disk-resources'],
            $.extend({ offset: cache.offset }, params),
            function(response) {
                var query = jpath(response, '.handlers.data.resource.resource')[0];

                if (query) {
                    var resources = query[0];

                    if (resources) {
                        return deferred.resolve(resources);
                    }
                }

                deferred.reject();
            }
        );

        return deferred.promise();
    };

    /**
     * Производит поиск данных ресурса в кеше по родительскому пути.
     * @param  {String} path Путь до ресурса
     * @return {Object|Boolean} Результат поиска
     */
    hDiskResources.find = function(path) {
        var parent = Daria.dirname(path) + '/';

        var cache = this.getCacheByParams({
            path: parent,
            sort: this.getDefaultSort(parent),
            order: this.getDefaultOrder(parent)
        });

        if (!cache || !cache.resource || !cache.resource[0]) {
            return false;
        }

        var root = cache.resource[0];

        for (var i = 0, len = root.resource.length; i < len; i += 1) {
            if (root.resource[i].id === path) {
                return root.resource[i];
            }
        }

        return false;
    };

    /**
     * Возвращает тип сортировки для листинга для данного пути по умолчанию.
     * @param  {String} path Путь до ресурса
     * @return {String}
     */
    hDiskResources.getDefaultSort = function(path) {
        if (Jane.$H('disk-default-folders').isPhotostream(path)) {
            return 'etime';
        }

        return 'name';
    };

    /**
     * Возвращает порядок сортировки для листинга для данного пути по умолчанию.
     * @param  {String} path Путь до ресурса
     * @return {String}
     */
    hDiskResources.getDefaultOrder = function(path) {
        if (Jane.$H('disk-default-folders').isPhotostream(path)) {
            return '0';
        }

        return '1';
    };

    hDiskResources.getError = function(response) {
        if (jpath(response, '.error.http_status')[0] == 404) {
            Jane.events.trigger('disk-resources.not-found', response.error);
            response.data = {};
            return null;
        } else {
            return response.error;
        }
    };

    // Меняет tld у URL до картинок, присылаемых из mpfs.
    function normalizeSizes(index, resource) {
        if (!resource.meta || !resource.meta.sizes) {
            return;
        }

        $.each(resource.meta.sizes, function(index, size) {
            if (resource.service === 'mail') {
                if (-1 === size.url.indexOf('yandex.net')) {
                    size.url = replaceTld(size.url, getTld());
                }
            } else {
                size.url = replaceHost(
                    size.url,
                    Jane.Config['downloader-prefix'] + '.' + getTld()
                );

                // Для Украины домен для downloader должен быть ru
                if (getTld() === 'ua') {
                    size.url = replaceTld(size.url, 'ru');
                }
            }
            size.url = removeProtocol(size.url);
        });
    }

    function removeProtocol(url) {
        return url.replace(/^(https?:)/, '');
    }

    function replaceHost(url, host) {
        return url.replace(/((https?\:)?\/\/)?[^\/]*/, host);
    }

    function replaceTld(url, tld) {
        var domain = url.match(/(?:(?:https?\:)?\/\/)?[^\/]*/g)[0];
        return url.replace(domain, domain.replace(/(com\.tr|[^\.]+)$/, tld));
    }

    function getTld() {
        var tld;

        if (location.host.match(/\.com\.tr$/)) {
            tld = 'com.tr';
        } else {
            var parts = location.host.split('.');
            tld = parts.pop();

            if (tld !== 'ru' && tld !== 'com' && tld !== 'ua') {
                tld = getTldByLocale(Daria.locale);
            }
        }

        return tld;
    }

    function getTldByLocale(locale) {
        switch (locale) {
        case 'tr':
            return 'com.tr';
        case 'uk':
            return 'ua';
        case 'ru':
            return 'ru';
        default:
            return 'com';
        }
    }

})(Jane, Daria);

/* ../../handlers/disk/disk-resources.js end */

/* ../../handlers/disk/disk-default-folders.js begin */
(function() {

    /**
     * Хендлер списка системных папок с учетом локализации пользователя.
     * @type {Handler}
     */
    var hDiskDefaultFolders = new Handler('disk-default-folders');

    /**
     * Отвечает, является ли переданный путь путем до папки Фотокамера
     * у пользователя.
     * @param  {String}  path Путь до ресурса
     * @return {Boolean}
     */
    hDiskDefaultFolders.isPhotostream = function(path) {
        var cache = this.getCacheByParams();

        return !!(cache && cache.photostream === path);
    };

})();

/* ../../handlers/disk/disk-default-folders.js end */

/* ../../handlers/disk/do-disk-attach-file.js begin */
new DoHandler("do-disk-attach-file");

/* ../../handlers/disk/do-disk-attach-file.js end */

/* ../../handlers/disk/do-disk-get-public-preview.js begin */
new DoHandler("do-disk-get-public-preview");

/* ../../handlers/disk/do-disk-get-public-preview.js end */

/* ../../handlers/disk/disk-gb-present.js begin */
new Handler('disk-gb-present',
    /* ../../handlers/disk/disk-gb-present.info.js begin */
{
    params: {
        uid: null
    }
}

/* ../../handlers/disk/disk-gb-present.info.js end */

);

/* ../../handlers/disk/disk-gb-present.js end */

/* ../../handlers/disk/disk-gb-present-give.js begin */
new DoHandler('disk-gb-present-give',
    /* ../../handlers/disk/disk-gb-present-give.info.js begin */
{
    params: {
        uid: null,
        locale: null,
        userCheck: null,
        gb: null,
        spoilDate: null
    }
}
/* ../../handlers/disk/disk-gb-present-give.info.js end */

);

/* ../../handlers/disk/disk-gb-present-give.js end */


/* ../../handlers/postmaster/do-postmaster.js begin */
new DoHandler('do-postmaster',
    /* ../../handlers/postmaster/do-postmaster.info.js begin */
{
    params: {
        readTime: null,
        time: null,
        perc: null,
        mid: null,
        from: null,
        yandexuid: null
    }
}

/* ../../handlers/postmaster/do-postmaster.info.js end */

);

/* ../../handlers/postmaster/do-postmaster.js end */


/* ../../handlers/feedback/feedback-help-search.js begin */
(function() {
    new Handler('feedback-help-search',
        /* ../../handlers/feedback/feedback-help-search.info.js begin */
{
    params: {
        text: null
    }
}
/* ../../handlers/feedback/feedback-help-search.info.js end */

    );
})();

/* ../../handlers/feedback/feedback-help-search.js end */

/* ../../handlers/feedback/feedback-help-suggest.js begin */
new Handler('feedback-help-suggest',
    /* ../../handlers/feedback/feedback-help-suggest.info.js begin */
{
    params: {
        text: null
    },
    maxage: 1800
}
/* ../../handlers/feedback/feedback-help-suggest.info.js end */

);

/* ../../handlers/feedback/feedback-help-suggest.js end */


/* ../../handlers/reminder/do-reminders.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

new DoHandler("do-reminders",
    /* ../../handlers/reminder/do-reminders.info.js begin */
{
    params: {
        id: '',
        name: '',
        reminderData: '',
        data: {},
        channels: {}
    }
}
/* ../../handlers/reminder/do-reminders.info.js end */

);

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../handlers/reminder/do-reminders.js end */

/* ../../handlers/reminder/reminders.js begin */
(function() {
    /**
     * Хэндлен по работе с напоминаниями
     * При запросе за набором данных можно указать интервал, в котором будут найдены напоминания.
     * Если интервал не был указан, то будут взяты активные (непросроченные) напоминания
     * API напоминаний
     * @link http://wiki.yandex-team.ru/disk/platform/projects/HTTPRESTAPI/spec#napominanija
     * @type {Handler}
     */
    var hReminders = new Handler('reminders',
        /* ../../handlers/reminder/reminders.info.js begin */
{
    params: {
        interval: ''
    }
}

/* ../../handlers/reminder/reminders.info.js end */

    );

    hReminders.data = [];

    hReminders.onsetcache = function(key, data, params) {
        // интервал по которому выбраны напоминания
        if (params) {
            this.interval = params.interval || '';
        } else {
            this.interval = '';
        }
        this.data = data || []; // массив напоминаний
    };

    /**
     * Изменяет интервал хранимых напоминаний
     * @param {Date|Number|String} [options.startDate] старт интервала дат, в которые входят запрашиваемые напоминания
     * @param {Date|Number|String} [options.endDate] конец интервала дат, в которые входят запрашиваемые напоминания
     * Если интервал не указан, то будут взяты непросроченные напоминания
     * @returns {Deferred}
     */
    hReminders.changeInterval = function(options) {
        var interval = '';
        if (options && typeof options === 'object' && options.startDate) {
            options.startDate = this._toISODate(options.startDate);
            if (options.endDate) {
                options.endDate = this._toISODate(options.endDate);
            } else {
                options.endDate = this._toISODate(Daria.now());
            }
            interval = options.startDate + '/' + options.endDate;
        }
        return this._defaultHandler(['reminders'], {
            interval: interval
        });
    };

    /**
     * Добавление напоминания
     * Напоминание не будет добавлено в свойство data, если не входит в заявленный интервал
     * @param {Object} options данные, по которым будет создано напоминание
     * @returns {Deferred}
     */
    hReminders.setReminder = function(options) {
        $.extend(options, {
            type: 'set',
            interval: this.interval
        });

        // Подготовка данных о канале (email должен быть всегда)
        if (!options.channels) {
            options.channels = {};
        }
        if (!options.channels.email) {
            options.channels.email = {};
        }
        var emailChannel = options.channels.email;
        if (!emailChannel.from) {
            emailChannel.from = i18n('%Title_mail');
        }
        options.channels = JSON.stringify(options.channels);

        if (options.data) {
            options.data = JSON.stringify(options.data);
        }

        // Перобразование reminderDate в ISO8106
        options.reminderDate = this._toISODate(options.reminderDate);

        return this._defaultHandler(['do-reminders', 'reminders'], options);
    };

    /**
     * Получение напоминания по id
     * В начале ищет напоминание в текущем массиве data хэндлера. Если не находит,
     * то обращается к соответствующей ручке
     * При этом, при обращении к ручке массив data не обновляется.
     * @param {String} id идентификатор напоминания
     * @returns {Deferred}
     */
    hReminders.getReminder = function(id) {
        var deferred = $.Deferred();
        var reminder = this._findInData(id);

        if (!reminder) {
            return this._defaultHandler(['do-reminders'], {
                type: 'get',
                id: id
            }, deferred);
        } else {
            deferred.resolve(reminder.data);
        }

        return deferred.promise();
    };

    /**
     * Удаление напоминания
     * @param {String} id идентификатор удаляемого напоминания
     * Удаление напоминания происходит из массива data (если оно там найдено и удаление по ручке прошло успешно)
     * и запросом к соответствущей ручке
     * @returns {Deferred}
     */
    hReminders.deleteReminder = function(id) {
        var that = this;
        var reminder = this._findInData(id);
        var deferred = this._defaultHandler(['do-reminders'], {
            type: 'delete',
            id: id
        });

        deferred.done(function() {
            if (reminder) {
                that.data.splice(reminder.index, 1);
            }
        });

        return deferred;
    };

    /**
     * Перобразование даты в ISO8106
     */
    hReminders._toISODate = function(date) {
        if (typeof date !== 'string') {
            if (date instanceof Date) {
                date = date.getTime();
            }
            // Корректировка по временной зоне
            date = date + Daria.tz_offset * 60 * 1000;
            // Преобразование в ISO8106
            date = Jane.Date.format('%Date_iso', date) + 'Z';
        }
        return date;
    };

    /**
     * Запуск doAll для передаваемых хэндлеров
     * @param {Array} handlers массив имен хэндлеров
     * @param {Object} options объект данных для них
     * @param {Deferred} [deferred] внешний деферред объект
     * @returns {Deferred}
     * @private
     */
    hReminders._defaultHandler = function(handlers, options, deferred) {
        deferred = deferred || $.Deferred();

        options = options || {};

        Jane.Handler.doAll(handlers, options, function(data) {
            var reminder = jpath(data, '.handlers[0].data')[0];
            if (reminder) {
                deferred.resolve(reminder);
            } else {
                deferred.reject(jpath(data, '.handlers[0].error')[0]);
            }
        });

        return deferred.promise();
    };

    /**
     * Поиск напоминания в массиве data по id
     * @param {String} id идентификатор напоминания
     * @returns {Object|null}
     * @private
     */
    hReminders._findInData = function(id) {
        var reminder = null;
        $.each(this.data, function(index, item) {
            if (item.id == id) {
                reminder = {
                    data: item,
                    index: index
                };
                return false;
            }
        });
        return reminder;
    };

})();

/* ../../handlers/reminder/reminders.js end */

/* ../../handlers/sanitize/do-sanitize.js begin */
/**
 * Ручка к санитайзеру.
 * Специально не кешируемая + do-хендлер добавляет проверку на ckey, чтобы левые сюда на ходили.
 * @class hDoSanitize
 * @extends Jane.DoHandler
 */
new Jane.DoHandler('do-sanitize');

/* ../../handlers/sanitize/do-sanitize.js end */


/* ../../handlers/gazeta/do-digest-send.js begin */
new DoHandler("do-digest-send",
    /* ../../handlers/gazeta/do-digest-send.info.js begin */
{
    params: {
        uid: null
    }
}


/* ../../handlers/gazeta/do-digest-send.info.js end */

);


/* ../../handlers/gazeta/do-digest-send.js end */


/* ../../handlers/handlers.js end */

    /* ../../blocks/mailbox-blocks.js begin */
/* exported bMessagesOnprepareRemoveThreadID, bMessagesExceptedParams */

var bMessagesExceptedParams;
if (Daria.layout != '2pane') {
    bMessagesExceptedParams = {
        'thread_id': null
    };
}

/**
 * Общий метод прототипа для messages-list-box, messages и messages-wrap
 * @param {Object} params
 */
function bMessagesOnprepareRemoveThreadID(params) {
    if ('thread_id' in params) {
        //копируем thread_id, чтобы он прокинулся в beforeHandlersRequest
        params['_thread_id'] = params['thread_id'];
        //для этого запроса  thread_id никогда не нужен
        delete params['thread_id'];

        return true;
    }

    return false;
}

/* ../../blocks/meeting-reminder/meeting-reminder.js begin */
(function() {
    var bMeetingReminder = Jane.Block.create('meeting-reminder', {
        lazy: true
    });
    var animatePreset = {
        down: {
            top: '20px',
            opacity: 1,
            buttonAction: 'focus',
            veilAction: 'show'
        },
        up: {
            top: '-170px',
            opacity: 0,
            buttonAction: 'blur',
            veilAction: 'hide'
        }
    };
    var isShown = false;

    bMeetingReminder.init = function() {
        var $node = $(Jane.tt('mail-common:reminder-popup'));
        $('body').append($node);

        $node.find('.js-meeting-reminder-going').on('click', function() {
            bMeetingReminder.slide($node, 'up');
        });

        Jane.events.bind('xiva.calendar.meeting-reminder', function(name, data) {
            var msg = data.data;
            var textClass = '.b-meeting-reminder__text';

            $node.find(textClass + '__subject').html('&laquo;' + _.escape(msg.subject) + '&raquo;');
            $node.find(textClass + '__location').html(_.escape(msg.location));

            // Маленькая фича для тех, кому надоело видеть этот попап.
            if (!Jane.$H('settings').isSet('i_can_care_of_myself')) {
                bMeetingReminder.slide($node, 'down');
            }
        });
    };

    bMeetingReminder.slide = function($node, direction) {
        if (direction === 'down' && isShown) {
            return;
        }

        $node.animate({
            top: animatePreset[direction].top,
            opacity: animatePreset[direction].opacity
        })
            .find('.b-meeting-reminder__veil').show()[animatePreset[direction].veilAction]()
            .find('.js-meeting-reminder-going')[animatePreset[direction].buttonAction]();

        isShown = !isShown;
    };

    Jane.Block.MeetingReminder = bMeetingReminder;

    if (Daria.IS_CORP) {
        Jane.events.bind('pageinit', bMeetingReminder.init);
    }
}());

/* ../../blocks/meeting-reminder/meeting-reminder.js end */

/* ../../blocks/ppyrus-box/ppyrus-box.js begin */
(function(/**Jane*/Jane) {

    /**
     * @name Daria.bPpyrusBox
     * @augments Jane.Block
     */
    var bPpyrusBox = Jane.Block.create('ppyrus-box', {
        box: true
    });

    bPpyrusBox.prototype.selectName = function(params) {
        if (params.id) {
            return 'ppyrus-doc';
        }
        return 'ppyrus-list';
    };

    bPpyrusBox.prototype.onactivate = function() {
        var block = this.getActive();
        var table = block.table;
        Jane.watcher.set('selectedCount', (table && table.getCount()) || 0);
    };

})(Jane);

/* ../../blocks/ppyrus-box/ppyrus-box.js end */

/* ../../blocks/ppyrus-doc/ppyrus-doc.js begin */
(function(/**Jane*/Jane) {

    /**
     * @name Daria.bPpyrusDoc
     * @augments Jane.Block
     */
    var bPpyrusDoc = Jane.Block.create('ppyrus-doc', {
        events: {
            'resize window': 'resizeIframe',
            'scroll window': 'scrollIframe',
            'message window': '_handleIframeMessage'
        }
    });
    var bPpyrusDocProto = bPpyrusDoc.prototype;

    bPpyrusDocProto.onhide = function() {
        // чтобы не жрать память, удаляем iframe

        if (this.cache) {
            $(this.cache.node).find('iframe').remove();
        }

        this.invalidate();
    };

    bPpyrusDocProto.onhtmlinit = function(node) {
        var $iframe = this.$iframe = $('iframe', node);
        if ($iframe.length) {
            $iframe.on('load', this.scrollIframe.bind(this));
        }
    };

    bPpyrusDocProto.scrollIframe = function() {
        var top;

        if (this.$iframe.offset().top > $(window).scrollTop()) {
            top = 0;
        } else {
            top = $(window).scrollTop() - this.$iframe.offset().top;
        }


        var height;

        if ($(window).scrollTop() > this.$iframe.offset().top) {
            height = $(window).outerHeight();
        } else {
            height = $(window).outerHeight() - (this.$iframe.offset().top - $(window).scrollTop());
        }

        var footerHeight = ($(window).scrollTop() + $(window).outerHeight()) - (this.$iframe.outerHeight() + this.$iframe.offset().top);
        if (footerHeight > 0) {
            height -= footerHeight;
        }


        var left;

        if (this.$iframe.offset().left > $(window).scrollLeft()) {
            left = 0;
        } else {
            left = $(window).scrollLeft() - this.$iframe.offset().left;
        }


        var width;

        if ($(window).scrollLeft() > this.$iframe.offset().left) {
            width = $(window).outerWidth();
        } else {
            width = $(window).outerWidth() - (this.$iframe.offset().left - $(window).scrollLeft());
        }


        var message = { 'viewport': {
            'top': top,
            'left': left,
            'height': height,
            'width': width
        }};

        this.$iframe[0].contentWindow.postMessage(message, '*');
    };

    bPpyrusDocProto.resizeIframe = function() {
        this.scrollIframe();
        /*var that = this;
        setTimeout(function() {
            that.$iframe.height($(window).height() - that.$iframe.offset().top);
        }, 50);*/
    };

    bPpyrusDocProto.showImageViewer = function(data) {
        var images = $.map(data.images, function(image) {
            var img = {
                name:     image.filename,
                filename: image.filename,
                url:      image.url,
                thumbUrl: image.previewUrl
            };

            if (image.fullsizeUrl) {
                img['fullSizeUrl'] = image.fullsizeUrl;
            }

            return img;
        });

        Daria.ImageViewer.openImages(images, data.index);
    };

    bPpyrusDocProto._handleIframeMessage = function(e) {
        e = e.originalEvent;

        if (e.source == this.$iframe[0].contentWindow) {
            var data = e.data;

            if (data.kind == 'error' && data.message) {
                alert(data.message);
            } else if (data.kind == 'scrolltop') {
                $(window).scrollTop(0);
                this.scrollIframe();
            } else if (data.kind == 'resize') {
                this.$iframe.height(Number(data.message) + 30);
            } else if (data.kind == 'image-viewer') {
                this.showImageViewer(data.message);
            }
        }
    };
})(Jane);

/* ../../blocks/ppyrus-doc/ppyrus-doc.js end */

/* ../../blocks/ppyrus-list/ppyrus-list.js begin */
(function(/**Jane*/Jane) {

    /**
     * @name Daria.bPpyrusList
     * @augments Jane.Block
     */
    var bPpyrusList = Jane.Block.create('ppyrus-list', {
        handlers: ['ppyrus-list']
    });
    var bPpyrusListProto = bPpyrusList.prototype;

    bPpyrusListProto.onhtmlinit = function(node) {
        this.node = node;
        var $scrollArea = $(node).find('.b-layout__inner:first');
        this.table = new PpyrusTable(this, $scrollArea);
    };

    bPpyrusListProto.onrepaint = function() {
        Daria.Table.active = this.table;
    };

    var PpyrusTable = function() {
        // Вызываем конструктор базового класса
        PpyrusTable.superClass.constructor.apply(this, arguments);
    };

    Daria.extend(PpyrusTable, Daria.Table);

    PpyrusTable.prototype.getIDs = function() {
        var mids = [];
        var context = this.checkboxTree.items;
        var filter = function(el) { return el.checked; };

        var iterate = function() {
            var checked = filter(this);

            var id = this.id;
            if (checked) {
                mids.push(id);
            }
        };

        $.each(context, iterate);

        return mids;
    };
})(Jane);

/* ../../blocks/ppyrus-list/ppyrus-list.js end */


        /* ../../blocks/mail-left-box/mail-left-box.js begin */
Block.MailLeftBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MailLeftBox, Block);

Block.add({
    name: "mail-left-box",
    info: {
        box: true
    },
    constructor: Block.MailLeftBox
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.MailLeftBox.prototype.selectName = function(params) {
    if (Daria.WND_3PANE) {
        return null;
    }

    switch (params._page) {
    case "setup":
        return "setup-left";

    case "contacts":
        return "abook-left";

    case "phone":
        return "";

        /*case "message":
        case "messages":
        case "compose":
        case "done":
            return "mail-left";*/

    default:
        return "mail-left";

    }
};

/* ../../blocks/mail-left-box/mail-left-box.js end */

        /* ../../blocks/mail-right-box/mail-right-box.js begin */
Block.MailRightBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MailRightBox, Block);

Block.add({
    name: "mail-right-box",
    info: {
        box: true
    },
    constructor: Block.MailRightBox
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.MailRightBox.prototype.selectName = function(params) {
    if (Daria.WND_3PANE) {
        if (params._page == 'compose') {
            return 'compose';

        } else if (params._page == 'messages') {
            return "messages-box";
        }

        return null;
    }

    switch (params._page) {

    case "message":
    case "messages":
        return "mail";

    case "compose":
        return "compose";
    case "done":
        return "compose-done";

    case "setup":
        return "setup-box";

    case "contacts":
        return "abook";

    case "phone":
        return "phone";

    case "ppyrus":
        return "ppyrus-box";

    }
};

Block.MailRightBox.prototype.onhtmlinit = function() {
    // Инициализация timeline
    if (Daria.Config['is-timeline']) {
        var bTimeline = Block.make('timeline', {});
        bTimeline.run({
            parent: this.getCacheNode()
        }, Daria.nop, {
            parallel: true
        });
    }
};

/* ../../blocks/mail-right-box/mail-right-box.js end */

            /* ../../blocks/timeline/timeline.js begin */
(function() {
    /*
     * Шаг часа на timeline в пикселях. Для коректной работы требует соответствия в стилях.
     */
    var TIMELINE_HOUR_PIXEL_STEP = 48;
    /*
     * смещение шкалы времени в timeline относительно желаемой отображаемой даты
     * Например, желаем видеть 11 часов, значит начальная дата должна быть на смещение меньше - 9 часов
     */
    var TIMELINE_START_HOUR_OFFSET = 2;
    /*
     * Количество часов в дне
     */
    var HOURS_OF_DAY = 24;

    // Скорость смены минуты в мс берется из URL параметра 'calendar_speed'
    var urlCalendarSpeed = $.url(window.location.href);
    urlCalendarSpeed = jpath(urlCalendarSpeed, '.Query.calendar_speed[0]')[0];

    var bTimeline = Block.create('timeline', {
        node: document.body,
        events: {
            'click .js-itemline-close': 'onClose',
            'click .js-timeline-back': 'showPreviousDays',
            'click .js-timeline-forward': 'showNextDays',
            'resize window': 'windowResize'
        },
        janeEvents: {
            'timeline.open': 'open',
            'timeline.close': 'close',
            'timeline.toggleOpen': 'toggleOpen',
            'timeline.to-current-date': 'toCurrentDate',
            'timeline.show-tooltip': 'showTooltip',
            'timeline.hide-tooltip': 'hideTooltip'
        }
    });

    /**
     * Формирует текущую дату
     * @returns {Date} объект даты
     */
    bTimeline.prototype.getCurrentDate = function() {
        var date;
        // Ускоритель календаря для отладки
        if (urlCalendarSpeed) {
            if (!this.currentTick) {
                this.currentDate = Daria.now(true);
                this.currentTick = this.currentDate.getMinutes();
            }
            date = _.clone(this.currentDate);
            date.setMinutes(this.currentTick);
        } else {
            date = Daria.now(true);
        }
        return date;
    };

    /**
     * Формирует параметры редренга дней для timeline
     * @param {Date|string} date дата дня, для которого будут формироваться параметры
     * @returns {{date: string, from: string, to: string}} подготовленные параметры
     */
    bTimeline.prototype.getRenderParams = function(date) {
        if (date instanceof Date) {
            date = Jane.Date.format('%F', date);
        }

        return {
            date: date,
            from: date,
            to: date
        };
    };

    /**
     * Добавляет день на timeline
     * @param {Date|string} date дата дня, который должен быть добавлен на timeline
     * @returns {$.Deferred} деферред объект добавления дня
     */
    bTimeline.prototype.addDay = function(date) {
        var that = this;
        var deferred = $.Deferred();
        var dayBlockParams = this.getRenderParams(date);
        var dayBlock = Block.make('timeline-day', dayBlockParams);

        dayBlock.run(dayBlockParams, function() {
            deferred.resolve(dayBlock);
        }, {
            parallel: true,
            onerror: function() {
                if (that._daysBlocks[dayBlockParams.date] === dayBlock) {
                    that.removeDay(dayBlockParams.date);
                }
                deferred.reject('error');
            },
            "xsl-params": Daria.Page.params
        });

        this._daysBlocks[dayBlockParams.date] = dayBlock;

        return deferred.promise();
    };

    /**
     * Удаляет день с timeline
     * @param {Date|string} date дата удаляемого дня
     */
    bTimeline.prototype.removeDay = function(date) {
        if (date instanceof Date) {
            date = Jane.Date.format('%F', date);
        }

        var dayBlock = this._daysBlocks[date];

        if (dayBlock && _.isFunction(dayBlock.destroy)) {
            dayBlock.destroy();
            delete this._daysBlocks[date];
        }
    };

    /**
     * Получает часы с учетом минут из объекта даты
     * @param {Date} date объект даты
     * @returns {number} часы с учетом минут
     */
    bTimeline.prototype.getHours = function(date) {
        var hGetUserEvents = Jane.$H('get-user-events');
        return hGetUserEvents.getHours(date);
    };

    /**
     * Округляет число к большему по модулю
     * @param {number} number округляемое число
     */
    bTimeline.prototype.roundAwayFromZero = function(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    };

    /**
     * Сдвигает часы переданной даты на указанную величину, при этом сбрасывая
     * минуты, секунды и милисекунды в 0
     * @param {Date|string} date модифицируемая дата
     * @param {number} [hoursOffset] величина часового сдвига
     * @returns {Date} модифицированный объект даты
     */
    bTimeline.prototype.adjustHours = function(date, hoursOffset) {
        if (typeof date === 'string') {
            date = new Date(date);
        }

        if (typeof hoursOffset === 'undefined') {
            hoursOffset = 0;
        }

        hoursOffset = Math.floor(hoursOffset);

        date.setHours(date.getHours() + hoursOffset, 0, 0, 0);
        return date;
    };

    /**
     * Очищает часы переданной даты до дней
     * @param {Date|string} date очищаемая дата
     * @returns {Date} очищенная дата
     */
    bTimeline.prototype.clearHours = function(date) {
        if (typeof date === 'string') {
            date = new Date(date);
        }

        date.setHours(0, 0, 0, 0);
        return date;
    };

    /**
     * Переводит часы в дни
     * @param {number} hours количество часов
     * @returns {number} количество дней
     */
    bTimeline.prototype.hoursToDay = function(hours) {
        var result = hours / HOURS_OF_DAY;
        return result < 0 ? 0 : result;
    };

    /**
     * Обработка готового HTML блока timeline
     */
    bTimeline.prototype.onhtmlinit = function(node, params) {
        /**
         * Установка состояния timeline:
         */
        this.setState('is-new');

        /**
         * Массив блоков дней
         * @private
         */
        this._daysBlocks = {};
        this.$node = $(node);
        this.$message = this.$node.find('.js-timeline-message');
        this.$arrows = this.$node.find('.js-timeline-back, .js-timeline-forward');
        this.$newEventButton = this.$node.find('.js-timeline-new-event');
        this.$content = this.$node.find('.js-timeline-content');
        this.$daysWrapper = this.$node.find('.js-timeline-days');
        this.$scrollBox = this.$node.find('.js-timeline-scrollbox');
        this.$timelineNow = this.$node.find('.js-timeline-now');
        this.$tooltipWithin = $('.b-layout__right__content');

        if (!this.$tooltipWithin[0]) {
            this.$tooltipWithin = $(window);
        }

        this.initEventTooltip();

        $(params.parent).append(this.$node);

        var timelineIsOpen = Jane.$H('settings').getSetting('timeline-is-open');
        if (typeof timelineIsOpen === 'undefined') {
            timelineIsOpen = true;
        }

        if (timelineIsOpen) {
            this.open();
        } else {
            this.close();
        }
    };

    /**
     * Устанавливает текущий статус timeline
     *  - is-new - состояние только созданного timeline
     *  - loading - происходит формирование данных timeline
     *  - animating - анимация на timeline
     *  - started - timeline запущен
     *  - stopped - timeline остановлен
     *  - allowed - timeline разрешен для пользователя
     *  - disallowed - timeline запрещен для пользователя
     * @param {string} state устанавливаемый статус
     */
    bTimeline.prototype.setState = function(state) {
        if (this.state !== state) {
            this._previousState = this.state;
            this.state = state;
            Jane.events.trigger('timeline.change-state', state);
        }
    };

    /**
     * Проверяет, равен ли текущий статус одному из переданных
     * @example
     * this.status = 'test;
     * this.isState('test') <=> true
     * this.isState('test123') <=> false
     * this.isState('test123', 'test') <=> true
     * @returns {boolean} результат сравнения
     */
    bTimeline.prototype.isState = function() {
        return _.indexOf(arguments, this.state) !== -1;
    };

    /**
     * Возращает предыдущий статус timeline
     */
    bTimeline.prototype.revertState = function() {
        this.state = this._previousState;
    };

    /**
     * Вызывает запуск интервала обновления контента в блоках дней
     */
    bTimeline.prototype.startUpdater = function() {
        this.stopUpdater();
        
        this.updaterInterval = setInterval(this.update.bind(this), 5 * Jane.Date.MINUTE);
    };

    /**
     * Обновление данных для дней timeline
     */
    bTimeline.prototype.update = function() {
        var updateDeferreds = [];

        this.showLoading();
        // Очистка кэша хэндлера
        Jane.$H('get-user-events').clearCache();

        // Обновление данных для блоков
        $.each(this._daysBlocks, function(dayBlockKey, dayBlock) {
            var dayBlockDeferred = $.Deferred();
            updateDeferreds.push(dayBlockDeferred);
            Jane.Handler.doAll(['get-user-events'], dayBlock.params, dayBlockDeferred.resolve);
        });

        // Обновление состояния timeline
        $.when.apply($, updateDeferreds)
            .done(this.hideLoading.bind(this))
            .done(this.refresh.bind(this));
    };

    /**
     * Останавливает интервал обновления контента
     */
    bTimeline.prototype.stopUpdater = function() {
        clearInterval(this.updaterInterval);
    };

    /**
     * Запуск таймлайна
     * @returns {$.Deferred}
     */
    bTimeline.prototype.start = function() {
        var that = this;

        // Выполнять старт только при остановленом или новом timeline
        if (!this.isState('allowed', 'stopped', 'is-new')) {
            return;
        }

        // Смена статуса на started только в случае, если timeline не только что созданный
        if (!this.isState('is-new')) {
            that.setState('started');
        }

        if (!this.startDate) {
            /**
             * Начальная дата, с которой сейчас отображается календарь
             */
            this.startDate = this.getCurrentDate();
            // При инициализации необходимо показать предыдущие TIMELINE_HOUR_PIXEL_STEP часа перед текущим временем
            this.adjustHours(this.startDate, -TIMELINE_START_HOUR_OFFSET);
        }

        this.maxShowedHours = this.$scrollBox.width() / TIMELINE_HOUR_PIXEL_STEP;

        this.startUpdater();

        // количество дней, помещающихся в видимую часть календаря
        var scrollBoxDays = this.hoursToDay(this.maxShowedHours);
        var startDaysOffset = this.getHours(this.startDate) + 1; // Т.к. расчет часов идет с 0 часов
        startDaysOffset = this.hoursToDay(startDaysOffset);
        // количество подгружаемых дней при инициализации timeline
        var countOfDays = Math.ceil(scrollBoxDays + startDaysOffset);

        // Запуск загрузки дней
        return this.daysPreloading(this.startDate, countOfDays).done(function() {
            that.setState('started');

            // Смещение враппера
            that.$content.css({
                left: '-' + that.getHours(that.startDate) + 'em'
            });

            that.startTimer();
        });
    };

    /**
     * Остановка таймлайна
     */
    bTimeline.prototype.stop = function() {
        var that = this;

        this.stopTimer();
        this.stopUpdater();
        this.hideLoading();

        // Удаление всех связанных блоков
        $.each(this._daysBlocks, function(dayBlockKey) {
            that.removeDay(dayBlockKey);
        });

        // Остановка анимации
        this.$content.stop(true, true);

        // Установка нового состояния
        this.setState('stopped');
    };

    /**
     * Обновление таймлайна, без обновления начальной даты timeline
     */
    bTimeline.prototype.refresh = function() {
        this.stop();
        this.start();
    };

    /**
     * Показ загрузки данных к timeline
     */
    bTimeline.prototype.showLoading = function() {
        this.setState('loading');
        clearTimeout(this.loadingTimeout);
        this.loadingTimeout = setTimeout(function() {
            Jane.events.trigger('timeline.show-loading');
        }, 150);
    };

    /**
     * Скрытие загрузки данных к timeline
     */
    bTimeline.prototype.hideLoading = function() {
        this.revertState();
        clearTimeout(this.loadingTimeout);
        Jane.events.trigger('timeline.hide-loading');
    };


    /**
     * Инициализация тултипа для событий
     */
    bTimeline.prototype.initEventTooltip = function() {
        // Инициализация островного попапа
        if (this.nbTooltip) {
            this.nbTooltip.destroy();
        }
        this.nbTooltip = nb.$block('.js-timeline-tooltip', this.$node);
        this.nbTooltip.$node
            .on('mouseenter', this.stopTooltipHiding.bind(this))
            .on('mouseleave', this.hideTooltip.bind(this));
    };

    /**
     * Показ тултипа события календаря
     * @param {string} eventName название события, вызвавшее показ тултипа
     * @param {Object} options объект параметров тултипа
     */
    bTimeline.prototype.showTooltip = function(eventName, options) {
        // Тултип не должен работать во время анимации
        if (this.isState('animating')) {
            return;
        }

        var $target = options.$target;
        var targetWidth = $target.width();
        var targetOffset = $target.offset();
        var $scrollBoxOffset = this.$scrollBox.offset();
        var maxLeftOffset = this.$scrollBox.width() + $scrollBoxOffset.left;
        var minLeftOffset = $scrollBoxOffset.left;
        var leftTooltipOffset = targetOffset.left + targetWidth / 2;
        leftTooltipOffset = Math.min(maxLeftOffset, leftTooltipOffset);
        leftTooltipOffset = Math.max(minLeftOffset, leftTooltipOffset);

        var tooltipOptions = {
            where: $.Event('mousenter', {
                pageX: leftTooltipOffset,
                pageY: targetOffset.top - 5
            }),
            how: {
                my: 'center bottom',
                at: 'center top',
                collision: 'fit none',
                autoclose: false,
                within: this.$tooltipWithin
            }
        };

        this.stopTooltipHiding();
        // Остановка анимации
        this.nbTooltip.$node.parent().stop(true, true);

        this.nbTooltip.setContent(options.content);

        this.nbTooltip.open(tooltipOptions);
    };

    /**
     * Остановка ожидания скрытия тултипа событий календаря
     */
    bTimeline.prototype.stopTooltipHiding = function() {
        clearTimeout(this.hidingTooltipTimeout);
    };

    /**
     * Скрытие тултипа событий календаря
     */
    bTimeline.prototype.hideTooltip = function() {
        this.stopTooltipHiding();
        this.hidingTooltipTimeout = setTimeout(this.closeTooltip.bind(this), Jane.Date.SECOND / 2);
    };

    /**
     * Вызов процесса закрытия тултипа
     */
    bTimeline.prototype.closeTooltip = function() {
        this.nbTooltip.close();
    };

    /**
     * Загружает указанное количество дней с указанной даты в timeline
     * @param {Date} fromDate дата старта загрузки
     * @param {number} countOfDays количество загружаемых дней
     * @param {string} [insertType='append'] тип вставки дней в timeline
     * @returns {$.Deferred} деферед объект загрузки
     */
    bTimeline.prototype.daysPreloading = function(fromDate, countOfDays, insertType) {
        var that = this;
        var deferred = $.Deferred();

        if (!insertType) {
            insertType = 'append';
        }

        this.showLoading();
        this.closeTooltip();

        if (countOfDays > 0) {
            var dayDate = _.clone(fromDate); // клонируем дату для исключения перезаписи
            var daysDeferred = [];
            var i;

            // формирование deferred для каждого загружаемого дня
            for (i = 0; i < countOfDays; i++) {
                var dayDeferred = this.addDay(dayDate);
                daysDeferred.push(dayDeferred);
                // Сдвиг даты на следующий шаг
                dayDate.setDate(dayDate.getDate() + 1);
            }

            $.when.apply($, daysDeferred).always(function() {
                // Если предыдущий статус перед запуском - stopped, то не обрабатываться запроса
                if (that.isState('stopped')) {
                    return;
                }

                var daysBlocks = $.makeArray(arguments);
                if (daysBlocks.indexOf('error') !== -1){
                    deferred.reject();
                    Jane.ErrorLog.send({
                        event: "timeline-day-loading-error",
                        uid: Daria.uid
                    });
                } else {
                    var $documentFragment = $(document.createDocumentFragment());
                    $.map(daysBlocks, function(dayBlock) {
                        $documentFragment.append(dayBlock.getCacheNode());
                    });
                    that.$daysWrapper[insertType]($documentFragment);
                    deferred.resolve();
                }
            });
        } else {
            deferred.resolve();
        }

        // Обновление состояния иконки календаря
        deferred
            .always(this.hideLoading.bind(this))
            .always(this.changeStartDate.bind(this))
            .fail(this.closingWithoutOpening.bind(this));

        return deferred.promise();
    };

    /**
     * Формирует сообщение об изменении стартового дня timeline
     */
    bTimeline.prototype.changeStartDate = function() {
        var currentDate = this.getCurrentDate();
        var startDate = _.clone(this.startDate) || this.getCurrentDate();

        currentDate = this.adjustHours(currentDate);
        startDate = this.adjustHours(startDate);

        // Если разница между стартовой датой и текущей датой составляет TIMELINE_START_HOUR_OFFSET,
        // то необходимо их уровнять, чтобы кнопка календаря отобразила текущее число
        if (currentDate.getTime() - startDate.getTime() === Jane.Date.HOUR * TIMELINE_START_HOUR_OFFSET) {
            startDate = currentDate;
        }

        Jane.events.trigger('timeline.change-start-date', {
            currentDate: this.clearHours(currentDate),
            startDate: this.clearHours(startDate)
        });
    };

    /**
     * Запускает таймер календаря
     * @desc
     * Основной задачей таймера является:
     *      - отслеживание текущей даты,
     *      - запуск обработчиков изменения времени
     */
    bTimeline.prototype.startTimer = function() {
        this.runTimerTick();
    };

    /**
     * Останавливает таймер календаря
     */
    bTimeline.prototype.stopTimer = function() {
        clearTimeout(this.timerTickTimeout);

        this.previousDate = null;
    };

    /**
     * Обработчик тика таймера календаря
     */
    bTimeline.prototype.runTimerTick = function() {
        clearTimeout(this.timerTickTimeout);

        var currentDate = this.getCurrentDate();

        // При большом расхождении текущей даты и предыдущей даты (например, когда
        // браузер долго бездействовал) необходимо произвести обновление состояния timeline
        if (this.previousDate && (currentDate.getTime() - this.previousDate.getTime()) >= Daria.timify({minutes: 5})) {
            this.refresh();
            return;
        }

        this.moveCurrentHour();
        this.moveTimelineNow();

        // Ускоритель времени тика
        var millisecondsToNextMinute = Jane.Date.MINUTE - currentDate.getSeconds() * Jane.Date.SECOND;
        if (urlCalendarSpeed) {
            millisecondsToNextMinute = Number(urlCalendarSpeed);
            this.currentTick++;
        }

        this.timerTickTimeout = setTimeout(this.runTimerTick.bind(this), millisecondsToNextMinute);

        // Сохраняем текущее значение в информацию о предыдущей дате
        this.previousDate = currentDate;
    };

    /**
     * Двигает ползунок текущего времени
     */
    bTimeline.prototype.moveTimelineNow = function() {
        var currentDate = this.getCurrentDate();
        var previousDate = currentDate;

        if (this.previousDate) {
            previousDate = this.previousDate;
        }

        var timelineInterval = Daria.timify({hours: this.maxShowedHours});
        var previousDateTimestamp = previousDate.getTime();
        var currentDateTimestamp = currentDate.getTime();
        var startDateTimestamp = this.startDate.getTime();
        var lastDateTimestamp = startDateTimestamp + timelineInterval;

        // Позунок находится вне текущего фрейма времени
        if (startDateTimestamp > previousDateTimestamp || previousDateTimestamp > lastDateTimestamp) {
            this.$timelineNow.addClass('g-hidden');
            return;
        }

        var timelineNowOffset = (currentDateTimestamp - startDateTimestamp) / Jane.Date.HOUR;
        this.$timelineNow
            .removeClass('g-hidden')
            .css({
                left: (this.getHours(this.startDate) + timelineNowOffset) + 'em'
            });

        // Если текущий день вышел за отведенные границы
        if (currentDateTimestamp > lastDateTimestamp) {
            this.showNextDays();
        }
    };

    /**
     * Сдвигает указатель текущего времени (подсветку текущего времени)
     * и сообщает о смене текущего дня
     */
    bTimeline.prototype.moveCurrentHour = function() {
        var currentDate = this.getCurrentDate();
        var currentHours = currentDate.getHours();
        var previousHours = currentHours;
        if (this.previousDate) {
            previousHours = this.previousDate.getHours();
        }
        // произошла смена дня
        var isChangeCurrentDay = currentHours === 0 && previousHours === 23;
        // Условие глобального сообщения о смене часов
        var canChangeCurrentHour = !this.previousDate || // не установлено значение предыдущей даты
                                   isChangeCurrentDay ||
                                   currentHours > previousHours; // произошла смена часа

        if (canChangeCurrentHour) {
            var isoStringDate = Jane.Date.format('%F', currentDate);

            // Сообщает приложению, что изменился текущий час
            Jane.events.trigger('timeline.change-current-hour', {
                currentDate: currentDate,
                isoStringDate: isoStringDate
            });

            // Сообщение о смене дня
            if (isChangeCurrentDay) {
                this.changeStartDate();
            }
        }
    };

    /**
     * Последняя дата в timeline
     * @desc
     * Если шкала имеет нецелое число часов, то конечная дата будет находиться
     * округлением последнего видимого промежутка времени к большему целому часу,
     * т.е. выходить за границу timeline
     * @returns {Date} объект даты последнего блока дат
     */
    bTimeline.prototype.getLastDate = function() {
        var lastShowedDate = _.clone(this.startDate);
        return this.adjustHours(lastShowedDate, this.roundAwayFromZero(this.maxShowedHours));
    };

    /**
     * Удаляем скрытые от глаз дни
     */
    bTimeline.prototype.removeHiddenDate = function() {
        var that = this;
        var startDate = _.clone(this.startDate);
        var lastDate = _.clone(this.getLastDate());

        // Очистка часов
        this.clearHours(startDate);
        this.clearHours(lastDate);

        // Удаляем невидимые дни
        $.each(this._daysBlocks, function(dayBlockKey, dayBlock) {
            var isoStringDate = dayBlock.params.date;
            var dayBlockDate = that.clearHours(isoStringDate);

            // Если день находится за пределами начальной и конечной точке timeline
            if (dayBlockDate.getTime() < startDate.getTime() || dayBlockDate.getTime() > lastDate.getTime()) {
                that.removeDay(isoStringDate);
            }
        });
    };

    /**
     * Формирует количество загружаемых дней относительно переданной даты
     * @param {Date} startDate дата, относительно которой расчитывается количество подгружаемых дней
     * @param {boolean} [invert] переключает расчет стартового смещения с конца дня
     * @returns {number} количество подгружаемых дней
     */
    bTimeline.prototype.getCountOfPreloadingDays = function(startDate, invert) {
        var startDateOffset = this.getHours(startDate);

        if (invert) {
            // При инвертировании не учитывается переданный стартовый час,
            // т.к. если стартовое смещение 12 часов, то до последнего часа дня остается 11 часов
            // далее требуется загрузка следующего дня
            startDateOffset = HOURS_OF_DAY - startDateOffset - 1;
        }

        var loadedHours = this.maxShowedHours - (startDateOffset + TIMELINE_START_HOUR_OFFSET);
        return Math.ceil(this.hoursToDay(loadedHours));
    };

    /**
     * Сдвиг timeline в предыдущие дни
     * @param {$.Event} event объект события
     * @returns {?$.Deferred} деферед загрузки дней
     */
    bTimeline.prototype.showPreviousDays = function(event) {
        event.preventDefault();

        // Запрет работы стрелки во время загрузки или анимации
        if (!this.isState('started')) {
            return null;
        }

        var that = this;
        var startDateOffset = this.getHours(this.startDate);
        var loadedDays = this.getCountOfPreloadingDays(this.startDate);

        // Загрузку нужно начинать с loadedDays назад относительно текущего дня
        var fromDate = _.clone(this.startDate);
        fromDate.setDate(fromDate.getDate() - loadedDays);

        // Установка начальной даты таймлайна
        var startDateHoursOffset = this.roundAwayFromZero(-this.maxShowedHours + TIMELINE_START_HOUR_OFFSET);
        this.startDate = this.adjustHours(this.startDate, startDateHoursOffset);

        // Остановка внутренних часов на момент получения дней и их анимации
        this.stopTimer();

        return this.daysPreloading(fromDate, loadedDays, 'prepend').done(function() {
            that.setState('animating');

            that.$content.css({
                    left: '-' + (startDateOffset + loadedDays * HOURS_OF_DAY) + 'em'
                })
                .stop(true, true)
                .animate({left: '-' + that.getHours(that.startDate) + 'em'}, 300, 'swing', function() {
                    that.setState('started');

                    // Удаляем невидимые дни
                    that.removeHiddenDate();

                    that.startTimer();
                });
        });
    };

    /**
     * Сдвиг timeline в последующие дни
     * @param {$.Event} [event] объект события
     * @returns {?$.Deferred} деферед загрузки дней
     */
    bTimeline.prototype.showNextDays = function(event) {
        if (event) {
            event.preventDefault();
        }

        // Запрет работы стрелки
        if (!this.isState('started')) {
            return null;
        }

        var that = this;
        var lastDate = this.getLastDate();
        var loadedDays = this.getCountOfPreloadingDays(lastDate, true);
        var startDateOffset = this.getHours(that.startDate);

        // Загрузку нужно начинать со следующего за последним днем
        var fromDate = _.clone(lastDate);
        fromDate.setDate(fromDate.getDate() + 1);

        // Установка начальной даты таймлайна
        this.startDate = this.adjustHours(lastDate, -TIMELINE_START_HOUR_OFFSET);

        // Остановка внутренних часов на момент получения дней и их анимации
        this.stopTimer();

        return this.daysPreloading(fromDate, loadedDays, 'append').done(function() {
            var maxShowedHours = Math.floor(that.maxShowedHours);

            that.setState('animating');

            that.$content
                .stop(true, true)
                .animate({
                    left: '-' + (startDateOffset + maxShowedHours - TIMELINE_START_HOUR_OFFSET) + 'em'
                }, 300, 'swing', function() {
                    that.setState('started');


                    that.removeHiddenDate();

                    that.$content.css({
                        left: '-' + that.getHours(that.startDate) + 'em'
                    });

                    that.startTimer();
                });
        });
    };

    /**
     * Обработка изменения размеров видимой области экрана
     */
    bTimeline.prototype.windowResize = function() {
        if (!this.selfvisible) {
            return;
        }

        var that = this;

        // Останавливаем анимация календаря
        if (!this.windowResizeTimer) {
            this.stopTimer();
        }

        // Устраняем "дребежжание" события resize
        clearTimeout(this.windowResizeTimer);
        this.windowResizeTimer = setTimeout(function() {
            that.refresh();
            that.clearWindowResize();
        }, 300);
    };

    /**
     * Очистка таймера задержки обработки изменения размеров видимой области экрана
     */
    bTimeline.prototype.clearWindowResize = function() {
        clearTimeout(this.windowResizeTimer);
        this.windowResizeTimer = null;
    };

    bTimeline.prototype.onClose = function(event) {
        if (event && _.isFunction(event.preventDefault)) {
            event.preventDefault();
        }

        this.close();
    };

    /**
     * Установливает разрешение работы для timeline
     */
    bTimeline.prototype.allowed = function() {
        if (!this.isState('is-new')) {
            this.setState('allowed');
        }
        this.$message.addClass('g-hidden');
        this.$arrows.removeClass('g-hidden');
        this.$newEventButton.removeClass('g-hidden');
    };

    /**
     * Устанавливает запрет работы для timeline
     */
    bTimeline.prototype.disallowed = function() {
        this.setState('disallowed');
        this.$message.removeClass('g-hidden');
        this.$arrows.addClass('g-hidden');
        this.$newEventButton.addClass('g-hidden');
    };

    /**
     * Инициализирует права пользователя для работы с timeline
     */
    bTimeline.prototype.initPermissions = function() {
        var isAllowed = Jane.$H('account-information').hasSid(31) || // у пользователя есть 31 sid
                        Daria.IS_CORP; // это пользователь корпоративной почты
        if (isAllowed) {
            this.allowed();
        } else {
            this.disallowed();
        }
    };

    /**
     * Открытие timeline
     */
    bTimeline.prototype.open = function() {
        this.initPermissions();

        this.show();
        this.clearWindowResize();

        this.start();

        Jane.$H('settings').setSettings({
            'timeline-is-open': true
        });
        Jane.events.trigger('timeline.showed');
    };

    /**
     * Закрытие timeline
     */
    bTimeline.prototype.close = function() {
        this.hide();
        this.clearWindowResize();

        this.stop();

        this.startDate = null;

        Jane.$H('settings').setSettings({
            'timeline-is-open': false
        });
        Jane.events.trigger('timeline.hidden');
    };

    /**
     * Вызывает безвозвратное закрытие timeline
     */
    bTimeline.prototype.closingWithoutOpening = function() {
        var that = this;
        Jane.events.trigger('timeline.closing-without-opening');

        if (!this.isState('is-new')) {
            Daria.Statusline.showMsg({
                hideOnTimeout: true,
                body3: i18n('%Timeline_loading_error_message', 'https://calendar.' + Daria.Config['timeline-yandex-domain'])
            });
        }

        that.destroy();
    };

    /**
     * Открывает/закрытивае timeline
     */
    bTimeline.prototype.toggleOpen = function() {
        var timelineIsOpen = Jane.$H('settings').getSetting('timeline-is-open');

        if (!timelineIsOpen) {
            this.open();
        } else {
            this.close();
        }
    };

    /**
     * Переводит timeline в текущий день
     */
    bTimeline.prototype.toCurrentDate = function() {
        this.startDate = null;
        this.refresh();
    };

    /**
     * Уничтожение timeline
     */
    bTimeline.prototype.onhtmldestroy = function() {
        this.close();

        this.stopTooltipHiding();

        if (this.nbTooltip) {
            this.nbTooltip.destroy();
        }
    };

    Block.Timeline = bTimeline;
})();
/* ../../blocks/timeline/timeline-day.js begin */
(function() {
    var bTimelineDay = Block.create('timeline-day', {
        handlers: ['get-user-events'],
        events: {
            'mouseenter .js-timeline-event': 'showTooltip',
            'mouseleave .js-timeline-event': 'hideTooltip'
        },
        janeEvents: {
            'timeline.change-current-hour': 'changeCurrentHour'
        }
    });

    /**
     * Перерисовка дня тайплайн
     */
    bTimelineDay.prototype.onrepaint = function() {
        this.$node = $(this.getCacheNode());
        this.$node.addClass('jane-timeline-day').attr({
            'data-day': this.params.date
        });

        /**
         * Ноды, отражаюищие часы у дня для timeline
         */
        this.$hours = this.$node.find('.js-timeline-hour');
    };

    /**
     * Показ тултипа события календаря
     * @param {jQuery.Event} event событие, вызвавшее показ тултипа
     */
    bTimelineDay.prototype.showTooltip = function(event) {
        var $target = $(event.currentTarget);
        var eventIndex = $target.attr('data-event-index');
        eventIndex = Number(eventIndex);

        Jane.events.trigger('timeline.show-tooltip', {
            $target: $target,
            content: this.renderEventContent(eventIndex)
        });
    };

    bTimelineDay.prototype.hideTooltip = function() {
        Jane.events.trigger('timeline.hide-tooltip');
    };

    /**
     * Формирование контента тултипа
     * @param {number} eventIndex порядковый номер события
     * @returns {string} контент события календаря
     */
    bTimelineDay.prototype.renderEventContent = function(eventIndex) {
        var handlerData = this.getHandler('get-user-events');
        var eventData = Jane.$H('get-user-events').getContainerOfEvents(handlerData, eventIndex);
        return yr.run('mail-common', eventData, 'timeline-event-content');
    };

    /**
     * Смена текущего часа в дне
     * @param {string} eventName название Jane.events события
     * @param {Object} [eventData] данные события
     * @param {Date} [eventData.currentDate] текущая дата
     * @param {string} [eventData.isoStringDate] текущая дата в ISO строке без часов, минут и секунд
     */
    bTimelineDay.prototype.changeCurrentHour = function(eventName, eventData) {
        this.hideCurrentHour();
        if (eventData.isoStringDate === this.params.date) {
            this.highlightCurrentHour(eventData.currentDate);
        }
    };

    /**
     * Скрытие подсветки текущего часа
     */
    bTimelineDay.prototype.hideCurrentHour = function() {
        this.$hours.removeClass('is-current');
    };

    /**
     * Подсветка текущего часа
     * @param {Date} currentDate подсвечиваемая дата
     */
    bTimelineDay.prototype.highlightCurrentHour = function(currentDate) {
        this.$hours
            .filter('.js-timeline-hour-' + currentDate.getHours())
            .addClass('is-current');
    };

    Block.Timeline.Day = bTimelineDay;
})();

/* ../../blocks/timeline/timeline-day.js end */


/* ../../blocks/timeline/timeline.js end */

        /* ../../blocks/mail-left/mail-left.js begin */
(function() {

    var blocks = ["folders", "labels", "sidebar-phone"];
    if (Daria.layout == '2pane') {
        //FIXME(maksimrv): Похожая проверка
        //с добавлением collectors происходит в блоке labels.
        //Надо подумать как удалить дублирование
        blocks.push('collectors');

        if (!Daria.IS_CORP && Daria.product === 'TUR') {
            blocks.push('follow-us');
        }
    }

    var bMailLeft = Jane.Block.create('mail-left', {
        blocks: blocks
    });

    //  Ресайзинг папок и лейбов есть только в 3pane
    if (Daria.layout != '2pane') {
        bMailLeft.splitter = new Daria.Resizer();
        bMailLeft.prototype.onhtmlinit = function(node) {
            var splitterStartRatio = Number(Jane.$H('settings').getSetting('mail-left-ratio'));
            if (!splitterStartRatio) {
                splitterStartRatio = this.blocksAutoHeight();
            }

            // Замечание: При инициализации CSS устанавливает процентное соотношение блоков. Поэтому,
            // суммарный их размер корректен.

            bMailLeft.splitter.init({
                context: node,
                cssProps: ['bottom', 'top'],
                ratio: splitterStartRatio,
                pane1: '.block-folders',
                pane2: '.block-labels',
                direction: 'v',
                updateDimension: function(ratio1, ratio2) {
                    for (var paneId = 1; paneId <= 2; paneId++) {
                        var prop = this.options.cssProps[paneId - 1];
                        var val;

                        if (paneId == 1) {
                            val = ratio2;
                        } else {
                            val = ratio1;
                        }
                        this.options['pane' + paneId].css(prop, val + '%');
                    }
                },
                dragEnd: function(newRatio) {
                    if (newRatio) {
                        Jane.$H('settings').setSettings({
                            'mail-left-ratio': newRatio.toFixed(2)
                        });
                    }
                }
            });

            this._toggleResizerHandler(true);
        };

        bMailLeft.prototype.onrepaint = function() {
            this._updateResizer();
        };

        bMailLeft.prototype.onhtmldestroy = function() {
            this._toggleResizerHandler(false);
            if (bMailLeft.splitter) {
                bMailLeft.splitter.destroy();
            }
        };

        bMailLeft.prototype._toggleResizerHandler = function(flag) {
            var method = flag ? 'bind' : 'unbind';
            var handler = this._resizeHandler || this._updateResizer.bind(this);
            /**
             * Вешаем/снимаем обработчик _updateResizer на onhtmlinit дочерних блоков
             * (кажется, что на onrepaint - избыточно, т.к. при значимых изменених
             * блоки folders и labels полностью перерисовываются)
             */
            $.each(blocks, function(i, block) {
                var eventName = Jane.Block.getEventName(block, 'onhtmlinit');
                Jane.events[method](eventName, handler);
            });
            this._resizeHandler = flag ? handler : null;
        };

        bMailLeft.prototype._updateResizer = function() {
            var pane1Ratio = bMailLeft.splitter.getRatio();
            var $bFoldersNode = $(Jane.$B('folders').getCacheNode());
            var $bLabelsNode = $(Jane.$B('labels').getCacheNode());

            // Установка размеров для блоков перед обновлением ресайзера
            // Необходимость возникает из-за того, что блоки меняются целиком и удаляют предыдущее
            // процентное соотношение.
            $bFoldersNode.css({
                bottom: (100 - pane1Ratio) + '%'
            });
            $bLabelsNode.css({
                top: pane1Ratio + '%'
            });

            // Обновление ресайзера
            bMailLeft.splitter.update({
                pane1: $bFoldersNode,
                pane2: $bLabelsNode,
                splitter: $bFoldersNode.find('.b-resizer')
            });
        };

        // Авторасчет высоты блоков
        bMailLeft.prototype.blocksAutoHeight = function() {
            var bMailLeftNode = this.getCacheNode();
            var bFoldersNode = Jane.$B('folders').getCacheNode();
            var bLabelsNode = Jane.$B('labels').getCacheNode();
            var ratio = 0;
            if (bMailLeftNode && bFoldersNode && bLabelsNode) {
                var $mailLeftNode = $(bMailLeftNode);
                var $bFoldersNode = $(bFoldersNode);
                var $bFolderContentNode = $bFoldersNode.find('.b-folders__i:first');
                var $bLabelsNode = $(bLabelsNode);

                $bFolderContentNode.css({
                    minHeight: 'auto'
                });

                var allHeight = $mailLeftNode.closest('.b-layout__left').height();
                var bFoldersScrollHeight = $bFolderContentNode.outerHeight() + 19/*b-folders__setup*/;
                var bLabelsScrollHeight = $bLabelsNode.children(':first').outerHeight() + 8;

                /*console.log('all', allHeight, 'sum', bFoldersScrollHeight + bLabelsScrollHeight,
                 'fSH', bFoldersScrollHeight,
                 'lSH', bLabelsScrollHeight
                 );*/

                var newBFoldersHeight;

                if (bFoldersScrollHeight + bLabelsScrollHeight > allHeight) {
                    var blockHeight = Math.floor(allHeight / 2);
                    if (blockHeight > bLabelsScrollHeight) {
                        newBFoldersHeight = allHeight - bLabelsScrollHeight;
                    } else if (blockHeight > bFoldersScrollHeight) {
                        newBFoldersHeight = bFoldersScrollHeight;

                    } else {
                        newBFoldersHeight = blockHeight;
                    }

                } else {
                    newBFoldersHeight = bFoldersScrollHeight;
                }

                ratio = newBFoldersHeight / allHeight * 100;

                $bFolderContentNode.css({
                    minHeight: '100%'
                });
            }
            return ratio;
        };
    }

})();

/* ../../blocks/mail-left/mail-left.js end */

            /* ../../blocks/folders/folders.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.Folders = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.Folders, Block);

(function() {
    var handlers = ["folders", "settings"];

    if (Daria.ALLOW_JP) {
        handlers.push('ppyrus-list');
    }

    Block.add({
        name: "folders",
        info: {
            handlers: handlers
        },
        constructor: Block.Folders
    });
}());

// Обновление текущей страницы в параметрах блока при переходам по папке
Jane.events.bind('params.change', function(evtName, params) {
    if (Jane.Page.type === 'messages' || Jane.Page.type === 'message') {
        Jane.$B('folders').params = params;
    }
});

if (Daria.layout != '2pane') {
    Block.Folders.prototype.onprepare = function() {
        var node = this.getCacheNode();
        if (node && node.childNodes.length) {
            // перед перерисовкой запоминаем состояние скролла
            this._scroll = node.childNodes[0].scrollTop;
        }

        return false;
    };
}

/**
 * @desc Получаем id папки по входящим параметрам,
 * обычно параметры это Daria.Page.params
 *
 * @param {Object} params Page's params
 * @return {String|Undefined} Return folder id or undefined
 */
Block.Folders.prototype.getFolderIdByParmas = function(params) {
    var id;
    var hFolders = Jane.$H("folders");

    if (params._page == "message" && params.ids) {
        id = Jane.$H("message").getFolderId(params.ids);
    } else if (params._page == "compose" && params.ids) {
        // Если письмо в черновиках. Этой проверкой исключаем случаи reply, reply-all и forward,
        // когда в params.ids айдишник письма на которое отвечаем или пересылаем.
        var currentFolder = Jane.$H("message").getFolderId(params.ids);
        var foldersToSelect = Daria.array2obj([hFolders.ids.outbox, hFolders.ids.draft, hFolders.ids.template]);

        if ( currentFolder in foldersToSelect ) {
            id = currentFolder;
        }
    } else if (params._page == 'ppyrus') {
        id = 'ppyrus';
    } else {
        id = params["current_folder"];
    }

    if (Daria.layout != '2pane' && !id) {
        if (params['ids']) {
            id = Jane.$H("message").getFolderId(params.ids);

        } else if (params['thread_id']) {
            id = Jane.$H("message").getFolderId('t' + params['thread_id']);
        }
    }

    return id;
};

Block.Folders.prototype.onrepaint = function(params) {
    var hFolders = Jane.$H("folders");
    var id = this.getFolderIdByParmas(params);

    if (this.selected && this.selected !== id) {
        this.getFolderById(this.selected)
            .removeClass("b-folders__folder_current");
    }
    if (id) {
        this.getFolderById(id)
            .addClass("b-folders__folder_current")
            // при переходе в папку нужно снять кружок новых писем на случай, если он был
            .removeClass("b-folders__folder_updated");

        // FIXME: вообще странно хачит хэндлер после репэйнта "на следующий раз",
        //        я бы сделал это до репэйнта и не стал бы тут ещё и класс отрывать
        //        но не понятно как(где) хачить до репэйнта

        // похачить хэндлер - удалить из него recent, если он там был
        var folder = hFolders.getFolderById(id); // можно читать письмо и не быть подписанным на папку
        if (folder) {
            if ('recent' in folder) {
                delete folder.recent;
            }
        }

        this.selected = id;
    }

    if (this._scroll) {
        var node = this.getCacheNode();
        node.childNodes[0].scrollTop = this._scroll;
        delete this._scroll;
    }

    Jane.events.trigger('shortcuts.update-folders-list');
};

/* ------------------------------------------------------------------------------------------------------------- */

Block.Folders.prototype.getFolderById = function(id) {
    return $(this.cache.node).find(".fid-" + id);
};

Block.Folders.prototype.updateFolderCounts = function(id, deltas) {
    var counts = Jane.$H("folders").updateFolderCounts(id, deltas);
    this.updateFolderHTML(id, counts);

};

Block.Folders.prototype.updateFolderHTML = function(id, counts) {

    var symbol = Jane.$H("folders").getFolderById(id).symbol;
    var href;
    if (symbol) {
        href = "#" + symbol;
    } else {
        href = "#folder/" + id;
    }

    var $folder = this.getFolderById(id);
    var $counters = $folder.find(".b-folders__counters");

    var html = '';
    var newCount = counts["new"];
    var count = counts["count"];
    var isNew = newCount > 0 && !(symbol === 'sent' || symbol === 'trash' || symbol === 'draft' || symbol === 'template');
    if (count > 0) {
        if (isNew) {
            // FIXME: А как бы генерить это в xsl?
            html += '<a class="b-folders__folder__link" href="' + href + '/extra_cond=only_new"><span class="b-folders__folder__link__i">' + newCount + '</span></a>';
        }
        html += '<span class="b-folders__folder__counters__total">';
        if (isNew) { html += ' / '; }
        html += count + '</span>';
    }
    $counters.html(html);

    // TODO: Убирать "метелку" в папках "Спам" и "Удаленные" в случае, когда там не осталось писем.
};

Block.Folders.prototype.createTemplateFolder = function(cb) {
    Jane.Handler.doAll(['do-folders-add', 'folders'], { folder_name: 'template', parent_id: Jane.$H('folders').ids.draft }, function(data) {
        data = jpath(data, '.handlers[.name == "folders"].data')[0];
        var fid = jpath(data, '.folder[.symbol == "draft"].subfolder')[0][0];

        Jane.Handler.doAll(['do-folder-set-symbol'], { fid: fid, symbol: 'template' }, function() {
            Jane.$H('folders').ids.template = fid;
            cb(fid);
        });
    });
};

Block.Folders.prototype.onhtmlinit = function() {
    var that = this;

    // метрика драга папок при начальном показе списка
    this._onDragndropEnableChange = Jane.events.bind('dragndropEnable.change', function() {
        if (Jane.watcher.get('dragndropEnable')) {
            Jane.$H('folders').logDragndropAbility();
        }
    });

    this._onDragndropEnableChange();

    // перерисовка списка папок после выполнения переноса
    this._onFoldersMove = Jane.events.bind('folders.move', function() {
        $('.b-folders .b-folders_inbox__nesting', that.getCacheNode()).replaceWith(Jane.tt('mail-common:user-folders', {}, ['folders']));
        that.trigger('onrepaint', that.params);
    });
};

Block.Folders.prototype.onhtmldestroy = function() {
    Jane.events.unbind('dragndropEnable.change', this._onDragndropEnableChange);
    Jane.events.unbind('folders.move', this._onFoldersMove);
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/folders/folders.js end */

            /* ../../blocks/labels/labels.js begin */
(function() {

    Block.Labels = function() {
        Block.apply(this, arguments);
    };

    Daria.extend(Block.Labels, Block);

    var bLabelsBlocks = [];
    var bLabelsHandlers = [ 'labels', 'folders', 'settings' ];

    // в 3pane сборщики находятся внутри labels
    if (Daria.layout !== '2pane') {
        bLabelsBlocks.push('collectors');
        bLabelsHandlers.push('collectors');
    }

    Block.add({
        name: "labels",
        info: {
            handlers: bLabelsHandlers,
            blocks: bLabelsBlocks,
            events: {
                'click .js-hidden-labels-toggler': '_onToggleUnusedLink'
            }
        },
        constructor: Block.Labels
    });

    if (Daria.layout != '2pane') {
        Block.Labels.prototype.onprepare = function() {
            var node = this.getCacheNode();
            if (node) {
                // перед перерисовкой запоминаем состояние скролла
                this._scroll = node.scrollTop;
            }

            return false;
        };
    }

    Block.Labels.prototype.onrepaint = function(params) {

        var id = params["current_label"];
        var extra = params["extra_cond"];
        var toSelect;
        if (params._page == "messages" && (id || (extra == 'only_new' && !params.current_folder) || extra == 'only_atta')) {
            toSelect = (id) ? id : extra;
        }

        if (this.selected && this.selected !== toSelect) {
            this.selectLabel(this.selected, false);
        }
        if (toSelect) {
            this.selectLabel(toSelect, true);
            this.selected = toSelect;
        }

        if (this._scroll) {
            this.getCacheNode().scrollTop = this._scroll;
            delete this._scroll;
        }

        this.$userLabelsNode = $(this.getCacheNode()).find('.js-left-column-labels');

        Jane.events.trigger('shortcuts.update-labels-list');
    };

    Block.Labels.prototype.selectLabel = function(id, select) {
        var $label = this.getLabelById(id);
        if ($label.hasClass('nb-button')) {
            $label.toggleClass("is-checked", select);
            $label.closest('.jane-nav-column-user-label').toggleClass("is-checked", select);
        } else {
            $label.toggleClass("b-label_selected", select);
            var label = Jane.$H("labels").getLabelById(id);
            var color = label && label.color;
            if (color) {
                $label.find(".b-label__first-letter,.b-label__tag")[0].style.background = (select) ? '' : '#' + color;
            }
        }
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    Block.Labels.prototype.getLabelById = function(id) {
        return $(this.cache.node).find(".lid-" + id);
    };

    /**
     * Переключение вывода ссылок "показать все..." / "скрыть пустые"
     */
    Block.Labels.prototype._onToggleUnusedLink = function() {
        this.$userLabelsNode.toggleClass('jane-nav-column-user-labels_hidden-empty');
        // Триггерим событие, чтобы включить/выключить клавиатурную навигацию по пустым меткам, которые показываем/скрываем
        Jane.events.trigger('shortcuts.update-labels-list');
    };

})();

/* ../../blocks/labels/labels.js end */

            /* ../../blocks/collectors/collectors.js begin */
/*
 * global Block
 */

(function(global) {
    /*
     * Import global functions to
     * curretn scope.
     */
    var Daria = global.Daria;
    var Jane = global.Jane;
    var Block = Jane.Block;
    var BlockCollectors;
    var BlockCollectorsPrototype;

    // Block collectors declaration
    BlockCollectors = Block.create('collectors', {
        handlers: {
            "collectors": true,
            "collector-settings": true,
            "labels": true,
            "settings": false,
            "account-information": true
        },
        lazy: true
    });

    var brokenCollector = Daria.getCookie("broken_collector");

    /**
     * Свойства и методы конструктора
     */
    BlockCollectors.Metrika = "Промо сборщиков";

    /**
     * Свойства и методы объекта
     * порожденного функцией конструктором
     */
    BlockCollectorsPrototype = BlockCollectors.prototype;

    /**
     * Показ промо блока после регистрации
     * @see js/daria.promo.js
     */
    BlockCollectorsPrototype.showEditor = function() {
        Jane.Actions.run('collectors-promo.open', {
            form: 'yes',
            from: 'start'
        });
    };

    /**
     * [DARIA-26718] Показ промо блока "на всех"
     * @see js/daria.promo.js
     */
    BlockCollectorsPrototype.showEditorFromAll = function() {
        Jane.Actions.run('collectors-promo.open', {
            form: 'yes',
            from: 'all' // аналог start, отличается узел метрики
        });
    };

    BlockCollectorsPrototype.onhtmlinit = function(node) {
        var $elems = $(node).find(".b-collectors_teaser .b-mail-button, .b-label");

        // у отключенных нод сборщиков(.b-label) есть дополнительный класс – js-collector-unactive
        var $unactive = $elems.filter(".js-collector-unactive");
        var $warning = $unactive.first().next();

        /**
         * Общее количество сборщиков
         * @type {Number}
         */
        this.nodeCount = $elems.filter(".b-label").length;

        /**
         * Ноды ворнингов для неработающих сборщиков
         * @type {jQuery}
         */
        this.$warnings = $unactive.next();


        // DARIA-9911
        if ($warning.length) {
            if (brokenCollector) {

                // Показываем все сообщения о неработающих сборщиках, если данных о закрытии бабла нет в куках т.к. изначально они скрыты
                this.$warnings.removeClass("g-hidden").each(function() {
                    Jane.c(["Неработающий сборщик", "показ полоски слева"]);
                });
            } else {

                // Показываем бабл
                global.setTimeout(function() {
                    Jane.Actions.run("collector.warning", $warning);
                }, 100);
            }
        }
    };

    BlockCollectorsPrototype.onrepaint = function() {
        Jane.events.trigger('shortcuts.update-collectors-list');
    };

    /**
     * Логирование в зависимости от того как был открыт попап – сам либо по клику,
     * в зависимости от этого будет выбрана разная иерархия
     * @param {String} name -  имя которое должно быть залогировано
     */
    BlockCollectorsPrototype.log = function(name) {
        if (brokenCollector) {
            Jane.c(["Неработающий сборщик", "клик на полоску", name]);
        } else {
            Jane.c(["Неработающий сборщик", name]);
        }
    };

    /**
     * Export BlockCollectors
     * constructor.
     */
    Block.Collectors = BlockCollectors;
    return BlockCollectors;
}(this));

/* ../../blocks/collectors/collectors.js end */

            /* ../../blocks/sidebar-phone/sidebar-phone.js begin */
/**
 * Ссылка на личный кабинет МТС в левой колонке
 *
 * @see https://jira.yandex-team.ru/browse/DARIA-36845
 */

(function(/**Jane*/Jane, /**Daria*/Daria) {
    var mtsPrefixes = ['910', '915', '916', '917', '919', '985'];
    var hasMtsPrefix = function(num) {
        return mtsPrefixes.indexOf(num.slice(2,5)) !== -1;
    };

    var bSidebarPhone = Jane.Block.create('sidebar-phone', {
        lazy: true,
        handlers: ['userphones']
    });

    // временно отрываем в трипейне
    bSidebarPhone.prototype.toshow = function() {
        return !Daria.IS_CORP && Daria.layout === '2pane';
    };

    /**
     * Возвращает провалидированный номер телефона МТС или null
     *
     * @param {UserPhones} phones Коллекция телефонов
     * @return {string|null}
     */
    bSidebarPhone.prototype.getPhone = function(phones) {
        if (phones.isEmpty()) {
            return null;
        }

        var secureNumber = phones.getSecure();
        if (secureNumber && secureNumber.isValid() && hasMtsPrefix(secureNumber.getNumber())) {
            return secureNumber.getNumber();
        }

        var now = Daria.now();
        var validPhones = _.sortBy(phones.getAllValid(), function(phone) {
            return now - phone.getValidationTimestamp();
        });

        var validMTSPhone = _.find(validPhones, function(phone) {
            return hasMtsPrefix(phone.getNumber());
        });

        return validMTSPhone ? validMTSPhone.getNumber() : null;
    };

    /**
     * Вставляет отформатированный номер телефона в DOM или прячет блок
     *
     * @param {string} [validPhone] Номер телефона
     */
    bSidebarPhone.prototype.insertPhone = function(validPhone) {
        if (validPhone) {
            var $phone = this.$node.find('.js-sidebar-phone-text');
            var phone = Jane.$H('phone-register').getFormattedNumber(validPhone);

            $phone.html(phone);

            this.$node.find('.js-sidebar-phone').removeClass('g-hidden');

            Jane.c('МТС', 'Показ');
        }
    };

    bSidebarPhone.prototype.onhtmlinit = function(node) {
        var that = this;
        this.$node = $(node);

        Daria.Validator.getUserPhones(true).done(function(phones) {
            that.insertPhone(that.getPhone(phones));
        });
    };
})(Jane, Daria);

/* ../../blocks/sidebar-phone/sidebar-phone.js end */

            /* ../../blocks/follow-us/follow-us.js begin */
/**
 * @desc Block which represent links on follow us.
 * @return {Object} The block object
 */

(function() {
    var bFollowUs = Block.create('follow-us', {
        handlers: {
            "settings": false
        }
    });
    var settings = Jane.$H('settings');

    /**
     * При создании предсатвления определяем какую версию
     * 'follow-us' надо показывать.
     */
    bFollowUs.prototype.onhtmlinit = function(node) {
        var datatime;
        var timeDiff;
        this.node = node;

        // follow_us_datetime - время начала показа секции 'follow us'
        datatime = settings.getSetting('follow_us_datetime');

        if (!datatime) {
            // если еще не показывали устанавливаем
            // дату показа
            settings.setSettings({
                follow_us_datetime: Daria.now()
            });
            datatime = Daria.now();
        }

        timeDiff = (Daria.now() - datatime) / 3600000;

        // если время больше 78 часов то показываем
        // сжатую версию
        if (timeDiff > 78) {
            $(node).addClass('b-follow-us__minimize');

            // переносим в footer ссылки.
            $('.b-footer__col_left').first().append(node);
        } else {
            // Для больших конпок добавляем
            // класс стилизации боковой панели
            $('.b-follow-us', this.node).addClass('b-labels');
        }

        // Инициализируем метрику
        this.initMetrik();
    };

    /**
     * Определяет показывать блок или нет
     * Не практично вызывается каждый раз при run-e
     *
     * XXX: Проверка так же еще стоит
     * в файле daria/blocks/mail-left/mail-left.js
     */
    bFollowUs.prototype.toshow = function() {
        return Daria.product === 'TUR';
    };

    bFollowUs.prototype.initMetrik = function() {
        $(this.node).on('click', '.js-link', function() {
            Jane.c({
                'Ссылки на соцсети': $(this).data('params')
            });
        });
    };

    return bFollowUs;
})();

/* ../../blocks/follow-us/follow-us.js end */



        /* ../../blocks/mail/mail.js begin */
(function(/**Jane*/Jane, /**Daria*/Daria) {

    var bMailBlocks = [
        "messages-box",
        "messages-list-box",
        "message-headline",
        "message-prevnext-box"
    ];

    if (Daria.layout == '2pane') {
        bMailBlocks.push('messages-date-pager-float-box');
    } else {
        // в 3pane есть контекстное выделение
        bMailBlocks.push("messages-selection");
    }

    var bMail = Jane.Block.Mail = Jane.Block.create('mail', {
        blocks: bMailBlocks
    });
    var bMailProto = bMail.prototype;

    /**
     * @namespace Ресайзилка панелей в 3pane. В 2pane не используется.
     */
    var splitter = new Daria.Resizer();
    /**
     * @exports splitter as Jane.Block.Mail.splitter
     * @description Для 2pane создаем заглушку с пустыми публичными методами.
     */
    bMail.splitter = (Daria.layout === '2pane') ?
        Daria.array2obj(['init', 'setRatio', 'toggleOnePaneMode', 'update'], $.noop) : splitter;

    // Скрываем блок "Группировать по обсуждениям", если выбрано хоть одно письмо.
    bMailProto.toggleThreadCheckbox = function(e, diff) {
        // Проверяем, что это граничный случай (выбрано первое письмо или снята галка с последнего)
        if (diff.value * diff.oldValue === 0) {
            var selected = diff.value;
            var activeNode = Jane.$B('messages-list-box').getActiveCacheNode();
            if (activeNode) {
                var $actions = $(activeNode).find('.b-messages-head__action, .b-mail-tabs');
                $actions.toggleClass('g-hidden', !!selected);
            }
        }
    };

    bMailProto.onhtmlinit = function(node, params) {
        var splitterStartRatio = Number(Jane.$H('settings').getSetting('layout-ratio'));
        var isVerticalPanels = (Daria.layout === '3pane-vertical');

        // Показываем блок (он изначально скрыт в шаблоне в 3pane)
        node.style.visibility = '';

        // Инициализируем ресайзилку панелей в 3pane. В 2pane не делает ничего.
        if (Daria.layout != '2pane') {
            bMail.splitter.init({
                CSS_PROPS: [
                    // Для 3pane-horizontal (для верхней и нижней соответственно)
                    ['bottom', 'top'],
                    // Для 3pane-vertical (для левой и правой соответственно)
                    ['right', 'left']
                ],
                LEFT_PANEL_MIN_WIDTH: 200,
                context: node,
                ratio: splitterStartRatio ? splitterStartRatio : 35,
                minRatio: 20,
                direction: isVerticalPanels ? 'h' : 'v',
                updateDimension: function(ratio1, ratio2, denyRatioCheck) {
                    var pane1Size;

                    if (isVerticalPanels && !denyRatioCheck) {
                        pane1Size = this.totalSize * ratio1 / 100;
                        if (this.options.LEFT_PANEL_MIN_WIDTH > pane1Size) {
                            ratio1 = this.options.LEFT_PANEL_MIN_WIDTH / this.totalSize * 100;
                            ratio2 = 100 - ratio1;
                            this.options.ratio = ratio1;
                        }
                    }

                    for (var paneId = 1; paneId <= 2; paneId++) {
                        var prop = this.options.CSS_PROPS[Number(isVerticalPanels)][paneId - 1];
                        var val;

                        if (paneId == 1) {
                            val = ratio2;
                        } else {
                            val = ratio1;
                        }

                        this.options['pane' + paneId].css(prop, val + '%');
                    }
                },
                drag: function(newRatio) {
                    // Обновляем ширину прибитого инфолайна в списке писем
                    if (isVerticalPanels) {
                        Jane.$B('messages-list-box').getActive().table.headline.updateWidth();
                    }
                    Jane.events.trigger('layout-ratio-change', {ratio: newRatio});
                },
                dragEnd: function(newRatio) {
                    if (newRatio) {
                        Jane.$H('settings').setSettings({
                            'layout-ratio': newRatio.toFixed(2)
                        });
                        // Догружаем письма в 3pane-horizontal, если нужно
                        if (!isVerticalPanels) {
                            Jane.$B('messages-list-box').active.fillMessagesList();
                        }
                        Jane.events.trigger('layout-ratio-changed', {ratio: newRatio});
                    }
                }
            });
        }
        this.inlineWizardShow(params);
        Jane.events.bind("selectedCount.change", this.toggleThreadCheckbox.bind(this));
    };

    /**
     * Метод для создания блока визарда под письма
     * вынесено, потому что иначе он попадает в глобальный ран и тормозит отрисовку списка писем
     * в onhtmlinit блока inline-wizard-box мы добавляем html в страницу (почему - описано там же) 
     **/
    bMailProto.inlineWizardShow = function(params) {
        var bInlineWizard = new Jane.Block.make('inline-wizard-box');
        setTimeout(function() {
            Jane.$B('inline-wizard-box').run(params, function() {
                Jane.$B('mail').blocks.push(bInlineWizard);
                bInlineWizard.run();
            });
        }, 1);
    };

    bMailProto.onhtmldestroy = function() {
        if (bMail.splitter) {
            bMail.splitter.destroy();
        }
        Jane.events.unbind("selectedCount.change", this.toggleThreadCheckbox.bind(this));
    };

})(Jane, Daria);

/* ../../blocks/mail/mail.js end */


            /* ../../blocks/messages-box/messages-box.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.MessagesBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessagesBox, Block);

Block.add({
    name: "messages-box",
    info: {
        box: true,
        ignore: true
    },
    constructor: Block.MessagesBox
});

Block.MessagesBox.prototype.selectName = function(params) {
    if (params.thread_id && Daria.layout != '2pane') {
        return 'message-thread';

    } else if (params.ids) {
        return 'message';

    } else if (Daria.layout != '2pane') {
        return 'message-empty';
    }
};

Block.MessagesBox.prototype.iterateHeaders = function(ids, callback) {
    Daria.iterateIds(this.cache.node, "mid-", ids, callback);
};

Block.MessagesBox.prototype.iterateNearest = function(ids, callback) {
    Daria.iterateIds(this.cache.node, "mn-", ids, callback);
};

Block.MessagesBox.prototype.iterateThreadNearest = function(ids, callback) {
    Daria.iterateIds(this.cache.node, "mtn-", ids, callback);
};

Block.MessagesBox.prototype.iterateThread = function(tids, callback) {
    Daria.iterateIds(this.cache.node, "tid-", tids, callback);
};


/* ../../blocks/messages-box/messages-box.js end */

            /* ../../blocks/messages-list-box/messages-list-box.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.MessagesListBox = function() {
    Block.apply(this, arguments);
    this._selectedCounts = {};
};

Daria.extend(Block.MessagesListBox, Block);

Block.add({
    name: "messages-list-box",
    info: {
        box: true,
        ignore: true
    },
    constructor: Block.MessagesListBox
});

Block.MessagesListBox.prototype.selectName = function(params) {
    if (params._page == "messages") {
        return params._page;
    }
};


Block.MessagesListBox.prototype.onhtmlinit = function() {
    /*
    if (Daria.layout != '2pane') {
        // вешаем класс, что находимся в режиме выделений
        // в этом режиме клик по письму добавляет его в выделение, а не открывает его
        Jane.events.bind('daria:selection-mode.change', function(e, diff) {
            $(this.getCacheNode()).toggleClass('b-messages_selecting', diff.value);
        }.bind(this));
    }
    */
    Jane.events.bind('setup.inboxattachs.changed', Block.MessagesListBox.invalidate);
    Jane.events.bind('mail:show-direct-inbox', this._showDirectInbox.bind(this));
};

Block.MessagesListBox.prototype.onhtmldestroy = function() {
    Jane.events.unbind('setup.inboxattachs.changed', Block.MessagesListBox.invalidate);
};

Block.MessagesListBox.prototype.onactivate = function(params, key, oldKey) {
    //для писем не надо
    var selectedCounts = this._selectedCounts;
    if (oldKey) {
        selectedCounts[oldKey] = Jane.watcher.get('selectedCount');
    }
    Jane.watcher.set('selectedCount', selectedCounts[key] || 0);
};

Block.MessagesListBox.prototype.iterateRows = function(ids, callback) {
    Daria.iterateIds(this.cache.node, "mid-", ids, callback);
};

Block.MessagesListBox.prototype.iterateThread = function(ids, callback) {
    Daria.iterateIds(this.cache.node, "tid-", ids, callback);
};

/**
 * Возвращает текуший активный Daria.Table
 * @return {Daria.Table}
 */
Block.MessagesListBox.prototype.getActiveTable = function() {
    return this.active && this.active.table;
};

Block.MessagesListBox.prototype._getDirectNode = function() {
    if (!this._directNode) {
        this._directNode = $('<div class="b-direct__item" id="js-messages-direct"/>');
    }

    return this._directNode;
};

Block.MessagesListBox.prototype._showDirectInbox = function() {
    // проверяем, что messages виден на экране
    if (this.visible) {
        var bMessages = this.getActive();
        var $directPlace = bMessages && bMessages.getDirectPlace();
        if ($directPlace) {
            // объявления постоянно показываем в одной и той же ноде
            $directPlace.prepend(this._getDirectNode());
            Jane.yabs.showDirectInbox('js-messages-direct');
        }
    }
};

Block.MessagesListBox.invalidate = function() {
    var bList = Jane.$B('messages-list-box');
    if (bList) {
        bList.invalidate();
    }
};

/* ../../blocks/messages-list-box/messages-list-box.js end */

            /* ../../blocks/messages-item/messages-item.js begin */
/**
 * @desc Компонент управляющий отрисовкой
 * виджетов в списке писем
 */
(function() {
    /*jshint maxcomplexity:4,eqeqeq:true,maxparams:3*/

    var bMessagesItem = Jane.Block.create('messages-item');

    bMessagesItem.blockName = 'messages-item';

    /**
     * @desc Null-овый блок, применяется ко всем
     * письмам, где нету виджета.
     */
    bMessagesItem.isApplyTo = function() {
        return true;
    };

    bMessagesItem.registeredBlocks = [];

    bMessagesItem.createdMessagesItemBlocks = {};

    /**
     * @desc Удаление связки со всеми зарегестрированными блоками
     */
    bMessagesItem.unregisterAllBlocks = function() {
        this.registeredBlocks = [];
    };

    /**
     * @desc Вызывает run на блоке с
     * определенными параметрами и возвращает promise
     * который разрешится после завершения run-а
     * @param {Object} messagesItemBlock Экземпляр виджета
     * @param {Object} message Модель message
     * @return {Object} The promise object
     */
    bMessagesItem.callRunOnBlock = function(messagesItemBlock, message) {
        var deferred = $.Deferred();

        messagesItemBlock.run({
            ids: message.mid
        }, deferred.resolve.bind(deferred), {
            parallel: true,
            onerror: deferred.reject.bind(deferred),

            /**
             * Прокидываем все Page параметры в yate чтобы корректно отрисовывать
             * шаблоны из messages.yate.
             * Daria.Page.params.current_folder нужен, чтобы напротив писем рисовать папку, если они не в текущей
             * для запроса он не нужен, поэтому прокидываем его только в XSL
             */
            "xsl-params": Daria.Page.params
        });

        return deferred.promise();
    };

    /**
     * @desc Оборачивает сообщение в блок.
     * Все управление над элементом передается в блок
     *
     * @param {Object} message данные о сообщении
     * @param {Object} node DOM элемент, который принадлежит сообщению или в котором оно находится
     * @param {Deferred} [launchRun] Deferred, resolve которого запускает run на этом блоке
     * Если launchRun не передан, то генерируется разрезолвленный Deferred
     * @return {Object} блок сообщения
     */
    bMessagesItem.wrapMessageToBlock = function(message, node, launchRun) {
        if (!launchRun) {
            launchRun = $.Deferred().resolve();
        }

        var messageItemBlock = bMessagesItem.create(message);

        messageItemBlock.whenRunEnd = $.Deferred();
        messageItemBlock.launchRun = launchRun;

        launchRun.then(function() {
            bMessagesItem.callRunOnBlock(messageItemBlock, message).then(function() {
                if (bMessagesItem.isNullBlock(messageItemBlock)) {
                    messageItemBlock.whenRunEnd.resolve();
                    return;
                }
                bMessagesItem.afterBlockInitialize(messageItemBlock, node, message.mid);
                messageItemBlock.whenRunEnd.resolve();
            });
        });

        return messageItemBlock;
    };

    /**
     * @desc Определяет является ли блок Null-овым.
     * Null-овый блок - это блок который ничего не делает.
     * Он создается для каждого сообщения у которого нету виджета.
     */
    bMessagesItem.isNullBlock = function(messageItemBlock) {
        return (messageItemBlock instanceof bMessagesItem);
    };

    /**
     * @desc Aspect apply before wrapMessageToBlock.
     * Возможность создать виджет только для одного письма
     * при загрузке списка писем
     * Нужно для разработки и тестирования
     * @example //mail.yandex.ru/neo2/?message-item-only-for=<mid>#inbox
     */
    if (Jane.Config.dev) {
        bMessagesItem.wrapMessageToBlock = (function(wrapMessageToBlock) {
            return function(message) {
                var forMessageId = Daria.urlParams['message-item-only-for'];

                if (forMessageId && message.mid !== forMessageId) {
                    return Jane.Block.make(bMessagesItem.blockName);
                }

                return wrapMessageToBlock.apply(this, arguments);
            };
        }(bMessagesItem.wrapMessageToBlock));
    }


    /**
     * @desc Регистрация блока
     * Конструктор блока должен обязательно иметь метод isApplyTo, который будет вызваться при проверке
     * принадлежности его к сообщению
     * @param {Class} Block регистрируемый блок
     */
    bMessagesItem.registerBlock = function(Block) {
        this.registeredBlocks.push(Block);
        return Block;
    };

    /**
     * @desc Обновляем Daria.Table.active
     * Это нужно для правильной работы выделений,
     * иначе в Daria.Table сохраняются ссылки на
     * старые узлы b-messages
     *
     * @param {Object} messagesItemBlock Экземпляр messages-item. Относительно
     * него будет искаться блок messages, который внутри себя содержит Daria.Table
     * https://jira.yandex-team.ru/browse/DARIA-33503
     */
    bMessagesItem.redrawMessagesTable = function(messagesItemBlock) {
        var bMessages = Jane.Block.getInstance(messagesItemBlock.getCacheNode(), 'messages');

        /**
         * TODO(maksimrv): Посмотреть на это
         * поведение после вызова redrawMessagesTable
         * для deffered-ов.
         */
        if (bMessages && bMessages.table) {
            return bMessages.table.update();
        }
        return null;
    };

    /**
     * @desc Создает название для блока messages-item
     * @param {String} blockName The name of block
     * @param {Object} message The message model
     * @return {String} The name of messages item block
     */
    bMessagesItem.getMessagesItemName = function(blockName, message) {
        return Daria.supplant('{blockName}-{messageId}', {
            blockName: blockName,
            messageId: message.mid
        });
    };

    /**
     * @desc Изменяет класс блока на уникальный. Необходимо
     * из за ограничений блока. В документе может находится
     * только один блок с классом block-{block.name}, поэтому
     * мы заменяем стандартный класс на block-{block.name}-{mid}
     *
     * @param {Object} messagesItemBlock Экземпляр блока виджета
     * @param {String} messageId Идентификатор письма на основании
     * которого будет создаваться уникальный класс
     * @return {Object} messagesItemBlock
     */
    bMessagesItem.changeBlockClass = function(messagesItemBlock, messageId) {
        var $blockNode = $(messagesItemBlock.getCacheNode());
        var blockClass = Daria.supplant("block-{blockName}", {
            blockName: messagesItemBlock.name
        });

        $blockNode.removeClass(blockClass);
        $blockNode.addClass(Daria.supplant('{blockClass}-{messageId} block-messages-item js-message-item', {
            messageId: messageId,
            blockClass: blockClass
        }));
        $blockNode.attr('data-id', (messagesItemBlock.isThread ? 't' : '') + messageId);

        return messagesItemBlock;
    };

    /**
     * @param {Object} node Заменяемый узел или родитель, в котором находится заменяемый
     * @param {Object} messagesItemBlock Экземпляр блока виджета
     * @param {String} messageId Идентификатор письма. По идентификатору письма
     * определяется узел которые нужно заменить (узел с классом .mid-{mid}).
     * @return {Object} messagesItemBlock
     */
    bMessagesItem.insertBlockToDocument = function(node, messagesItemBlock, messageId) {
        var messageClass = 'js-message-id-' + messageId;

        var changedNode;
        node = $(node);

        if (node.hasClass(messageClass)) {
            changedNode = node;
        } else {
            changedNode = node.find('.' + messageClass).eq(0);
        }

        changedNode.replaceWith(messagesItemBlock.getCacheNode());

        return messagesItemBlock;
    };

    /**
     * @desc Callback после выполнения run-а на блоке
     */
    bMessagesItem.afterBlockInitialize = function(messagesItemBlock, parentNode, messageId) {
        this.changeBlockClass(messagesItemBlock, messageId);
        this.insertBlockToDocument(parentNode, messagesItemBlock, messageId);
        this.redrawMessagesTable(messagesItemBlock);
    };

    /**
     * @desc Создание MessagesItem блока
     * @param {Object} message данные, по которым будет создаваться блок
     * @return {Block} экземпляр созданного блока
     */
    bMessagesItem.create = function(message) {
        var messagesItemBlockName;
        var MessagesItem = $.grep(bMessagesItem.registeredBlocks, function(messagesItemBlock) {
            return messagesItemBlock.isApplyTo(message);
        })[0] || bMessagesItem;

        var messageItemBlock = Jane.Block.make(MessagesItem.blockName, $.extend({
            ids: message.mid
        }, message));

        if (!bMessagesItem.isNullBlock(messageItemBlock)) {
            messagesItemBlockName = bMessagesItem.getMessagesItemName(MessagesItem.blockName, message);
            bMessagesItem.createdMessagesItemBlocks[messagesItemBlockName] = messageItemBlock;
        }

        return messageItemBlock;
    };

    /**
     * @desc Возвращает экземпляр созданного виджета
     * @param {String} blockName The name of block
     * @param {Object} message The message object
     */
    bMessagesItem.getMessagesItem = function(blockName, message) {
        var messagesItemBlockName = bMessagesItem.getMessagesItemName(blockName, message);
        return bMessagesItem.createdMessagesItemBlocks[messagesItemBlockName] || null;
    };

    /**
     * @desc Вызывает метода на экземпляре блока messages-item-<*>
     * @param {String} blockName Имя блока
     * @param {String} methodName Название метода
     * @param {Object} message
     */
    bMessagesItem.callMethodOnBlock = function(blockName, methodName, message) {
        if (!message) {
            throw new Error(Daria.supplant('MessagesItemError: callMethodOnBlock({blockName}, {methodName}) missing required argument message', {
                blockName: blockName,
                methodName: methodName
            }));
        }

        var messageItemBlock = bMessagesItem.getMessagesItem(blockName, message);

        if (messageItemBlock && messageItemBlock[methodName]) {
            return messageItemBlock[methodName](message);
        }
    };

    yr.externals['call-method-on-block'] = function(blockName, methodName, message) {
        message = yr.nodeset2data(message);

        if (message) {
            return bMessagesItem.callMethodOnBlock(blockName, methodName, message) || '';
        }

        return '';
    };

    /**
     * @desc Функция заглушка для null-ового блока.
     * Заменяет стандартный run на блоке. Сразу вызывает переданный
     * cllback
     */
    bMessagesItem.prototype.run = function(runParmateters, callback) {
        if ($.isFunction(callback)) {
            callback(runParmateters);
        }
    };

    Jane.Block.MessagesItem = bMessagesItem;

    /* ../../blocks/messages-item/messages-item-container.js begin */
(function() {
    /**
     * @desc Реализует интерфейс для работы с messages-item
     */
    var MessagesItemContainer = function() {
        this.messagesItemBlocks = [];
        Block.apply(this, arguments);
    };

    Daria.extend(MessagesItemContainer, Block);

    Jane.Block.add({
        name: 'messages-item-container',
        info: {},
        constructor: MessagesItemContainer
    });


    /**
     * @desc Сохраняет ссылку на messages-item блок
     * @param {Object} bMessagesItem Экземпляр блока messages-item
     */
    MessagesItemContainer.prototype.addMessageItemBlock = function(bMessagesItem) {
        this.messagesItemBlocks.push(bMessagesItem);
    };

    /**
     * @desc Оборачивает каждый элемент списка писем в блок.
     * Все управление над элементом передается в блок
     * @return {Array} Список блоков
     */
    MessagesItemContainer.prototype.wrapMessagesToBlock = function() {
        var node = this.getCacheNode();
        var that = this;

        var messagesItemBlocks = $.map(this.getHandler('messages').message, function(message) {
            var bMessagesItem = Jane.Block.MessagesItem.wrapMessageToBlock(message, node, $.Deferred());
            that.addMessageItemBlock(bMessagesItem);
            return bMessagesItem;
        });

        var grouped = _.groupBy(messagesItemBlocks, function(b) {
            return b.constructor.blockName;
        });

        _.forEach(grouped, function(group) {
            var blockCtor = group[0].constructor;

            var launchGroupRun = $.Deferred();

            if (blockCtor && _.isFunction(blockCtor.prefetch)) {
                blockCtor.prefetch(group).then(function() {
                    launchGroupRun.resolve();
                }).fail(function() {
                    // реджетим промисы для того, чтобы messages-wrap отрисовал социальные аватарки
                    that.updateBlockGroupDeferreds.call(that, group, 'whenRunEnd', 'reject');
                });
            } else {
                launchGroupRun.resolve();
            }

            launchGroupRun.then(that.updateBlockGroupDeferreds.bind(that, group, 'launchRun', 'resolve'));

        });

        return messagesItemBlocks;
    };

    /**
     * Резолвит Deferred launchRun для каждого блока из группы
     * @param {Array} group Массив Messages-Item блоков
     * @param {String} deferredName Имя deferred'a, который нужно зарезолвить
     * @param {String} action Действие, необходимое для совершение над группой
     */
    MessagesItemContainer.prototype.updateBlockGroupDeferreds = function(group, deferredName, action) {
        if (action === 'reject' || action === 'resolve') {
            group.forEach(function(block) {
                if (block[deferredName] && _.isFunction(block[deferredName][action])) {
                    block[deferredName][action]();
                }
            });
        }
    };

    MessagesItemContainer.prototype.onhtmldestroy = function() {
        $.each(this.messagesItemBlocks, function(index, bMessagesItem) {
            bMessagesItem.destroy();
        });
        this.messagesItemBlocks = [];
    };

    /**
     * export Constructor
     */
    Jane.Block.MessagesItemContainer = MessagesItemContainer;
}());

/* ../../blocks/messages-item/messages-item-container.js end */


    /* ../../blocks/messages-item/items/messages-item-hotel.js begin */
(function() {
    /*jshint maxcomplexity:4,eqeqeq:true,maxparams:3*/

    var bMessagesItemHotel = Jane.Block.create('messages-item-hotel', {
        handlers: ['message', 'message-body', 'settings', 'labels', 'folders', 'reminders'],
        events: {
            'click .js-messages-item-hotel-debugInfo': 'debugInfo',
            'click [data-click]': 'handleClickEvent'
        }
    });

    bMessagesItemHotel.blockName = 'messages-item-hotel';

    bMessagesItemHotel.isApplyTo = function(message) {
        var hSettings = Jane.$H('settings');
        var hFolders = Jane.$H('folders');

        /**
         * XXX(masksimrv): DARIA-34271 - Ломается почта с ошибкой "cannot call method canShowEtickets of undefined"
         * Это не понятное поведение которое требует дальнейших разбирательств.
         *
         * Это позволит не падать, если нету метода canShowEtickets
         */
        if (!hSettings || !hSettings.canShowEtickets) {
            /*jshint maxcomplexity:5*/
            try {
                hSettings.canShowEtickets();
            } catch(error) {
                /**
                 * Получаем stack trace
                 * ошибки для детального разбора
                 */
                Jane.ErrorLog.sendException('Error(messages-item-hotel):[isApplyTo] Settings is undefined', error, {
                    layout: Daria.layout
                });
            }
            return false;
        }

        if (Jane.$H('message').isThread(message)) {
            return false;
        }

        return message.flags.hotel && hSettings.canShowEtickets() && message.fid && !hFolders.spamOrTrash(message.fid);
    };

    bMessagesItemHotel.dateToDay = function(date) {
        if (!(date instanceof Date)) {
            date = new Date(date);
        }
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    };

    /**
     * Возвращает true, если прошло 1 или более дней с момента checkDate
     * @param {number|string|Date} checkDate день, который нужно проверить (может быть timestamp или объект Date)
     * @return {boolean}
     */
    bMessagesItemHotel.isDateTheDayBeforeNow = function(checkDate) {
        var currentDate = new Date(Daria.now());
        checkDate = new Date(checkDate);
        return currentDate.getTime() - checkDate.getTime() >= 24 * 3600 * 1000; // Разница больше дня
    };

    /**
     * Проверяет актуальность брони гостиницы
     * @param {Object} message данные о письме
     * @param  {Object} hotelInfo данные об отеле
     * @returns {boolean}
     */
    bMessagesItemHotel.isHotelActual = function(message, hotelInfo) {
        if (this.isBookingCanceled(message)) {
            return false;
        }

        if (hotelInfo && typeof hotelInfo === 'object') {
            return !hotelInfo['cancelled_reservation'] && !this.isDateTheDayBeforeNow(hotelInfo['check-inn_timestamp']);
        }

        return true;
    };

    bMessagesItemHotel.prototype.isHotelActual = function() {
        return bMessagesItemHotel.isHotelActual(this.getHandler('message'), this.getHotelInfo());
    };

    Jane.Block.MessagesItem.registerBlock(bMessagesItemHotel);

    /**
     * @desc Определяет это письмо напоминание или обычное
     * @return {Boolean} Вернет true если письмо является напоминанием
     */
    bMessagesItemHotel.prototype.isReminder = function() {
        /**
         * TODO(maksimrv)
         * Мне кажется нужно было делать разные блоки для виджета напоминаний и виджета бронирования
         */
        return Boolean(jpath(this.getHandler('message'), '.flags.hotel_reminder')[0]);
    };

    /**
     * @desc Проверяет отменено бронирование или нет
     * @return {Boolean} Вернет true если бронирование отменено
     */
    bMessagesItemHotel.isBookingCanceled = bMessagesItemHotel.prototype.isBookingCanceled = function(message) {
        message = message || this.getHandler('message');
        return Boolean(jpath(message, '.flags.hotel_cancel')[0]);
    };

    /**
     * @desc Вывод служебной информации для
     * тестеров и менеджеров
     */
    bMessagesItemHotel.prototype.debugInfo = function() {
        var debugInfoNode = this.debugInfoNode;

        if (Daria.DEBUG !== 'hotels') {
            return;
        }

        if (!debugInfoNode) {
            debugInfoNode = Jane.tt('mail-common:messages-item-hotel-debugInfo', {
                prettify_json: JSON.stringify(jpath(this.getHandler('message-body'), '.facts.hotels')).replace(/,/g, ',\n')
            }, ['message', 'message-body', 'settings', 'labels'], this.params);

            this.debugInfoNode = debugInfoNode;
            $(this.getCacheNode()).append(debugInfoNode);
            return;
        }

        $(debugInfoNode).toggleClass('g-hidden');
    };

    /**
     * @desc Обработка событий click внутри блока
     * Используется для метрики
     */
    bMessagesItemHotel.prototype.handleClickEvent = function(event) {
        return this.handleEventByBlockMethod('click', event.currentTarget, event);
    };

    /**
     * @desc Обработка события отрисовки блока или
     * перерисовки частей блока. Нужно для обработки события
     * показа участка из шаблона
     */
    bMessagesItemHotel.prototype.handleShowEvent = function(targetNode) {
        var that = this;

        this.handleEventByBlockMethod('show', targetNode, this.params);
        $(targetNode).find('[data-show]').each(function() {
            that.handleEventByBlockMethod('show', this, this.params);
        });
    };

    /**
     * Тогглит класс, скрывающий кол-во ночей при малой ширине экрана,
     * если есть ли какой-нибудь контент в информации внизу справа (погода, инфо об отмене брони)
     * @see DARIA-33486
     */
    bMessagesItemHotel.prototype.toggleHotelNightsHiding = function() {
        var $node = $(this.getCacheNode());
        var $bottomInfo = $node.find('.js-message-item-hotel-info-bottom');
        if (!$bottomInfo.length) {
            return;
        }

        var isBottomInfoPresent = !$bottomInfo.is(':empty');
        $node.toggleClass('b-messages__message_eticket_hotel-hide-nights', isBottomInfoPresent);
    };

    /**
     * @desc Вызывает обработчики событий <event> внутри блока
     * Название обработчиков хранится в data-<event>
     *
     * @param {String} eventName The name of event
     * @param {Node} targetNode Узел на котором произошло событие и внутри которого надо искать
     * название обработчика
     *
     * <handlerParameters...> Параметры с которыми вызовется обработчик
     */
    bMessagesItemHotel.prototype.handleEventByBlockMethod = function(eventName, targetNode /*, handlerParameters...*/ ) {
        var eventHandlerName = $(targetNode).data(eventName);
        var handlerParameters = Array.prototype.slice.call(arguments, 2);

        if (this[eventHandlerName]) {
            return this[eventHandlerName].apply(this, handlerParameters);
        }
    };

    /**
     * Обработчики событий
     */
    bMessagesItemHotel.prototype.onClickMessageOpen = function() {
        this.metrika('Клик', 'Письмо');
        this.logging('Interact');
    };

    bMessagesItemHotel.prototype.onClickChangeReservation = function() {
        this.metrika('Клик', 'Изменить бронь');
        this.logging('Interact');
    };

    bMessagesItemHotel.prototype.onClickPrint = function() {
        this.metrika('Клик', 'Печать');
        this.logging('Interact');
    };

    bMessagesItemHotel.prototype.onClickDownloadAttachments = function() {
        this.metrika('Клик', 'Скачать');
        this.logging('Interact');
    };

    bMessagesItemHotel.prototype.onClickWeather = function(event) {
        this.metrika('Клик', 'Погода');
        this.logging('Interact');
        event.stopPropagation();
    };

    bMessagesItemHotel.prototype.onShowWeather = function() {
        this.toggleHotelNightsHiding();
        this.metrika('Показ', 'Погода');
    };

    bMessagesItemHotel.prototype.onShowDownloadAttachments = function() {
        this.metrika('Показ', 'Скачать');
    };

    /**
     * @desc Константы для определения типа виджета
     */
    bMessagesItemHotel.prototype.BLOCK_TYPES = {
        BOOKING: 'Виждет бронирования',
        REMINDER: 'Виджет напоминания'
    };

    /**
     * @desc Метрика для блока
     */
    bMessagesItemHotel.prototype.metrika = function() {
        var blockName = this.getBlockName();
        var blockType = this.BLOCK_TYPES[blockName];

        if (!blockType) {
            return;
        }

        var metrikaMessage = ['Hotels', blockType].concat(Array.prototype.slice.call(arguments, 0));

        Jane.c.apply(Jane, metrikaMessage);
    };

    /**
     * @desc Логирование
     * @param {String} eventName Название события
     * @param {[Object]} additionalParams Дополнительные параметры
     */
    bMessagesItemHotel.prototype.logging = function(eventName, additionalParams) {
        if (!eventName) {
            throw new Error('ErrorMessagesItemHotelLogging: Event name is missing');
        }

        eventName = Daria.supplant('MessagesItemHotel_{eventName}', {
            eventName: eventName
        });

        var logObject = $.extend({
            event: eventName,
            WIDGET: this.getBlockName(),
            uid: Daria.uid
        }, additionalParams);

        if (Daria.urlParams.logger === 'messages-item-hotel') {
            console.log('messages-item-hotel:', logObject);
        }

        Jane.ErrorLog.send(logObject);
    };

    /**
     * @desc Время отрисовки блока.
     * От запроса моделей(хендлеров) до события
     * onhtmlinit
     */
    bMessagesItemHotel.prototype.getRenderTime = function() {
        return Daria.now() - this.timestampBeforeHandlerRequest;
    };

    /**
     * HACK
     * TODO(maksimrv): Выкинуть это, когда factextract будет возвращать нам имя отправителя
     * @desc Исправление домена для Agoda, которая
     * в качетсве отправителя использует customer.service@booking.com
     * @param {String} originalDomain Домен отправителя
     * @return {String} Для Agoda возвращает имя отправителя вместо домена
     * @see DARIA-33683
     */
    bMessagesItemHotel.prototype.agodaDomainFix = function(originalDomain) {
        var senderName = jpath(this.getHandler('message'), '.field[.type == "from"].name')[0] || '';

        if (senderName === 'Agoda.ru' || senderName === 'Agoda.com') {
            return senderName;
        }

        return originalDomain;
    };

    /**
     * @desc Определение домена по отправителю или полю domain в faсts для тела письма.
     * Домен включает в себя домен верхнего уровня(com)
     * Метод отвратительный, но хорошего решения я, пока что, не вижу
     * @example fake@booking.com -> booking.com
     * @return {String} Домен сервиса бронирования гостиниц
     */
    bMessagesItemHotel.prototype.getBookingDomain = function() {
        // TODO(maksimrv:)  Сложная функция
        /*jshint maxcomplexity:5*/
        var message = this.getHandler('message');

        if (message.flags.hotel_reminder) {
            var agent = jpath(this.getHotelInfo(), '.agent')[0];
            if (agent) {
                return agent;
            }
        } else {
            var fromEmail = jpath(this.getHandler('message'), '.field[.type == "from"].email')[0] || '';
            if (Jane.FormValidation.checkEmail(fromEmail)) {
                fromEmail = fromEmail.split('@')[1].split('.');
                return this.agodaDomainFix(fromEmail.slice(fromEmail.length - 2, fromEmail.length).join('.'));
            }
        }

        return 'unknown';
    };

    /**
     * @desc Передает постфикс, сформированный из доменного имени
     */
    bMessagesItemHotel.prototype.domainDefinition = function() {
        var domainName = this.getBookingDomain();
        return domainName.split('.').join('').toLowerCase();
    };

    // TODO - нужно как-то перевести это в рамки run
    /**
     * Подмена ссылки письма напоминания на ссылку письма, к которому оно относится
     */
    bMessagesItemHotel.prototype.changeMailLink = function() {
        // TODO(maksimrv:)  Сложная функция
        /*jshint maxcomplexity:6*/
        var message = this.getHandler('message');
        var hotelInfo = this.getHotelInfo();
        if (!message.flags.hotel_reminder) {
            return;
        }

        var that = this;
        var messageContent = jpath(this.getHandler('message-body'), '.body.content')[0];
        var messageLink;
        var mid;
        if (messageContent && bMessagesItemHotel.isHotelActual(message, hotelInfo)) {
            // Получение ссылки из тела письма напоминания
            messageContent.replace(/\shref=('|")?([^"']*)('|")?/i, function(substring, subexpression1, subexpression2) {
                messageLink = subexpression2;
                return messageContent;
            });
            // Преобразование ссылки из base64 шифрования в нормальный вид
            if (messageLink) {
                messageLink = messageLink.slice(messageLink.indexOf('&amp;l=') + 7);
            }
            if (messageLink) {
                messageLink = Daria.base64UrlDecode(messageLink);
                // Получение из ссылки mid
                messageLink.replace(/ids=(.*)/, function(substring, subexpression) {
                    mid = subexpression;
                });
            }
        }

        // Проверка существования письма
        if (mid) {
            Jane.Handler.getAll(['message'], {
                ids: mid
            }, function() {
                var message = Jane.$H('message').getCache(mid);
                if (message) {
                    var $wrapper = $(that.getCacheNode());
                    // Ссылки на текущее письмо
                    var $mailLinks = $wrapper.find('.js-messages-item-hotel-link');
                    // Блок контейнера, на котором висит экшен открытия письма
                    var $mailContainer = $wrapper.find('.js-messages-item-hotel-container');
                    // Принт ссылка
                    var $printLink = $wrapper.find('.js-messages-item-hotel-print');

                    if ($mailLinks.length) {
                        $mailLinks.attr('href', Jane.Page.params2url({
                            ids: mid,
                            _page: 'message'
                        }));
                    }
                    if ($mailContainer.length) {
                        $mailContainer.attr('data-params', 'ids=' + mid);
                    }
                    if ($printLink.length) {
                        $printLink.attr('href', './print.jsx?mid=' + mid);
                    }
                }
            });
        }
    };

    var messageIsReminderLabel = 'remindme_aviaeticket'; // метка для писем, на которые созданы напоминания
    /**
     * Получение LID метки, которой будeт помечаться письма с созданным напоминанием
     */
    bMessagesItemHotel.prototype.getReminderLID = function() {
        // Чтение и кэширование LID
        if (!('_reminderLID' in bMessagesItemHotel)) {

            var hLabels = Jane.$H('labels');
            var reminderLID = hLabels.getLIDByName(messageIsReminderLabel);
            if (!reminderLID) {
                reminderLID = false;
            }
            // кешируем
            bMessagesItemHotel['_reminderLID'] = reminderLID;
        }

        return bMessagesItemHotel['_reminderLID'];
    };

    /**
     * Проверка наличия метки того, что напоминание для письма создано
     */
    bMessagesItemHotel.prototype.hasReminderLID = function() {
        var lid = this.getReminderLID();
        var message = this.getHandler('message');
        // если такой метки вообще нет - ничего не надо делать. Считаем, что она выставлена
        if (!lid) {
            return true;
        }

        return $.inArray(lid, message.lid) !== -1;
    };

    /**
     * Устанавливает метку на письмо с виджетом, у которого уже создано напоминание
     */
    bMessagesItemHotel.prototype.setReminderLabel = function(mid) {
        Jane.Handler.doAll(['do-label'], {
            lid: this.getReminderLID(),
            ids: [mid]
        });
    };

    /**
     * Установка напоминания для письма
     */
    bMessagesItemHotel.prototype.setReminder = function() {
        // TODO(maksimrv:)  Сложная функция
        /*jshint maxcomplexity:8*/

        var that = this;
        var message = this.getHandler('message');
        var hReminders = Jane.$H('reminders');
        var hotels = this.getHotelInfo();

        // Если нет данных об отеле, данных о письме или это напоминание
        if (!hotels || !message || this.isReminder()) {
            return;
        }

        var reminderId = hotels.uniq_id;

        // Не создавать напоминание, если броня анулирована и удалить его
        if (this.isBookingCanceled()) {
            hReminders.getReminder(reminderId).done(function(reminder) {
                hReminders.deleteReminder(reminder.id);
            });
            return;
        }

        // Проверка на наличие метки о напоминании
        if (this.hasReminderLID()) {
            return;
        }

        var checkInnDate = new Date(hotels['check-inn_timestamp']);
        var currentDay = new Date(Daria.now());
        checkInnDate = bMessagesItemHotel.dateToDay(checkInnDate);
        currentDay = bMessagesItemHotel.dateToDay(currentDay);

        var checkInnReminderDay = new Date(checkInnDate.getTime()); // день напоминания
        checkInnReminderDay.setDate(checkInnDate.getDate() - 1);

        // Не создавать напоминание, если время напоминания осталось в прошлом
        if (checkInnReminderDay.getTime() - currentDay.getTime() <= 0) {
            return;
        }

        // Проверка на обновление брони или несуществование напоминания
        hReminders.getReminder(reminderId).always(function(reminder) {
            var messageTimestamp = Number(message.date.timestamp);
            // Если напоминание не существует или это обновление напомиания (т.к. текущее письмо более позднее)
            if (!reminder.data || messageTimestamp > Number(reminder.data.messageDate)) {
                var hotelsData = $.extend({
                    domain: that.getBookingDomain(),
                    mid: message.mid
                }, hotels);
                hReminders.setReminder({
                    id: reminderId,
                    name: hotelsData.reservation_number,
                    reminderDate: checkInnReminderDay,
                    channels: {
                        email: {
                            subject: i18n('%Messages_Item_Hotel_Reminder_Mail_Subject', hotels.hotel),
                            bodyHtml: yr.run('mail-common', hotelsData, 'hotel-reminder')
                        }
                    },
                    data: {
                        type: 'hotel',
                        messageDate: messageTimestamp,
                        data: hotelsData
                    }
                })
                    .done(function() {
                        // Установка метки на сообщение
                        that.setReminderLabel(message.mid);
                    });
            }
        });
    };

    /**
     * @desc Возвращает данные о гостинице
     */
    bMessagesItemHotel.prototype.getHotelInfo = function() {
        return jpath(this.getHandler('message-body'), '.facts.hotels[0]')[0];
    };

    /**
     * @desc Возвращает дополнительную информацию
     * для логирования
     */
    bMessagesItemHotel.prototype.getAdditionalLogInformation = function() {
        return {
            booking_canceled: this.isBookingCanceled(),
            booking_expired: !bMessagesItemHotel.isHotelActual(this.getHandler('message'), this.getHotelInfo()),
            booking_domain: this.getBookingDomain(),
            widget_render_time: this.getRenderTime()
        };
    };

    /**
     * @desc Получает данные о погоде
     */
    bMessagesItemHotel.prototype.getWeatherInformation = function() {
        var hotelInfo = this.getHotelInfo() || {};
        var query = {
            geoid: hotelInfo.city_geoid,
            date: hotelInfo['check-inn_date']
        };
        var deferred = $.Deferred();

        if (!query.geoid || !query.date) {
            deferred.reject();
        } else {
            Jane.Handler.getAll(['weather'], query, function() {
                deferred.resolve(Jane.$H('weather').getCacheByParams(query), query);
            });
        }

        return deferred.promise();
    };

    /**
     * @desc Выводит данные о погоде
     */
    bMessagesItemHotel.prototype.renderWeatherInformation = function(weatherData, requstWeatherParams) {
        var informationNode = Jane.tt('mail-common:message-item-hotel-info-bottom', {
            'page-params': this.params,
            message: this.getHandler('message')
        }, ['message-body', 'message', 'weather'], [this.params, this.params, requstWeatherParams]);

        $(this.getCacheNode()).find('.js-message-item-hotel-info-bottom').replaceWith(informationNode);

        this.handleShowEvent(informationNode);
    };

    bMessagesItemHotel.prototype.getBlockName = function() {
        if (this.isReminder()) {
            return 'REMINDER';
        }

        return 'BOOKING';
    };

    bMessagesItemHotel.prototype.beforeHandlersRequest = function() {
        this.timestampBeforeHandlerRequest = Daria.now();
        return Jane.Block.prototype.beforeHandlersRequest.apply(this, arguments);
    };

    bMessagesItemHotel.prototype.onhtmlinit = function() {
        this.handleShowEvent(this.getCacheNode());
        this.getWeatherInformation().then(this.renderWeatherInformation.bind(this));
        this.changeMailLink();
        this.setReminder();
        this.toggleHotelNightsHiding();

        this.logging('Render', this.getAdditionalLogInformation());
    };

    /**
     * Export
     */
    Jane.Block.MessagesItemHotel = bMessagesItemHotel;
}());

/* ../../blocks/messages-item/items/messages-item-hotel.js end */

    /* ../../blocks/messages-item/items/messages-item-participants.js begin */
(function() {
    /*jshint maxcomplexity:4,eqeqeq:true,maxparams:3*/

    /**
     * Блок messages-thread-participants
     * @constructor
     */
    function bMessagesItemParticipants(name, params) {
        if (!params.tid) {
            throw new Error('MessagesItemParticipantsError: no tid passed in parameters');
        }

        this.tid = params.tid;
        Block.apply(this, arguments);
    }

    Jane.Block.add({
        name: 'messages-item-participants',
        info: {
            handlers: ['message', 'messages-thread-participants', 'filter-search', 'labels']
        },
        constructor: bMessagesItemParticipants
    });

    Jane.extend(bMessagesItemParticipants, Block);

    bMessagesItemParticipants.blockName = 'messages-item-participants';

    bMessagesItemParticipants.isApplyTo = function(message) {
        return Daria.layout === '2pane' && message.count > 1;
    };

    bMessagesItemParticipants.prefetch = function(blockInstances) {
        var prefetchDeferred = $.Deferred();

        if (Daria.themeId === '3pane') {
            return prefetchDeferred.promise().resolve();
        }

        var tids = blockInstances.map(function(block) {
            return block.tid;
        });

        var participantsRequestParams = { tids: tids };
        Jane.Handler.getAll(['messages-thread-participants'], participantsRequestParams, function() {
            var participantsCache = Jane.$H('messages-thread-participants').getCacheByParams(participantsRequestParams);
            var hMessage = Jane.$H('message');

            if (!participantsCache) {
                Jane.ErrorLog.send({
                    event: 'messages-item-participants.prefetch-failed',
                    participantsParams: participantsRequestParams
                });
                prefetchDeferred.reject();

                return;
            }

            var filteredTids = tids.filter(function(tid) {
                var message = hMessage.getCacheByParams({ids: 't' + tid});
                return message.dlid || message.dtype;
            });

            var filteredThreads = participantsCache.threads.filter(function(thread) {
                return filteredTids.indexOf(thread.threadId) > -1;
            });

            var filterSearchRequestParams = { mids: _.flatten(jpath(filteredThreads, '.participants.mid')) };
            if (filterSearchRequestParams.mids.length) {
                blockInstances.forEach(function(block) {
                    block.mids =  filterSearchRequestParams.mids;
                });
                Jane.Handler.getAll(['filter-search'], filterSearchRequestParams, function() {
                    prefetchDeferred.resolve();
                });
            } else {
                prefetchDeferred.resolve();
            }
        });

        return prefetchDeferred.promise();
    };

    bMessagesItemParticipants.prototype.onprepare = function(params) {
        var message = Jane.$H('message').getCacheByParams({ids: 't' + params.ids});
        $.extend(params, {'tids': message['tid'], 'mids': this.mids, 'ids': 't' + params.ids});

        return true;
    };

    // указание на то, что блок тредный
    // используется для присвоения блоку правильного data-id
    bMessagesItemParticipants.prototype.isThread = true;

    Jane.Block.MessagesItem.registerBlock(bMessagesItemParticipants);

    /**
     * Export
     */
    Jane.Block.MessagesItemParticipants = bMessagesItemParticipants;
}());

/* ../../blocks/messages-item/items/messages-item-participants.js end */

    /* ../../blocks/messages-item/items/messages-item-pkpass.js begin */
(function() {
    var bMessagesItemPkpass = Jane.Block.create('messages-item-pkpass', {
        handlers: ['message', 'message-body', 'settings', 'labels', 'folders'],
        events: {
            'click [data-click=onClickPrint]': 'onClickPrint',
            'click [data-click=onClickPkpass]': 'onClickPkpass'
        }
    });

    bMessagesItemPkpass.blockName = 'messages-item-pkpass';

    /**
     * Метод проверяет, есть ли в письме pkpass
     */
    bMessagesItemPkpass.hasPkpass = function(message) {

        var from = jpath(message, '/.field[.type=="from"].email')[0];
        var domain = from && from.split('@')[1];

        return (
            $.inArray(5, message.type) >= 0 &&
            $.inArray(30, message.type) >= 0 &&
            $.inArray(domain, ['rambler-co.ru', 'kassa.rambler.ru']) >= 0 &&
            message.flags.attachment
        );
    };

    bMessagesItemPkpass.prototype.hasPkpass = function() {
        return bMessagesItemPkpass.hasPkpass(this.getHandler('message'));
    };

    /**
     * Получение данных из pkpass
     */
    bMessagesItemPkpass.prototype.getData = function() {
        var message = this.getHandler('message-body');
        var pkpass = jpath(message, '/.pkpasses.pkpass')[0];

        return pkpass;
    };

    /**
     * Парсим данные pkpass
     */
    bMessagesItemPkpass.prototype.getPkpassSubject = function() {
        var pkpass = this.getData();
        var subject = jpath(pkpass, '.eventTicket.secondaryFields.value')[0];

        return subject;
    };

    bMessagesItemPkpass.prototype.getPkpassFirstline = function() {
        var pkpass = this.getData();
        var place = jpath(pkpass, '.eventTicket.secondaryFields.label')[0];
        var date = jpath(pkpass, '.eventTicket.headerFields.label')[0];

        return $.grep([date, place], function(item) {return item;}).join(', ');
    };

    bMessagesItemPkpass.prototype.getPkpassDetails = function() {
        var pkpass = this.getData();
        var details = jpath(pkpass, '.eventTicket.auxiliaryFields.value')[0];

        if (details) {
            details = details.match(/\(([^)]+)\)/);

            if (details[1]) {
                return details[1];
            }

            return details;
        }

        return details;
    };

    bMessagesItemPkpass.prototype.getPkpassDetails2 = function() {
        var pkpass = this.getData();
        var details = jpath(pkpass, '.eventTicket.auxiliaryFields.value')[0];

        if (details) {
            details = details.match(/^([^(]+)/);

            if (details[1]) {
                return details[1];
            }

            return details;
        }

        return details;
    };

    bMessagesItemPkpass.isApplyTo = function(message) {
        var hSettings = Jane.$H('settings');
        var hFolders = Jane.$H('folders');

        if (Jane.$H('message').isThread(message)) {
            return false;
        }

        return (
            bMessagesItemPkpass.hasPkpass(message) &&
            hSettings.canShowEtickets() &&
            message.fid &&
            !hFolders.spamOrTrash(message.fid)
        );
    };

    /**
     * Отправка данных в метрику
     */
    bMessagesItemPkpass.prototype.metrika = function() {
        var metrikaMessage = ['Pkpass'].concat(Array.prototype.slice.call(arguments, 0));
        Jane.c.apply(Jane, metrikaMessage);
    };

    bMessagesItemPkpass.prototype.onhtmlinit = function() {
        var pkpass = this.getData() && this.getPkpassSubject() && this.getPkpassFirstline();

        if (pkpass) {
            this.metrika('Показ');
        } else {
            this.metrika('Показ заглушки');
        }
    };

    bMessagesItemPkpass.prototype.onClickPrint = function(event) {
        this.metrika('Печать');
        event.stopPropagation();
    };

    bMessagesItemPkpass.prototype.onClickPkpass = function() {
        this.metrika('Клик на виджет');
    };

    Jane.Block.MessagesItem.registerBlock(bMessagesItemPkpass);

    /**
     * Export
     */
    Jane.Block.MessagesItemPkpass = bMessagesItemPkpass;
}());

/* ../../blocks/messages-item/items/messages-item-pkpass.js end */

}());

/* ../../blocks/messages-item/messages-item.js end */

            /* ../../blocks/messages-wrap/messages-wrap.js begin */
/* global bMessagesExceptedParams, bMessagesOnprepareRemoveThreadID */

Block.MessagesWrap = function() {
    this.constructor.superClass.constructor.apply(this, arguments);
};

Daria.extend(Block.MessagesWrap, Block.MessagesItemContainer);

Block.add({
    name: "messages-wrap",
    info: {
        handlers: {
            "folders": false,
            "labels": true,
            "messages": true,
            "settings": false
        },
        exceptedParams: bMessagesExceptedParams
    },
    constructor: Block.MessagesWrap
});

Block.MessagesWrap.prototype.onprepare = function(params) {
    var res = false;

    if (params.current_label) {
        this.info.handlers["filters"] = true;
        res = true;
    }

    if (Daria.layout !== '2pane') {
        return bMessagesOnprepareRemoveThreadID.call(this, params) || res;
    } else {
        return res;
    }
};

Block.MessagesWrap.prototype.onhtmldestroy = function() {
    this.constructor.superClass.onhtmldestroy.apply(this, arguments);
    delete this._threads;
};

Block.MessagesWrap.prototype.onhtmlinit = function(node, params) {
    /**
     * Список тредов, отрендеренных в этом списке писем.
     * @type Object
     * @private
     */
    this._threads = {};

    this.updateNavigationBlock(params);

    this.updateMessagesBlockTable(params);

    Daria.setZeroTimeout(function() {
        this.wrapMessagesToBlock();

        var messageItemsDeferreds = this.messagesItemBlocks.map(function(e) {
            return e.whenRunEnd;
        });

        $.when.apply($, messageItemsDeferreds).always(this.updateAvatars.bind(this));
    }.bind(this));

    this.redrawAviaTicketsInMessagesBlockTable(params);
};

Block.MessagesWrap.prototype.redrawAviaTicketsInMessagesBlockTable = function() {
    // TODO(maksimrv): Разобраться зачем тут setTimeout
    setTimeout(function() {
        var table = Jane.$B('messages-list-box').getActiveTable();
        var hMessage = this.getHandler('messages');
        if (table && hMessage && hMessage.message) {
            Daria.AviaETicket.redrawTable(hMessage.message, table);
        }
    }.bind(this), 1);
};

/**
 * Обновляем Table, если текущая нода уже в DOM-е (например, инвалидировался блок messages-wrap).
 * Если же это происходит инициализация нового подгруженного блока сообщений,
 * созданного через Block.make("messages-wrap"), то не обновляем список, т.к. нода еще не вставлена в DOM.
 * Список обновится потом в экшене "messages.load" после вставки новы в DOM.
 */
Block.MessagesWrap.prototype.updateMessagesBlockTable = function() {
    var node = this.getCacheNode();
    var messagesBlock = Jane.$B('messages-list-box').active;
    var $messages = $(messagesBlock.getCacheNode());

    var table = messagesBlock.table;
    if (table) {
        if ($.contains($messages[0], node)) {
            table.update();
        }
    }
};

/**
 * Обновляет блок навигации под списком писем
 */
Block.MessagesWrap.prototype.updateNavigationBlock = function(params) {
    if (Daria.layout !== "2pane") {
        return;
    }

    var messagesBlock = Jane.$B("messages-list-box").active;
    var pagerBox = messagesBlock.getBlockByName("messages-pager-box");

    if (!pagerBox) {
        return;
    }

    var pager = pagerBox.active;

    // Обновляем только пейджер с выборкой по датам
    if (pager.name !== 'messages-date-pager') {
        return;
    }

    pager.updateNav(params);
};

Block.MessagesWrap.prototype.onrepaint = function() {
    // FIXME: Попробовать асинхронность. Проблема в том, что onrepaint вызывается из run и поэтому run внутри updateChildBlocks не отрабатывает.
    setTimeout(function() {
        var messagesBlock = Jane.$B("messages-list-box").getActive();
        if (messagesBlock) {
            messagesBlock.updateChildBlocks();
        }
    }, 1);

    Jane.events.trigger("messages-date-pager.updateVisibility");
};

/**
 * Возвращает информацию о отрисованном треде.
 * @param {String} tid
 * @returns Object
 */
Block.MessagesWrap.prototype.getThreadBlock = function(tid) {
    return this._threads[tid];
};

/**
 * Возвращает информацию о отрисованном треде.
 * @param {String} tid
 * @returns Object
 */
Block.MessagesWrap.prototype.removeThreadBlock = function(tid) {
    var threadInfo = this._threads[tid];
    threadInfo.$box.remove();
    delete this._threads[tid];
};

/**
 * Добавляет информацию о отрисованном треде.
 * @param {String} tid
 */
Block.MessagesWrap.prototype.addThreadBlock = function(tid, blockInfo) {
    this._threads[tid] = blockInfo;
};

/**
 * Возвращает есть ли в списке писем открытые треды.
 * @return {Boolean}
 */
Block.MessagesWrap.prototype.hasOpenThread = function() {
    var threads = this._threads;
    for (var tid in threads) {
        if (threads[tid].open) {
            return true;
        }
    }

    return false;
};

/**
 * Проходит по всем письмам и сравнивает их с тем, что находится в хендлере.
 */
Block.MessagesWrap.prototype.checkMessagesList = function(msgKeyToRedraw) {
    var hData = this.getRawHandler('messages');
    var hIds = hData && hData.data && hData.data.ids;
    var cacheNode = this.getCacheNode();
    var insertedMessage;
    if (hIds && cacheNode) {
        insertedMessage = this._updateMessagesList(cacheNode, hIds, msgKeyToRedraw);
        this.touch();
    }
    return insertedMessage;
};

/**
 * Обновляем аватарки внутри блока
 */
Block.MessagesWrap.prototype.updateAvatars = function() {
    Daria.SocialAvatarsMessages(this.getCacheNode(), this.params);
};

/**
 * TODO(maksimrv): Сложно тестировать
 * эту функцию из-за жесткой привязки к Node(DOM) интерфейсу
 *
 * Специальная функция к checkMessagesList.
 * @param {Node} node
 * @param {Object} ids
 * @private
 */
Block.MessagesWrap.prototype._updateMessagesList = function(node, ids, msgKeyToRedraw) {
    // просто по всем нодам ходить нельзя, потому что там есть пейджер
    var messageNodes = $(node).children().children('.js-message, .js-message-item');
    var hIndex = 0;

    var newNode;

    for (var i = 0, j = messageNodes.length; i < j; i++) {
        var message = messageNodes[i];
        var msgKey = message.getAttribute('data-id');
        var threadKey = 't' + msgKey;
        var validMsgKey = ids[hIndex];

        // это может быть как письмо, так и тред
        if (msgKey !== validMsgKey && threadKey !== validMsgKey || validMsgKey === msgKeyToRedraw) {
            // если индекс 0 - добавляемое письмо
            if (hIndex === 0) {
                newNode = Jane.tt('mail-common:new-xiva-message', {
                    'page-params': Jane.Page.params
                }, ['folders', 'labels', 'message', 'settings'], {ids: validMsgKey});
                message.parentNode.insertBefore(newNode, message);
                // откатываемся назад
                i--;

                // Пытаемся создать виджет на основе полученного письма
                var messageCache = Jane.$H('message').getCache(validMsgKey);
                var messageBlock = Jane.Block.MessagesItem.wrapMessageToBlock(messageCache, node);
                // это виджет
                if (messageBlock && messageBlock.whenRunEnd) {
                    messageBlock.whenRunEnd.then(this.updateAvatars.bind(this));
                }
                this.addMessageItemBlock(messageBlock);

            } else {
                // остальные письма - удаляем
                Jane.DOM.removeNode(message);
                hIndex--;
            }
        }
        hIndex++;
    }

    return newNode;
};

/* ../../blocks/messages-wrap/messages-wrap.js end */

                /* ../../blocks/messages/messages.js begin */
(function() {
    /* global bMessagesExceptedParams, bMessagesOnprepareRemoveThreadID */

    Block.Messages = function() {
        Block.apply(this, arguments);

        // Массив с блоками messages-wrap
        this.childBlocks = [];
    };

    Daria.extend(Block.Messages, Block);

    var blocks = ['messages-title', 'messages-wrap'];
    if (Daria.layout === '2pane') {
        blocks.push('messages-pager-box');
    }

    Block.add({
        name: "messages",
        info: {
            // Берем параметры из хэндлера messages, в том числе, значения по-умолчинию (DARIA-13938)
            params: $.extend({}, Jane.$H('messages').params),
            blocks: blocks,
            exceptedParams: bMessagesExceptedParams,
            handlers: ['messages-sort'],
            events: {
                'resize window': 'onwindowresize',
                'scroll .b-layout__inner.b-layout__inner_type_messages': 'onmessagesscroll'
            }
        },
        constructor: Block.Messages
    });

    /* ------------------------------------------------------------------------------------------------------------- */

// Добавляем или удаляем из запроса параметр threaded,  в зависимости от текущих настроек.
    /*Block.Messages.prototype.rewriteParams = function(params) {
        var fids = Jane.$H("folders").ids;
        var id = params["current_folder"];
        if (Jane.$H("settings").isThreaded() && id && id != fids.spam && id != fids.trash && id != fids.draft) {
            params.threaded = 'yes';
        } else {
            delete params["threaded"];
        }

    };*/

    Block.Messages.prototype.onbeforedestroy = function() {
        for (var i = 0, j = this.childBlocks.length; i < j; i++) {
            this.childBlocks[i].destroy();
        }
        this.childBlocks = [];
    };

    Block.Messages.prototype.onprepare = function(params) {
        var dateRegExp = /^((\d{2})\.)?(\d{4})$/;

        if (dateRegExp.test(params.datePager)) {

            var incDate = Daria.MessagesPager.incDate;
            var decDate = Daria.MessagesPager.decDate;

            var date = params["datePager"].match(dateRegExp);
            var year = date[3];
            var month = date[2];

            // Выборка по месяцам
            if (month) {
                var prev = decDate(year, month);
                var next = incDate(year, month);

                params.prevDateId = prev[1] + prev[0];
                params.nextDateId = next[1] + next[0];
                params.currentDateId = month + year;
            } else {
                // Выборка за год
                params.prevDateId = parseInt(year, 10) - 1;
                params.nextDateId = parseInt(year, 10) + 1;
                params.currentDateId = year;
            }

        }

        return false;
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    Block.Messages.prototype.onhtmlinit = function(node, params) {
        this.node = node;
        var $scrollArea = (Daria.layout == '2pane') ? $(window) : $(node).find('.b-layout__inner:first');
        var table = this.table = new MessagesTable(this, $scrollArea);

        if (Daria.layout != '2pane') {
            table.getScrollArea().scroll(function() {
                // BUGFIX: эта проверка нужна из-за IE, кидающего странные события onscroll во время отрисовки страницы
                if (table.hasVerticalScroll()) {
                    var bottomMargin = this.scrollHeight - this.offsetHeight - this.scrollTop;
                    if (bottomMargin < MessagesTable.LOAD_NEXT_PAGE_PADDING) {
                        Jane.Actions.run('messages.load');
                    }
                }
            }.lazy(1));
        }

        var notFoundSelector = '.b-search-not-found input[name=text]';
        var pagerSearchSelector = '.js-pager-search input[name=text]';

        var selector = notFoundSelector + ',' + pagerSearchSelector;

        $(node)
            .on('focus', selector, function() {
                var autocompleter = Daria.Autocompleter.getSearch();

                autocompleter.setOptions({
                    position: null,
                    width: null,
                    additionalClass: '',
                    doubleOrient: true,
                    onresult: null
                });

                autocompleter.bindField({
                    field: this,
                    focus: 1
                });
            })
            .on('result', selector, function() {
                $(this).closest('FORM').submit();
            });

        // Показали страницу "Ничего не найдено"
        if ($(notFoundSelector).length) {
            Jane.c(["Пейджер по датам", "Ничего не нашлось"]);
        } else
        // Показываем выборку по датам
        if (params.datePager) {
            Jane.c(["Пейджер по датам", "Страница с результатами поиска"]);
        }

        $(this.node).on('click.attachments', '.b-messages__attachments-line .b-file', function() {
            var fileTypeInfo = $(this).data('filetype');
            if (!fileTypeInfo) {
                return;
            }
            var info = parseFileInfo(fileTypeInfo);
            Jane.c('Аттачи в списке писем', 'Превьюшки', 'Превью ' + info.fileClass, info.fileExt, 'Клик');
        });

        this.fillAttachmentsBinded = this.fillAttachments.bind(this);
        if (!Jane.$H('settings').isSet('disable_inboxattachs')) {
            if (!Jane.watcher.get('messages.shows-logged') && !Jane.$H('account-information').hasSid(669)) {
                Jane.ErrorLog.send({
                    type: 'inbox-messages-shows',
                    uid: Daria.uid,
                    messagesPerPage: Jane.$H('settings').getSetting('messages_per_page')
                });
                Jane.watcher.set('messages.shows-logged', true);
            }
        }
    };

    Block.Messages.closeAttachmentDialog = function() {
        if (Daria.Dialog.isOpen() && Daria.Dialog.params && Daria.Dialog.params.name === 'inbox-attachments-popup') {
            Daria.Dialog.close();
        }
    };

    Block.Messages.prototype.onwindowresize = Block.Messages.closeAttachmentDialog;

    Block.Messages.prototype.onmessagesscroll = function() {
        if (Daria.layout !== '2pane') {
            Block.Messages.closeAttachmentDialog();
        }
    };

    Block.Messages.resizeAttachmentPreviewImage = function() {
        var realHeight;
        if (this.width * 3 > this.height * 4) {
            this.height = 54;
            realHeight = 54;
        } else {
            realHeight = this.height * (72 / (this.width || 1));
            this.width = 72;
        }
        var delta = Math.round((realHeight - 54) / 2);
        $(this).css('margin-top', -delta).addClass('b-loaded');
    };

    Block.Messages.prototype.fillAttachments = function() {
        var that = this;
        Daria.setZeroTimeout(function() {
            var $attaches;
            if (Jane.Page.params['extra_cond'] === 'only_atta') {
                $attaches = $(that.node).find('.b-messages__message_inline-preview_in-attach .js-messages__attachments-need-proc');
            } else {
                $attaches = $(that.node).find('.b-messages__message_inline-preview.b-messages__message_unread .js-messages__attachments-need-proc');
            }
            var boundPreviewCount = Math.max(Math.round(($(that.node).find('.b-messages__message').width() * 0.55) / 72) + 1, 2);

            $attaches.each(function() {
                var $attach = $(this);
                $attach.removeClass('js-messages__attachments-need-proc');

                var $message = $attach.closest('.b-messages__message');
                var mid = $message.data('id');

                if (!mid || typeof mid !== 'string') {
                    return;
                }

                Handler.getAll(['message-body'], { ids: mid }, (function(mid) {
                    var params = { mid: mid, ids: mid, previewCount: boundPreviewCount };
                    var html = Jane.tt('mail-common:message-attachments-line', params, ['message-body'], { ids: mid });
                    var $html = $(html);

                    if ($html.children().length === 0) {
                        if (Jane.Page.params['extra_cond'] === 'only_atta') {
                            $message.removeClass('b-messages__message_inline-preview_in-attach');
                        } else {
                            $message.removeClass('b-messages__message_inline-preview');
                        }
                        return;
                    }

                    var imageLoadPromises = [];
                    var $previews = $html.find('.b-file__pic__image').not('.b-file__pic_player .b-file__pic__image');

                    $.each($previews, function() {
                        var dfd = $.Deferred();
                        $(this).on('load.imgloader error.imgloader', function(e) {
                            $(this).off('.imgloader');
                            if (e.type === 'error') {
                                $(this).closest('.b-file').remove();
                            }
                            dfd.resolve();
                        });
                        imageLoadPromises.push(dfd);
                    });

                    $.when.apply($, imageLoadPromises).always(function() {
                        $previews.each(Block.Messages.resizeAttachmentPreviewImage);
                        $html.removeClass('b-messages__attachments__loading');
                    });

                    $html.find('.b-file').each(function() {
                        var fileTypeInfo = $(this).data('filetype');
                        if (!fileTypeInfo) {
                            return;
                        }
                        var info = parseFileInfo(fileTypeInfo);
                        Jane.c('Аттачи в списке писем', 'Превьюшки', 'Превью ' + info.fileClass, info.fileExt, 'Показ');
                    });

                    $attach.html(html);

                    if (imageLoadPromises.length === 0) {
                        Daria.setZeroTimeout(function() {
                            $html.removeClass('b-messages__attachments__loading');
                        });
                    }
                }).bind(this, mid));
            });

            if ($attaches.length > 0 && !Jane.watcher.get('messages.attachments-logged') && !Jane.$H('account-information').hasSid(669)) {
                Jane.ErrorLog.send({
                    type: 'inbox-messages-shows-attachs',
                    uid: Daria.uid,
                    messagesPerPage: Jane.$H('settings').getSetting('messages_per_page')
                });
                Jane.watcher.set('messages.attachments-logged', true);
            }
        });
    };

    Block.Messages.prototype.fillMessagesList = function() {
        var that = this;
        if (!this.table.hasVerticalScroll()) {
            Daria.setZeroTimeout(function() {
                Jane.Actions.run('messages.load', {
                    callback: that.fillMessagesList.bind(that)
                });
            });
        }
    };

// При увеличении окна браузера проверяем, нужно ли догрузить письма в текущий активный список
// Также изменяем ширину прибитого тулбара в списке писем
    if (Daria.layout !== '2pane') {
        $(window).on('resize', function() {
            var bMessages = Jane.Block.trigger('messages-list-box', 'getActive');
            if (bMessages && bMessages.visible) {
                bMessages.table.headline.updateWidth();
                bMessages.fillMessagesList();
                // Обновляем сплиттер, т.к. при уменьшении окна левая колонка может стать меньше минимальной ширины
                if (Daria.layout === '3pane-vertical') {
                    Jane.Block.Mail.splitter.update();
                }
            }
        }.lazy(50));
    }

    Block.Messages.prototype.getAllBlocks = function() {
        var children = [];
        for (var i = 0, j = this.blocks.length; i < j; i++) {
            if (this.blocks[i].name == 'messages-wrap') {
                children.push(this.blocks[i]);
                break;
            }
        }
        children = children.concat(this.childBlocks);
        return children;
    };

    /**
     * Возвращает информацию об отрисованном треде.
     * @param {String} tid
     * @returns Object
     */
    Block.Messages.prototype.getThreadBlock = function(tid) {
        var blocks = this.getAllBlocks();
        for (var i = 0, j = blocks.length; i < j; i++) {
            var thread = blocks[i].getThreadBlock(tid);
            if (thread) {
                return thread;
            }
        }

        return null;
    };

    Block.Messages.prototype.removeThreadBlock = function(tid) {
        var blocks = this.getAllBlocks();
        for (var i = 0, j = blocks.length; i < j; i++) {
            var thread = blocks[i].getThreadBlock(tid);
            if (thread) {
                blocks[i].removeThreadBlock(tid);
                return thread;
            }
        }

        return null;
    };

    /**
     * Добавлеяет информацию об отрисованном треде.
     * @param {String} tid
     */
    Block.Messages.prototype.addThreadBlock = function(tid, bMessageWrapNode, blockInfo) {
        var blocks = this.getAllBlocks();
        if (bMessageWrapNode) {
            for (var i = 0, j = blocks.length; i < j; i++) {
                var cacheNode = blocks[i].getCacheNode();
                // если это одни и та же нода, то тред попал в нее
                if (cacheNode == bMessageWrapNode) {
                    blocks[i].addThreadBlock(tid, blockInfo);
                    return true;
                }
            }
        } else {
            blocks[0].addThreadBlock(tid, blockInfo);
        }
        return false;
    };

    Block.Messages.prototype.onhtmldestroy = function() {
        delete this.table;
        delete this._directNode;
        delete Jane.$B("messages-list-box")._selectedCounts[this.key];
        this.childBlocks = [];

        $(this.node).off('.attachments');
        Jane.events.unbind('currentFolder.change', this._logHandler);
    };

    Block.Messages.prototype.onMessageAction = function(action, params) {
        if (params.action === 'unmark') {
            this.fillAttachments();
        }
        Block.Messages.closeAttachmentDialog();
    };

    Block.Messages.prototype.onhide = function() {
        // убираем выделение в 3pane, оно поставится при показе письма, если надо
        if (Daria.layout != '2pane' && this.table && this.table.curRowId) {
            this.table.unsetCurrent(this.table.curRowId);
            this.table.curRowId = null;
        }

        if (this.onPageUnload) {
            Jane.events.unbind('pageunload', this.onPageUnload);
        }

        if (this.cache && this.cache.valid && this.params.extra_cond === 'only_new' && Daria.themeId === '3pane') {
            Jane.$H('messages').clearUnreadsList();
        }

        Jane.events.unbind('messages-attachments.check', this.fillAttachmentsBinded);
        Jane.events.unbind('messages-date-pager.updateVisibility', this.fillAttachmentsBinded);
        Jane.events.unbind('message.action.complete', this.onMessageActionBinded);
    };

    Block.Messages.prototype.onshow = function(params, timings) {
        this.logTimings(timings);
        var table = this.table;

        // Показываем инфолайн об отравленных письмах, если последнее письмо было отправлено менее 5 минут назад (DARIA-14508)
        var fid = params['current_folder'];
        if (fid && Jane.$H('folders').isFolder(fid, 'sent')) {
            var infoline = Daria.getCookie('msgsent') ? i18n('%Messages_Infoline_Письма_появятся') : '';
            table.infoline.changeContent(infoline);
        }

        // Обновляем режим работы с выделенными письмами (включаем/отключаем кнопки тулбара)
        table.updateFolderActionsMode();

        // Логируем показы поисковых результатов
        if (params.search === 'yes') {
            Jane.c(71203, 'search.show');
        }

        // т.к. кеш не чистится из экшена, то надо его прочистить, когда блок скрывается
        // в 3pane вызывается при переходе по непрочитанным письмам, в результате письма пропадают сразу после прочтения
        // для 3pane сброс делаем в onhide
        if (this.cache && this.cache.valid && this.params.extra_cond === 'only_new' && Daria.themeId !== '3pane') {
            this.onPageUnload = function() {
                // @see actions/message/show.js
                // не чистим кэш списка сообщений от прочитанных при переходе по списку не прочитанных в 3pane
                if (!Jane.Page.params.no_clear_reads) {
                    Jane.$H('messages').clearUnreadsList();
                }
            };
            Jane.events.bind('pageunload', this.onPageUnload);
        }

        Jane.events.bind('messages-date-pager.updateVisibility', this.fillAttachmentsBinded);
        Jane.events.bind('messages-attachments.check', this.fillAttachmentsBinded);
        Jane.events.bind('message.action.complete', this.onMessageActionBinded = this.onMessageAction.bind(this));

        this.fillAttachments();

        if (Jane.Page.params.search === 'yes' &&
            Jane.Page.params.type &&
            Jane.$H('messages').getCacheByPageParams().message.length === 0
        ) {
            var newPageParams = _(Jane.Page.params).clone();
            newPageParams.request = encodeURIComponent(newPageParams.request);
            delete newPageParams.type;

            _.defer(function() {
                //Jane.watcher.set('search-options:filter-id', null);
                Jane.watcher.set('messages:drop-filter', Jane.Page.params.type);

                Actions.run('search', {
                    url: Page.params2url(newPageParams)
                });
            });
        }
    };

    Block.Messages.prototype.onrepaint = function(params) {
        var messagesCount = jpath(Jane.$H('messages').getCacheByParams(params), '.message').length;
        var currentFolderSpam = Jane.$H('folders').isFolder(params.current_folder, ['spam']);
        var fid = this.params.fid || this.params.current_folder;

        if (messagesCount > 0 && currentFolderSpam && !this.spamBlock) {
            var html = Jane.tt('mail-common:spam-clear', { fid: fid});
            $('.b-toolbar-hr', this.node).after(html);
            this.spamBlock = true;
        } else if (messagesCount === 0 && this.spamBlock) {
            this.spamBlock = false;
            $('.b-intruder_spam', this.node).remove();

        }

        if (Jane.watcher.get('messages:drop-filter')) {
            if (!Jane.Page.params.type && Jane.Page.params.search === 'yes') {
                var filterId = Jane.watcher.get('messages:drop-filter');

                var typeCache = Jane.$H('messages-title-types-filter').getCache().typesInFilter;
                var filterInfo = _(typeCache).findWhere({ type: String(filterId) });

                $(this.node).find('.js-infoline-bad-try').removeClass('g-hidden')
                    .find('.js-infoline-placeholder').text(filterInfo.label);
            }
            Jane.watcher.set('messages:drop-filter', null);
        }

        var Table = Daria.Table;
        var table = Table.active = this.table;

        // это нельзя делать как раньше в onhtmlinit, потому что он не рефрешится, т.к. не зависит от хендлеров
        // а вот repaint - правильное место, при переходах и обновлениях (без инвалидации) все будет сохраняться
        var restoreCheckboxes = Table.restoreCheckboxes;
        // Если есть чекбоксы для восстановления после рефреша через xiva.
        if (restoreCheckboxes) {
            // миды помечаем так
            if (restoreCheckboxes.mids) {
                table.syncRows(restoreCheckboxes.mids, true);
            }
            // для тидов маленькая хитрость - в начало надо подставить 't'
            if (restoreCheckboxes.tids) {
                $.each(restoreCheckboxes.tids, function(i, value) {
                    table.syncRow('t' + value, true);
                });
            }

            delete Daria.Table.restoreCheckboxes;
        }
        // всегда выставляем правильный count
        table.onCountChange();

        if (Daria.layout == '2pane') {
            //Скрываем заголовок если нет писем DARIA-13952
            //Table.active.$headline.toggleClass("g-hidden", empty_list);
            // DARIA-13008
            var empty_list = !table.rows.length;
            var pageInfo = Jane.$H('messages').getPageInfo(params);
            var childBlocks = this.childBlocks;

            if (params.current_label && empty_list) {
                Jane.c(["Промо меток", "Писем с такой меткой нет", "показ блока"]);
            }

            if (pageInfo.next > 2 && childBlocks.length) {
                var $node = $(this.getCacheNode());
                var frag = document.createDocumentFragment();

                for (var i = 0, len = childBlocks.length; i < len; i++) {
                    frag.appendChild(childBlocks[i].getCacheNode());
                }

                $node.find('.block-messages-wrap:last').after(frag);
                table.update();
            }
        } else {
            // Если писем не найдено, то включаем "режим одной панели" в 3pane (DARIA-13117)
            var noMessages = Jane.$H('messages').isEmptyList(params);
            if (!noMessages) {
                // Догружаем список писем в 3pane, может быть список не заполнил весь экран
                this.fillMessagesList();
            }

            Jane.Block.Mail.splitter.toggleOnePaneMode(noMessages);

            // Ищем данное письмо в списке и выделяем его
            var msgId;
            if (params.ids) {
                msgId = params.ids;

            } else if (params.thread_id) {
                msgId = 't' + params.thread_id;
            }

            if (table && msgId) {
                var row = table.getRow(msgId);
                if (!row) {
                    // Возможно, данное сообщение находится в треде
                    var tid = Jane.$H('message').getThreadId(params.ids);
                    if (tid) {
                        row = table.getRow('t' + tid);
                    }
                }
                if (row) {
                    // Выделяем текущее письмо, но не открываем его, т.к. оно уже открыто
                    table.moveCurrentTo(row.id, false, Daria.Table.DENY);
                    // moveCurrentTo не отработал и надо просто выделить строку
                    if (msgId == table.curRowId) {
                        table.setCurrent(msgId);
                    }
                }

            } else if (table.curRowId) {
                table.unsetCurrent(table.curRowId);
                table.curRowId = null;
            }
        }

        this.fillAttachments();
    };

    Block.Messages.prototype.isThreadOpen = function(tid) {
        var thread = this.getThreadBlock(tid);
        return thread && thread.open;
    };

    /**
     * Возвращает есть ли в списке писем открытые треды.
     * @return {Boolean}
     */
    Block.Messages.prototype.hasOpenThread = function() {
        var blocks = this.getAllBlocks();
        for (var i = 0, j = blocks.length; i < j; i++) {
            if (blocks[i].hasOpenThread()) {
                return true;
            }
        }

        return false;
    };

    /**
     * Метод обновляет статус дочерних блоков
     */
    Block.Messages.prototype.updateChildBlocks = function() {
        var i = this.childBlocks.length;
        var that = this;
        while (i--) {
            var block = this.childBlocks[i];
            var node = block && block.getCacheNode();
            if (node) {
                var rect = Daria.Dimensions.rect(node);

                // Если блок в зоне видимости, обновляем его
                //TODO: стабильно и точно определять isRunning можно как Daria.Run.current.indexOf(block) > -1
                if ((rect.top > 0 || rect.bottom > 0) && !(block.isCached() || block.isRunning)) {

                    // console.log(i , " ", rect.top, " ", rect.bottom);

                    // Не дёргаём run() пока не отработает предыдущий
                    // run может выполнится синхронно, если его кто-нибудь прибьет, поэтому true надо ставить раньше
                    block.isRunning = true;

                    updateChild(block, i);
                }
            }
        }

        function updateChild(/**Jane.Block*/b, i) {
            //onerror: если ран кто-то прибьет, то его все равно надо отпустить
            b.run(b.params, stopRun, {onerror: stopRun});
            function stopRun() {
                b.isRunning = false;
                var messagesKey = b.getHandlerKey('messages');
                // если после обновления блок получается пустой
                if (messagesKey && Jane.$H('messages').isEmptyList(messagesKey)) {
                    // удаляем блок из списка
                    that.childBlocks.splice(i, 1);
                    Jane.DOM.removeNode(b.getCacheNode());
                }
            }
        }
    };

    /**
     * Проходит по всем письмам и сравнивает их с тем, что находится в хендлере.
     * Дjбавляет и удаляет ноды, если надо.
     * Вызывается после добавления нового письма из ксивы.
     */
    Block.Messages.prototype.checkMessagesList = function(msgKeyToRedraw) {
        var blocks = this.getAllBlocks();
        var insertedMessage;
        for (var i = 0, j = blocks.length; i < j; i++) {
            insertedMessage = insertedMessage || blocks[i].checkMessagesList(msgKeyToRedraw);
        }
        return insertedMessage;
    };

    /**
     * Возвращает ID полоски директа.
     * @return {jQuery}
     */
    Block.Messages.prototype.getDirectPlace = function() {
        if (!this._directNode) {
            var node = this.getCacheNode();
            if (node) {
                /**
                 * ID полоски директа
                 * @type {jQuery}
                 * @private
                 */
                this._directNode = $(node).find('> * > .b-direct');
            }
        }

        return this._directNode;
    };

// При скролле обновляем блоки, попавшие в область видимости
// FIXME: Навешивать обработчик при показе блока и убирать его при скрытии
    $(window).scroll(function() {
        var messagesListBlock = Jane.$B('messages-list-box');
        var messagesBlock = messagesListBlock && messagesListBlock.active;
        if (messagesBlock && messagesBlock.visible) {
            messagesBlock.updateChildBlocks();
            var params = Daria.Page.params;
            if (
                Daria.layout == '2pane' &&
                    params.datePager && !params.search &&
                    $('.block-messages-pager-box', messagesBlock.getCacheNode()).rect().top < $(window).height() - 30
                ) {
                Jane.Actions.run('messages.load');
            }
        }
    }.lazy(50));

    /* ------------------------------------------------------------------------------------------------------------- */

// TODO: Зачем нам отдельный MessagesTable, если Table мы не используем нигде, кроме списка писем?
    var MessagesTable = function() {
        // Вызываем конструктор базового класса
        MessagesTable.superClass.constructor.apply(this, arguments);
    };

// Паддинг в пикселях для загрузки новой порции сообщений
    MessagesTable.LOAD_NEXT_PAGE_PADDING = 300;

    Daria.extend(MessagesTable, Daria.Table);

    MessagesTable.prototype.getCheckboxTree = function(id) {
        var tr = this.getRow(id);

        // если нет такого треда
        if (!tr) {
            return;
        }

        var $tr = $(tr.tr);

        if ($tr.parent().hasClass('block-thread')) {
            // Это письмо в развернутом треде
            var tid = 't' + $tr.closest(".block-thread").attr("data-tid");
            return this.checkboxTree.items[tid].items[id];
        } else {
            // Это обычное письмо или заголовок треда
            return this.checkboxTree.items[id];
        }
    };

    MessagesTable.prototype.openThread = function() {
        this.toggleThread('open');
    };

    MessagesTable.prototype.closeThread = function() {
        this.toggleThread('close');
    };

    MessagesTable.prototype.toggleThread = function(action) {
        var id = this.curRowId;
        if (!id) {
            return;
        }

        this.openCurrentLazy.reset();
        var tr = this.getRow(id).tr;
        var $tr = $(tr);

        if ($tr.parent().hasClass('block-thread') && action === 'close') {
            // Это письмо в развернутом треде
            this.moveCurrentToRoot();
        } else if ($tr.hasClass("b-messages__message_thread")) {
            // Это заголовок треда
            var thread = Jane.$B("messages-list-box").getActive().getThreadBlock(id);
            if ((action === 'open' && thread && thread.open) || (action === 'close' && !(thread && thread.open))) {
                return;
            }
            var $link = $(tr).find(".b-messages__message__link");
            Daria.click($link);
        }
    };

    /**
     * Возвращает данные о чекнутых письмах и тредах
     * Возвращает объект {ids: [], mids: [], tids: []}
     * @param {Object} [force_ids]
     * @return {Object}
     */
    MessagesTable.prototype.getIDs = function(force_ids) {
        //сюда приходят все чекнутые письма, над которыми надо провести действия (тредов нет)
        var ids = [];

        // чекнутые письма внутри треда (это небольшой хак, который используется в actions mark/unmark)
        var tids_ids = [];

        //это всё, что не тиды (эти данные надо отправлять в do-хендлеры)
        var mids = [];
        //сюда - айдишники тредов  (эти данные надо отправлять в do-хендлеры)
        var tids = [];

        var context = this.checkboxTree.items;

        var filter_checked = function(el) {
            return el.checked;
        };
        var filter_force = function(el) {
            return el.id in force_ids;
        };

        var filter = filter_checked;
        if (force_ids) {
            filter = filter_force;
        }

        var iterate = function() {
            var checked = filter(this);
            var items = this.items;

            var id = this.id;
            if (checked) {
                if (items) {
                    //отрезаем t от ID треда
                    tids.push(id.slice(1));
                } else {
                    mids.push(id);
                    ids.push(id);
                }
            }
            // Если тред
            if (this.total > 1) {
                $.each(items, function() {
                    if (filter(this)) {
                        var id = this.id;
                        ids.push(id);
                        tids_ids.push(id);
                        if (!checked) {
                            mids.push(id);
                        }
                    }
                });
            }

        };

        $.each(context, iterate);

        //для 3pane добавляем в список выбранных текущее письмо, если ничего не выбрано
        var paramsIDs = Page.params.ids;
        if (Daria.layout != '2pane' && paramsIDs && this.checkboxTree.count === 0) {
            ids.push(paramsIDs);
            mids.push(paramsIDs);
        }

        return {
            ids: ids,
            mids: mids,
            tids: tids,
            tids_ids: tids_ids
        };
    };

    /**
     * Выбираем из дерева ближайшее письмо к данным.
     * Метод нужен, чтобы после удаления перейти к другому письму.
     * @param {Object} [ids]
     * @param {Array} ids.mids
     * @param {Array} ids.tids
     */
    MessagesTable.prototype.getNearestMessage = function(ids) {
        if (!ids) {
            ids = this.getIDs();
        }

        // находим позицию самого верхнего письма
        var topMsg = {
            position: Number.POSITIVE_INFINITY,
            //судя просто собирается все id в хеш, чтобы потом просто понять есть такой или нет
            ids: {}
        };
        this._getMinPos(ids.mids, topMsg);
        this._getMinPos(ids.tids, topMsg, 't');

        var position = topMsg.position;
        //позиция больше 0
        if (typeof position == 'number') {
            //если position>0, то идем вверх, иначе вниз
            var step = position ? -1 : 1;
            while (true) {
                //берем предыдущую позицию
                var prev = this.rows[position + step];
                //если ничего нет (дошли до конца)
                if (!prev) {
                    return null;
                }
                // если такая уже есть в выбранных письмах, то идем дальш
                if (prev.id in topMsg.ids) {
                    position += step;

                } else {
                    return prev;
                }
            }
        }

        return null;
    };

    MessagesTable.prototype._getMinPos = function(ids, result, prefix) {
        prefix = prefix || '';
        for (var i = 0, j = ids.length; i < j; i++) {
            var id = prefix + ids[i];
            var pos = this.rowsHash[id];
            if (pos < result.position) {
                result.position = pos;
            }
            result.ids[id] = null;
        }

        return result;
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    if (Daria.layout == '2pane') {
        Block.Messages.prototype.beforeHandlersRequest = function(params) {
            var BLOCK_STATUS = Daria.Run.BLOCK_STATUS;
            var hash = Jane.Page.loadingHash;

            // Отыркли ссылку 3pane в 2pane
            if ((hash.indexOf('folder') > -1 || hash.indexOf('inbox') > -1) && hash.indexOf('/message/') > -1) {
                var parts = hash.split('/');
                // в params параметры приходят криво
                // url = #folder/2220000970042144347/message/2220000002803918266
                // params = {current_folder: "2220000970042144347", message: "", 2220000002803918266: "", _page: "messages", _service: "mail", showDatePager: "yes"}
                var mid = parts.pop();
                params.__redirectTo = Jane.Page.params2url({
                    _page: 'message',
                    ids: mid
                });
                return BLOCK_STATUS.REDIRECT;
            } else if (params.extra_cond == 'only_new') {
                // DARIA-21848
                var cache = Jane.$H('messages').getCacheByParams(params);

//            console.log('DARIA-21848', this.key, JSON.parse(JSON.stringify(params)), cache);
                if (cache) {
                    var lastPage = parseInt(jpath(cache, '.details.pager.pages-count')[0], 10) || 1;
                    var currentPage = parseInt(jpath(cache, '.details.params.page')[0], 10);

//                console.log('DARIA-21848', this.key, 'lastPage=' + lastPage, 'currentPage=' + currentPage);
                    // если текущая страница вышла за пейджер
                    if (currentPage > lastPage) {
                        // перекидываем на последнюю страницу
                        var paramsCopy = $.extend({}, params);
                        paramsCopy.page_number = lastPage;
//                    console.log('DARIA-21848', this.key, 'redirect', Jane.Page.params2url(paramsCopy));
                        params.__redirectTo = Jane.Page.params2url(paramsCopy);
                        return BLOCK_STATUS.REDIRECT;
                    }

                } else {
                    return BLOCK_STATUS.REQUEST_AND_RETURN;
                }
            }

            // при переходе из диска в почту
            // одновременно запрашивается folders и messages, folders не успевает записать в кэш,
            // и запрос к messages строится без информации о папке
            // current_folder содержит пустую строку в Page.params и в ключе данных messages
            // в результате getPageByParams не возвращает данные
            // Page.params должен содержать fid инбокса
            if (params.current_folder === '') {
                var inbox = Jane.$H('folders').ids.inbox;

                params.current_folder = inbox;
                params['__extraRequest'] = {
                    handlers: ['folders', 'messages'], // folders не обязательно
                    params: params
                };

                return BLOCK_STATUS.REQUEST_AND_RETURN;
            }

            return BLOCK_STATUS.OK;
        };

    } else {
        Block.Messages.prototype.onprepare = bMessagesOnprepareRemoveThreadID;

        Block.Messages.prototype.beforeHandlersRequest = function(params) {
//        console.log('beforeHandlersRequest', $.extend({}, params), $.extend({}, this.params), this.key);

            var BLOCK_STATUS = Daria.Run.BLOCK_STATUS;

            if (params.ids || params['_thread_id']) {
//            console.log('BLOCK_STATUS.OK', 'msg in params');
                return BLOCK_STATUS.OK;
            }

            var hMessages = Jane.$H('messages');
            var hSettings = Jane.$H('settings');

            var currentCache = hMessages.getCacheByParams(params);
            if (currentCache) {
                var lastOpenMsg = hSettings.getLOMByParams(params);
                //  если параметр неправильный, то ничего не открываем
                if (lastOpenMsg === false) {
                    return BLOCK_STATUS.OK;
                }
                var firstMsg;
                var redirectUrl;

                if (lastOpenMsg) {
                    var isThread = lastOpenMsg.charAt(0) == 't';
                    var mid = isThread ? lastOpenMsg.slice(1) : lastOpenMsg;
                    var type = isThread ? 'thread' : 'message';
                    var idName = isThread ? 'tid' : 'mid';

                    if (this.table) {
                        firstMsg = this.table.getRow(lastOpenMsg);
                        if (firstMsg) {
                            redirectUrl = Daria.Page.params2url(params) + '/' + type + '/' + mid;
                        }
                    }
                    if (!redirectUrl) {
                        // проверяем что сохраненный lastOpenMsg есть на первом экране
                        firstMsg = jpath(currentCache, '.message[.' + idName + ' == "' + mid + '"]')[0];
                        if (firstMsg) {
                            redirectUrl = Daria.Page.params2url(params) + '/' + type + '/' + mid;
                        }
                    }
                }

                if (redirectUrl) {
                    params.__redirectTo = redirectUrl;

//                console.log('BLOCK_STATUS.REDIRECT', params.__redirectTo);
                    return BLOCK_STATUS.REDIRECT;

                } else {
                    //если попали сюда, то firstMsg и это пустой список
//                console.log('BLOCK_STATUS.OK', 'empty list');
                    return BLOCK_STATUS.OK;
                }

            } else {
//            console.log('BLOCK_STATUS.REQUEST_AND_RETURN', 'no cache');
                return BLOCK_STATUS.REQUEST_AND_RETURN;
            }
        };
    }

    function parseFileInfo(str) {
        var splittedType = str.split('//');
        if (splittedType.length === 2) {
            var klas = (splittedType[0] === 'mail' ? '' : splittedType[0]);
            return {
                fileClass: klas || 'неизвестный тип',
                fileExt: splittedType[1].replace(/^\.+/, '').toLowerCase() || 'без расширения'
            };
        }
    }
})();


/* ../../blocks/messages/messages.js end */

                /* ../../blocks/messages-title/messages-title.js begin */
(function(/**Daria*/Daria) {
    /* global bMessagesExceptedParams, bMessagesOnprepareRemoveThreadID */

    var bMessagesTitle = Jane.Block.create('messages-title', {
        handlers: ['folders', 'labels', 'messages', 'messages-pager', 'message-type-labels', 'messages-title-types-filter'],
        params: {
            datePager: null,
            mrange: null
        },
        exceptedParams: bMessagesExceptedParams
    });

    var bMessagesTitleProto = bMessagesTitle.prototype;

    bMessagesTitleProto.onhtmlinit = function(node) {
        this.$node = $(node);

        var messages = Jane.$B('messages-list-box').active;
        if (messages && messages.table) {
            messages.table.updateHeader();
        }

        var that = this;
        var mrange = nb.$block('.js-messages-title-mrange', node);
        if (mrange) {
            mrange.on('nb-changed', function() {
                var params = $.extend({}, Jane.Page.params);
                var value = this.getState().value;

                if (value) {
                    params.mrange = value;
                } else {
                    delete params.mrange;
                }

                // инвалидируем для перерисовки
                that.invalidate();
                Jane.Page.go(Jane.Page.params2url(params));
            });
        }

        var $searchAnywhere = this.$node.find('.js-search-anywhere');
        if ($searchAnywhere.length) {
            var params = _(Jane.Page.params).clone();
            params.request = encodeURIComponent(params.request);
            delete params.type;

            $searchAnywhere.attr('href', Page.params2url(params));
        }
    };

    bMessagesTitleProto.onshow = function() {
        this.initTypesFilter();
    };

    bMessagesTitleProto.onhide = function() {
        this.destroyTypesFilter();
    };

    /**
     * Инициализация фильтра по типам писем
     */
    bMessagesTitleProto.initTypesFilter = function() {
        this.initTypesFilterSelect();
        this.bindEvents();
    };

    bMessagesTitleProto.initTypesFilterSelect = function() {
        this.typesFilterNbSelect = nb.$block('.js-messages-title-types-filter', this.$node);

        if (this.typesFilterNbSelect) {
            var type = Jane.Page.params.type || "#inbox";
            this.typesFilterNbSelect.enable();
            this.typesFilterNbSelect.setState({value: type});
        }
    };

    bMessagesTitleProto.bindEvents = function() {
        if (!this.typesFilterNbSelect) {
            return;
        }
        this.typesFilterNbSelect.on('nb-changed', this.onChangeTypesFilterNbSelect.bind(this));
        this.typesFilterNbSelect.on('click', this.onClickTypesFilterNbSelect.bind(this));

        // сохраняем забинженную ф-ию чтобы использовать её в Jane.events.unbind
        this.onToolbarFixedToggle = this.onToolbarFixedToggle.bind(this);
        Jane.events.bind('toolbar.fixed', this.onToolbarFixedToggle);
    };

    /**
     * Обработчики событий
     */
    bMessagesTitleProto.onClickTypesFilterNbSelect = function() {
        this.metrika('Селект', 'Клик');
    };

    bMessagesTitleProto.onChangeTypesFilterNbSelect = function() {
        var selectCurrentState = this.typesFilterNbSelect.getState();

        this.filterMessagesByType(selectCurrentState.value);
    };

    /**
     * Когда тулбар становится залипающим, закрываем селект, снимаем с него фокус и дизэйблим
     * Когда тулбар перестаёт быть залипающим, включаем селект
     * Если не дизэйблить, то всё равно есть шанс открыть селект поверх тулбара.
     *
     * @param {String}  eName   Имя события
     * @param {Boolean} isFixed Является ли тулбар залипающим
     */
    bMessagesTitleProto.onToolbarFixedToggle = function(eName, isFixed) {
        if (isFixed) {
            this.typesFilterNbSelect.close().blur().disable();
        } else {
            this.typesFilterNbSelect.enable();
        }
    };

    /**
     * После выбора типа писем в селекте, фильтруем сообщения по этому типу.
     * @param {String} type Значение опшена селекта
     */
    bMessagesTitleProto.filterMessagesByType = function(type) {
        var hash = this._getTypesFilterHash(type);

        if (hash === Jane.Page.hash) {
            return;
        }

        this.typesFilterNbSelect.disable();
        Jane.Page.go(hash, this.logTypeFilteringResult.bind(this, type));
    };

    /**
     * Возвращает хэш, по которому нужно перейти, чтобы запустить нужный поиск по типу
     * @param {String} type Значение выбранного типа
     * @returns {String} Хэш
     */
    bMessagesTitleProto._getTypesFilterHash = function(type) {
        if (String(type).indexOf('#') === 0) {
            return type;
        }

        var params = this._getTypeFilterPageParams(type);

        return Jane.Page.params2url(params, {multipleParam: true});
    };

    /**
     * Подготавливает параметры страницы для поиска по типу
     * @param {String} type Значение выбранного типа
     * @private
     */
    bMessagesTitleProto._getTypeFilterPageParams = function(type) {
        var params = $.extend({}, Jane.Page.params);

        // Поиск по типу
        params.search = 'yes';
        params.type = type;

        // Исключаем из фильтрации Спам, Удалённые, Шаблоны, Отправленные и т.п.
        params.fid = [];
        params.excluded = 1;
        var hFolders = Jane.$H('folders');
        var excludeFolders = ['spam', 'trash', 'template', 'sent', 'draft'];
        for (var i = 0; i < excludeFolders.length; i++) {
            var folder = hFolders.getFolderBySymbol(excludeFolders[i]);
            if (folder) {
                params.fid.push(folder.fid);
            }
        }

        // Не должен показываться пейджер по датам
        delete params.showDatePager;

        return params;
    };

    /**
     * Логирует результат фильтрации, а именно наличие писем при выборе определенной позиции фильтра
     * @param {String} type Значение опшена селекта
     */
    bMessagesTitleProto.logTypeFilteringResult = function(type) {
        var typeName = Jane.$H('messages-title-types-filter').getTypeName(type);
        var hasMessagesText = Jane.$H('messages').hasMessagesOnPage() ? 'Есть письма' : 'Нет писем';

        this.metrika('Селект', 'Выбор позиции', typeName, hasMessagesText);
    };

    bMessagesTitleProto.metrika = function() {
        var metrikaMessage = ['Фильтр по типам писем'].concat(Array.prototype.slice.call(arguments, 0));

        Jane.c.apply(Jane, metrikaMessage);
    };

    bMessagesTitleProto.destroyTypesFilter = function() {
        if (this.typesFilterNbSelect) {
            this.typesFilterNbSelect.$node.off('click'); // TODO: убрать после https://github.com/yandex-ui/nanoislands/issues/293
            this.typesFilterNbSelect.destroy();
            Jane.events.unbind('toolbar.fixed', this.onToolbarFixedToggle);
        }
    };

    /**
     * Выбор интервала месяца
     */
    bMessagesTitleProto.mrangeChange = function(event) {
        var params = $.extend({}, Jane.Page.params);
        var $target = $(event.target);

        if ($target.val()) {
            params.mrange = $target.val();
        } else {
            delete params.mrange;
        }
    };


    if (Daria.layout != '2pane') {
        bMessagesTitleProto.onprepare = bMessagesOnprepareRemoveThreadID;
    } else {
        bMessagesTitleProto.onprepare = function(params) {
            if (params.search === "yes" && params.scope === "rpopid") {
                this.info.handlers['collectors'] = false;
                return true;
            }
            return false;
        };
    }

})(Daria);

/* ../../blocks/messages-title/messages-title.js end */

                /* ../../blocks/messages-pager/messages-pager.js begin */
Jane.Block.create('messages-pager', {
    handlers: [ "messages", "settings" ]
});

/* ../../blocks/messages-pager/messages-pager.js end */

                /* ../../blocks/messages-date-pager/messages-date-pager.js begin */
Block.MessagesDatePager = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessagesDatePager, Block);

Block.add({
    name: "messages-date-pager",
    info: {
        handlers: {
            "messages-pager": true,
            "folders": false,
            "settings": false,
            "messages": false
        },
        lazy: true
    },
    constructor: Block.MessagesDatePager
});

Block.MessagesDatePager.prototype.onshow = function(params) {
    if (this.pager) {
        this.pager.updateScroll(params);
    }

};

Block.MessagesDatePager.prototype.onhtmlinit = function(node, params) {
    Daria.setZeroTimeout(function() {
        this.pager = new Daria.MessagesPager(node);
    }.bind(this));

    this.updateNav(params);
};

Block.MessagesDatePager.prototype.onhtmldestroy = function() {
    if (this.pager) {
        this.pager.unbindEvents();
    }
    delete this.pager;
};

/**
 * Рендерит панель навигации в конце месяца
 */

Block.MessagesDatePager.prototype.updateNav = function(params) {
    var node = this.getCache().node;
    var nextPage = Jane.$H('messages').getPageInfo(params).next;
    var allMessagesLoaded = (nextPage === null);

    $(node).find('.js-date-pager-cont').toggleClass('b-messages_all-loaded', allMessagesLoaded);

    // Показываем блок навигации между месяцами
    // prev и next
    var dateRegExp = /^((\d{2})\.)?(\d{4})$/;
    if (!dateRegExp.test(params.datePager) || !allMessagesLoaded) {
        return;
    }

    var incDate = Daria.MessagesPager.incDate;
    var decDate = Daria.MessagesPager.decDate;

    var date = params.datePager.match(dateRegExp);
    var year = date[3];
    var month = date[2];

    var data = {};

    var prevDateId;
    var nextDateId;
    var currentDateId;

    // Выборка по месяцам
    if (month) {
        var prev = decDate(year, month);
        var next = incDate(year, month);

        prevDateId = prev[1] + prev[0];
        nextDateId = next[1] + next[0];
        currentDateId = month + year;
    } else {
        // Выборка за год
        prevDateId = parseInt(year, 10) - 1;
        nextDateId = parseInt(year, 10) + 1;
        currentDateId = year;
    }

    data.currentDateId = currentDateId;
    data.prevDateId = prevDateId;
    data.nextDateId = nextDateId;
    data['page-params'] = params;
    var datePager = Jane.tt('mail-common:date-pager-nav', data, ['messages-pager', 'settings', 'folders'], params);
    $(this.getCache().node).find('.js-date-pager-nav').find("*").remove().end().append(datePager);
};

/* ../../blocks/messages-date-pager/messages-date-pager.js end */

                /* ../../blocks/messages-date-pager-float/messages-date-pager-float.js begin */
Block.MessagesDatePagerFloat = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessagesDatePagerFloat, Block);

Block.add({
    name: "messages-date-pager-float",
    info: {
        handlers: {
            "messages-pager": false,
            "folders": false,
            "settings": false,
            "messages": false
        },
        exceptedParams: {
            "datePager": null
        }
    },
    constructor: Block.MessagesDatePagerFloat
});

Block.MessagesDatePagerFloat.prototype.onshow = function(params) {
    if (this.pager) {
        this.pager.updateScroll(params);
    }
};

Block.MessagesDatePagerFloat.prototype.onhtmlinit = function(node) {
    Daria.setZeroTimeout(function() {
        this.pager = new Daria.MessagesPager(node, true);
    }.bind(this));
};

Block.MessagesDatePagerFloat.prototype.onhtmldestroy = function() {
    if (this.pager) {
        this.pager.unbindEvents();
    }
    delete this.pager;
};

Block.MessagesDatePagerFloat.prototype.toshow = function(params) {
    return params.showDatePager && params._page === "messages";
};

/* ../../blocks/messages-date-pager-float/messages-date-pager-float.js end */

                /* ../../blocks/messages-date-pager-float-box/messages-date-pager-float-box.js begin */
Block.MessagesDatePagerFloatBox = function() {
    Block.apply(this, arguments);

    this.isHidden = true;

    var updateFunc = this.updateVisibility.bind(this).lazy(100);
    Jane.events.bind("messages-date-pager.updateVisibility", updateFunc);
    $(window).on("scroll resize", updateFunc);
};

Daria.extend(Block.MessagesDatePagerFloatBox, Block);

Block.add({
    name: "messages-date-pager-float-box",
    info: {
        box: true
    },
    constructor: Block.MessagesDatePagerFloatBox
});

Block.MessagesDatePagerFloatBox.prototype.onhtmlinit = function() {
    $(this.cache.node).toggleClass("block-messages-date-pager-float-box_hidden", true);

};

Block.MessagesDatePagerFloatBox.prototype.toshow = function(params) {
    return params.showDatePager && params._page === "messages";
};

Block.MessagesDatePagerFloatBox.prototype.selectName = function() {
    return "messages-date-pager-float";
};

Block.MessagesDatePagerFloatBox.prototype.updateVisibility = function() {

    if (!this.visible || Daria.layout != "2pane") {
        return;
    }

    var messagesBlock = Jane.$B("messages-list-box").active;

    if (!messagesBlock) {
        return;
    }

    var pagerBox = messagesBlock.getBlockByName("messages-pager-box");

    if (!pagerBox) {
        return;
    }

    var pager = pagerBox.getActive();

    // Обновляем только пейджер с выборкой по датам
    if (pager.name != 'messages-date-pager') {
        return;
    }

    var hidden;
    if (!Daria.Page.params.datePager) {
        hidden = true;
    } else if ($('.block-messages-pager-box', messagesBlock.getCacheNode()).rect().top < $(window).height() - 30) {
        hidden = true;
    } else {
        hidden = false;
    }

    if (hidden != this.isHidden) {
        this.isHidden = hidden;

        if (this.cache) {
            $(this.cache.node).toggleClass("block-messages-date-pager-float-box_hidden", hidden);
        }
    }
};

Jane.events.bind("pageload", function(e, params) {
    if (params._page != 'messages') {
        return;
    }

    var pagerBox = Jane.$B("messages-date-pager-float-box");

    if (!pagerBox) {
        return;
    }

    var pager = pagerBox.getActive();

    if (pager && pager.pager) {
        pager.pager.updateScroll(params);
    }
});

Block.MessagesDatePagerFloatBox.prototype.hide = function() {
    if (this.cache && this.cache.node) {
        $(this.cache.node).addClass("block-messages-date-pager-float-box_hidden");
    }
    this.isHidden = true;
};

Block.MessagesDatePagerFloatBox.prototype.show = function() {
    Daria.setZeroTimeout(this.updateVisibility.bind(this));
};

/* ../../blocks/messages-date-pager-float-box/messages-date-pager-float-box.js end */

                /* ../../blocks/messages-pager-box/messages-pager-box.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.MessagesPagerBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessagesPagerBox, Block);

Block.add({
    name: "messages-pager-box",
    info: {
        box: true
    },
    constructor: Block.MessagesPagerBox
});

Block.MessagesPagerBox.prototype.selectName = function(params) {
    if (params.showDatePager) {
        return "messages-date-pager";
    } else {
        return "messages-pager";
    }
};

/* ../../blocks/messages-pager-box/messages-pager-box.js end */

                    /* ../../blocks/thread/thread.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.Thread = function() {
    Block.MessagesItemContainer.apply(this, arguments);
};

Daria.extend(Block.Thread, Block.MessagesItemContainer);

Block.add({
    name: "thread",
    info: {
        handlers: {
            'messages': true,
            'labels': true,
            'folders': true,
            'settings': false
        }
    },
    constructor: Block.Thread
});

Block.Thread.prototype.onhtmlinit = function(node, params) {
    this.wrapMessagesToBlock();
    this.tableUpdate(params);
};

Block.Thread.prototype.tableUpdate = function(params) {
    if (params._prevent_table_update) {
        return;
    }

    var node = this.getCacheNode();
    var messages = Jane.$B("messages-list-box").active;
    var id = node.getAttribute("data-tid");
    var checkboxTree = messages.table.getCheckboxTree('t' + id);

    Daria.CheckboxTree.addTRs(node, checkboxTree);
    checkboxTree.sync();
};

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../blocks/thread/thread.js end */

                    /* ../../blocks/groupon/groupon-filters.js begin */
(function() {
    var bGrouponFilters = Jane.Block.create('groupon-filters', {
        handlers: {
            'message-body': true,
            'settings': false,
            'folders': false,
            'filters': true,
            'labels': true,
            'groupon-topics': true,
            message: false
        },
        lazy: true
    });
    //var uid = (Daria.uid || '').slice(-1);
    // @uidcheck
    //var uidEnds = ['7', '3', '5'];

    var metrika = function() {
        var msg = ['Предложение фильтровать групоны'];
        var rest = $.merge([], arguments);

        if (bGrouponFilters.grouponPagType) {
            msg.push(bGrouponFilters.grouponPagType);
        }

        if (bGrouponFilters.grouponAction) {
            msg.push(bGrouponFilters.grouponAction);
        }

        // Добавляем больше конкретики
        // Например номер показа 1-й, 2-й или 3-й
        // промо диалога
        rest = $.map(rest, function(str) {
            return $.trim(Daria.supplant(str, [bGrouponFilters.popupShowed || '']));
        });

        $.merge(msg, rest);

        if (Daria.DEBUG) {
            if (console && console.info) {
                console.info('metrika groupon: ', msg);
            }
        }

        Jane.c(msg);
    };

    /**
     * Определяет, прошло ли заданное количество дней с момента TS.
     * @param  {Number} ts          timestamp
     * @param  {Number} daysNumber количество дней
     * @return {Boolean}
     */
    var nDaysPassed = function(ts, daysNumber) {
        daysNumber = (typeof daysNumber !== 'undefined') ? daysNumber : 1;

        if (typeof ts === 'undefined') {
            return true;
        }

        ts = Number(ts);
        return (ts + 1000 * 60 * 60 * 24 * daysNumber < Daria.now()) || false;
    };

    // export
    Jane.Block.GrouponFilters = bGrouponFilters;

    // Return current node of blcok
    bGrouponFilters.getCurrentNode = function() {
        return bGrouponFilters.$dialog || $('.block-groupon-filters:visible');
    };

    var bGrouponFiltersPrototype = bGrouponFilters.prototype;

    bGrouponFiltersPrototype.onhtmlinit = function(node) {
        this.$node = $(node);
        this.editing = Jane.$H('settings').getSetting('groupon_filter');
        // XXX не хочется исправлять прям внутри этого класса
        // поэтому пока что тут делаю заплатку
        if (this.$node.find('.js-groupon-editor').length) {
            $('.b-message-prevnext_small').css('height', '1.6em');
        }

        this.$node.addClass('b-intruder_groupon_block');
    };

    bGrouponFiltersPrototype.onshow = function() {
        var $node = this.$node;
        var currentProgress = 0;
        var $progressbar = $node.find('.js-progress:visible');
        var animateFakeProgressbar = function() {
            if (currentProgress == 100) {
                $node.find('.js-intruder__preloader').addClass('g-hidden');
                $node.find('.js-intruder__real-content').removeClass('g-vhidden');
            } else {
                currentProgress += 10 + Math.random() * 30;
                if (currentProgress > 100) {
                    currentProgress = 100;
                }

                $progressbar.animate({width: currentProgress + '%'}, 200, animateFakeProgressbar);

            }
        };
        animateFakeProgressbar();
    };

    // Не показываем для пользователей конкурентных
    // сервисов
    /*
    https://jira.yandex-team.ru/browse/DARIA-23511
    bGrouponFiltersPrototype.toshow = function() {
        return !Daria.IS_KCUF;
    };
    */

    bGrouponFilters.onChangeCondition = function(forceEnable) {
        var $node = bGrouponFilters.getCurrentNode();

        var editing = Jane.Block.GrouponFilters.editing || Jane.$H('settings').getSetting('groupon_filter');

        var selected = $node.find('[data-selected]').length;

        if (forceEnable || selected) {
            $node.find('.js-services-count').text(i18n('%Promo_groupon_subscribed', selected));
            $node.removeClass('b-intruder__unsubscribe');
            this.enableButton($node.find('.nb-button.daria-onchange'));
            return;
        }

        if (editing) {
            $node.find('.js-services-count').text(i18n('%Promo_groupon_subscribed', '0'));
            $node.addClass('b-intruder__unsubscribe');
            return;
        }

        $node.find('.js-services-count').text(i18n('%Promo_groupon_subscribed_all'));
        this.disableButton($node.find('.nb-button.daria-onchange'));
    };

    bGrouponFilters.disableButton = function(node) {
        var $node = $(node);
        Jane.disableButton($node);
        return $node;
    };

    bGrouponFilters.enableButton = function(node) {
        var $node = $(node);
        Jane.enableButton($node);
        return $node;
    };

    bGrouponFilters.savePromoData = function(params) {
        this.params = $.extend(this.params, params);
        params = $.param(params);
        Jane.$H("settings").setSettings({
            groupon_promo: params
        });
    };

    bGrouponFilters.readPromoData = function() {
        var params = Jane.$H("settings").getSetting('groupon_promo');

        if (params) {
            params = params.replace(/&amp;/g, '&');
        }

        params = Daria.parseQuery(params);
        this.params = params;
        return params;
    };

    /**
     * Вызывается на загузку страницы
     */
    bGrouponFilters.onPageLoad = function() {
        var opts;

        if (bGrouponFilters.showDialog) {
            opts = bGrouponFilters.showDialog;

            bGrouponFilters.showDialog = false;
            bGrouponFilters.showPopup(opts);
        }
    };

    /**
     * Вызывается на по завершению действия
     * с письмом или списком писем.
     */
    bGrouponFilters._onActionComplete = function(ids, opts) {
        var action = opts.action;
        var force = opts.force;
        var isSetFilter = Jane.$H('settings').getSetting('groupon_filter');
        var params;
        var hasCouponMessage;
        var popupShowed;
        var lts;

        // проверяем что хотя-бы одно из сообщений
        // от скидочного сервиса

        hasCouponMessage = opts.eventObject.hasCouponMessage;

        if (hasCouponMessage) {
            params = bGrouponFilters.params || bGrouponFilters.readPromoData();
            popupShowed = Number(params.popup_showed) || 0;
            lts = params.lastTS;
            opts.byAction = true;

            // Не показыаем для тех кто уже
            // создал фильтр и им уже показывался
            // popup
            if (popupShowed && isSetFilter) {
                return;
            }

            // Сперва проверяем показывали ли промо, если показывали то
            // смотрим сколько раз, если меньше 3-х то прошел ли день после
            // последнего показа.
            //
            // Если больше 3-х раз то смотрим что прошло 40 дней
            if (!popupShowed || (popupShowed < 3 && nDaysPassed(lts, 1)) || (popupShowed >= 3 && nDaysPassed(lts, 40))) {
                bGrouponFilters.grouponAction = action;

                // сохраняем данные
                popupShowed += 1;
                bGrouponFilters.savePromoData({
                    lastTS: Daria.now(),
                    popup_showed: popupShowed
                });

                bGrouponFilters.grouponPagType = Daria.Page.type;
                //@metrika
                metrika('Плашки с тематиками (popup)', 'показ ' + popupShowed);
                bGrouponFilters.popupShowed = popupShowed;

                if (action === 'mark' || force) {
                    bGrouponFilters.showPopup(opts);
                } else {
                    bGrouponFilters.showDialog = opts;
                }
            }
        }
    };

    /**
     * Вызывается на по завершению действия
     * с письмом или списком писем.
     */
    bGrouponFilters.onActionComplete = function(actionName, opts) {
        var action = opts.action;
        var is3pane = (Daria.layout !== '2pane');
        var allowedActions = ['delete', 'tospam', 'mark', 'move'];
        var eventObject = opts.eventObject;
        var fid = eventObject.params.current_folder;
        var hMessage = Jane.$H('message');

        var ids;
        var _h;
        var folder;

        if (fid) {
            folder = Jane.$H('folders').getFolderById(fid);
        }
        folder = folder || {};

        // Только для русского продукта
        // и не 3 pane
        if (Daria.product !== 'RUS' || is3pane) {
            return;
        }

        // @uidcheck
        // Если пользователь находится не в промо группе
        // то ничего не делаем
        //if ($.inArray(uid, uidEnds) === -1 && !Jane.$H('account-information').hasSid('669')) {
        //bGrouponFilters.onActionComplete = $.noop;
        //bGrouponFilters.onPageLoad = $.noop;
        //return;
        //}

        // Не показываем попап при переходе в письмо
        if (action === 'mark' && eventObject.params['message-id']) {
            return;
        }

        if ($.inArray(action, allowedActions) === -1) {
            return;
        }

        // только для inbox
        // и сообщения
        if (Daria.Page.hash !== '#inbox' && Daria.Page.type !== 'message') {
            return;
        }

        // если переносим в спам или удаленные
        if (action === 'move' && folder.symbol !== 'trash' && folder.symbol !== 'spam') {
            return;
        }

        if (action === 'move') {
            action = folder.symbol === 'trash' ? 'delete' : 'tospam';
            opts = $.extend({}, opts);
            opts.action = action;
        }

        ids = eventObject.ids.ids;

        // для тредов получаем идентификаторы писем
        // так как их может не быть. а может быть но это не
        // скидочные сервисы [slowly]
        if (eventObject.ids.tids && eventObject.ids.tids.length) {
            _h = $.map(eventObject.ids.tids, function(tid) {
                return {
                    handlers: ['messages'],
                    params: {
                        thread_id: tid
                    }
                };
            });

            Jane.Handler.getAll(_h, function() {
                var messages = [];
                var hMessages = Jane.$H('messages');

                $.each(_h, function(idx, handler) {
                    var mess = hMessages.getCacheByParams(handler.params) || {};
                    if (mess.message && mess.message.length) {
                        messages = messages.concat(mess.message);
                    }
                });

                ids = $.map(messages, function(message) {
                    if (hMessage.isCouponService(message)) {
                        opts.eventObject.hasCouponMessage = true;
                    }
                    return message.mid;
                });

                opts.force = true;
                bGrouponFilters._onActionComplete(ids, opts);
            });
            return;
        }

        if (!opts.eventObject.hasOwnProperty('hasCouponMessage')) {
            ids = $.map(ids, function(id) {
                var message = hMessage.getCache(id);

                if (!message) {
                    return;
                }

                if (hMessage.isCouponService(message)) {
                    opts.eventObject.hasCouponMessage = true;
                }

                return message.mid;
            });
        }

        bGrouponFilters._onActionComplete(ids, opts);
    };

    bGrouponFilters.showSuccessPopup = function() {
        Daria.Dialog.open({
            body: Jane.tt('mail-common:groupon-success-dialog', {
                type: Daria.Page.type
            }),
            additionalClass: 'b-groupon-promo__popup',
            title: i18n('%Promo_groupon_popup_success_title'),
            easyclose: true,
            width: '650',
            onopen: function() {
                //@metrika
                metrika('Плашка о создании фильтра (popup)', 'показ');
            },
            onclose: function() {
                var bGrouponFilters = Jane.$B('groupon-filters');

                //@metrika
                metrika('Плашка о создании фильтра (popup)', 'закрыли {0}');

                // В списке писем плшки может не быть
                if (bGrouponFilters) {
                    // Перерисовываю плашку, чтобы отобразить изменения в фильтре
                    bGrouponFilters.run({
                        noFakeProgress: true
                    });
                }
            }
        });
    };

    bGrouponFilters.showPopup = function(opts) {
        opts = opts || {};

        var title = opts.message || i18n('%Promo_groupon_title');
        var pageType = bGrouponFilters.grouponPagType;
        var grouponAction = bGrouponFilters.grouponAction;

        var dialog = Daria.Dialog.open({
            body: Jane.tt('mail-common:groupon-dialog', {
                pageType: pageType,
                grouponAction: grouponAction
            }, ['filters', 'labels', 'groupon-topics']),
            additionalClass: 'b-groupon-promo__popup',
            easyclose: true,
            title: title,
            width: Jane.Config.XSL.locale === 'tt' ? '760' : '650',
            byAction: opts.byAction,
            onopen: function() {
                //@metrika
                metrika('Плашки с тематиками (popup)', 'показ');
            },
            oncancel: function() {
                //@metrika
                metrika('Плашки с тематиками (popup)', 'закрыли по крестику {0}');
            },
            onclose: function() {
                //@metrika
                metrika('Плашки с тематиками (popup)', 'закрыли {0}');

                bGrouponFilters.$dialog = null;
                bGrouponFilters.dialog = null;
                bGrouponFilters.grouponPagType = false;
                bGrouponFilters.grouponAction = false;
            }
        });

        bGrouponFilters.$dialog = dialog.$dialog;
        bGrouponFilters.dialog = dialog;
        bGrouponFilters.isPromo = false;
        dialog.$dialog.removeClass('b-intruder__unsubscribe');

        return dialog;
    };

    bGrouponFilters.showPromoPopup = function(opts) {
        opts = opts || {};

        var title = i18n('%Promo_groupon2_title');

        var dialog = Daria.Dialog.open({
            body: Jane.tt('mail-common:groupon-promo', {}, ['groupon-topics']),
            additionalClass: ['b-groupon-promo__popup', 'b-groupon-promo__popup_promo2'],
            title: title,
            width: '520',
            onopen: function() {
                //@metrika
                metrika('Промо на всех', 'показ');
            },
            oncancel: function() {
                //@metrika
                metrika('Промо на всех', 'закрыли по крестику {0}');
            },
            onclose: function() {
                //@metrika
                metrika('Промо на всех', 'закрыли {0}');

                bGrouponFilters.$dialog = null;
                bGrouponFilters.dialog = null;
                bGrouponFilters.grouponPagType = false;
                bGrouponFilters.grouponAction = false;
            }
        });

        bGrouponFilters.$dialog = dialog.$dialog;
        bGrouponFilters.dialog = dialog;
        bGrouponFilters.isPromo = true;

        return dialog;
    };

    bGrouponFilters.focusInput = function() {
        this.getCurrentNode().find('.js-groupon-filter-input').focus();
    };

    // Для тестирования
    bGrouponFilters.testHelper = {
        removeHiddenFilters: function() {
            var fs = Jane.$H('filters').data;
            var ids = jpath(fs, '.action[.name == "X-Yandex-Groupon" || .name == "X-Yandex-Groupon-2"].filid');
            var _h = [];
            $.each(ids, function(index, id) {
                _h.push({
                    handlers: ['do-filters-delete', 'filters'],
                    params: {
                        id: id
                    }
                });
            });
            Jane.$H('settings').setSettings({
                show_groupon_actions: false,
                groupon_filter: false,
                groupon_time: false
            });
            Jane.Handler.getAll(_h, $.proxy(console.log,console), {
                force: true
            });
        },
        removeFolder: function() {
            var ids = jpath(Jane.$H('folders').data, '.folder[.name == "Скидки" || .name == "Скидочные сервисы"].fid');
            $.each(ids, function(index, id) {
                Jane.Actions.run('folder.remove', {
                    id: id
                });
            });
        },
        removeSettings: function() {
            Jane.$H('settings').setSettings({
                groupon_promo: false,
                groupon_filter: false
            });
        },
        clear: function() {
            this.removeHiddenFilters();
            this.removeFolder();
            this.removeSettings();

            window.location.reload();
        }
    };

    Jane.events.bind('message.action.complete', bGrouponFilters.onActionComplete);
    Jane.events.bind('pageload', bGrouponFilters.onPageLoad);
}());

/* ../../blocks/groupon/groupon-filters.js end */


        /* ../../blocks/message-empty/message-empty.js begin */
(function() {

    var block = Jane.Block.create(
        'message-empty',
        {
            handlers: ["settings"]
        }
    );

    block.prototype.onshow = function() {
        // Сбрасываем настройку показа промо в 3panei DARIA-15537
        if (Jane.$H("settings").getSetting("first_show_3pane")) {
            Jane.$H("settings").setSettings({"first_show_3pane": ""});
        }
    };

})();

/* ../../blocks/message-empty/message-empty.js end */

        /* ../../blocks/message-thread/message-thread.js begin */
(function(/**Daria*/Daria) {

    /**
     * Блок "Тред как письмо"
     * @class Jane.Block.MessageThread
     * @augments Jane.Block
     */
    var bMessageThread = Jane.Block.create('message-thread', {
        handlers: {
            "account-information": false,
            "folders": false,
            "labels": false,
            "messages": true,
            "settings": false
        },
        exceptedParams: {
            threaded: null,
            current_folder: null
        }
    });

    var bMessageThreadProto = bMessageThread.prototype;

    bMessageThreadProto.onbeforedestroy = function() {
        for (var key in this._msgs) {
            var msg = this._msgs[key];
            if (msg.block) {
                msg.block.destroy();
            }
        }
    };

    bMessageThreadProto.onprepare = function(params) {
        if (params['current_folder']) {
            delete params['threaded'];
            this._currentFolder = params['current_folder'];
            delete params['current_folder'];
            return true;
        }

        return false;
    };

    bMessageThreadProto.beforeHandlersRequest = function(params) {
        // обрабатываем вариант, когда отрываем тред с одним письмом или без писем (после удаления, например)

        var BLOCK_STATUS = Jane.Run.BLOCK_STATUS;
        var threadInfo = this.getRawHandler('messages');

        // если есть непрочитанные, то надо найти где оно находится
        if (threadInfo) {
            var ids = threadInfo.data && threadInfo.data.ids;
            if (ids && ids.length > 0) {
                if (threadInfo.data.ids.length > 1) {
                    return BLOCK_STATUS.OK;

                } else {
                    params.__redirectTo = Jane.Page.params2url({
                        _page: 'messages',
                        current_folder: Jane.Page.params.current_folder,
                        ids: ids[0]
                    });
                    return BLOCK_STATUS.REDIRECT;
                }
            }
            params.__redirectTo = Jane.Page.params2url({
                _page: 'messages',
                current_folder: Jane.Page.params.current_folder
            });
            return BLOCK_STATUS.REDIRECT;
        }
        return BLOCK_STATUS.REQUEST_AND_RETURN;
    };

/*
// пока у нас нет многостраничного поиска непрочитанных, это не надо
    bMessageThreadProto.beforeHandlersRequest = function(params) {
        var BLOCK_STATUS = Jane.Run.BLOCK_STATUS;
        var threadInfo = Jane.$H('message').getCache('t' + params['thread_id']);
        // если есть непрочитанные, то надо найти где оно находится
        if (threadInfo && threadInfo['new'] > 0) {
            */
            /**
             * Номер страницы в предзапросе, когда ищем страницу с последним непрочитанным сообщением.
             * @type {Number}
             * @private
             */
            /*
            this._preflightRequestPage = this._preflightRequestPage || 1;
            */
            /**
             * Количество найденных непрочитанных сообщений в preflight-запросах.
             * @type {*|Number}
             * @private
             */
            /*
            this._preflightUnreadMsgs = this._preflightUnreadMsgs || 0;
            var messagesParams = {
                thread_id: params['thread_id']
            };
            if (this._preflightRequestPage > 1) {
                messagesParams['page_number'] = this._preflightRequestPage;
            }

            var threadList = Jane.$H('messages').getCacheByParams(messagesParams);
            // если есть список писем текущего треда
            if (threadList) {
                // ищем непрочитанные сообщения и прибавляем их уже найденным
                this._preflightUnreadMsgs = this._preflightUnreadMsgs + jpath(threadList, '.message[.new]').length;

                if (this._preflightUnreadMsgs >= threadInfo['new']) {
                    // нашли нужную страницу
                    return BLOCK_STATUS.OK;

                } else {
                    // загружаем следующую страницу
                    this._preflightRequestPage++;
                    if (this._preflightRequestPage > 1) {
                        messagesParams['page_number'] = this._preflightRequestPage;
                    }
                    params['__extraRequest'] = {
                        handlers: ['messages'],
                        params: messagesParams
                    };
                    return BLOCK_STATUS.REQUEST_AND_RETURN;
                }

            } else {
                return BLOCK_STATUS.REQUEST_AND_RETURN;
            }
        } else {
            // непрочитанных нет, все ок
            return BLOCK_STATUS.OK;
        }
    };
*/

    bMessageThreadProto.onshow = function(params) {
        Jane.$H('settings').saveLOM({
            current_folder: this._currentFolder,
            thread_id: params['thread_id']
        });

        this._bindEvents();
    };

    bMessageThreadProto.onhide = function() {
        this._unbindEvents();
    };

    /**
     * Таймаут, чтобы пометить письмо прочитанным.
     * @type Number
     * @private
     */
    bMessageThreadProto._SEEN_TIMEOUT = 2000;

    bMessageThreadProto.onhtmlinit = function(node, params) {
        this._$window = $(window);
        this._$document = $(document);

        /**
         * Хеш загруженных message-body
         * @private
         */
        this._msgs = {};

        this._processMessages(node);

        this._$scroller = $(node).children(':first');
        this._$loader = this._$scroller.find('> .b-messages-loader');

        var messages = this.getHandler('messages');
        var unreadMsgs = jpath(messages, '.message[.new]');
        // берем последнее непрочитанное
        var msgToOpen = unreadMsgs.splice(-1)[0];
        if (!msgToOpen) {
            // если непрочитанных нет, то просто первое письмо в треде
            msgToOpen = messages.message[0];
        }

        this._currentMsg = msgToOpen;

        /**
         * Флаг блокировки обработчика onscoll.
         * Он блокируется то тех пор, пока не первый раз не отрисуется тред.
         * @type {Boolean}
         * @private
         */
        this._blockOnScroll = true;

        this._fixedScroll = this._$scroller.fixedScroll('> .b-message > .b-message__i');

        // открываем письмо
        this.openBody(msgToOpen.mid, false, function() {
            this._$loader.addClass('g-hidden');

            var msg = this._msgs[msgToOpen.mid];
            var $msgNode = $(msg.node);

            // если есть предыдущее и следующее письмо, то встатвляем фейковую ноду, показывающую, что там есть еще письма
            if ($msgNode.prev('.b-message')[0]) {
                var $prev = $('<div class="b-message-thread__fakemsg_dir_up b-message"/>').insertBefore($msgNode);
            }
            if ($msgNode.next('.b-message')[0]) {
                var $next = $('<div class="b-message-thread__fakemsg_dir_down b-message"/>').insertAfter($msgNode);
            }

            msg.node.style.display = 'block';

            this._openMsgs(unreadMsgs).done(function() {
                this._$scroller.removeClass('b-message-thread_state_hideall');
                if ($prev) {
                    $prev.remove();
                }
                if ($next) {
                    $next.remove();
                }
                // подскролливаем до письмо только, если оно не первое
                if (msgToOpen !== messages.message[0]) {
                    var pos = $msgNode.position().top;
                    this._$scroller.scrollTop(pos - 15);
                }
                this._blockOnScroll = false;
                // вызываем onsroll, который поставит readTimer видимым письмам
                this._onscroll();
                this._fixedScroll.recalc();
            }.bind(this));

        }.bind(this));

        this._onscrollCb = this._onscroll.bind(this, true);
        this._$scroller.on('scroll', this._onscroll.bind(this).lazy(this.LAZY_TIMEOUT))
            .on('scroll', function() {
                this._$document.trigger('b-mail-dropdown-closeall');
            }.bind(this).lazy(1));

        Daria.SocialAvatarsMessageThread(node, params, '.b-ico_service');

        this._bindEvents();
    };

    bMessageThreadProto.LAZY_TIMEOUT = 5;

    bMessageThreadProto._processMessages = function(node) {
        $(node).find('> * > .b-message').each(this._processMessage.bind(this));
    };

    bMessageThreadProto._processMessage = function(i, msgNode) {
        var params = Daria.parseQuery(msgNode.getAttribute('data-params') || '');
        this._msgs[params.ids] = {
            node: msgNode,
            body: null,
            mid: params.ids
        };
    };

    bMessageThreadProto._bindEvents = function() {
        if (!this._eventsBinded) {
            this._eventsBinded = true;

            this._$window.on('resize.b-message-thread', this._onscrollCb.lazy(this.LAZY_TIMEOUT));
            Jane.events.bind('layout-ratio-change', this._onscrollCb);
        }
    };

    bMessageThreadProto._unbindEvents = function() {
        if (this._eventsBinded) {
            this._eventsBinded = false;

            this._$window.off('.b-message-thread');
            Jane.events.unbind('layout-ratio-change', this._onscrollCb);
        }
    };

    bMessageThreadProto._hideFixedElems = function() {

    };

    bMessageThreadProto.onhtmldestroy = function() {
        this._msgs = {};
        if (this._fixedScroll) {
            this._fixedScroll.destroy();
            this._fixedScroll = null;
        }
        if (this._$scroller) {
            this._$scroller.off();
            this._$scroller = null;
        }

        this._unbindEvents();
    };

    bMessageThread.prototype.onrepaint = function() {
        this._onscroll();
    };

    bMessageThread.prototype._onscroll = function(force) {
        //TODO: надо бы это оптимизировать и объединить с message
        if (!this._$scroller || this._blockOnScroll) {
            return;
        }

        if (force) {
            this._fixedScroll.recalc();
        }

        var scroller = this._$scroller[0];
        var scrollerTop = scroller.scrollTop;
        var scrollerBottom = scrollerTop + scroller.offsetHeight;

        //количество невидимых непрочитанных
        var unreadCnt = 0;

        for (var mid in this._msgs) {
            var msg = this._msgs[mid];
            var node = msg.node;
            var nodeClassName = node.className;

            var unread = nodeClassName.indexOf('b-message_unread') > -1;
            if (unread) {
                unreadCnt++;
            }

            var msgHead = msg.block && msg.block.getBlockByName('message-head');
            var visiblePart = msgHead && msgHead.getCacheNode();
            // если нет message-head, то письмо свернуто и нам не интересно
            // непрочитанные все открыты и тулбар в нем двигать нельзя
            if (!visiblePart) {
                continue;
            }

            var $node = $(msg.node);
            var nodeTop = node.offsetTop;
            var nodeBottom = nodeTop + node.offsetHeight;

            // письмо непрочитано
            if (unread && nodeClassName.indexOf('b-message_ignore') === -1) {

                // видимость письма считаем по шапке
                // offset письма до scrollArea + offset шапки до письма
                var visiblePartTop = nodeTop + visiblePart.offsetTop;
                var visiblePartBottom = visiblePartTop + visiblePart.offsetHeight;

                //в поле видимости
                if (
                //верхняя граница видна
                    (scrollerTop <= visiblePartTop && visiblePartTop <= scrollerBottom) ||
                    //нижняя граница видна
                    (scrollerTop <= visiblePartBottom && visiblePartBottom <= scrollerBottom) ||
                    // верхняя за верхним скроллом, нижняя - за нижним
                    // вариант для очень большого письма, которое не влезло в видимую область
                    (scrollerTop >= visiblePartTop && visiblePartBottom >= scrollerBottom)
                ) {
                    this._setReadTimer(msg);
                } else {
                    // письмо ушло из поля видимости
                    this._clearReadTimer(msg);
                }
            }

            var $toolbar = $(visiblePart).find('> .b-message-toolbar');
            // прилипающий тулбар
            if ($toolbar[0]) {
                var $toolbarI = $toolbar.find('.b-message-toolbar__i');
                var toolbarTop = $toolbar[0].offsetTop;
                var toolbarHeight = $toolbarI.height();

                // если верх письма зашёл за край экрана, но большая часть письма видна
                if (scrollerTop > nodeTop + toolbarTop && nodeBottom - toolbarHeight > scrollerTop) {
                    if (!$toolbar.hasClass('b-message-toolbar_fixed') || force) {
                        var nodeLeft = $node.offset().left;
                        var nodeWidth = $node.width();
                        var windowWidth = this._$window.width();
                        var scrollLeft = this._$window.scrollLeft();

                        $toolbar
                            .addClass('b-message-toolbar_fixed')
                            .removeClass('b-message-toolbar_bottom');

                        $toolbarI.css({
                            top: this._$scroller.offset().top,
                            bottom: 'auto',
                            left: nodeLeft - scrollLeft,
                            right: windowWidth - nodeWidth - nodeLeft + scrollLeft
                        });
                    }

                    // если видим только самый низ (места <= высоты тулбара)
                } else if (scrollerTop > nodeTop + toolbarTop && nodeBottom > scrollerTop) {
                    $toolbar
                        .removeClass('b-message-toolbar_fixed')
                        .addClass('b-message-toolbar_bottom');
                    $toolbarI.css({top: 'auto', bottom: 0, left: 0, right: 0});
                    // письма не видно
                } else {
                    $toolbar
                        .removeClass('b-message-toolbar_fixed b-message-toolbar_bottom');
                }
            }
        }

        this._redrawUnreads(unreadCnt);

        // автоподгрузка пейджера треда
        if (scroller.scrollHeight - scrollerBottom < 400) {
            var $pager = this._$scroller.find('.b-messages__thread-more');
            if ($pager[0]) {
                // находим ссылку и кликаем в нее
                Daria.click($pager.find('a'));
            }
        }

    };

    /**
     * Перерисовывает плашку "еще 5 непрочитанных сообщений"
     * @param {Number} [cnt]
     */
    bMessageThread.prototype._redrawUnreads = function(cnt) {
        if (cnt === undefined) {
            this._onscroll();
            return;
        }

        var $node = $(this.getCacheNode()).find('.b-message-unreads');

        // toggleClass работает сильно медленней, а функция по onscroll вызывается
        var isHidden = $node.hasClass('g-hidden');
        if (cnt && isHidden) { $node.removeClass('g-hidden'); }
        if (!cnt && !isHidden) { $node.addClass('g-hidden'); }

        if (cnt) {
            $node.find('.b-message-unreads__text').html(Jane.i18n.convert(i18n('%@N_еще_непрочитанных', cnt), cnt));
        }
    };

    /**
     * Загружает тело письма.
     * @param {String} ids
     * @param {Boolean} [addIgnoreClass=false] После открытия добавить класс для игнорирования автопометки прочитанным
     * @param {Function} [callback]
     */
    bMessageThread.prototype.openBody = function(ids, addIgnoreClass, callback) {
        var msg;
        if (ids && (msg = this._msgs[ids]) && !msg.body) {

            var $messageNode = $(msg.node)
                .removeClass('b-message_collapsed daria-action')
                .addClass('b-message_loading');
            var params = {
                ids: ids,
                _page: 'messages',
                _service: 'mail',
                _noread: true,
                _from_thread: true
            };

            var that = this;

            var bMessage = Jane.Block.make('message', params);
            msg.block = bMessage;
            msg.body = true;
            bMessage.run(params, function() {
                msg.node = bMessage.getCacheNode().firstChild;
                var $newMsg = $(msg.node);
                if (addIgnoreClass) {
                    $newMsg.addClass('b-message_ignore');
                }

                $messageNode.replaceWith(msg.node);
                $messageNode = $newMsg;

                that._fixedScroll.addBlock($newMsg.find('> .b-message__i'));

                Daria.setZeroTimeout(function() {
                    that._onscroll();
                });

                // ждем вставки в DOM
                setTimeout(function() {
                    // минимизация цитат после их расскрытия в 3pane
                    Daria.MessageProcess.initQuotesByPage($messageNode[0]);
                }, 16);

                if (callback) {
                    callback();
                }

                Jane.events.trigger('messages-thread.open-body');
            }, {
                'parallel': true,
                'xsl-params': {
                    'current_folder': this._currentFolder,
                    // параметр, чтобы свернуть всё цитирование по-умолчанию
                    'hide-quote': true,
                    // параметр, чтобы не рисовать <b-layout
                    'nolayout': true
                }
            });
        }
    };

    /**
     * Ставит таймер на прочтение письма.
     * @param {Object} msg
     * @private
     */
    bMessageThread.prototype._setReadTimer = function(msg) {
        if (msg._readTimer) {
            return;
        }

        // DARIA-21320 - Если непрочитанное письмо в треде одно, то помечать его прочитанным сразу же после открытия
        var messages = this.getHandler('messages');
        var countUnreadMsgs = jpath(messages, '.message[.new]').length;
        var timeout = countUnreadMsgs == 1 ? 1 : this._SEEN_TIMEOUT;

        msg._readTimer = window.setTimeout(function() {
            delete msg._readTimer;
            Jane.Actions.run('mark', null, {'message-id': msg.mid, doNotCloseDropdown: true});
        }, timeout);
    };

    /**
     * Очищает таймер на прочтение письма.
     * @param {Object} msg
     * @private
     */
    bMessageThread.prototype._clearReadTimer = function(msg) {
        if (msg._readTimer) {
            window.clearTimeout(msg._readTimer);
            delete msg._readTimer;
        }
    };

    bMessageThread.prototype.deleteMessage = function(mid) {
        var msg = this._msgs[mid];
        if (msg) {
            this._clearReadTimer(msg);
            Jane.DOM.removeNode(msg.node);
        }
        return false;
    };

    /**
     * По параметрым возвращает требуемую ноду b-message
     * @param {Object} params
     * @returns Node
     */
    bMessageThreadProto.getMessageNode = function(params) {
        var msg = this._msgs[params.ids];
        return msg ? msg.node : null;
    };

    /**
     * По параметрым возвращает блок message
     * @param {Object} params
     * @returns {Jane.Block}
     */
    bMessageThreadProto.getMessageBlock = function(params) {
        return this._msgs[params.ids].block;
    };

    bMessageThreadProto.appendMessages = function(node, messages) {
        this._$scroller.append(node);
        $(node).find('> .b-message').each(this._processMessage.bind(this));
        // открываем непрочитанные на новой странице
        var unreadMsgs = jpath(messages, '.message[.new]');
        this._openMsgs(unreadMsgs);
    };

    /**
     * Открывает массив сообщений.
     * @param {Array} msgs
     * @returns $.Deferred
     */
    bMessageThreadProto._openMsgs = function(msgs) {
        var promises = [];

        // посылаем запрос на открытие остальных непрочитанных
        for (var i = 0, j = msgs.length; i < j; i++) {
            var deferred = $.Deferred();
            this.openBody(msgs[i].mid, false, createPromiseResolver(deferred));
            promises.push(deferred);
        }

        function createPromiseResolver(deferred) {
            return function() {
                deferred.resolve();
            };
        }

        return $.when.apply(null, promises);
    };

    /**
     * Доскроливает до непрочитанного письма. Непрочитанные ищутся снизу.
     * Если мы находимся на первом письме, то проскроллится до последнего, потом пойдет вверх и т.п.
     */
    bMessageThreadProto.srcollToNextUnread = function() {
        var $node = $(this.getCacheNode());
        var scrollTop = this._$scroller.scrollTop();
        var $unreadMsgs = $node.find('.b-message_unread');
        var findedUnread;
        // ищем непрочитанное c конца, которое выше текущего скролла
        for (var i = $unreadMsgs.length - 1; i >= 0; i--) {
            var msgNode = $unreadMsgs.get(i);
            if (msgNode.offsetTop < scrollTop) {
                findedUnread = msgNode;
                break;
            }
        }

        // если не нашли, берем последнее
        if (!findedUnread) {
            findedUnread = $unreadMsgs.get(-1);
        }

        if (findedUnread) {
            var params = Daria.parseQuery(findedUnread.getAttribute('data-params') || '');
            this.openBody(params.ids);
            this._$scroller.animate({scrollTop: findedUnread.offsetTop - 20}, 'fast');
        }

    };

    bMessageThreadProto.getMessageBodyBlock = function(mid) {
        return this._msgs[mid].block.getMessageBodyBlock();
    };

    /**
     * Добавляем новое сообщение из ксивы в тред
     * @param {String} mid MID нового сообщения.
     */
    bMessageThreadProto.addMessage = function(mid) {
        var newMsgNode = Jane.tt(
            'mail-common:new-xiva-thread-message',
            {
                params: this.params
            },
            ['message', 'folders', 'labels', 'settings'],
            {
                ids: mid
            }
        );

        // добавляем письмо и сохраняем позицию скролла
        var oldScrollTop = this._$scroller.scrollTop();
        this._processMessage(0, newMsgNode);

        this.openBody(mid, false, function() {
            var node = this._msgs[mid].node;

            $(this.getCacheNode())
                .find('> * > .b-message')
                .filter(':first')
                .before(node);

            this._$scroller.scrollTop(oldScrollTop + node.offsetHeight + 25/*margin-bottm*/);
        }.bind(this));
    };

})(Daria);

/* ../../blocks/message-thread/message-thread.js end */

        /* ../../blocks/messages-selection/messages-selection.js begin */
(function(/**Jane*/Jane, /**Daria*/Daria) {

    /**
     * Блок с контекстным выделением в 3pane
     */
    var block = Jane.Block.create('messages-selection',{
        blocks: [
            'folders-actions-selection',
            'labels-actions-selection'
        ]
    });
    var blockProto = block.prototype;

    blockProto.onhtmlinit = function() {
        //lazy нужен, потому что all-selected-is-read зависит от selectedCount и посчитается после этого события
        Jane.events.bind("daria:selection-mode.change", this.toggleSelectionMode.bind(this));
        var updateSelection = this._updateSelection.lazy(1).bind(this);
        Jane.events.bind("selectedCount.change", updateSelection);
        Jane.events.bind("daria:selection-mode.redraw", updateSelection);
        /**
         * Флаг, что мы находимся в режиме выделения.
         * @type {Boolean}
         * @private
         */
        this._selectionMode = false;
    };

    blockProto._initSelectionMode = function() {
        var selfNode = this.getCacheNode();

        this._$node = $(selfNode);
        this._initClass = selfNode.className;
        this._$headerText = this._$node.find('.js-header');
        this._$archiveBtn = this._$node.find('.js-toolbar__item_archive');

        this._bMessagesBoxNode = $(Jane.$B('mail').getBlockByName('messages-box').getCacheNode());

        this._initSelectionMode = Daria.nop;
    };

    blockProto.toggleSelectionMode = function(e, diff) {
        var newState = diff.value;
        if (newState !== this._selectionMode) {
            $(document).trigger('b-mail-dropdown-closeall');
            this._selectionMode = newState;
            this._initSelectionMode();

            this._bMessagesBoxNode.toggleClass('b-messages-selection_mode_on', newState);
            this._checkArchiveBtn();

            var activeTable = Daria.Table.active;
            if (activeTable) {
                if (this._selectionMode) {
                    // при включении режима выделения, запоминамем текущее письмо и снимаем с него focus

                    /**
                     * ID текущего активного письма
                     * @type {String}
                     * @private
                     */
                    this._currentRow = activeTable.curRowId;
                    activeTable.unsetCurrent(this._currentRow);

                } else if (this._currentRow) {
                    // если работали с клавиатурой, то curRowId будет другой
                    // поэтому возвращаем, если его нет или равен сохраненному
                    if (!activeTable.curRowId || this._currentRow == activeTable.curRowId) {
                        // при включении режима выделения, возвращаем focus обратно
                        activeTable.setCurrent(this._currentRow);
                    }
                    delete this._currentRow;
                }
            }
        }
    };

    /**
     * Обновляет информацию о выбранных письмах.
     * @param {Event} e
     * @param {Object} diff
     * @private
     */
    blockProto._updateSelection = function(e, diff) {
        // если находимся в режиме выделения, то надо обновлять количество выделенных
        if (this._selectionMode) {
            var hFolders = Jane.$H('folders');
            var currentFID = Jane.Page.params.current_folder;

            var count = (diff && diff.value) || Jane.watcher.get('selectedCount');
            this._$headerText.html(i18n('%Выбрано_N_писем', count));
            var className = this._initClass;
            className += ' b-messages-selection_mode_' + (Jane.watcher.get('all-selected-is-read') ? 'unread' : 'read');
            className += ' b-messages-selection_mode_' + (Jane.watcher.get('its-spam') ? 'notspam' : 'spam');
            if (Daria.params4SimplePath(Jane.Page.params)) {
                className += !hFolders.getUnreadCount(currentFID) ? ' b-messages-selection_mode_nounreads' : '';
            } else {
                className += ' b-messages-selection_mode_hidebulk';
            }
            this._$node[0].className = className;
            this._checkArchiveBtn();
        }
    };

    /**
     * Прячет/показывает кнопку архив
     * @private
     */
    blockProto._checkArchiveBtn = function() {
        var currentFolderId = Jane.$B('folders').selected;
        var archiveFolderIsOpen = Jane.$H('folders').isArchive(currentFolderId);

        if (archiveFolderIsOpen) {
            this._$archiveBtn.hide();
        } else {
            this._$archiveBtn.show();
        }
    };

})(Jane, Daria);

/* ../../blocks/messages-selection/messages-selection.js end */


        /* ../../blocks/message/message-headline.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessageHeadline = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessageHeadline, Block);

Block.add({
    name: "message-headline",
    info: {
        ignore: true
    },
    constructor: Block.MessageHeadline
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessageHeadline.prototype.onhtmlinit = function(node) {
    this._$node = $(node);
    this.$headline = this._$node.find('.b-message-headline');
};

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessageHeadline.prototype.toshow = function(params) {
    // Показываем если перешли в письмо из поиска
    return Daria.isMessageFromSearch(params);
};

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessageHeadline.prototype.onrepaint = function(params) {
    if (Daria.isMessageFromSearch(params)) { // Если перешли в письмо из поиска
        var prev = Page.History.prev(0); // Достаем из истории предыдущее состояние.
        var content = '';
        var url = _.escape(prev.url);

        if (prev.params.request) {
            var request = prev.params.request;

            if (prev.params.scope === 'rpopid') {
                var collector = Jane.$H('collectors').getById(request);

                if (collector) {
                    request = collector.email;
                }
            }
            content += i18n('%Message_Headline_Query', url, _.escape(request));
        }
        content += ' ' + i18n('%Message_Headline_Back_To_Search', url);
        this.$headline.html(content);
        this._$node.show();
    } else {
        this._$node.hide();
    }
};

/* ../../blocks/message/message-headline.js end */

        /* ../../blocks/message/message-prevnext-box.js begin */
/*
    Global variables:   bMessagePrevNextBox
*/

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessagePrevNextBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.MessagePrevNextBox, Block);

Block.add({
    name: "message-prevnext-box",
    info: {
        box: true
    },
    constructor: Block.MessagePrevNextBox
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.MessagePrevNextBox.prototype.selectName = function(params) {
    // если пришли в письмо из поиска - не показывать
    if (params._page == 'message' && !Daria.isMessageFromSearch(params)) {
        return "message-prevnext";
    }
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/message/message-prevnext-box.js end */



        /* ../../blocks/wizard-box/wizard-box.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardBox = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardBox, Block);

Block.add({
    name: "wizard-box",
    info: {
        box: true
    },
    constructor: Block.WizardBox
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardBox.prototype.selectName = function(params) {
    var step = "wizard-" + params.step;

    if (params.substep) {
        step += "-" + params.substep;
    }

    return step;
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/wizard-box/wizard-box.js end */

            /* ../../blocks/inline-wizard-box/inline-wizard-box.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

var InlineWizardBox = Jane.Block.create('inline-wizard-box', {
    box: true
});

/* ------------------------------------------------------------------------------------------------------------- */


InlineWizardBox.prototype.uidToShow = function(uids) {
    return Daria.uidEnds(uids);
};

InlineWizardBox.prototype.selectName = function(params) {

    /**
     * Логирование смены темы, если нужно.
     */
    if (Daria.getCookie('iwizard-theme-change')) {
        Daria.delCookie('iwizard-theme-change');
        Daria.InlineWizard.metriks(4, ['Сменит тему', Daria.themeId]);
    }

    var inlineWizardDone = Jane.$H('settings').isSet('inline-wizard');
    var inlineWizardStep = Jane.$H('settings').getSetting('inline-wizard-step');
    var haveNotLabels = Jane.$H('labels').getUserLabelsCount() === 0;
    if ((!inlineWizardDone ||
        (inlineWizardDone && inlineWizardStep === '4')) &&
        (haveNotLabels ||
        (!haveNotLabels && inlineWizardStep)) &&
        Daria.layout === '2pane' &&
        !Daria.IS_KCUF &&
        !Daria.IS_CORP &&
        params._page === 'messages' &&
        this.uidToShow([5, 6, 7, 8, 9])) {
        return 'inline-wizard';
    }
};

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../blocks/inline-wizard-box/inline-wizard-box.js end */

            /* ../../blocks/wizard/inline-wizard/inline-wizard.js begin */
var InlineWizard = Jane.Block.create('inline-wizard', {
    blocks: [ 'wizard-labels', 'wizard-interface',  'wizard-sender',  'wizard-collector-create', 'wizard-done', 'inline-wizard-done' ],
    handlers: ['settings-color-schemes']
});

InlineWizard.prototype.onhtmlinit = function(node) {
    this.$node = $(node);

    // добавляем html блока в страницу, потому что мы исключили блок из дочерних блоков mail
    // поэтому сам он не отрисуется
    // его ран запускается вручную в blocks/mail/mail.js в методе inlineWizardShow
    // html нельзя добавлять в inlineWizardShow, потому что иначе
    // обработка в визарде сработает на еще НЕ отрисовенном html без нужных атрибутов и ничего не будет работать 
    $(Jane.$B('mail').getCacheNode()).find('.js-inline-wizard-dummy').append(node);

    var hSettings = Jane.$H('settings');
    // инициализация валидатора настроек
    new Daria.Collectors.Settings(this.$node.find('form'));
    Daria.InlineWizard.start(this.$node);

    var currentStep = Daria.InlineWizard.getCurrentStep();

    if (Daria.InlineWizard.needToShowOpenWizard()) {
        Daria.InlineWizard.openBeforeRender();
        Daria.InlineWizard.metriks(currentStep, 'Показ');
    } else {
        if (currentStep === 4) {
            Daria.InlineWizard.metriks(4, 'Показ');
        } else {
            Daria.InlineWizard.metriks(null, 'Показы закрытого');
        }
    }

    Jane.events.bind('onCollectorCreateSuccess.' + this.name, function(e, params) {
        var bCollectors = Jane.$B('collectors');
        if (bCollectors) {
            bCollectors.run();
        }
        hSettings.setSettingOn('no_collectors_bubble');
        Jane.Handler.doAll(['do-collector-run'], { popid: params.popid });
    });
};

InlineWizard.prototype.onshow = function() {
    this.bindMetriks();
};

InlineWizard.prototype.onhide = function() {
    $.each(this.metriks, function(selector) {
        $(selector, this.metriksContext).off('click');
    }.bind(this));
};

InlineWizard.prototype.bindMetriks = function(context) {
    var metriks = this.metriks = {
        /*pager*/
        '.js-inline-wizard-end': 'Готово',

        /*interface*/
        '.inline-wizard .b-color-scheme__theme': function(e) {
            var themeId = null;
            $(e.currentTarget).data('params').split('&').some(function(str) {
                var pair = str.split('=');
                if (pair[0] === 'color_scheme') {
                    themeId = pair[1];
                    return true;
                }
            });

            return ['Темы', 'Выбор темы', themeId];
        },

        /*sender*/
        '.js-add-upic': 'Загрузить фотографию',
        '.js-make-upic': 'Сфотографироваться',

        /*collector-create*/
        '.js-collector-create': ['Сборщики', 'Подключить'],

        /*phone*/
        '.js-phone-register-form .js-phone-register': ['Валидация', 'Сохранить', 'Телефон'],
        '.js-phone-confirm-form .js-phone-register': ['Валидация', 'Сохранить', 'Код'],
        '.js-inline-wizard-phone-later-link': ['Валидация', 'Добавить позже']
    };

    $.each(metriks, function(selector, message) {
        $(selector, context).on('click', Daria.InlineWizard.notifyMetriks.bind(null, message));
    }.bind(this));

};

/* ../../blocks/wizard/inline-wizard/inline-wizard.js end */

            /* ../../blocks/wizard/wizard.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.Wizard = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.Wizard, Block);

Block.add({
    name: "wizard",
    info: {
        blocks: [ "wizard-intro", "wizard-interface", "wizard-sender", "wizard-labels", "wizard-collector", "wizard-collector-create", "wizard-done" ],
        handlers: ['settings-color-schemes']
    },
    constructor: Block.Wizard
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.Wizard.prototype.onhtmlinit = function(node) {
    this.$node = $(node);
    this.nav = this.$node.find("td:has(a[data-params^=step])");
    this.prev = this.$node.find(".js-prev");
    this.next = this.$node.find(".js-forward");
    this.done = this.$node.find(".js-done");
    this.start = this.$node.find(".js-start");
    this.cancel = this.$node.find(".js-cancel");
    this.pageNumber = this.$node.find(".b-wizard-step__number");
    this.order = $.map(this.nav, function(el) {
        return $(el).children("a").attr("data-params").split("=")[1];
    });

    this.nav.click(function(e) {
        if ($(this).is(".b-wizard-menu__item_inactive")) {
            e.preventDefault();
            e.stopPropagation();
        }
    });

    this.$node.on('click', '.js-hasnot-mailbox', function() {
        Jane.Actions.run('collectors-promo.disable', {from: 'wizard'});
    });

    // Для эксперимента со страницей угона
    if (this.params['coollect-experiment']) {
        this.notifyMetriks('Показ', '', true);
    }
};

Block.Wizard.prototype.stepChanged = function(params) {
    var step = params.step;

    if (step === 'next') {
        params.step = this.order[this.currentIndex + 1] || 'done';
    }

    if (step === 'prev') {
        params.step = this.order[this.currentIndex - 1];
    }

    this.setCurrent(params);
    this.updateView(params);
    this.updatePager(params);
    this.updatePageNumber();
};

Block.Wizard.prototype.setCurrent = function(params) {
    var current = this.currentIndex = this.getIndex(params);

    this.nav.each(function(index) {
        var $tab = $(this);
        var isSelected = current === index;
        var isBeforeSelected = index < current;

        $tab.toggleClass("b-wizard-menu__item_selected", isSelected);
        $tab.next().toggleClass("b-wizard-menu__item_after-selected", isSelected);

        if (isSelected || isBeforeSelected) {
            $tab.removeClass("b-wizard-menu__item_inactive");
        }
    });
};

Block.Wizard.prototype.updatePageNumber = function() {
    var current = this.currentIndex + 1;
    var max = this.order.length;
    var pageNumber = i18n('%Wizard_step', current, max);

    this.pageNumber.text(pageNumber);
};

Block.Wizard.prototype.updatePager = function() {
    var prev = this.currentIndex - 1;
    var next = this.currentIndex + 1;

    if (next === 0) {
        this.start.show();
        this.cancel.show();
    } else {
        this.start.hide();
        this.cancel.hide();
    }

    if (this.experiment && next == 1) {
        this.cancel.show();
    }

    if (prev >= 0) {
        this.prev.attr("data-params", "step=" + this.order[prev]);
        this.prev.show();
    } else {
        this.prev.hide();
    }

    if (next && next < this.order.length) {
        this.next.attr("data-params", "step=" + this.order[next]);
        this.next.show();
    } else {
        this.next.hide();
    }

    if (next === this.order.length) {
        this.done.show();
    } else {
        this.done.hide();
    }

};

Block.Wizard.prototype.getIndex = function(params) {
    var index = -1;
    var step = params.step.split("-")[0];
    for (var i = 0, l = this.order.length; i < l; i++) {
        if (this.order[i] == step) {
            index = i;
            break;
        }
    }

    return index;
};

Block.Wizard.prototype.updateView = function(params) {
    var prev = this.prevStep;
    var curent = params.step;
    this.$node.find(".block-wizard-" + (prev || "intro")).find(".b-wizard-step").addClass("g-vhidden");
    // какой-то баг в sizzle и ie8/7, он неправильно находит .block-wizard-collector-create .b-wizard-setup
//    this.$node.find(".block-wizard-" + curent + " .b-wizard-step").removeClass("g-vhidden");
    this.$node.find(".block-wizard-" + curent).find(".b-wizard-step").removeClass("g-vhidden");
    Jane.Block.trigger("wizard-" + prev, "onhide");
    Jane.Block.trigger("wizard-" + curent, "onshow");
    this.notifyMetriks("Показы");
    this.prevStep = curent;
};

Block.Wizard.prototype.notifyMetriks = function(message, e, ignoreStep) {
    var msg = [];
    if (this.params['coollect-experiment']) {
        var urlParams = Daria.getUrlParams();
        var exp = urlParams['exp'];
        if (exp) {
            if (exp == "4") {
                msg.push('collect-coupons', 'Шаг 2');
            }
            if (exp == "5") {
                msg.push('collect-tickets', 'Шаг 2');
            }
            if (exp == "6") {
                msg.push('collect-events', 'Шаг 2');
            }
        } else {
            msg.push('Страница угона вариант №2', 'Шаг 2');
        }
    } else if (this.experiment) {
        msg.push('Визард (эксперимент)');
    } else {
        msg.push('Визард');
    }

    if (!ignoreStep) {
        msg.push(this.order[this.currentIndex] || "intro");
    }

    if (typeof message == "function") {
        msg = msg.concat(message(e));
    } else {
        msg.push(message);
    }
    Jane.c.apply(null, msg);
};

Block.Wizard.prototype.unbindMetriks = function() {
    $.each(this.metriks, function(selector) {
        $(selector, this.metriksContext).on("click");
    }.bind(this));
};

Block.Wizard.prototype.bindMetriks = function(context, experiment) {
    this.metriksContext = context;
    this.experiment = experiment;
    var metriks = this.metriks = {
        /*closebutton*/
        ".b-popup__close": "Клик на крестик закрытия",

        /*pager*/
        ".js-start": "Клик на кнопку 'Настроить почту'",
        ".js-cancel": "Клик на кнопку 'Позже'",
        ".js-forward": "Клик на 'Далее'",
        ".js-prev": "Клик на 'Назад'",
        ".js-done": "Клик на 'Готово'",

        /*sender*/
        ".js-add-upic": "Клик на 'Загрузить фотографию'",
        ".js-make-upic": "Клик на 'Сфотографироваться'",

        /*collector*/
        ".js-has-mailbox": "Клик на 'Да, есть'",
        ".js-hasnot-mailbox": "Клик на 'Нет'",

        /*collector-create*/
        ".js-collector-create": "Клик на 'Включить сборщик'",

        /*done*/
        '.js-phone-register-form .js-phone-register': "Клик на кнопку 'Сохранить'",
        '.js-phone-confirm-form .js-phone-register': "Клик на 'Подтвердить'"
    };

    $.each(metriks, function(selector, message) {
        $(selector, context).on('click', this.notifyMetriks.bind(this, message));
    }.bind(this));

};

/* ../../blocks/wizard/wizard.js end */

            /* ../../blocks/wizard/wizard-intro/wizard-intro.js begin */
Block.WizardIntro = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardIntro, Block);

Block.add({
    name: "wizard-intro",
    info: {},
    constructor: Block.WizardIntro
});

/* ../../blocks/wizard/wizard-intro/wizard-intro.js end */

            /* ../../blocks/wizard/wizard-interface/wizard-interface.js begin */
Block.WizardInterface = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardInterface, Block);

Block.add({
    name: "wizard-interface",
    info: {
    },
    constructor: Block.WizardInterface
});

/* ../../blocks/wizard/wizard-interface/wizard-interface.js end */

            /* ../../blocks/wizard/wizard-sender/wizard-sender.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardSender = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardSender, Block);

Block.add({
    name: "wizard-sender",
    info: {
        handlers: [ "account-information", "settings" ]
    },
    constructor: Block.WizardSender
});

/* ------------------------------------------------------------------------------------------------------------- */

/**
 * Свойство для временного хранения пользовательской подписи
 **/
Block.WizardSender.prototype.userSignatureTmp = '';

/**
 * @des Ининциализация nanoislands элементов
 * внутри блока
 */
Block.WizardSender.prototype.initializeNanoislands = function() {
    nb.init(this.getCacheNode());
};

Block.WizardSender.prototype.onhtmlinit = function(node) {
    this.$node = $(node);

    this.initializeNanoislands();

    this.$upic = this.$node.find(".b-userpic-choose__pic-image__image");
    this.$del = this.$node.find('.b-userpic-choose__pic-change');

    this.saveSettingsTimeout = 500;
    this.settingsParams = {};

    //выводим последнюю подпись
    var signs = Jane.$H('settings').signature.getPlain();
    if (signs.length) {
        this.userSignatureTmp = Jane.$H('settings').signature.getPlain().pop().convert;
        this.$node.find('.js-wizard-add-signature').text(this.userSignatureTmp);
    }
};

Block.WizardSender.prototype.onshow = function() {
    this.bindEvents();
};

Block.WizardSender.prototype.bindEvents = function() {
    var $node = $(this.getCacheNode());
    var that = this;

    $node.on('change', function(e) {
        var hSettings = Jane.$H('settings');
        if (e.target.name === 'file') {
            Daria.upicUploader.upload(e.target, that.upicUpdate.bind(that));
            return;
        }

        if (e.target.name === 'signature') {
            var userSignature = $node.find('.js-wizard-add-signature').val();

            if (!userSignature) {
                if (that.userSignatureTmp) {
                    hSettings.signature.removeByText(that.userSignatureTmp);
                }
                return;
            }

            if (that.userSignatureTmp) {
                hSettings.signature.changeByText(userSignature, that.userSignatureTmp);
                that.userSignatureTmp = userSignature;
                return;
            }

            hSettings.signature.addSignature({ text: userSignature }, function(isSuccess, errors) {
                if (isSuccess) {
                    that.userSignatureTmp = userSignature;
                } else {
                    if ($.inArray('signs.maxcount', errors) !== -1) {
                        Daria.Dialog.notice({ body: i18n('%Setup_Sender_Dialog_Sign_maxcount'), width: 350 });

                    } else if ($.inArray('signs.maxlen', errors) !== -1) {
                        Daria.Dialog.notice({ body: i18n('%Setup_Sender_Dialog_Sign_maxlength'), width: 350 });

                    } else {
                        Daria.Statusline.showMsg({
                            name: 'signature.append.result',
                            body: i18n('%Signature_append_error'),
                            body3: i18n('%Signature_append_error')
                        });
                    }
                }
            });
        }

        that.settingsParams[e.target.name] = e.target.value;
        that.save();
    });

    // Слушаем событие change
    // на всех nb-select внутри блока
    $node.find('.js-nb-select').each(function() {
        nb.block(this).on('nb-changed', function() {
            that.settingsParams[this.getName()] = this.getState().value;
            that.save();
        });
    });
};

Block.WizardSender.prototype.save = function() {
    if (this.saveSettings) {
        clearTimeout(this.saveSettings);
    }
    this.saveSettingsWithTimeout();
};

Block.WizardSender.prototype.saveSettingsWithTimeout = function() {
    this.saveSettings = setTimeout(function() {
        Jane.$H('settings').setSettings(this.settingsParams);
    }.bind(this), this.saveSettingsTimeout);
};

Block.WizardSender.prototype.userpicMake = function() {
    this.upicMaker = $(Jane.tt('mail-common:upicMaker', {
        'upload-url': Daria.Config['mail-url'] + Daria.handlersPrefix + '/upload.jsx?_ckey=' + encodeURIComponent(Daria.Page.ckey),
        'callback': 'Jane.$B(\"wizard-sender\").onUserpicMake',
        'cancel': true
    }));
    this.$node.append(this.upicMaker);
};

Block.WizardSender.prototype.onUserpicMake = function() {
    this.upicUpdate();
    this.upicMaker.remove();
};

Block.WizardSender.prototype.upicUpdate = function() {
    // показываем ссылку удалить
    this.$upic.attr('src', this.$upic.data("src") + '?rnd=' + Daria.now());
    this.$del.removeClass('g-hidden');
};

Block.WizardSender.prototype.userpicRemove = function() {
    var nopic = "b-mail-person__userpic_none";
    if ($.inArray(Daria.locale, ['tr', 'en']) > -1) {
        nopic += '_' + Daria.locale;
    }

    nopic = Jane.getEntity(nopic + '.png');

    // изменение src юзерпика на "Нет фото"
    this.$upic.attr('src', nopic);
    // скрытие ссылки удалить
    this.$del.addClass('g-hidden');
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/wizard/wizard-sender/wizard-sender.js end */

            /* ../../blocks/wizard/wizard-labels/wizard-labels.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardLabels = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardLabels, Block);

Block.add({
    name: "wizard-labels",
    info: {
        handlers: [ "labels", "labels-colors" ]
    },
    constructor: Block.WizardLabels
});

/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardLabels.prototype.onhtmlinit = function(node) {
    nb.init(node);
    this.$node = $(node);

    //Максимум дополнительных кастомных лейблов
    var numCustomLabels = 5;

    /**
     * Метод для навешивания событий на свежеотрендеренный контрол добавления кастомного лейбла
     *
     * @param {nb.block} nbCheckbox
     * @param {nb.block} nbInput
     */
    var bindEvents = function(nbCheckbox, nbInput) {
        var nbInputIsEmpty = function() {
            return !$.trim(nbInput.getValue());
        };

        //По фокусу ставим чекбокс
        nbInput.on('focusin', function() {
            nbCheckbox.check();
        });

        //Если инпут пустой, то снимаем чекбокс -- не должно быть пустого лейбла
        nbInput.on('focusout', function() {
            setTimeout(function() {
                if (nbInputIsEmpty()) {
                    nbCheckbox.uncheck();
                }
            });
        });

        //Если в инпуте что-то есть и это последний кастомный лейбл, добавляем ещё один
        nbInput.on('keyup', function() {
            if (nbInputIsEmpty()) {
                return;
            }

            var $box = nbInput.$node.closest('.js-label-new');
            if (!$box.next().size() && numCustomLabels) {
                numCustomLabels--;

                var $newBox = $(Jane.tt('mail-common:wizard-custom-labels', {}, [ "labels-colors" ]));
                nb.init($newBox.get(0));
                $box.after($newBox);

                //На свежеотрендеренные и инициализированные блоки нужно навесить всё те же события.
                bindEvents(
                    nb.block($newBox.find('.js-label-checkbox').get(0)),
                    nb.block($newBox.find('.js-label-input').get(0))
                );
            }
        });

        nbCheckbox.on('nb-checked', function() {
            nbInput.focus();
        });
    };

    bindEvents(
        nb.block(this.$node.find('.js-label-checkbox').get(0)),
        nb.block(this.$node.find('.js-label-input').get(0))
    );
};

Block.WizardLabels.prototype.deleteLabel = function(label) {
    Jane.Handler.doAll(
        ['do-labels-delete', 'labels'],
        { lids: label.lid },
        function(data) {
            if (data && data.handlers[0].status === 'ok' && data.handlers[1].status === 'ok') {
                //TODO: возможно есть лучшее решение перерисовки блока при изменении данных
                // если удаление прошло успешно, перезапрашиваем метки и перерисовываем блок с ними
                var bLabels = Jane.$B('labels');
                if (bLabels) {
                    bLabels.run();
                }
            }
        }
    );
};

Block.WizardLabels.prototype.onshow = function() {
    var deleteLabel = this.deleteLabel;

    function onUncheckedDeleteLabel() {
        var labelText = this.$node.text() || this.$node.closest('.js-form-field').find('.js-label-input').val();
        if (labelText) {
            var label = Jane.$H('labels').getLabelByName(labelText);

            if (label) {
                deleteLabel(label);
            }
        }
    }

    function bindLabelsEvents(nbCheckbox) {
        var $nbCheckbox = nb.block(nbCheckbox);
        if ($nbCheckbox) {
            $nbCheckbox.on('nb-unchecked', onUncheckedDeleteLabel);
        }
    }

    $.each(this.$node.find('.js-inline-wizard-label-checkbox, .js-label-checkbox'), function(index, label) {
        bindLabelsEvents(label);
    });
};

Block.WizardLabels.prototype.addLabels = function() {
    var params = this.getParams();
    if (params.length) {
        var bLabels = Jane.$B("labels");
        var bLabelsActions = Jane.$B("labels-actions");
        var bWizard = Jane.$B("wizard");

        Jane.Handler.doAll(params, function() {
            if (bLabels) {
                bLabels.run();
            }
            if (bLabelsActions) {
                bLabelsActions.run();
            }
            // проверяем находимся ли мы в старом визарде, потому что это его метрика
            if (bWizard) {
                bWizard.notifyMetriks("Добавление новой метки");
            }
        });
    }
    // подписываем новые созданные метки на событие отмены
    this.onshow();
    var that = this;
    function onFocusLabeleDeteteIt() {
        var labelText = $(this).val();
        var label = Jane.$H('labels').getLabelByName(labelText);
        if (label) {
            that.deleteLabel(label);
        }
    }

    $.each(this.$node.find('.js-label-input'), function() {
        $(this).on('focus', onFocusLabeleDeteteIt);
    });
};

Block.WizardLabels.prototype.onFocusLabeleDeteteIt = function() {
    var labelText = $(this).val();
    var label = Jane.$H('labels').getLabelByName(labelText);
    if (label) {
        this.deleteLabel(label);
    }
};

Block.WizardLabels.prototype.onhide = function() {
    if (Jane.$B('wizard')) {
        this.addLabels();
    }
    $(document).trigger("b-mail-dropdown-closeall");
};

Block.WizardLabels.prototype.getParams = function() {
    var $labels = this.$node.find('input:checked');
    var name;
    var color;
    var params = [];

    function some(arr, fn) {
        var result;
        $.each(arr, function(i, v) {
            result = fn(v);
            return result;
        });
        return result;
    }

    $.each($labels, function() {
        var $parent = $(this).parents('.b-form-layout__line');
        name = $.trim($parent.find('input[name=label_name]').val());
        //Не добавляем уже добавленные метки
        if (some(params, function(v) {
            return v.params.label_name == name;
        })) {
            return;
        }
        color = Daria.parseQuery($parent.find('.b-label').attr('data-params'))['color'];

        if (!Jane.$H('labels').getLabelByName(name)) {
            params.push({
                handlers: ['do-labels-add', 'labels'],
                params: { label_name: name, label_color: parseInt(color, 16) }
            });
        }
    });

    return params;
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/wizard/wizard-labels/wizard-labels.js end */

            /* ../../blocks/wizard/wizard-collector/wizard-collector.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardCollector = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardCollector, Block);

Block.add({
    name: "wizard-collector",
    info: {
        handlers: []
    },
    constructor: Block.WizardCollector
});

/* ------------------------------------------------------------------------------------------------------------- */

/* ../../blocks/wizard/wizard-collector/wizard-collector.js end */

                /* ../../blocks/wizard/wizard-collector-create/wizard-collector-create.js begin */
Block.WizardCollectorCreate = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardCollectorCreate, Block);

Block.add({
    name: 'wizard-collector-create',
    info: {
        handlers: {
            'collector-settings': true,
            'collector-texts': true
        }
    },
    constructor: Block.WizardCollectorCreate
});

/* ------------------------------------------------------------------------------------------------------------- */
Block.WizardCollectorCreate.prototype.onhtmlinit = function(node) {
    this.$node = $(node);

    var hSettings = Jane.$H('settings');
    // инициализация валидатора настроек
    new Daria.Collectors.Settings($(node).find('form'));

    Jane.events.bind('onCollectorCreateSuccess.' + this.name, function(e, params) {
        var bCollectors = Jane.$B('collectors');
        if (bCollectors) {
            bCollectors.run();
        }
        // проверяем какой из визардов содержит в себе блок
        if (Jane.Page.type === 'messages' && Jane.$B('inline-wizard')) {
            Daria.InlineWizard.metriks(2, ['Подключить', 'Сборщик создан']);

            Actions.run('wizard.step-inline-block', { step: 'next' });
        } else {
            Jane.Actions.run('wizard.start', { 'step': 'next' });
        }
        hSettings.setSettingOn('no_collectors_bubble');
        Jane.Handler.doAll(['do-collector-run'], { popid: params.popid });
    });
};

Block.WizardCollectorCreate.prototype.onshow = function() {
    this.$node.find('input[name=email]').focus();
};

/* ../../blocks/wizard/wizard-collector-create/wizard-collector-create.js end */

            /* ../../blocks/wizard/wizard-done/wizard-done.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.WizardDone = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.WizardDone, Block);

Block.add({
    name: "wizard-done",
    info: {
        handlers: ['phone-unconfirmed']
    },
    constructor: Block.WizardDone
});

/* ------------------------------------------------------------------------------------------------------------- */

Daria.phoneRegistrationInWizard = function(node) {
    var root = $(".js-wizard-form:visible", node);
    var phoneNumber;
    var tickTimer = function(timeout, $node) {
        var timer = timeout;
        var _timerCallback = function() {
            timer = timer - 1000; // секунды

            var hours = timer / (60 * 60 * 1000);
            var min = timer / (60 * 1000);
            var sec = timer / 1000;
            var formated = "";

            hours = hours - (hours % 1);

            min = min - (min % 1) - hours * 60;
            sec = sec - (sec % 1) - min * 60;
            sec = sec - hours * 3600;

            if (hours) {
                formated += hours + ":";
            }

            if (sec < 10) {
                sec = '0' + sec;
            }

            formated += min + ":";
            formated += sec;

            $node.find('.b-intruder__timer').html(formated);

            if (!timer) {
                clearInterval(tickTimer.revalidateTimerInterval);
            }
        };

        if (tickTimer.revalidateTimerInterval) {
            clearInterval(tickTimer.revalidateTimerInterval);
            $node.find('.b-intruder__timer').html('');
        }

        // запускаем счетчик
        tickTimer.revalidateTimerInterval = setInterval(_timerCallback, 1000);
        _timerCallback();
    };

    var bCompose = Jane.$B("compose");
    if (bCompose) {
        bCompose.hasUserPhone = true;
    }

    //Номер зарегестрирован
    Jane.events.bind("phone-registered-success", function(name, data) {
        var hPhoneUnconfirmed = Jane.$H('phone-unconfirmed');
        var number = data.number || Jane.$H('phone-register').getNumber();
        var phoneid = hPhoneUnconfirmed.getIdByNumber(number);

        var params = 'number=' + number;
        phoneNumber = number;

        if (phoneid) {
            params += '&phoneid=' + phoneid;
        }

        $(".js-phone-register-number-text", node).html(number);
        $(".js-phone-revalidate", node).attr('data-params', params);
        $('div[data-action="phone.confirm"]', node).attr('data-params', 'owned=wizard');

        tickTimer.phoneid = number;

        changeStep(".js-phone-confirm-form");
        root.find(".js-confirm-hint").removeClass("g-hidden");
        if (!data.o || !data.o.params || !data.o.params.revalidate) {
            Jane.events.trigger("phone-revalidate-success", data);
        }
    });

    //Номер подтвержден
    Jane.events.bind("phone-confirmed-success", function() {
        var number = Jane.$H("settings").getSetting("phone-number");

        // Send sms about mobile Yandex.Mail
        Jane.Actions.run('phone.getAppLink', {
            phoneNumber: number
        });

        Jane.ErrorLog.send({
            event: "wizard-phone-metrika",
            uid: Daria.uid
        });

        changeStep(".js-phone-registration-success_myp");
    });

    //Код был отправлен повторно (revalidate)
    Jane.events.bind("phone-revalidate-success", function() {
        var $rootNode = $(node);
        var $node = $rootNode.find('.js-revalidate-confirm');
        var id = tickTimer.phoneid;
        var count = tickTimer[id] || 0;

        if (id) {
            tickTimer[id] = count + 1;
        }
        //ссылку на повторную отправку показываем через 3 мин, 10 мин, 24 часа
        var timeout = [ 180000, 600000, 24 * 3600000][count] || (24 * 3600000);

        tickTimer(timeout, $rootNode);

        $rootNode.find('.js-timer').removeClass('g-hidden');
        $rootNode.find('.js-revalidate').addClass('g-hidden');
        setTimeout(function() {
            $rootNode.find('.js-timer').addClass('g-hidden');
            $rootNode.find('.js-revalidate').removeClass('g-hidden');
        }, timeout);

        $node.removeClass('g-hidden');
        setTimeout(function() {
            $node.addClass('g-hidden');
        }, 5000);
    });

    //Обработка ошибок
    Jane.events.bind("phone-registered-failure", function(name, params) {
        // DARIA-18894
        if (params.status === 'NUMEXISTS') {
            Jane.events.trigger('phone-registered-success', params.o && params.o.params);
            return;
        }

        if (params.status === 'TEMPORARYBLOCK' && tickTimer.revalidateTimerInterval) {
            changeStep(".js-phone-confirm-form");
            root.find(".js-confirm-hint").removeClass("g-hidden");
            return;
        }

        root.find(".js-confirm-hint").addClass("g-hidden");
        error(Jane.$H("phone-register").parseError(params.status));
    });

    Jane.events.bind("phone-confirmed-failure", function(name, params) {
        root.find(".js-confirm-hint").addClass("g-hidden");
        error(Jane.$H("phone-confirm").parseError(params.status, params.left), function() {
            root.find(".js-confirm-hint").removeClass("g-hidden");
        });
    });

    Block.WizardDone.changeStep = changeStep;

    function changeStep(cls) {
        // это необходимо для нового визарда, потому что теряется нода
        var $node = Jane.$B('wizard-done').$node;
        if (!root) {
            root = $(".js-wizard-form:visible", $node);
        }
        // hide error message node
        root.find(".g-error").addClass("g-hidden");

        root.addClass("g-hidden");
        root = $node.find(cls).removeClass("g-hidden");
    }

    function error(msg, callback) {
        var errNode = root.find(".g-error");
        errNode.html(msg);
        errNode.removeClass("g-hidden");
        root.find("input:eq(0)").focus(
            function() {
                errNode.addClass("g-hidden");
                if (callback) {
                    callback();
                }
            }
        );
    }
};

Block.WizardDone.prototype.onhtmlinit = function(node) {
    this.$node = $(node);

    Jane.events.bind("phone-checked", function(name, status) {
        if (status === "no") {
            Daria.phoneRegistrationInWizard(node);
            this.$node.find(".b-form-layout").removeClass("g-vhidden");
        }
    }.bind(this));

    Actions.run("passport.phone-check");
};

Block.WizardDone.prototype.onshow = function() {
    window.setTimeout(function() {
        // input может быть скрыт и IE кинут ошибку
        try {
            this.$node.find('input[name=number]').focus();
        } catch(e) {
        }
    }.bind(this), 1);

};

/* ../../blocks/wizard/wizard-done/wizard-done.js end */

            /* ../../blocks/wizard/inline-wizard-done/inline-wizard-done.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Jane.Block.create('inline-wizard-done', {});

/* ../../blocks/wizard/inline-wizard-done/inline-wizard-done.js end */


        /* ../../blocks/search/search.js begin */
/* ------------------------------------------------------------------------- */

Block.Search = Jane.Block.create('search');

/* ------------------------------------------------------------------------- */

Block.Search.prototype.toshow = function(params) {
    return _(['message', 'messages', 'compose']).contains(params._page);
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.onhtmlinit = function(node) {
    var $node = $(node);
    this.$search = $node.find('.jane-search');

    this._$searchOptionsToggle = this.$search.find('.js-search-options-toggle');
    this.$spinner = this.$search.find('.b-mail-icon_ajax-loader');
    this.$toolbarRight = $node.closest('.b-toolbar__block_right');
    this.nbInput = nb.$block('.js-search-input', this.$search);

    this._onFocusBinded = this._onFocus.bind(this);
    this._onBlurBinded = this._onBlur.bind(this);

    if (Daria.layout === '2pane') {
        var $searchInput = this.nbInput.$node;
        this.rightOffset = $(document).width() - $searchInput.offset().left - $searchInput.outerWidth();
    } else {
        this.rightOffset = $('.b-header__right').width() + 36;
    }

    this._bindEventListeners();
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.onshow = function() {
    Daria.SearchOptions.setAnchor(this._$searchOptionsToggle);
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.onhtmldestroy = function() {
    this._unbindEventListeners();
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.startSearch = function() {
    Actions.run('search', {
        options: Daria.SearchOptions.getSearchOptions()
    });
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype._bindEventListeners = function() {
    var that = this;

    this.$search.on('submit', function(e) {
        that.startSearch();

        e.preventDefault();
        e.stopPropagation();
    });

    this.$search
        .on('mousedown', '.js-search-options-toggle', function(e) {
            e.preventDefault();
        })
        .on('click', '.js-search-options-toggle', function() {
            if (!that.nbInput.$control.is(':focus')) {
                that._skipOneSuggest = true;
            }

            that.toggleSearchOptions();

            Jane.c('Поиск', 'Клик по расширенному поиску');
        });

    /**
     * FIXME: Зачем это вообще нужно?
     * @see DARIA-30113
     */
    Jane.events.bind('pageunload', function() {
        // после destroy() автокомплите, инпута у него не будет
        if (that._autocompleter && that._autocompleter.$input) {
            that._autocompleter.$input.trigger('focusout.autocomplete');
        }
    });

    this._onSearchOptionsOpen = Jane.events.bind('search-options:opened', function() {
        //that.nbInput.focus();
        that._$searchOptionsToggle.addClass('g-active');
    });

    this._onSearchOptionsClose = Jane.events.bind('search-options:closed', function() {
        that._$searchOptionsToggle.removeClass('g-active');
    });

    this.nbInput.on('nb-focused', this._onFocusBinded);
    this.nbInput.on('focusin', this._onFocusBinded);

    this.nbInput.on('nb-blured', this._onBlurBinded);
    this.nbInput.on('focusout', this._onBlurBinded);

    // Показываем спиннер при поиске
    Jane.events.bind('search', function(name, started) {
        that.$spinner.toggleClass('g-hidden', !started);
    });

    //Jane.events.bind('dialog.close', function() {
    //    that.$submit.prop('disabled', false);
    //    that.$spinner.addClass('g-hidden');
    //});
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.toggleSearchOptions = function() {
    var searchOptions = Daria.SearchOptions;

    if (searchOptions.isOpened()) {
        searchOptions.close();
        //this._onFocus();
    } else {
        if (this._autocompleter) {
            this._autocompleter.destroy();
        }

        searchOptions.open();
    }
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype._unbindEventListeners = function() {
    Jane.events.unbind('search-options:opened', this._onSearchOptionsOpen);
    Jane.events.unbind('search-options:closed', this._onSearchOptionsClose);
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype._onFocus = function() {
    var that = this;

    if (!this._skipOneSuggest) {
        this._autocompleter = this._autocompleter || Daria.Autocompleter.getSearch();

        this._autocompleter.setOptions({
            position: {
                left: 'auto',
                right: this.rightOffset + 1
            },
            width: null,
            topOffset: 4,
            additionalClass: '',
            doubleOrient: false,
            onselect: function() {
                that.startSearch();
            }
        });

        this._autocompleter.bindField({
            field: this.nbInput.$control.get(0),
            focus: 1
        });
    } else {
        _.defer(function() {
            that._skipOneSuggest = false;
        });
    }

    that.toggleActive(true);
};

Block.Search.prototype._onBlur = function() {
    var that = this;

    _.delay(function() {
        that.toggleActive(Daria.SearchOptions.isOpened());
    }, 50);
};

/* ------------------------------------------------------------------------- */

/**
 * Выставляет класс для расширения/сужения поля поиска.
 * @param {boolean} flag
 */
Block.Search.prototype.toggleActive = function(flag) {
    this.$toolbarRight.toggleClass('b-toolbar__block_search-focus', flag);

    _.delay(function() {
        try {
            Jane.$B('toolbar-box').getActive().toolbar.restruct();
        } catch(e) {}
    }, 400);
};

/* ------------------------------------------------------------------------- */

Block.Search.prototype.onrepaint = function(params) {
    this.nbInput.setValue(params.scope === 'rpopid' ? '' : params.request);

    if (params._page === 'messages' && params.search === 'yes') {
        this.nbInput.blur();
    }
};

/* ------------------------------------------------------------------------- */

/* ../../blocks/search/search.js end */

        /* ../../blocks/kbd-dropdown-navigation.js begin */
Block.KbdDropdownActions = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.KbdDropdownActions, Block);

/**
 * Клавиатурное перемещение вверх/вниз по списку папок
 * @param  {String} direction направление up/down
 */
Block.KbdDropdownActions.prototype.moveKbdCursor = function(direction) {

    var that = this;


    /**
     * Проверяет, нужно ли прокручивать список папок. Если нужно, то прокручивает.
     * @param  {$DOM} domNode ссылка на папку
     */
    var needScroll = function(domNode) {

        domNode = domNode[0];

        if (!domNode || !domNode.offsetParent) {
            return false;
        }

        var scrolling  = 0;
        var parentRect = domNode.offsetParent.getBoundingClientRect();
        var rect       = domNode.getBoundingClientRect();
        var gap        = rect.height;

        // ниже
        if (rect.top + rect.height + gap >= parentRect.bottom) {
            scrolling = parentRect.bottom - rect.top - rect.height - gap;
        }

        // выше
        if (rect.top < parentRect.top + gap) {
            scrolling = parentRect.top - rect.top + gap;
        }

        if (scrolling !== 0) {
            domNode.offsetParent.scrollTop += (scrolling > 0) ? -scrolling : Math.abs(scrolling);
        }
    };

    /**
     * Возвращает предыдущий индекс папки в массиве visibleList
     * @return {Number}
     */
    var findNext = function() {

        if (that.kbdSelected === null) {
            return 0;
        }

        if (that.kbdSelected + 1 < that.visibleList.length) {
            return that.kbdSelected + 1;
        } else {

            // дошли до последнего элемента и нужно выделить "новую папку"
            return -2;
        }
    };


    /**
     * Возвращает следующий индекс папки в массиве visibleList
     * @return {Number}
     */
    var findPrev = function() {

        if (that.kbdSelected < 0) {
            return -1;
        }

        if (that.kbdSelected === null) {
            return 0;
        }

        if (that.kbdSelected - 1 > -1) {
            return that.kbdSelected - 1;
        }

        return -1;
    };


    /**
     * Перемещение курсора по папкам
     * @param  {Number} index индекс папки в visibleList
     */
    var moveCursor = function(index) {
        var current = that.visibleList[that.kbdSelected];
        var next    = that.visibleList[index];

        if (current) {
            current.$node.removeClass(that.selectedClass);
        } else {
            if (that.newListElementActive) {
                $(that.newListSelector).removeClass(that.selectedClass);
                that.newListElementActive = false;
            }
        }

        if (next) {
            needScroll(next.$node);
            next.$node.addClass(that.selectedClass);
            that.kbdSelected = index;

        } else {

            if (index === -2) {
                that.newListElementActive = true;
                $(that.newListSelector).addClass(that.selectedClass);
                that.kbdSelected = that.visibleList.length;
            }

            if (index === -1) {
                that.kbdSelected = -1;
            }
        }
    };

    if (direction === 'down') {
        moveCursor(findNext());
    } else {
        moveCursor(findPrev());
    }
};

/* ------------------------------------------------------------------------------------------------------------- */


/* ../../blocks/kbd-dropdown-navigation.js end */

        /* ../../blocks/labels-actions/labels-actions.js begin */
/*global Jane, Daria, $, Block, Page, MessageAction */

/* ------------------------------------------------------------------------------------------------------------- */

Block.LabelsActions = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.LabelsActions, Block.KbdDropdownActions);

Block.add({
    name: "labels-actions",
    info: {
        handlers: [ "labels", 'settings' ]
    },
    constructor: Block.LabelsActions
});

/* ------------------------------------------------------------------------------------------------------------- */
if (Daria.layout == '2pane') {

    Block.LabelsActions.prototype.toshow = function(params) {
        var type = params._page;

        // FIXME: Унести этот код куда-нибудь. Он дублируется уже в паре мест.
        var fid;
        if (type == "messages") {
            fid = params.current_folder;
        } else if (type == "message") {
            fid = Jane.$H("message").getFolderId(params.ids);
        }

        // FIXME: Если сразу придти на просмотр спамового письма, то в кэше еще не будет информации про письмо и
        // не удастся определить, спам это или нет. Так что выпадулька будет видна в этом случае.
        // Кажется, это не полечить. Думаю, что не сильно критично -- случай нечастый и поставить метку все равно не получится.
        return (type == "message" || type == "messages" || type == "compose") &&
            (fid != Jane.$H("folders").ids.spam) &&
            (fid != Jane.$H("folders").ids.trash); // || page == "compose"; -- временно прячем "поставить метку" в композе.
    };
}

Block.LabelsActions.prototype.onhtmlinit = function(node) {

    var that = this;

    that.$dropdown = $('.b-mail-dropdown', node).on("b-mail-dropdown-open", function() {
        that.onopen();
    });

    that.newListSelector = '.b-mail-dropdown__box .js-label-new';
    that.$labelsHolder = $('.js-labels-list', node);
    that.selectedClass = 'b-mail-dropdown__item-kbd-selected';

    that.elContentSelector = '.b-mail-dropdown__item__content__wrapper';
    that.elSelector = '.js-kbd-lbl-nav:visible';

    if (Daria.layout == '2pane') {
        $(document).on("b-mail-dropdown-disabled", this._dropdownHideHandler = function(evt, dropdown) {
            if (that.$dropdown && dropdown == that.$dropdown.get(0) && !Jane.watcher.get('folder-actions-mode')) {
                MessageAction.warning();
            }
        });
    }

    that._toggle(Jane.watcher.get('action-label-status'));
    that._bindEvents();

    var lazyFilterRefresh = function() {
        if (!that.$searchInput) {
            return;
        }

        var value = $.trim(that.$searchInput.val());
        var search = value.toLowerCase();

        if (that.prevSearch === null) {
            that.prevSearch = '';
        }

        if (search !== that.prevSearch) {
            that.prevSearch = search;
            that.filterLabels(search);
            if (search.length && !that.infilteredList(search)) {
                that.makeFakeLabel(value);
            } else {
                that.removeFakeLabel();
            }
            setTimeout(function() {
                that.resetKdbSelection();
            }, 150);
        }
    }.lazy(100);

    /**
     * Клавиатурная навигация по выпадушке
     * @param  {Event} e
     */
    var kdbSelectLabel = function(e) {
        switch (e.which) {

            // Enter
        case 13:

            // если выделена папка
            if (that.kbdSelected !== null && that.kbdSelected > -1) {
                e.stopPropagation();

                if (that.visibleList[that.kbdSelected]) {
                    that.visibleList[that.kbdSelected].$node.find('.daria-action').trigger('click');

                } else {
                    //считаем, что кликнули по "новой метке"
                    that.createNewLabel();
                }
                return false;
            }

            lazyFilterRefresh.exec.call(this);

            // Смотрим, если у нас в списке осталась только одна папка (отфильтрованная или фэйковая)
            if (that.filteredList.length && that.$fakeLabel) {
                return false;
            } else {
                if (that.filteredList.length <= 1) {
                    e.stopPropagation();
                    (that.$fakeLabel || that.filteredList[0].$node).find('[data-action]').trigger('click');
                }
            }
            break;

            // Down
        case 40:
            that.moveKbdCursor('down');
            e.stopPropagation();
            break;

        case 38:
            that.moveKbdCursor('up');
            e.stopPropagation();
            break;

        default:
            lazyFilterRefresh();
            break;
        }
    };

    that.$searchInput = $('input.b-mail-dropdown__search__input', node).on({
        keydown: kdbSelectLabel
    });

    $(document).on('click.newLabelClick', that.newListSelector, function() {
        that.createNewLabel();
    });

    Jane.events.bind('b-mail-dropdown-closed', function() {
        $("." + that.selectedClass).removeClass(that.selectedClass);
    });
};

Block.LabelsActions.prototype.createNewLabel = function() {
    if (!this.$searchInput) {
        return;
    }

    var name = Daria.capitalize($.trim(this.$searchInput.val()));

    Jane.Actions.run("labels.add", {
        'name': name,

        // прокидываем message-id из дропдауна меток в письме в 3pane
        'message-id': $(this.newListSelector).attr('data-message-id')
    });
};

Block.LabelsActions.prototype._bindEvents = function() {
    this._newLabelCreateHandler = function() {
        // без функции не обойтись, иначе в ран уйдут аргументы из events.bind
        this.run(null, null, {parallel: true/*чтобы никто не убил*/});
    }.bind(this);

    this._actionLabelStatusHandler = function(e, diff) {
        this._toggle(diff.value);
    }.bind(this);

    // вешаемся на событие создание новой метки
    Jane.events.bind('new-label-created', this._newLabelCreateHandler);
    Jane.events.bind('action-label-status.change', this._actionLabelStatusHandler);
};

Block.LabelsActions.prototype.onhtmldestroy = function() {

    $(document).off('click.newLabelClick')
        .off('b-mail-dropdown-disabled', this._dropdownHideHandler);

    if (this.$searchInput) {
        this.$searchInput.off();
        this.$searchInput = null;
    }

    if (this.$dropdown) {
        this.$dropdown.off();
        this.$dropdown = null;
    }

    Jane.events.unbind('new-label-created', this._newLabelCreateHandler);
    this._newLabelCreateHandler = null;

    Jane.events.unbind('action-label-status.change', this._actionLabelStatusHandler);
    this._actionLabelStatusHandler = null;

};

Block.LabelsActions.prototype.infilteredList = function(title) {
    var labels = this.filteredList;
    for (var i = 0, len = labels.length; i < len; i++) {
        if (labels[i].title === title) {
            return true;
        }
    }
    return false;
};

Block.LabelsActions.prototype.filterLabels = function(search) {
    var that = this;

    that.filteredList = $.grep(that.activeLabels, function(label) {
        var visible = ( !search || label.title.indexOf(search) === 0 );
        label.$node.toggleClass('g-hidden', !visible);
        return visible;
    });

    return that.filteredList.length;
};

/**
 * Обновляет список папок, доступных для клавиатурной навигации
 */
Block.LabelsActions.prototype.resetKdbSelection = function() {
    var that = this;

    if (that.visibleList[that.kbdSelected]) {
        that.visibleList[that.kbdSelected].$node.removeClass(that.selectedClass);
    }

    $(that.newListSelector).removeClass(that.selectedClass);

    that.visibleList = [];

    $(that.elSelector).each(function(i, el) {
        var $node = $(el);

        that.visibleList.push({
            $node: $node,
            title: $node.find(that.elContentSelector).text()
        });
    });

    that.kbdSelected = null;
};

Block.LabelsActions.prototype.makeFakeLabel = function(name) {
    name = Daria.capitalize(name);

    // Делаем первую букву большой (DARIA-7636)
    var newFakeLabel = Jane.tt('mail-common:new-fake-label', {
        'name': name,
        'color': Jane.$H('labels-colors').FAKE_LABEL_COLOR,
        'message-id': this.params['current-message-id']
    }, ['labels-colors']);

    if (this.$fakeLabel) {
        this.$fakeLabel.replaceWith(newFakeLabel);
    } else {
        this.$labelsHolder.append(newFakeLabel);
    }

    this.$fakeLabel = $(newFakeLabel);

    // добавим эту папку в список клавиатурной навигации
    this.visibleList.push({
        title: 'fake label',
        $node: this.$fakeLabel
    });
};

Block.LabelsActions.prototype.removeFakeLabel = function() {
    var $label = this.$fakeLabel;
    if ($label) {
        $label.remove();
        this.$fakeLabel = null;
    }
};

Block.LabelsActions.prototype.onopen = function(ids) {
    var info;
    var count;

    if (!this.$dropdown) {
        return;
    }

    if (Page.type == "compose") {
        info = Jane.$H("message").getInfo([], { labels: 1 }); // Генерим хэш со всеми метками.
        var labels = Jane.$B("compose").getLabels(); // Спрашиваем у композа, какие метки стоят сейчас на редактируемом письме.
        for (var i = 0, l = labels.length; i < l; i++) { // Проставляем единички у тех меток, которые есть у письма.
            // Они в дропдауне будут в разделе "Снять метку".
            info.labels[ labels[i] ] = 1;
        }
        info = {
            labels: info.labels,
            read: 1, // Не показываем в дропдауне "Пометить прочитанным" и "Пометить непрочитанным".
            unread: 1
        };
        count = 1;
    } else { // Для не композа честно выгребаем данные из xml-кэша письма (писем).
        ids = ids || Page.getSelectedMessagesIds();
        info = Jane.$H("message").getInfo(ids, { labels: 1, marks: 1 });
        count = info.count;
    }

    var showLabelTitle = false; // Показывать сепаратор блока постановки меток
    var showUnlabelTitle = false; // Показывать заголовок "Снять метку:" и сепаратор блока снятия меток

    var content = this.$dropdown.data('dropdown-content');
    var $content = $(content);

    var activeLabels = this.activeLabels = [];
    this.filteredList = [];
    this.visibleList = [];

    function addActiveLabel($label) {
        activeLabels.push({
            $node: $label,
            title: $label.find('.b-mail-dropdown__item__content__wrapper').text().toLowerCase()
        });
    }

    $.each(info.labels, function(k, v) {
        var $label = $('.label-' + k, content);

        if ($label.length === 0) {
            return;
        }

        var hidden = (v == count);
        if (!hidden) {
            showLabelTitle = true;
            addActiveLabel($label);
        }
        $label.toggleClass('g-hidden', hidden);

        $label = $('.unlabel-' + k, content);
        $label.toggleClass('g-hidden', !v);
        if (v) {
            showUnlabelTitle = true;
        }
    });

    $('.unlabel-title, .unlabel-separator', content).toggleClass('g-hidden', !showUnlabelTitle);

    $.each(["read", "unread"], function(i, action) {
        var $label = $('.' + action, content);
        var hidden = (info[action] == count);
        if (!hidden) {
            addActiveLabel($label);
        }
        $label.toggleClass('g-hidden', hidden);
    });

    this.viewport = $content;

    this.removeFakeLabel();
    this.prevSearch = null;
    this.$searchInput.val('');
    this.filterLabels('');

    this.resetKdbSelection();

};

Block.LabelsActions.prototype._toggle = function(flag) {
    if (this.$dropdown) {
        this.$dropdown.toggleClass('b-mail-dropdown_disabled', !flag);
    }
};

Block.LabelsActions.prototype.enable = function() {
    this._toggle(true);
};

Block.LabelsActions.prototype.disable = function() {
    this._toggle(false);
};

/* ------------------------------------------------------------------------------------------------------------- */
Jane.Block.copy('labels-actions', 'labels-actions-selection');

/* ../../blocks/labels-actions/labels-actions.js end */

        /* ../../blocks/folders-actions/folders-actions.js begin */
/*global Jane, Daria, $, Block, Page, MessageAction */

/* ------------------------------------------------------------------------------------------------------------- */

Block.FoldersActions = function() {
    Block.apply(this, arguments);
};

Daria.extend(Block.FoldersActions, Block.KbdDropdownActions);

Block.add({
    name: "folders-actions",
    info: {
        handlers: [ "folders" ]
    },
    constructor: Block.FoldersActions
});

/* ------------------------------------------------------------------------------------------------------------- */
if (Daria.layout == '2pane') {
    Block.FoldersActions.prototype.toshow = function(params) {
        var page = params._page;
        return page == "message" || page == "messages";
    };
}

Block.FoldersActions.prototype.onhtmlinit = function(node) {
    var that = this;
    var $dropdown = this.$dropdown = $('.b-mail-dropdown', node);

    this.newListSelector = '.b-mail-dropdown__box .js-folder-new';
    that.$foldersHolder = $('.js-folders-list', node);

    that.elContentSelector = '.js-folder-name';
    that.elSelector = '.js-kbd-fldr-nav:visible';
    that.skipElSelector = 'b-folders__folder_current';

    $dropdown.on("b-mail-dropdown-open", function() {
        that.onopen();
    });

    $dropdown.on("b-mail-dropdown-close", function() {
        that.resetKdbSelection();
    });

    that.selectedClass = 'b-folders__folder_kbd-selected';

    if (Daria.layout === '2pane') {
        $(document).on("b-mail-dropdown-disabled", this._dropdownHideHandler = function(evt, dropdown) {
            // вочер - признак выбора всех записей в таблице
            // @see js/components/table.js -> updateFolderActionsMode
            if (dropdown == $dropdown.get(0) && !Jane.watcher.get('folder-actions-mode')) {
                MessageAction.warning();
            }
        });
    }

    that._toggle(Jane.watcher.get('action-move-status'));

    Jane.events.bind('action-move-status.change', this._moveStatusHandler = function(e, diff) {
        that._toggle(diff.value);
    });

    var lazyFilterRefresh = function() {
        if (!that.$searchInput) {
            return;
        }

        var value = that.getFolderName();
        var search = value.toLowerCase();

        if (that.prevSearch === null) {
            that.prevSearch = '';
        }

        if (search !== that.prevSearch) {
            that.prevSearch = search;
            that.filterFolders(search);
            if (search.length && !that.infilteredList(search)) {
                that.makeFakeFolder(value);
            } else {
                that.removeFakeFolder();
            }
            setTimeout(function() {
                that.resetKdbSelection();
            }, 150);
        }
    }.lazy(100);

    /**
     * Клавиатурная навигация по выпадушке
     * @param  {Event} e
     */
    var kdbSelectFolder = function(e) {

        switch (e.which) {

            // Enter
        case 13:

            // если выделена папка
            if (that.kbdSelected !== null && that.kbdSelected > -1) {
                e.stopImmediatePropagation();

                if (that.visibleList[that.kbdSelected]) {
                    that.visibleList[that.kbdSelected].$node.find('[data-action]').trigger('click');
                } else {

                    //считаем, что кликнули по "новой папке"
                    that.createNewFolder();
                }
                return false;
            }

            lazyFilterRefresh.exec.call(this);

            // Смотрим, если у нас в списке осталась только одна папка (отфильтрованная или фэйковая)
            if (that.filteredList.length && that.$fakeFolder) {
                return false;
            } else {
                if (that.filteredList.length <= 1) {
                    e.stopImmediatePropagation();
                    (that.$fakeFolder || that.filteredList[0].$node).find('[data-action]').trigger('click');
                }
            }
            break;

            // Down
        case 40:
            that.moveKbdCursor('down');
            e.stopPropagation();
            break;

        case 38:
            that.moveKbdCursor('up');
            e.stopPropagation();
            break;

        default:
            lazyFilterRefresh();
            break;
        }
    };

    that.$searchInput = $('input.b-mail-dropdown__search__input', node);
    that.$searchInput.on({keydown: kdbSelectFolder});

    $(document).on('click.newFolderClick', that.newListSelector, function() {
        that.createNewFolder();
    });

    this._onFoldersMove = Jane.events.bind('folders.move', function() {
        var ddCurrent = Daria.Dropdown.getCurrent();
        if (ddCurrent && ddCurrent[0] == $dropdown[0]) {
            Daria.Dropdown.closeCurrent();
        }
        that.run();
    });
};

Block.FoldersActions.prototype.getFolderName = function() {
    if (this.$searchInput && this.$searchInput.length) {
        return $.trim(this.$searchInput.val());
    }
    return '';
};

Block.FoldersActions.prototype.createNewFolder = function() {
    Jane.Actions.run('folders.add', {
        name: this.getFolderName(),
        toolbar: true
    });
};

Block.FoldersActions.prototype.onhtmldestroy = function() {

    $(document).off('click.newFolderClick')
        .off('b-mail-dropdown-disabled', this._dropdownHideHandler);

    Jane.events.unbind('action-move-status.change', this._moveStatusHandler);
    Jane.events.unbind('folders.move', this._onFoldersMove);

    if (this.$searchInput) {
        this.$searchInput.off();
        this.$searchInput = null;
    }

    if (this.$dropdown) {
        this.$dropdown.off();
        this.$dropdown = null;
    }

};

Block.FoldersActions.prototype.infilteredList = function(title) {
    var folders = this.filteredList;
    for (var i = 0, len = folders.length; i < len; i++) {
        if (folders[i].title === title) {
            return true;
        }
    }
    return false;
};

Block.FoldersActions.prototype.filterFolders = function(search) {
    this.filteredList = $.grep(this.activeFolders, function(folder) {
        var visible = ( !search || ( !folder.current && folder.title.indexOf(search) === 0 ) );
        folder.$node.toggleClass('g-hidden', !visible);
        return visible;
    });
    //this.resetKdbSelection();
    return this.filteredList.length;
};

/**
 * Обновляет список папок, доступных для клавиатурной навигации
 */
Block.FoldersActions.prototype.resetKdbSelection = function() {
    var that = this;

    if (that.visibleList[that.kbdSelected]) {
        that.visibleList[that.kbdSelected].$node.removeClass(that.selectedClass);
    }

    $(that.newListSelector).removeClass(that.selectedClass);

    that.visibleList = [];

    $(that.elSelector).each(function(i, el) {
        var $node = $(el);

        if (!$node.hasClass(that.skipElSelector)) {
            that.visibleList.push({
                $node: $node,
                title: $node.find(that.elContentSelector).text()
            });
        }
    });

    that.kbdSelected = null;
};

/**
 * Добавляем к списку отфильтрованных папок ещё одну, специальную,
 * позволяющую быстро создать новую папку с заданным именем
 * @param  {String} name имя папки
 */
Block.FoldersActions.prototype.makeFakeFolder = function(name) {
    var newFakeFolder = Jane.tt('mail-common:new-fake-folder', {
        'name': name,
        'name-param': encodeURIComponent(name),
        'message-id': this.params['current-message-id']
    });

    if (this.$fakeFolder) {
        this.$fakeFolder.replaceWith(newFakeFolder);
    } else {
        this.$foldersHolder.append(newFakeFolder);
    }

    this.$fakeFolder = $(newFakeFolder);

    // добавим эту папку в список клавиатурной навигации
    this.visibleList.push({
        title: 'fake folder',
        $node: this.$fakeFolder
    });
};

Block.FoldersActions.prototype.removeFakeFolder = function() {
    var $folder = this.$fakeFolder;
    if ($folder) {
        $folder.remove();
        this.$fakeFolder = null;
    }
};

Block.FoldersActions.prototype.onopen = function(ids) {

    var that = this;

    ids = ids || Page.getSelectedMessagesIds();
    var info = Jane.$H("message").getInfo(ids, { folders: 1 });
    var count = info.count;

    if (!this.$dropdown) {
        return;
    }

    var content = this.$dropdown.data('dropdown-content');
    var $content = $(content);

    var activeFolders = this.activeFolders = [];
    this.filteredList = [];
    this.visibleList = [];

    // Дизейблим папки, в которые переложить нельзя
    $.each(info.folders, function(k, v) {
        var current = (v == count);
        var $folder = $content.find('.folder-' + k).toggleClass('b-folders__folder_current', current);
        var title = $folder.find('.js-folder-name').text().toLowerCase();
        var _folder = {
            $node: $folder,
            title: title,
            current: current
        };
        activeFolders.push(_folder);

        if (title !== '' && !current) {
            that.visibleList.push(_folder);
        }
    });

    this.viewport = $content;

    this.removeFakeFolder();
    this.prevSearch = null;
    this.$searchInput.val('');
    this.filterFolders('');

    this.resetKdbSelection();
};

Block.FoldersActions.prototype._toggle = function(flag) {
    if (this.$dropdown) {
        this.$dropdown.toggleClass('b-mail-dropdown_disabled', !flag);
    }
};

Block.FoldersActions.prototype.enable = function() {
    this._toggle(true);
};

Block.FoldersActions.prototype.disable = function() {
    this._toggle(false);
};

/* ------------------------------------------------------------------------------------------------------------- */

Jane.Block.copy('folders-actions', 'folders-actions-selection');

/* ../../blocks/folders-actions/folders-actions.js end */

            /* ../../blocks/folders-actions/folders-actions-child.js begin */

/* ------------------------------------------------------------------------------------------------------------- */

/**
 * Action.run – не может правильно обрабатывать два одинаковых блоках в разных местах на странице
 * Это наш костыль который на самом деле является копипастой «folders-actions»
 */
Block.FoldersActionsChild = Block.FoldersActions;

Block.add({
    name: "folders-actions-child",
    info: {
        handlers: [ "folders" ]
    },
    constructor: Block.FoldersActionsChild
});

Block.FoldersActionsChild.prototype = Block.FoldersActions.prototype;

/* ../../blocks/folders-actions/folders-actions-child.js end */

            /* ../../blocks/setup/setup-filters-create/setup-filters-create.js begin */
/* ------------------------------------------------------------------------------------------------------------- */

Block.SetupFiltersCreate = function() {
    Block.apply(this, arguments);
};

Jane.extend(Block.SetupFiltersCreate, Block);

Block.add({
    name: "setup-filters-create",
    info: {
        events: {
            'click .js-filters-condition-add': '_addCondition',
            'click .js-filters-condition-delete': '_deleteCondition'
        },
        handlers: {
            "account-information": true,
            "folders": true,
            "labels": true,
            "filters": true,
            "message": false, //этот хендлер может быть протухшим, оттуда берется только from и subject
            "setup-menu": true,
            "settings": false
        }
    },
    constructor: Block.SetupFiltersCreate
});

Block.SetupFiltersCreate.prototype.onshow = function(params) {
    var that = this;
    this.$node = $(this.getCacheNode());
    nb.init(this.$node);

    this.nbDependenceController = new Daria.NbDependenceController(this.$node, 'setup-filters-create');

    this.nbSelectLetterType = nb.$block('.js-letter_type_select', this.$node);
    this.nbInputForwardAddress = nb.$block('.js-forward_address', this.$node);
    this.nbInputNotifyAddress = nb.$block('.js-notify_address ', this.$node);
    this.nbLabelsSelect = nb.$block('.js-labels-select', this.$node);
    this.nbFoldersSelect = nb.$block('.js-move_folder', this.$node);

    var movefInboxSource = this.nbFoldersSelect.getSource()[0];

    this.nbSelectLetterType.on('nb-changed',function() {
        if (this.getState().value == 'nospam') {
            that.nbFoldersSelect.removeFromSource(0);
        } else {
            that.nbFoldersSelect.addToSource(movefInboxSource, 0);
        }
    });
    // триггерим change, чтобы сработала логика удаления/добавления папки "Входящие"
    this.nbSelectLetterType.trigger('nb-changed', this.nbSelectLetterType);

    this.bindEvents();
    this._bindConditionFields(this.$node.find('.b-form-layout__field_conditions .b-form-layout__line:last'));
    // если создаётся новое правило, то фокус на добавление условия
    if (!params.id) {
        nb.$block('.js-filters-condition-add', this.$node).focus();
    }
    var $holder = this.$node.find('.js-preview-table');
    $holder.css('max-width', $holder.width());
};

Block.SetupFiltersCreate.prototype.onhide = function() {
    this.invalidate();
    this.nbDependenceController.destroy();

    nb.destroy(this.$node);
};

/*
 * Навешиваем обработчики событий
 */
Block.SetupFiltersCreate.prototype.bindEvents = function() {
    // создать новую метку
    this.nbLabelsSelect.on('nb-changed', function() {
        if (this.getState().value === 'new_label') {
            Jane.Actions.run('labels.add.filters');
        }
    });

    // создать новую метку
    this.nbFoldersSelect.on('nb-changed', function() {
        if (this.getState().value === 'new_folder') {
            Jane.Actions.run('folders.add.filters');
        }
    });

    if (this.nbInputForwardAddress) {
        var that = this;
        // Автокомплит на поле "переслать"
        this.nbInputForwardAddress.on('nb-focused', this._bindAutocompleterToField);
        this.nbInputForwardAddress.on('focusin', this._bindAutocompleterToField.bind(this.nbInputForwardAddress));

        this.nbInputForwardAddress.on('nb-changed', function() {
            Block.SetupFiltersCreate.validate(that.$node, {
                params: {
                    clicker: 'forward'
                }
            });
        });
    }

    // Автокомплит на поле "уведомить"
    this.nbInputNotifyAddress.on('nb-focused', this._bindAutocompleterToField);
    this.nbInputNotifyAddress.on('focusin', this._bindAutocompleterToField.bind(this.nbInputNotifyAddress));
};

/**
 * Создает поля для добавления нового правила в фильтр.
 */
Block.SetupFiltersCreate.prototype._addCondition = function(e) {
    var $elem = $(e.target);

    var $block = $elem.closest('.b-form-layout__block');
    var $wrapper = $block.find('.b-form-layout__field_conditions');

    var rule_html = Jane.tt("mail-setup:filters-condition-new", null, ["filters"]);
    $wrapper.append(rule_html);
    nb.init($wrapper);

    this._bindConditionFields(rule_html);

    var rowsCount = $wrapper.find('.b-form-layout__button_delete').length;
    if (rowsCount == 1) {
        $block.removeClass('b-form-layout__block_setup-filter-filters-start');
    } else if ($wrapper.find('.b-form-layout__button_delete').length == 2) {
        $wrapper.removeClass('b-form-layout__field_show-one-mode');
    }
    // фокус ставится во вновь добавленное поле
    $wrapper.find('.b-form-element__input-text:last').focus();

    return false;
};

Block.SetupFiltersCreate.prototype._bindConditionFields = function($node) {
    var that = this;
    var reEmailType = /from|to|cc/;

    var nbSelectType = nb.$block('.js-condition-field-field1', $node);
    var nbInputCondition = nb.$block('.js-condition-field-field3', $node);

    if (!nbSelectType || !nbInputCondition) {
        return;
    }

    /** @this nb.block.Input */
    function onFocus() {
        // автокомплит по адресам только в условиях с адресом (в field1 from|to|cc)
        var typeSelectValue = nbSelectType.getState().value;

        if (reEmailType.test(typeSelectValue)) {
            // autocomplete=off не хочет работать динамически и вылазит броузерный автоомплит, а так нормально
            this.$control.attr('name', 'field' + new Date().getTime());
            that._bindAutocompleterToField.call(this);
            // при блуре нужно вернуть нормально имя и удалить автокомплит на случая если при следующем фокусе юзер сменит field1
            this.$control.one('blur', function() {
                this.$control.attr('name', 'field3');
            }.bind(this));
        }
    }

    nbInputCondition.on('nb-focused', onFocus);
    nbInputCondition.on('focusin', onFocus.bind(nbInputCondition));

    // кастомный заголовок
    nbSelectType.on('nb-changed', function() {
        /** @this nb.block.Select */

        var typeSelectValue = nbSelectType.getState().value;

        // автокомплит чистим при любой смене на неимеилный тип
        if (!reEmailType.test(typeSelectValue)) {
            Daria.Autocompleter.getContact().destroy();
        }

        var that = this;
        // если выбран последний пункт - то это фильтр на кастомный заголовок
        var source = this.getSource();
        var lastOption = source[source.length - 1];
        var lastOptionValue = source[source.length - 1].value;
        if (typeSelectValue === lastOptionValue) {
            var dialog = Jane.tt('mail-setup:filters-sender-create', {value: lastOptionValue});
            var $dialog = $(dialog);

            /** @type {nb.block.Input} */
            var $senderInput = nb.$block('.nb-input', $dialog);

            // установка нового заголовка
            var addSender = function() {
                var sender = $.trim($senderInput.getValue());
                // если пользователь не заполнил кастомной поле -
                // селект устанавливается в дефолтное состояние
                if (!sender) {
                    lastOption.text = i18n('%Setup_Filters_Свойство');
                    lastOption.value = 'sender';

                    that.setSource(source);
                    that.setState({value: 'subject'});

                } else {
                    lastOption.text = i18n('%Setup_Filters_Заголовок', sender);
                    lastOption.value = sender;
                    that.setSource(source);
                    that.setState(lastOption);
                }

                Daria.Dialog.close();
            };

            Daria.Dialog.open({
                title: i18n('%Setup_Filters_sender_dialog_title'),
                body: $dialog,
                buttons: [
                    {name: 'submit', value: i18n('%Сохранить'), onclick: addSender},
                    {name: 'cancel'}
                ],
                onopen: function() { $senderInput.focus(); }
            });

            // закрыть по ентеру
            $senderInput.$control.keyup(function(e) {
                if (e.keyCode === 13) {
                    addSender();
                }
            });
        }
    });
};

/**
 * Удаляет поля для добавления нового правила в фильтр.
 */
Block.SetupFiltersCreate.prototype._deleteCondition = function(e) {
    var $elem = $(e.target);

    var $block = $elem.closest('.b-form-layout__block');
    var $wrapper = $block.find('.b-form-layout__field_conditions');

    var $lineToRemove = $elem.closest('.b-form-layout__line');
    nb.destroy($lineToRemove);
    $lineToRemove.remove();

    var rowsCount = $wrapper.find('.b-form-layout__button_delete').length;
    if (rowsCount === 1) {
        $wrapper.addClass('b-form-layout__field_show-one-mode');
    } else if (rowsCount === 0) {
        $block.addClass('b-form-layout__block_setup-filter-filters-start');
    }
};

/**
 * @this nb.block.Input
 * @private
 */
Block.SetupFiltersCreate.prototype._bindAutocompleterToField = function() {
    var EmailsAutocompleter = Daria.Autocompleter.getContact();
    EmailsAutocompleter.setOptions({
        multiple: false,
        formatResult: function(row) {
            // Это группа
            if (row.contacts) {
                var contacts = [];

                for (var i = 0, len = row.contacts.length; i < len; i++) {
                    contacts.push(row.contacts[i].email);
                }

                return contacts.join(', ');
            } else {
                return row.email;
            }
        }
    });
    EmailsAutocompleter.bindField({ field: this.$control, focus: 1 });
};

/**
 * Валидация полей при создании фильтра
 * @param {jQuery} $form
 * @param {Object} params
 */
Block.SetupFiltersCreate.validate = function($form, params) {

    var valid = true;

    var $errors = $form.find('.b-notification').addClass('g-hidden');
    var $field3s = $form.find('.b-form-element__input-text[name=field3]');

    var clickers = $.isArray(params.clicker) ? params.clicker : [params.clicker];
    var field3s = $.isArray(params.field3) ? params.field3 : [params.field3];
    var letter = params.letter;
    var isOr = jpath(params, 'logic2.or')[0] == '1';

    // Проверка на пустое поле в условиях
    var successCount = 0;
    $.each(field3s, function(index, field3) {
        if (field3 === "") {
            // Показываем значок валидации
            $errors
                .filter('.b-notification_error-empty-field3')
                .eq(index)
                .removeClass('g-hidden');

            // и ставим фокус в первое поле
            if (valid) {
                $field3s.eq(index).focus();
            }

            valid = false;
        } else {
            successCount++;
        }
    });

    if (isOr && (successCount > 0 || params.attachment === "1" )) {
        $errors.filter('.b-notification_error-empty-field3').addClass('g-hidden');
        valid = true;
    }

    // Если никаких действий не выбрано
    if (clickers.length === 0) {
        Daria.Statusline.showMsg({
            body: i18n('%Setup_Filters_no_actions'),
            body3: i18n('%Setup_Filters_no_actions')
        });

        return false;
    }

    // Если есть поле имя фильтра и он не задано
    if ('name' in params && !params.name) {
        Daria.Statusline.showMsg({
            body: i18n('%Setup_Filters_no_name'),
            body3: i18n('%Setup_Filters_no_name')
        });

        return false;
    }

    if (params.move_folder && !Jane.$H('folders').getFolderById(params.move_folder)) {
        Daria.Statusline.showMsg({
            body: i18n('%Filters_Folder_Empty_Error'),
            body3: i18n('%Filters_Folder_Empty_Error')
        });

        return false;
    }

    // Слишком длинный текст автоответа
    if ($.inArray('reply', clickers) !== -1 && params.autoanswer.length > 2000) {
        $errors.filter('.b-notification_error-reply-too-long').removeClass('g-hidden');
        return false;
    }

    // При безусловном удалении или перемении в спам
    if (($.inArray('delete', clickers) !== -1 ||
        params.move_folder && Jane.$H('folders').spamOrTrash(params.move_folder)) &&
        (letter == 'nospam' || letter == 'all') &&
        (!params.field1 || !params.field3)) {

        Daria.Statusline.showMsg({
            body: i18n('%Setup_Filters_actions_not_available'),
            body3: i18n('%Setup_Filters_actions_not_available')
        });

        return false;
    }

    // DARIA-2484
    if ($.inArray('forward', clickers) !== -1 && (letter == 'clearspam' || letter == 'all') ) {
        Daria.Statusline.showMsg({
            body: i18n('%Setup_Filters_cant_forward_spam'),
            body3: i18n('%3pane_Setup_Filters_cant_forward_spam')
        });

        return false;
    }

    // Проверка forward и notify
    // в них нельзя писать свой email или некорректный email
    $.each(clickers, function(index, clicker) {
        if (clicker === 'forward' || clicker === 'notify') {
            var emails = Jane.$H("account-information").getEmails();
            var email = params[clicker + '_address'];

            if (!Jane.FormValidation.checkEmail(email)) {
                $errors.filter('.b-notification_error-pattern-' + clicker).removeClass('g-hidden');
                valid = false;
            } else {
                var reEmail = new RegExp('^' + Daria.regexpEscape(email) + '$');
                $.map(emails, function(email) {
                    if (reEmail.test(email)) {
                        $errors.filter('.b-notification_error-self-address-' + clicker).removeClass('g-hidden');
                        valid = false;
                        return false;
                    }
                });
            }
        }
    });

    return valid;
};

/**
 * Дополнительная обработка параметров.
 * Разворачивает ['to-or-cc'] в ['to', 'cc']
 * @param {Object} params
 * @static
 */
Block.SetupFiltersCreate.processParams = function(params) {
    // Дедуплицирует и убирает пустые clicker'ы
    if ($.isArray(params.clicker)) {
        var clickers = {};
        params.clicker = $.map(params.clicker, function(value) {
            if (clickers[value] || value === '') {
                return null;
            } else {
                clickers[value] = true;
                return value;
            }
        });
    }

    var cc = {
        field1: [],
        field2: [],
        field3: []
    };

    // DARIA-6534
    if ($.isArray(params.field1)) {
        for (var i = 0, l = params.field1.length; i < l; i++) {
            if (params.field1[i] == "to-or-cc") {

                cc.field1.push("to", "cc");
                params.field1.splice(i, 1);

                var logic = params.field2.splice(i, 1)[0];
                cc.field2.push(logic, logic);

                var value = params.field3.splice(i, 1)[0];
                cc.field3.push(value, value);

                i--;
                l--;
            }
        }
        params.field1 = params.field1.concat(cc.field1);
        params.field2 = params.field2.concat(cc.field2);
        params.field3 = params.field3.concat(cc.field3);

    } else if (params.field1 == "to-or-cc") {
        params.field1 = [ "to", "cc" ];
        params.field2 = [ params.field2, params.field2 ];
        params.field3 = [ params.field3, params.field3 ];
    }
};

Daria.FilterSimpleCreate = function(ext) {
    return $.extend({
        create: function() {
            var that = this;
            var formParams = this.form && this.form.serializeObject() || {};
            var params = $.extend(formParams, this.params);
            Jane.Block.SetupFiltersCreate.processParams(params);
            if (!this.validate($.extend({'logic2': {'or': 1}}, params))) {
                if ($.isFunction(this.error)) {
                    this.error();
                }
                return;
            }

            if (params.forward_with_store === 'on') {
                for (var i = 0, len = params.clicker.length; i < len; i++) {
                    params.clicker[i] = (params.clicker[i] === 'forward') ? 'forwardwithstore' : params.clicker[i];
                }
            }

            Handler.doAll(
                [ "do-filters-add", "filters" ],
                params,
                function(data) {
                    var id = jpath(data, '/.handlers[.name == "do-filters-add"].data.id')[0];
                    if (id) {
                        if ($.isFunction(that.success)) {
                            that.success(id);
                        }

                        // Гамификация
                        Jane.logUserActivity({ 'activity[verb]': 'mail.create', 'activity[yndx_type]': 'filter' });
                    } else {
                        var error = jpath(data, '/.handlers[.name == "do-filters-add"].error')[0];

                        if (error) {
                            Daria.Statusline.showMsg({
                                body: i18n('%Произошла_ошибка'),
                                body3: i18n('%3pane_Произошла_ошибка')
                            });
                        }
                    }

                    if ($.isFunction(that.complete)) {
                        that.complete(data);
                    }
                }
            );
        }
    }, ext || {});
};

Daria.FilterSimpleCreatePopup = function(settings) {
    var filterSimpleCreatePopup = Daria.FilterSimpleCreate();

    $.extend(filterSimpleCreatePopup, {
        validate: function() {
            return this.form.find("input[name=field3],input[name=attachment]").filter(function() {
                return (this.type == "text" && $.trim(this.value)) || this.checked;
            }).size();
        },

        bindAutocompleter: function() {
            var EmailsAutocompleter = Daria.Autocompleter.getContact();
            EmailsAutocompleter.setOptions({
                multiple: false,
                formatResult: function(row) {
                    // Это группа
                    if (row.contacts) {
                        var contacts = [];

                        for (var i = 0, len = row.contacts.length; i < len; i++) {
                            contacts.push(row.contacts[i].email);
                        }

                        return contacts.join(', ');
                    } else {
                        return row.email;
                    }
                }
            });
            EmailsAutocompleter.bindField({ field: this.form.find('.b-form-element__input-text_from').get(0), focus: 1 });
        },

        params: {}
    }, settings);

    return filterSimpleCreatePopup;
};

Daria.FilterSimpleCreatePopupSingle = function(settings) {
    var filterSimpleCreatePopupSingle = Daria.FilterSimpleCreatePopup();

    $.extend(filterSimpleCreatePopupSingle,
        {
            complete: function() {
                Daria.Dialog.close();
            },

            success: function(id) {
                Daria.Statusline.showMsg({
                    body: i18n("%Setup_Filters_Simple_status", id),
                    body3: i18n("%3pane_Setup_Filters_Simple_status", id)
                });
            },

            error: function() {
                var that = this;
                this.form.addClass("b-popup__field_error");
                this.form.find("input:text").keyup(function() {
                    that.form.removeClass("b-popup__field_error");
                    $(this).off("keyup");
                }).eq(0).focus();
            }
        },
        settings
    );

    return filterSimpleCreatePopupSingle;
};

/* ../../blocks/setup/setup-filters-create/setup-filters-create.js end */


        /* ../../blocks/setup/setup-avatar/setup-avatar.js begin */
(function() {

    this.onhtmlinit = function(node) {
        var that = this;
        var $node = $(node);
        var elems = $node.find(".b-mail-button__input_file," +
            ".b-userpic-choose__pic-change, .b-userpic-choose__pic-image__image");
        var $img = elems.filter("img");

        /**
         * Нода аватара в шапке
         * type {jQuery-element}
         */
        this.$headerAvatar = $('.header-user-pic');

        /**
         * Путь до картинки, он всегда одинаков,
         * т.к. мы берем его по номеру айдишники юзера, но он всегда кэшируется,
         * поэтому его нужно инвалидировать при изменении или удалении картинки
         * @type {String}
         */
        this.src = $img.data("src");

        /**
         * Родитель-нода аватара
         * type {jQuery-element}
         */
        this.$parent = $img.parent();

        /**
         * Картинка аватара
         * @type {Node element}
         */
        this.img = $img[0];

        /**
         * Инпут для загрузки новой картинки
         * @type {jQuery element}
         */
        this.$file = elems.filter(".b-mail-button__input_file");

        /**
         * Псевдо-ссылка «изменить»/«удалить»
         * @type {jQuery element}
         */
        this.$changer = elems.filter(".b-userpic-choose__pic-change");

        this.$file.change(function() {
            Daria.upicUploader.upload(this, function() {
                that.load();
            });
        });

    };

    /**
     * Обработчик успешной загрузки юзерпика
     */
    this.load = function() {

        // @see https://jira.yandex-team.ru/browse/DARIA-24162
        // футболяшки даем пользователю баллы за создание метки
        // обрабатывается везде кроме визарда
        this.change();
        Daria.Dialog.close();
        $(document).trigger("b-mail-dropdown-closeall");
    };

    /**
     * Изменение адреса картинки
     */
    this.change = function() {

        // Берем первый попавшийся путь, во всех инстансах он будет одинаков
        var src = this.src + "?rnd=" + new Date().getTime();

        this.$parent.removeClass("b-userpic-choose_no-photo_yes");

        this.img.src = src;
        this.$headerAvatar.css('background-image', 'url(' + src + ')');

        // после загрузки нужно показать ссылку «удалить/изменить»
        this.$changer.removeClass("g-hidden");

        Jane.events.trigger('setup-avatar-change', src);
    };

    /**
     * Смена картинки, на «Нет фото»
     */
    this.remove = function() {
        var that = this;
        var src404 = this.src + '404?' + Math.round(Math.random() * 100000);
        var src = this.src + '?' + Math.round(Math.random() * 100000);

        var image = new Image();

        image.onload = function() {
            $(that.img).prop('src', src404);
            that.$headerAvatar.css('background-image', 'url(' + src404 + ')');
            Jane.events.trigger('setup-avatar-remove', src404);
        };

        image.onerror = function() {
            that.$parent.addClass("b-userpic-choose_no-photo_yes");
            that.$headerAvatar.css('background-image', 'url(' + src + ')');
            that.$changer.addClass("g-hidden");
            Jane.events.trigger('setup-avatar-remove', src);
        };

        image.src = src404;

    };


}).call( Jane.Block.create("setup-avatar", {
    handlers: {
        "settings": false,
        "account-information": false
    },
    //для разных страниц - разные кеши
    usepage: true
}).prototype );


/* ../../blocks/setup/setup-avatar/setup-avatar.js end */


        /* ../../blocks/disk/browse-disk.js begin */
(function(/**Jane*/Jane, /**Daria*/Daria) {

    var DEFAULT_PATH = '/disk/';
    var LAYOUT_PULL_Z_INDEX_CLASS = 'b-layout__inner_pull';

    var hDiskResources = Jane.$H('disk-resources');

    var bBrowseDisk = Jane.Block.create('browse-disk', {
        blocks: [
            'browse-disk-crumbs-box',
            'browse-disk-listing-box'
        ],
        events: {
            'click .js-browse-disk-attach': 'attachSelected',
            'dblclick .js-finder-resource': 'onResourceDblclick',
            'click .js-finder-crumb': 'onCrumbClick'
        },
        exceptedParams: {
            path: null,
            sort: null,
            order: null
        }
    });

    var bBrowseDiskProto = bBrowseDisk.prototype;

    bBrowseDiskProto.onhtmlinit = function(node) {
        this.node = node;

        var $node = $(this.node);

        this.$dialog = $node.find('.js-browse-disk-dialog');
        this.$paranja = $node.find('.b-paranja');

        this.listing = this.getBlockByName('browse-disk-listing-box');
        this.crumbs = this.getBlockByName('browse-disk-crumbs-box');

        // При повторном `run`-е подбоксов этого блока до завершения первого
        // прогона в этих боксах вместо одного блока рисуется два (DARIA-26971).
        //
        // Флаг ниже создан для предотвращения запуска второго `run`-а до
        // завершения первого.
        this._running = false;
    };

    bBrowseDiskProto.onshow = function() {
        this.nbButtonAttach = nb.$block('.js-browse-disk-attach', this.$dialog);
        nb.init(this.node);

        Jane.events.bind('disk-resources.not-found', this.handleNotFound = this.onerror.bind(this));
        Jane.events.bind('disk-resources.selected', this.handleSelected = this.onselect.bind(this));
    };

    bBrowseDiskProto.onhide = function() {
        nb.destroy(this.node);

        hDiskResources.deselect();
        delete this.nbButtonAttach;

        Jane.events.unbind('disk-resources.not-found', this.handleNotFound);
        Jane.events.unbind('disk-resources.selected', this.handleSelected);
    };

    /**
     * Открытие просмотрщика файлов на корневой директории Диска.
     */
    bBrowseDiskProto.open = function() {
        this.$dialog.removeClass('g-invisible');
        this.$paranja.removeClass('g-hidden');

        if (!this.params.path) {
            $.extend(this.params, {
                path: DEFAULT_PATH,
                sort: hDiskResources.getDefaultSort(DEFAULT_PATH),
                order: hDiskResources.getDefaultOrder(DEFAULT_PATH)
            });

            this.listing.run(this.params);
            this.crumbs.run(this.params);
        }

        $.Shortcuts.modalListOn('finder');
        this.$dialog.closest('.b-layout__inner').addClass(LAYOUT_PULL_Z_INDEX_CLASS);
        Jane.c('Аттачи из Диска', 'Открытие диалога');
    };

    /**
     * Закрытие просмотрщика файлов.
     */
    bBrowseDiskProto.close = function(options) {
        hDiskResources.deselect();

        // Если прятать диалог через `display: none`, в IE9+ сбивается
        // положение скролла.
        this.$dialog.addClass('g-invisible');
        this.$paranja.addClass('g-hidden');

        $.Shortcuts.modalListOff('finder');
        this.$dialog.closest('.b-layout__inner').removeClass(LAYOUT_PULL_Z_INDEX_CLASS);

        if (options && options.reset) {
            this.reset();
        }
    };

    /**
     * Перемещение внутрь папки.
     * @param  {String} path Папка назначения
     */
    bBrowseDiskProto.openFolder = function(path) {
        var that = this;

        if (that._running) {
            return;
        }

        that._running = true;

        $.extend(that.params, {
            path: path,
            sort: hDiskResources.getDefaultSort(path),
            order: hDiskResources.getDefaultOrder(path)
        });

        that.listing.run(that.params);
        that.crumbs.run(that.params, function() {
            that._running = false;
        });
    };

    /**
     * Запуск прикрепления переданного ресурса к письму.
     * @param  {String} id
     */
    bBrowseDiskProto.attach = function(id) {
        var block = Page.type === 'message' ? Daria.QuickReply : Jane.$B('compose');
        var resource = hDiskResources.find(id);

        if (!resource) {
            return;
        }

        // Сейчас все делается вручную и через приватные методы.
        // С другой стороны, если нужно отрисовать уже загруженный
        // аттач, все происходит примерно также.
        var attachments = block._attachments;
        var isFolder = resource.type === 'dir';

        var narodPreview;
        var mediaType = jpath(resource, '.meta.mediatype')[0];

        if (mediaType === 'image') {
            narodPreview = jpath(resource, '.meta.preview')[0];
        }

        var attachment = new Daria.Attachment({
            name: resource.name,
            type: 'narod',
            size: resource.meta && resource.meta.size,
            narodPreview: narodPreview,
            folder: isFolder,
            _id: id
        });

        attachment.setStatus(attachment.ATTACH_STATUS_UPLOADING);
        attachment.retry = function() {
            upload(attachment);
        };

        attachments.removeMarkedAsDeleted();
        attachments._attachments[attachment.getId()] = attachment;

        attachments._oldInputOffset = Math.round(attachments._$inputNode.offset().top);
        attachments._appendAttach(attachment, true);
        attachments._scrollToAttachInput();

        upload(attachment);
        this.close();

        var metrikaType = isFolder ? 'Папка' : 'Файл';
        Jane.c('Аттачи из Диска', 'Прикрепление', metrikaType);

        if (!isFolder) {
            Jane.c('Аттачи из Диска', 'Типы файлов', resource.meta && resource.meta.mediatype || 'unknown');
        }

        // метрика может не инициализироваться
        if (Jane.Metrika.counter) {
            Jane.Metrika.counter.reachGoal('ATTACHFROMDISK');
        }
    };

    /**
     * Прикрепление текущего выделенного ресурса.
     */
    bBrowseDiskProto.attachSelected = function() {
        var selected = hDiskResources.selected;

        if (selected) {
            return this.attach(selected);
        }
    };

    /**
     * Сброс текущего состояния просмотрщика.
     */
    bBrowseDiskProto.reset = function() {
        delete this.params.path;
    };

    /**
     * Реакция на смену выделения ресурса, меняет состояние кнопки
     * прикрепления выбранного ресурса.
     */
    bBrowseDiskProto.onselect = function(e, data) {
        // Тут по дизайну нужно менять еще и тему кнопки с `normal`
        // на `action`.
        if (data.now) {
            this.nbButtonAttach.enable();
        } else {
            this.nbButtonAttach.disable();
        }
    };

    /**
     * Реакция на клик по хлебной крошке.
     */
    bBrowseDiskProto.onCrumbClick = function(e) {
        var $el = $(e.currentTarget);

        this.openFolder(decodeURIComponent($el.data('id')));
    };

    /**
     * Реакция на двойной клик по ресурсу.
     */
    bBrowseDiskProto.onResourceDblclick = function(e) {
        var $el = $(e.currentTarget);

        var id = decodeURIComponent($el.data('id'));
        var type = $el.data('type');

        if (type === 'dir') {
            this.openFolder(id);
        } else if (type === 'file') {
            this.attach(id);
        }
    };

    /**
     * Обработка ошибок.
     */
    bBrowseDiskProto.onerror = function(e, data) {
        var that = this;

        if (data.http_status == 404) {
            var parent = Daria.dirname(that.params.path) + '/';

            hDiskResources.clearCacheByParams({
                path: parent
            });

            Daria.setZeroTimeout(function() {
                that.openFolder(parent);
            });
        }
    };

    /**
     * Возвращает функцию, которая стремится к `max`, но никогда его
     * не достигает.
     * @param  {Number} max
     * @return {Function}
     */
    function strive(max) {
        return function(x) {
            return max * (Math.sqrt(x) / (1 + Math.sqrt(x)));
        };
    }

    function upload(attachment) {
        var block = Page.type === 'message' ? Daria.QuickReply : Jane.$B('compose');
        var attachments = block._attachments;

        attachment.setStatus(attachment.ATTACH_STATUS_UPLOADING);

        // Тут происходит фейковая анимация прогрессбара. `tick` -- это
        // функция, которая никогда не достигает `100`.
        var tick = strive(100);
        var x = 0;

        var progess = window.setInterval(function() {
            attachment._onUploadProgress(null, tick(x++));
        }, 100);

        hDiskResources.attach(attachment.info._id)
            .done(function(data) {
                attachment.info.name = data.name;
                attachment.info.narodUrl = data.url;

                if (attachment.info.narodPreview) {
                    hDiskResources.getPreview(data.hash)
                        .always(function(preview) {
                            attachment.info.narodPreview = preview;
                            done();
                        });
                } else {
                    done();
                }
            })
            .fail(function() {
                Jane.c('Аттачи из Диска', 'Ошибка загрузки');
                attachment.setStatus(attachment.ATTACH_STATUS_FAILED);
            })
            .always(function() {
                clearInterval(progess);
            });

        /**
         * Сигнализирует о завершении загрузки приложения в Диске.
         */
        function done() {
            // Сперва нужно обновить ссылки на предварительный просмотр.
            attachment._updatePreviewUrls();
            attachment._onUploadSuccess(true);

            // После завершения загрузки нужно обновить свойство письма,
            // которое содержит информацию о загрузках с Диска.
            attachments.updateNarodAtt();

            Jane.events.trigger('attachments.changed');
            Daria.setZeroTimeout(attachments._uploadQueue.bind(attachments));
        }
    }

})(Jane, Daria);

/* ../../blocks/disk/browse-disk.js end */

        /* ../../blocks/disk/browse-disk-crumbs-box.js begin */
(function(/**Jane*/Jane) {

    var bBrowseDiskCrumbsBox = Jane.Block.create('browse-disk-crumbs-box', {
        box: true
    });

    bBrowseDiskCrumbsBox.prototype.selectName = function(params) {
        if (params.path) {
            return 'browse-disk-crumbs';
        }

        return false;
    };

})(Jane);

/* ../../blocks/disk/browse-disk-crumbs-box.js end */

        /* ../../blocks/disk/browse-disk-crumbs.js begin */
(function(/**Jane*/Jane) {

    Jane.Block.create('browse-disk-crumbs', {
        handlers: [
            // Хендлер `disk-default-folders` -- это список локализованных
            // системных папок, например 'Загрузки', 'Фотокамера' и проч.
            //
            // Этот список загрузится при первом открытии дискового попапа
            // для корневой папки Диска. При последующем открытии конкретной
            // системной папки на клиенте уже будет информация о ее
            // "системности".
            //
            // Хендлер был добавлен в зависимости этого блока для группировки
            // запросов. Его побратим `browse-disk-listing` является
            // асинхронным.
            'disk-default-folders',
            'disk-resources'
        ],
        exceptedParams: {
            sort: null,
            order: null,
            offset: null
        }
    });

})(Jane);

/* ../../blocks/disk/browse-disk-crumbs.js end */

        /* ../../blocks/disk/browse-disk-listing-box.js begin */
(function(/**Jane*/Jane) {

    var bBrowseDiskListingBox = Jane.Block.create('browse-disk-listing-box', {
        box: true
    });

    bBrowseDiskListingBox.prototype.selectName = function(params) {
        if (params.path) {
            return 'browse-disk-listing';
        }

        return false;
    };

})(Jane);

/* ../../blocks/disk/browse-disk-listing-box.js end */

        /* ../../blocks/disk/browse-disk-listing.js begin */
(function(/**Jane*/Jane) {

    var hDiskResources = Jane.$H('disk-resources');

    var SELECTED_CLASS = 'b-finder__resource_selected';
    var LOADING_CLASS = 'b-finder__listing_portion';
    var COMPLETE_CLASS = 'b-finder__listing_complete';

    var PRELOAD_OFFSET = 50;

    var bBrowseDiskListing = Jane.Block.create('browse-disk-listing', {
        handlers: [
            'disk-resources',
            'disk-default-folders'
        ],
        lazy: true,
        events: {
            'mousedown .js-finder-resource': 'select',
            'scroll .js-finder-listing': 'loadMore'
        },
        exceptedParams: {
            offset: null
        }
    });

    var bBrowseDiskListingProto = bBrowseDiskListing.prototype;

    bBrowseDiskListingProto.onhtmlinit = function(node) {
        this.$node = $(node);
        this.$listing = this.$node.find('.js-finder-listing');

        // Высоту всех элементов листинга можно посчитать через положение
        // его последнего элемента -- крутилки -- относительно всего
        // контейнера листинга.
        this.listingHeight = this.$listing.children('.js-finder-loader').position().top;

        this.$listing.toggleClass(COMPLETE_CLASS, this.getHandler('disk-resources').complete);

        this.onselect(null, { now: hDiskResources.selected });
    };

    bBrowseDiskListingProto.onshow = function() {
        Jane.events.bind('disk-resources.selected', this.handleSelected = this.onselect.bind(this));
    };

    bBrowseDiskListingProto.onhide = function() {
        hDiskResources.deselect();

        Jane.events.unbind('disk-resources.selected', this.handleSelected);
    };

    bBrowseDiskListingProto.select = function(e) {
        hDiskResources.select(decodeURIComponent($(e.currentTarget).data('id')));
    };

    /**
     * Запуск загрузки новой порции, реакция на скролл контейнера листинга.
     */
    bBrowseDiskListingProto.loadMore = function() {
        if (this.loading) {
            return;
        }

        // Следующая порция подгружается когда пользователь доскроллил почти
        // до самого низа листинга.
        //
        // Текущий уровень скролла определяется как сумма проскролленого
        // расстояния (`scrollTop`) и высоты самого блока (`outerHeight`).
        //
        // Линия начала подгрузки определяется как высота всего листинга (всех
        // ресурсов, лежит в `listingHeight`) минус определенное расстояние,
        // нужное для запуска подгрузки порции чуть раньше достижения самого
        // низа листинга.
        //
        // Таким образом, когда уровень скролла перемещается ниже, чем линия
        // начала подгрузки, происходит запуск подгрузки следующей порции.
        // В это время в блоке выставляется флаг предотвращения повторной
        // загрузки (`loading`) и отображается крутилка.
        if (this.$listing.scrollTop() + this.$listing.outerHeight() >= this.listingHeight - PRELOAD_OFFSET) {
            this.loading = true;
            this.$listing.addClass(LOADING_CLASS);

            hDiskResources.loadMore(this.params).always(this.update.bind(this));
        }
    }.lazy(200);

    /**
     * Завершение обновления листинга после получения порции.
     */
    bBrowseDiskListingProto.update = function() {
        this.loading = false;
        this.$listing.removeClass(LOADING_CLASS);

        // До обновления HTML блока запоминается текущая позиция скролла.
        this._scrollTop = this.$listing.scrollTop();

        // Она восстановится после завершения `run`-а и отрисовки новых
        // ресурсов в листинге.
        this.run(this.params, this.restoreScroll.bind(this));
    };

    bBrowseDiskListingProto.onselect = function(e, data) {
        if (data.before) {
            this.$node.find('[data-id="' + encodeURIComponent(data.before) + '"]').removeClass(SELECTED_CLASS);
        }

        if (data.now) {
            this.$node.find('[data-id="' + encodeURIComponent(data.now) + '"]').addClass(SELECTED_CLASS);
        }
    };

    bBrowseDiskListingProto.restoreScroll = function() {
        if (this.$listing && this._scrollTop) {
            this.$listing.scrollTop(this._scrollTop);
            delete this._scrollTop;
        }
    };

})(Jane);

/* ../../blocks/disk/browse-disk-listing.js end */


        /* ../../blocks/user-feedback/user-feedback-box.js begin */
(function(/**Jane*/Jane) {
    var bUserFeedbackBox = Jane.Block.create('user-feedback-box', {
        box: true
    });

    bUserFeedbackBox.prototype.selectName = function(params) {
        var block = 'user-feedback-search';
        if (params.report) {
            block = 'user-feedback-report';
        }

        return block;
    };

})(Jane);

/* ../../blocks/user-feedback/user-feedback-box.js end */

        /* ../../blocks/user-feedback/user-feedback-report/user-feedback-report.js begin */
/* global html2canvas */

(function(/**Jane*/Jane, /**Daria*/Daria) {

    var SIZE_25MB = 25 * 1024 * 1024;
    var CLOSE_DELAY_SEC = 15;
    var REPORT_EMAIL = 'mail@support.yandex.ru';

    var bUserFeedbackReport = Jane.Block.create('user-feedback-report', {
        events: {
            'keyup .js-kbd-report': 'validationForm',
            'change .js-feedback-file': 'addFile',
            'click .js-feedback-remove-file': 'removeFile',
            'click .js-feedback-take-screenshot': 'takeScreenshot',
            'click .js-feedback-remove-screenshot': 'removeScreenshot'
        }
    });

    bUserFeedbackReport.prototype.onhtmlinit = function(node) {
        var that = this;
        var $node = $(node);

        this._attachments = [];
        this.$node = $node;
        this.$form = $node.find('.js-feedback-form');
        this.$steps = $node.find('.js-feedback-step');
        this.$files = $node.find('.js-feedback-attachments');
        this.$filesView = $node.find('.js-feedback-files');
        this.$screenshotContainer = $node.find('.js-feedback-screenshot');
        this.$inputs = $node.find('.js-kbd-report');
        this.$screenshotView = $node.find('.js-feedback-attach-screen');
        this.$screenshotLoader = $node.find('.js-feedback-screenshot-loader');
        this.$select = $node.find('.js-feedback-change-theme-select');
        this.$fileInpTemplate = $node.find('.js-feedback-file').clone(true);
        nb.init(node);

        this.nbNextButtons = [];
        $node.find('.js-feedback-next').each(function() {
            that.nbNextButtons.push(nb.block(this));
        });

        this.nbChangeThemesSelect = nb.$block('.js-feedback-change-theme-select', $node);
        this.nbChangeThemesSelect.on('nb-changed', that.validationForm.bind(that));
    };

    bUserFeedbackReport.prototype.onhtmldestroy = function() {
        nb.destroy(this.$select);
    };

    bUserFeedbackReport.prototype.validationForm = function(e) {
        var selectValue = this.nbChangeThemesSelect.getState().value;
        if (e !== 'nb-changed') {
            this._message = e.target.value;
            this.$inputs.not(e.target).val(this._message);
        }

        if (!this._message || selectValue === 'changethemes') {
            this.nbNextButtons[0].disable();
            this.nbNextButtons[2].disable();
        } else {
            this.nbNextButtons[0].enable();
            this.nbNextButtons[2].enable();
        }
    };

    bUserFeedbackReport.prototype.takeScreenshot = function() {
        Jane.c('ФОС', 'Шаг 5', 'Cнимок экрана');

        this.$screenshotView.addClass('feedback-attach-not-empty');

        this.$screenshotLoader.removeClass('g-hidden');

        var that = this;
        Daria.Libs('html2canvas', function() {
            // Создаем временную контайнер с клонированными элементами для скриншота
            var $fakeBody = $('<div>').css({
                position: 'absolute',
                top: 0,
                left: 0,
                width: '100%',
                'min-height': '720px'
            });

            var $pageNodes = $('.b-page:visible, .b-page-bottom:visible');

            $fakeBody.append($pageNodes.clone());
            $(document.body).append($fakeBody);

            $pageNodes.hide();

            html2canvas($fakeBody[0], {
                onrendered: function(canvas) {
                    $pageNodes.show();
                    $fakeBody.remove();

                    var preview = getPreview(canvas, 100, 100);

                    that.$screenshotContainer
                        .append($('<img>').addClass('feedback-screenshot-preview').attr('src', preview.toDataURL()))
                        .append($('<span>').addClass('feedback-attach-item-del js-feedback-remove-screenshot'));

                    that.screenshotDataURL = canvas.toDataURL('image/png');

                    that.$screenshotLoader.addClass('g-hidden');
                }
            });
        });
    };

    bUserFeedbackReport.prototype.removeScreenshot = function() {
        delete this.screenshotDataURL;

        this.$screenshotContainer.empty();
        this.$screenshotView.removeClass('feedback-attach-not-empty');
    };

    bUserFeedbackReport.prototype.redrawFiles = function() {
        var attsData = [];
        var isOverlimitMode = false;
        for (var i = 0; i < this._attachments.length; ++i) {
            var el = this._attachments[i];

            var fileName = '';
            if (el.info.file) {
                fileName = el.info.file.name;
            } else {
                var filePath = $(el.info.input).val();
                fileName = /[^\\/]*$/.exec(filePath)[0];
            }

            var fileExt = '';
            var fileParts = /^(.*)(\.[^.]*)$/.exec(fileName);
            if (fileParts) {
                fileName = fileParts[1];
                fileExt = fileParts[2];
            }
            attsData.push({ name: fileName, ext: fileExt, overlimit: el.isOverLimit, id: i });
            isOverlimitMode = el.isOverLimit || isOverlimitMode;
        }

        this.$filesView
            .html(Jane.tt('mail-common:user-feedback-report-attachments', {
                atts: attsData,
                'overlimit-mode': isOverlimitMode
            }));

        $('.js-feedback-attach-files').toggleClass('feedback-attach-not-empty', this._attachments.length > 0);
    };

    bUserFeedbackReport.prototype.addFile = function(e) {
        var that = this;
        Jane.c('ФОС', 'Шаг 5', 'Загрузить файл');

        Jane.Services.load('#compose', function() {
            var fileInput = e.target;
            var $fileContainer = $(fileInput).parent();

            if (Modernizr.filereader) {
                $.each(fileInput.files, function() {
                    that._attachments.push(new Daria.Attachment({
                        file: this
                    }));
                });
                var sumSize = 0;
                that._attachments.forEach(function(el) {
                    if (sumSize + el.info.file.size > SIZE_25MB) {
                        el.isOverLimit = true;
                    } else {
                        el.isOverLimit = false;
                        sumSize += el.info.file.size;
                    }
                });
                $(fileInput).remove();
            } else {
                var att = new Daria.Attachment({
                    input: fileInput
                });
                att.isOverLimit = false;
                that._attachments.push(att);
            }
            $fileContainer.prepend(that.$fileInpTemplate.clone(true));

            that.redrawFiles();
        });
    };

    bUserFeedbackReport.prototype.removeFile = function(e) {
        var fileId = $(e.target).data('fileid');
        var file = this._attachments.splice(fileId, 1)[0];
        file.remove();

        this.redrawFiles();
    };

    bUserFeedbackReport.prototype.send = function() {
        Daria.Dialog.$dialog.addClass('feedback-no-header');

        this.setStep('sending');

        var uploadDeferrers = [];
        this._attachments.forEach(function(attach) {
            if (!attach.isOverLimit) {
                uploadDeferrers.push(attach.upload());
            }
        });

        if (this.screenshotDataURL) {
            uploadDeferrers.push(this.uploadScreenshot());
        }

        $.when.apply(null, uploadDeferrers).done(this._sendMessage.bind(this));
    };

    bUserFeedbackReport.prototype._sendMessage = function() {
        var that = this;
        var params = createSendParamsBy({
            message: this._message,
            text: this.params.text,
            selectValue: that.nbChangeThemesSelect.getState().text,
            messageId: this.$node.find('.js-attach-eml input').is(':checked') ? Daria.Page.params.ids : null,
            attachmentIds: $.map(this._attachments, function(attach) { return attach.info.att_id; })
        });

        Daria.SendMail.sendForm({
            $form: this.$form,
            params: params,
            success: function() {
                that.setStep('done');
                setTimeout(closeFeedbackForm, CLOSE_DELAY_SEC * 1000);
            },
            error: function() {}
        });
    };

    bUserFeedbackReport.prototype.setStep = function(step) {
        if (!isNaN(step)) {
            Daria.Dialog.$dialog.data('step', step + 3);
            Jane.c('ФОС', 'Шаг ' + (step + 3), 'Показ шага');
        }

        if (step === 'done') {
            Jane.c('ФОС', 'Шаг 7', 'Показ шага');
        }

        this.$steps.addClass('g-hidden');
        this.$node.find('.js-feedback-step-' + step).removeClass('g-hidden');
    };

    bUserFeedbackReport.prototype.uploadScreenshot = function() {
        var that = this;

        var deferred = $.Deferred();
        Jane.Services.load('#compose', function() {
            var screen = that.screenshotDataURL.split(',');
            var screenshotAtta = new Daria.Attachment({
                name: 'screenshot.png',
                file: base64toBlob(screen[1], 'image/png')
            });
            that._attachments.push(screenshotAtta);
            screenshotAtta.upload().always(function() {
                deferred.resolve();
            });
        });
        return deferred;
    };

    function createSendParamsBy(data) {
        var params = {
            to: REPORT_EMAIL,
            subj: '[NEWFORM] ' + data.selectValue
        };

        params.send = data.message + '\n\n' +
            '----\n' +
            'Login: ' + Daria.login + '\n' +
            'Browser: ' + navigator.userAgent + '\n' +
            'Address: ' + Daria.Config.userIP + '\n' +
            'Referer: new form';

        if (data.attachmentIds) {
            params.att_ids = data.attachmentIds;
        }

        if (data.messageId) {
            params.ids = data.messageId;
        }
        return params;
    }

    function getPreview(canvas, width, height) {
        var preview = document.createElement('canvas');
        preview.width = width;
        preview.height = height;

        preview.getContext('2d').drawImage(canvas, 0, 0, width, height);
        return preview;
    }

    function closeFeedbackForm() {
        if (Daria.Dialog.$dialog && Daria.Dialog.$dialog.data('step') === 6) {
            Daria.Dialog.close();
        }
    }

    function base64toBlob(base64Data, contentType) {
        contentType = contentType || '';
        var sliceSize = 1024;
        var byteCharacters = atob(base64Data);
        var bytesLength = byteCharacters.length;
        var slicesCount = Math.ceil(bytesLength / sliceSize);
        var byteArrays = new Array(slicesCount);

        for (var sliceIndex = 0; sliceIndex < slicesCount; ++sliceIndex) {
            var begin = sliceIndex * sliceSize;
            var end = Math.min(begin + sliceSize, bytesLength);

            var bytes = new Array(end - begin);
            for (var offset = begin, i = 0 ; offset < end; ++i, ++offset) {
                bytes[i] = byteCharacters[offset].charCodeAt(0);
            }
            byteArrays[sliceIndex] = new Uint8Array(bytes);
        }
        return new Blob(byteArrays, { type: contentType });
    }

})(Jane, Daria);

/* ../../blocks/user-feedback/user-feedback-report/user-feedback-report.js end */

        /* ../../blocks/user-feedback/user-feedback-search/user-feedback-search.js begin */
(function(/**Jane*/Jane) {
    var bUserFeedbackSearch = Jane.Block.create('user-feedback-search', {
        blocks: ['user-feedback-search-box'],
        events: {
            'keyup .js-kbd-feedback': 'onInputTextChange',
            'keydown .js-kbd-feedback': 'onInputKeyDown',
            'click .js-feedback-button-search': 'search',
            'blur .js-kbd-feedback': 'onInputBlur'
        },
        params: {
            text: null
        }
    });
    var keyCode = {
            DOWN: 40,
            UP: 38,
            ENTER: 13
        };

    bUserFeedbackSearch.prototype.onhtmlinit = function(node) {

        this.usesuggest = 'no';
        this.$node = $(node);
        this._prevInputValue = this.params.text;

        this.$input = this.$node.find('.js-kbd-feedback');

        this.suggestRequestLazy = this.suggestRequest.lazy(150);

        this.$input = $(node).find('.js-kbd-feedback');

        var bActive = Jane.$B('user-feedback-search-box').getActive();
        var inputClass = '';
        if (bActive && bActive.name !== 'user-feedback-search-results') {
            inputClass = '.js-kbd-feedback';
        } else {
            inputClass = '.js-feedback-pseudo-focus';
        }

        var $input = $(node).find(inputClass);
        Daria.setZeroTimeout($.fn.focus.bind($input));
    };

    bUserFeedbackSearch.prototype.suggestRequest = function() {
        var text = this.$input.val();
        if (this._prevInputValue !== text && text.length > 1) {
            Jane.$B('user-feedback-search-box').run({ text: text });
            this._prevInputValue = text;
        }
    };

    bUserFeedbackSearch.prototype.onInputTextChange = function(e) {
        var oldInputValue = this.inputValue || '';
        this.inputValue = this.$input.val();

        if (oldInputValue !== this.inputValue && e.which !== keyCode.DOWN && e.which !== keyCode.UP) {
            this.usesuggest = 'no';
            this.suggestRequestLazy();
        }
    };

    bUserFeedbackSearch.prototype.onInputBlur = function() {
        var bFeedbackSuggest = Jane.$B('user-feedback-search-box').getActive();
        if (bFeedbackSuggest.name === 'user-feedback-suggest') {
            bFeedbackSuggest.clearSelected();
        }
    };

    bUserFeedbackSearch.prototype.onInputKeyDown = function(e) {
        var bFeedbackSuggest = Jane.$B('user-feedback-search-box').getActive();
        var isSuggest = bFeedbackSuggest.name === 'user-feedback-suggest';
        switch (e.which) {
            case keyCode.ENTER:
                e.preventDefault();
                this.search();
                break;
            case keyCode.DOWN:
                if (isSuggest) {
                    this.usesuggest = 'yes';
                    bFeedbackSuggest.nextSelect();
                    e.preventDefault();
                }
                break;
            case keyCode.UP:
                if (isSuggest) {
                    this.usesuggest = 'yes';
                    bFeedbackSuggest.prevSelect();
                    e.preventDefault();
                }
                break;
        }
    };
    bUserFeedbackSearch.prototype.search = function(ev) {

        if (ev) {
            var step = 1;
            var $content = this.$node.find('.feedback-inner .feedback-content');
            if ($content.length) {
                step = 3;
            }
            Jane.c('ФОС', 'Шаг ' + step, 'Клик по кнопке "Найти"');
        }

        var text = this.$input.val();
        if (text && text.length >= 2) {
            Jane.Actions.run('user-feedback.search', {
                text: text,
                usesuggest: this.usesuggest
            });
        }
    };
    bUserFeedbackSearch.prototype.setInputValue = function(text) {
        $(this.getCacheNode()).find('.js-kbd-feedback').val(text);
    };
})(Jane);

/* ../../blocks/user-feedback/user-feedback-search/user-feedback-search.js end */

        /* ../../blocks/user-feedback/user-feedback-search/user-feedback-search-box.js begin */
(function(/**Jane*/Jane) {
    var bUserFeedbackSearchBox = Jane.Block.create('user-feedback-search-box', {
        box: true
    });

    bUserFeedbackSearchBox.prototype.selectName = function(params) {
        var block = 'user-feedback-suggest';
        var step = 2;
        if (params.search) {
            block = 'user-feedback-search-results';
            step = 3;
        }

        if (Daria.Dialog.isOpen()) {
            Daria.Dialog.$dialog.data('step', step);
        }
        return block;
    };

})(Jane);

/* ../../blocks/user-feedback/user-feedback-search/user-feedback-search-box.js end */

        /* ../../blocks/user-feedback/user-feedback-search/user-feedback-suggest/user-feedback-suggest.js begin */
(function(/**Jane*/Jane) {
    var FeedbackSuggest = Jane.Block.create('user-feedback-suggest', {
        handlers: ['feedback-help-suggest']
    });
    FeedbackSuggest.prototype.onshow = function() {
        this.clearSelected();
    };

    FeedbackSuggest.prototype.nextSelect = function() {
        this.currentElem = this.currentElem === this.elementsLength ? 1 : this.currentElem + 1;
        setCurrentelement.call(this, 'next');
    };

    FeedbackSuggest.prototype.prevSelect = function() {
        this.currentElem = (this.currentElem === 1 || this.currentElem === 0) ? this.elementsLength : this.currentElem - 1;
        setCurrentelement.call(this, 'prev');
    };

    FeedbackSuggest.prototype.clearSelected = function() {
        this.currentElem = 0;
        this.elementsLength = $(this.getCacheNode()).find('.feedback-item_action').length;
        var $node = $(this.getCacheNode());
        var $items = $node.find('.feedback-item_action');
        $items.removeClass('feedback-item_active');
    };

    function setCurrentelement(dir) {
        var $node = $(this.getCacheNode());
        var $wrapper = $node.find('.feedback-content');
        var $items = $node.find('.feedback-item_action');

        if (!$items.length) { // если нет саджеста
            return false;
        }

        var $currentElemNode = $items.eq(this.currentElem - 1);
        Jane.$B('user-feedback-box').getActive().setInputValue($currentElemNode.html());
        $items.removeClass('feedback-item_active');
        $currentElemNode.addClass('feedback-item_active');
        if (this.currentElem === 1) {
            $wrapper.scrollTop(0);
            return;
        } else if (this.currentElem === this.elementsLength) {
            $wrapper.scrollTop(this.elementsLength * $currentElemNode.outerHeight());
            return;
        }
        if (dir === 'next') {
            if ($currentElemNode.offset().top - $wrapper.offset().top >= $wrapper.height()) {
                $wrapper.scrollTop($wrapper.scrollTop() + $currentElemNode.outerHeight());
            }
        }
        if (dir === 'prev') {
            if ($currentElemNode.offset().top - $wrapper.offset().top < 0) {
                $wrapper.scrollTop($wrapper.scrollTop() - $currentElemNode.outerHeight());
            }
        }
    }

})(Jane);

/* ../../blocks/user-feedback/user-feedback-search/user-feedback-suggest/user-feedback-suggest.js end */

        /* ../../blocks/user-feedback/user-feedback-search/user-feedback-search-results/user-feedback-search-results.js begin */
(function(/**Jane*/Jane) {
    var bFeedbackSearch = Jane.Block.create('user-feedback-search-results', {
        handlers: ['feedback-help-search'],
        events: {
            'click a': 'logLinkClick'
        }
    });

    bFeedbackSearch.prototype.onhtmlinit = function(node) {
        var $node = $(node);

        if ($node.find('.feedback-item').length) {
            Jane.c('ФОС', 'Шаг 3', 'Показ шага');
            this.repairLinks();
        } else {
            setTimeout(function() {
                $node.closest('.feedback-search').find('.js-kbd-feedback').focus();
            }, 0);
        }
    };

    bFeedbackSearch.prototype.repairLinks = function() {
        $(this.getCacheNode()).find('.feedback-item').each(function() {
            var $item = $(this);
            var docUrl = recoverUrl($item.data('document-url'));
            $item.find('a[href]').each(function() {
                var $a = $(this);
                $a.attr('target', '_blank');
                var absoluteHref = Jane.getAbsoluteUrl($a.attr('href'), docUrl);
                if (absoluteHref) {
                    $a.attr('href', absoluteHref);
                }
            });
        });
    };

    bFeedbackSearch.prototype.logLinkClick = function(e) {
        if ($(e.target).closest('.feedback-content').length) {
            Jane.c('ФОС', 'Шаг 3', 'Клик по ссылке в тексте');
        }
    };

    function recoverUrl(url) {
        if (/^https?:\/\//.test(url)) {
            return url;
        } else if (/^\/\//.test(url)) {
            return 'http:' + url;
        } else {
            return 'http://' + url;
        }
    }
})(Jane);

/* ../../blocks/user-feedback/user-feedback-search/user-feedback-search-results/user-feedback-search-results.js end */


        //Поп-ап с картой для адресов, подсвеченных в письме
        /* ../../blocks/map-up/map-up.js begin */
(function(/**Jane*/Jane, /**Daria*/Daria) {
    //Синхронизация с css
    var transitionDurations = Modernizr.csstransitions ? 500 : 0; //мс.
    var mapFrameStartingWidth = 600; //px.
    var mapFrameStartingHeight = 400; //px.
    var openPopupFieldsWidth = 12; //px. 16px ширина полей, -4px из .mail-message-map_big
    //Закончили синхронизацию с css

    /* global ymaps */

    //--------------------

    /**
     * Блок с картой
     * @constructor
     */
    var Map = function() {
        Jane.Block.apply(this, arguments);

        /**
         * @type {ymaps.Map}
         * @private
         */
        this._map = null;

        /**
         * @type {jQuery}
         */
        this._$node = null;

        /**
         * @type {Object<selector, jQuery>}
         * @private
         */
        this._subnodes = {};
    };
    Jane.extend(Map, Jane.Block);

    Jane.Block.add({
        constructor: Map,
        name: 'map',
        info: {
            handlers: ['map-data']
        }
    });

    /**
     * Отступы развернутой карты внутри свёрнутого попапа
     * @returns {{left: number, top: number}}
     */
    Map.prototype.getMinimizedOffset = function() {
        return {
            left: -($(window).width() - mapFrameStartingWidth) / 2,
            top: -($(window).height() - mapFrameStartingHeight) / 2
        };
    };

    /**
     * Размеры развернутой на всю страницу карты
     * @returns {{width: number, height: number}}
     */
    Map.prototype.getMaximizedDimensions = function() {
        return {
            width: $(window).width() - openPopupFieldsWidth,
            height: $(window).height() - openPopupFieldsWidth
        };
    };

    Map.prototype.onhtmlinit = function() {
        /**
         * Нода, в которой лежит карта
         * @type {jQuery}
         */
        this.$frame = $(this.getCacheNode()).find('.js-mail-message-map-frame');

        /**
         * Обертка над нодой с картой
         * У этой обертки overflow: hidden, именно её размеры определяют сколько карта занимает места на экране
         * @type {jQuery}
         */
        this.$frameWrap = $(this.getCacheNode()).find('.js-mail-message-map-frame-wrap');
    };

    /**
     * Метод заводит карту
     * Должен вызываться после вставки в дом.
     */
    Map.prototype.initMap = function() {
        var that = this;
        Daria.Libs("Ya.Maps", function() {
            ymaps.ready(function() {
                var mapData = that.getHandler('map-data');

                //Метрика. Должна быть синхронизована с ятью
                if (mapData.inUserArea) {
                    Jane.c('Карты в письмах', 'Как добраться', 'Автомобиль', 'Показ');
                    Jane.c('Карты в письмах', 'Как добраться', 'Транспорт', 'Показ');

                    if (mapData.closestSubway.distance <= 1) {
                        Jane.c('Карты в письмах', 'Ближайшее метро', 'Показ');
                    }
                }

                Jane.c('Карты в письмах', 'Распечатать', 'Показ');
                //Закончили с метрикой


                var location = mapData.addressLocation;
                var currentZoom = 15;

                var map = new ymaps.Map(that.$frame.get(0), {
                    center: [location.lat, location.lon],
                    behaviors: ['default', 'scrollZoom'],
                    zoom: currentZoom,
                    type: "yandex#map"
                });

                map.controls.add('zoomControl');

                var address = new ymaps.Placemark([location.lat, location.lon], {}, {
                    preset: "twirl#redDotIcon"
                });
                map.geoObjects.add(address);



                //Debounce нужен, чтобы не обрабатывать клики, пока карта меняет состояние
                //Должны посылать ивенты, которые в меняют состояние попапа не чаще, чем отрабатывают транзишены
                var dispatchEvent = _.debounce(function(event) {
                    Jane.events.trigger(that.getEventName(event));
                }, transitionDurations, { leading: true, trailing: false });

                /**
                 * @param {string | string[]} mapEvent
                 * @param {string}            eventToTrigger
                 */
                var triggerMapEvent = function(mapEvent, eventToTrigger) {
                    var edgeZoomLevels = [1, 18]; //Крайние положения зума

                    var actionHandler = function(mapEvent) {
                        var action = mapEvent.get('action');
                        if (action) {
                            //Если произошло действие с самой картой, нужно послушать первый тик и узнать будет ли изменение зума
                            action.events.add('tick', _.once(function(tickEvent) {
                                if (edgeZoomLevels.indexOf(currentZoom) === -1 && tickEvent.get('tick').zoom === currentZoom) {
                                    //Если событие связано с перемещением карты, дергаем событие
                                    dispatchEvent(eventToTrigger);
                                } else {
                                    //Ничего не делаем, если пользователь поменял зум
                                    currentZoom = tickEvent.get('tick').zoom;
                                }
                            }));
                        } else {
                            dispatchEvent(eventToTrigger);
                        }
                    };

                    map.events.add(mapEvent, actionHandler);
                    address.events.add(mapEvent, actionHandler); //Пимпочка-указатель должна вести себя так же, как сама карта
                };

                triggerMapEvent('actionbegin', 'expand');
                triggerMapEvent('click', 'toggleFullscreen');

                that._map = map;
                that.redraw();
            });
        });
    };

    Map.prototype.destroy = function() {
        if (this._map) {
            //Destroy the ymaps.Map
            this._map.destroy();
        }

        Map.superClass.destroy.apply(this, arguments);
    };

    /**
     * Выполняет action с транзиешнами, выключенными на $node
     * @param {jQuery} $node
     * @param {function} action
     * @private
     */
    Map.prototype._withoutTransitions = function($node, action) {
        $node.addClass('mail-message-map_no-transition');

        action.call(this);

        /* jshint expr:true */
        $node[0].offsetHeight; //Flush css changes, see http://stackoverflow.com/a/16575811
        $node.removeClass('mail-message-map_no-transition');
    };

    /**
     * Разворачивает фрейм с картой
     * При открытии карты фрейм с картой разворачивается на весь экран и сдвигается относительно frame-wrap
     * Потом транзишенами анимируется раскрытие frame-wrap и, одновременно, сдвиг frame внутри frame-wrap —
     * из-за этого карта открывается плавно и центр остается в центре попапа.
     *
     * Сам попап при этом транзишенами сдвигается к левому верхнему углу,
     * чтобы центр карты оказался фиксирован относительно страницы
     *
     * При закрытии то же самое, в обратном порядке: сначала плавно свернуть frame-wrap и передвинуть попап в центр,
     * потом резко свернуть карту, чтобы зум и копирайт встали на место.
     *
     * @param {boolean} fullscreen
     */
    Map.prototype.toggleFullscreen = function(fullscreen) {
        var $frame = this.$frame;
        var $frameWrap = this.$frameWrap;

        if (fullscreen) {
            //С выключенными транзишенами разворачиваем карту
            this._withoutTransitions($frame, function() {
                $frame.css(_.extend(this.getMinimizedOffset(), this.getMaximizedDimensions()));
                this.redraw();
            });

            //Плавненько двигаемся к развернутому виду
            $frameWrap.css(this.getMaximizedDimensions());
            $frame.css({
                top: 0,
                left: 0
            });
        } else {
            //Плавно сворачиваемся
            $frame.css(this.getMinimizedOffset());
            $frameWrap.removeAttr('style');

            var that = this;
            setTimeout(function() {
                //После транзишенов нужно сжать карту
                that._withoutTransitions($frame, function() {
                    $frame.removeAttr('style');
                    that.redraw();
                });
            }, transitionDurations);
        }
    };

    /**
     * Подгоняет карту под текущий размер ноды, в которой лежит карта
     */
    Map.prototype.redraw = function() {
        if (this._map) {
            this._map.container.fitToViewport();
        }
    };



    //--------------------

    /**
     * Блок с действиями над картой: "Распечатать", "Как добраться", всё вот это
     */
    Jane.Block.create('map-actions', {
        handlers: ['map-data']
    });

    //--------------------

    var MapUp = function() {
        Jane.Block.apply(this, arguments);
        this._fullscreen = false;

        this.logExpanded = _.once(function() {
            Jane.c('Карты в письмах', 'Показ попапа', 'Развёрнутый попап');
        });

        this.logMinified = _.once(function() {
            Jane.c('Карты в письмах', 'Показ попапа', 'Сворачивание попапа');
        });
    };
    Jane.extend(MapUp, Jane.Block);

    MapUp.prototype._bindEvents = function() {
        var that = this;
        this._boundEvents = {};
        this._boundEvents[this.getBlockByName('map').getEventName('toggleFullscreen')] = function() {
            that.toggleFullscreen();
        };

        this._boundEvents[this.getBlockByName('map').getEventName('expand')] = function() {
            that.toggleFullscreen(true);
        };

        _.each(this._boundEvents, function(handler, event) {
            Jane.events.bind(event, handler);
        });
    };

    MapUp.prototype._unbindEvents = function() {
        if (this._boundEvents) {
            _.each(this._boundEvents, function(handler, event) {
                Jane.events.unbind(event, handler);
            });
        }
    };

    MapUp.prototype.onhtmlinit = function() {
        this._bindEvents();
    };

    MapUp.prototype.onWindowResize = function() {
        this.toggleFullscreen(this._fullscreen, true);
        Jane.events.trigger(this.getEventName('windowResize'));
    };

    /**
     * Метод, переключающий размер карты
     *
     * @param {boolean} [fullscreen]  Передвинуть карту в это состояние. Если не задан, произойдет переключение состояний.
     * @param {boolean} [force]       Проиграть переключение в состояние из fullscreen, даже если сейчас попап в этом состоянии. Нужно для рекации на изменение размеров окна.
     */
    MapUp.prototype.toggleFullscreen = function(fullscreen, force) {
        if (!force && fullscreen === this._fullscreen) {
            return;
        }

        this._fullscreen = typeof fullscreen !== 'undefined' ? fullscreen : !this._fullscreen;
        $(this.getCacheNode()).find('.mail-message-map').toggleClass('mail-message-map_big', this._fullscreen);



        if (this._fullscreen === false) {
            //Когда карта сворачивается, сначала пропадает марка
            this.toggleFullscreenStyles(false);
        }

        this.getBlockByName('map').toggleFullscreen(this._fullscreen);

        if (this._fullscreen === true) {
            //Когда карта разворачивается, марка должна появиться после транзишена
            var that = this;
            setTimeout(function() {
                that.toggleFullscreenStyles(true);
            }, transitionDurations);
        }

        if (this._fullscreen) {
            Jane.events.trigger(this.getEventName('expand'));
            this.logExpanded();
        } else {
            Jane.events.trigger(this.getEventName('minimize'));
            this.logMinified();
        }
    };

    MapUp.prototype.toggleFullscreenStyles = function(fullscreen) {
        $('html').toggleClass('mail-message-map_is-fullscreen', fullscreen);
    };

    MapUp.prototype.destroy = function() {
        if (this._fullscreen) {
            Jane.c('Карты в письмах', 'Показ попапа', 'Закрыли развёрнутый');
        } else {
            Jane.c('Карты в письмах', 'Показ попапа', 'Закрыли маленький');
        }

        this.toggleFullscreenStyles(false); //При закрытии попапа нужно восстановить стили
        this._unbindEvents();

        MapUp.superClass.destroy.apply(this, arguments);
    };

    /**
     * Open the map-up
     */
    MapUp.prototype.open = function() {
        var that = this;
        this.run(this.params, function() {
            var popupNode = Jane.tt('mail-common:map-up');

            var popup = nb.block(popupNode);
            popup.setContent(that.getCacheNode());
            popup.open({
                where: $('body').get(0),
                how: {
                    autoclose: true
                }
            });

            var $html = $('html');
            $html.addClass('mail-message-map_opened');

            var repositionedAfterResize = true;
            var reposition = function() {
                popup.trigger('position', { where: $('body').get(0) });
            };

            var boundEvents = {};
            boundEvents[that.getEventName('windowResize')] = function() {
                reposition();
                that.getBlockByName('map').redraw();
                repositionedAfterResize = false;
            };

            var $popupOuterNode = $('.nb-popup-outer_mail-message-map-outer-node').addClass('mail-message-map-popup');
            boundEvents[that.getEventName('expand')] = function() {
                $popupOuterNode.addClass('mail-message-map-popup-maximized');
                repositionedAfterResize = true;
            };
            boundEvents[that.getEventName('minimize')] = function() {
                $popupOuterNode.removeClass('mail-message-map-popup-maximized');
                if (!repositionedAfterResize) {
                    reposition();
                    repositionedAfterResize = true;
                }
            };

            _.each(boundEvents, function(handler, event) {
                Jane.events.bind(event, handler);
            });

            var destroy = _.once(function() { //Once, потому что событие может выстрелить дважды
                that.destroy();
                popup.destroy();

                $html.removeClass('mail-message-map_opened');

                _.each(boundEvents, function(handler, event) {
                    Jane.events.unbind(event, handler);
                });
            });

            Jane.events.bind('pageunload', destroy); //По клику на "почта" в марочке попап должен закрыться
            popup.on('nb-closed', destroy);

            that.getBlockByName('map').initMap();
            Jane.c('Карты в письмах', 'Показ попапа', 'Маленький попап');
        });
    };

    Jane.Block.add({
        constructor: MapUp,
        name: 'map-up',
        info: {
            blocks: ['map', 'map-actions'],
            events: {
                'resize window': 'onWindowResize'
            }
        }
    });

}(Jane, Daria));

/* ../../blocks/map-up/map-up.js end */


/* ../../blocks/mailbox-blocks.js end */

    /* ../../actions/mailbox-actions.js begin */
/* ../../actions/common/common.js begin */
(function() {
    /** Общие для хаба mail экшены */

    Actions.create('mail-common.abook-popup', function(o) {
        Jane.Services.load('#contacts', function() {
            var params = {
                tid: '',
                _page: 'contacts',
                type: 'select',
                field: o.params.field,
                fillingBlock: (Page.type === 'message' ? Daria.QuickReply : Jane.$B('compose'))
            };

            var bAbook = Jane.Block.make('abook', params);

            bAbook.run(params, function() {
                Daria.Dialog.open({
                    width: 800,
                    additionalClass: 'abook-select-popup',
                    body: this.block.getCacheNode(),
                    onclose: function() {
                        Daria.Dropdown.toggle();
                        bAbook.destroy();
                    }
                });
            });
        });
        if (o.event) {
            o.event.stopPropagation();
        }
    });

    Actions.create('mail-common.person-popup', function(o) {
        if (o.event) {
            var current = $(o.event.currentTarget);
            // при клике по шапке не всегда нужно открывать карточку
            if (current.hasClass('b-message-head__field_from')) {
                var target = $(o.event.target);

                // при клике на дату и на имейл не открываем карточку
                if (current.closest('.b-message-head__date').length ||
                    target.hasClass('b-message-head__email') ||
                    target.hasClass('b-message-head__social__domain') ||
                    target.hasClass('b-mail-button__what')
                ) {
                    // TODO: Понять, что это за дикое условие?
                    return true;
                }
            }
        }

        Jane.Services.load('#contacts', function() {
            Daria.Abook.PersonPopup.open(o.params, o.event);
        });

        if (Daria.Page.type === 'contacts') {
            Block.Abook.Metrika.c('Тулбар', 'Клик Добавить контакт');

        }
    });

    Actions.create('shortcuts.show-help', function() {
        if (typeof Daria.Shortcuts !== 'undefined') {
            Daria.Shortcuts.showShortcutsHelp();
        }
    });

    Actions.create('abook.person-add', function(o) {
        var form = o.event && $(o.event.currentTarget).serializeObject() || {};
        var email = o.params.email;
        var name = o.params.name || '';
        var owner = o.params.owner;
        var cid = o.params.cid;

        var handler = cid ? 'do-abook-person-update' : 'do-abook-person-add';
        var hParams = cid ? form : {
            mail_addr: email,
            first_name: name
        };

        if (!cid && ('first_name' in form || 'last_name' in form)) {
            hParams.first_name = form.first_name || '';
            hParams.last_name = form.last_name || '';
        }

        Handler.doAll([handler], hParams, function(data) {
            var id = jpath(data, '.handlers[0].data.cid')[0];

            if (id || cid) {
                Jane.$H("abook-contacts").clearCache();
                Jane.$H("abook-letters").clearCache();
                Daria.Autocompleter.getContact().flushCache();

                if ($.isFunction(o.params.callback)) {
                    o.params.callback(cid);
                }

                if (owner == 'done') {
                    // Заморозка Facebook промоблока на 1 месяц
                    var hSettings = Jane.$H('settings');
                    hSettings.setSettings({
                        'promo-fb_hold-period': 30 * 24 * 3600 * 1000 /* период заморозки - месяц, мс*/
                    });

                    Jane.c('Done', 'Facebook', cid ? 'Контакт изменён' : 'Контакт добавлен');
                    Page.go('#inbox');
                }

                Daria.Statusline.showMsg({
                    name: 'abook.person-add',
                    body: i18n('%АК_Person_Add_ok', email),
                    body3: i18n('%3pane_АК_Person_Add_ok', email)
                });

            } else {
                Daria.Statusline.showMsg({
                    name: 'abook.person-add',
                    body: i18n('%АК_Person_Add_exists', email),
                    body3: i18n('%3pane_АК_Person_Add_exists', email)
                });
            }
        });

        $(document).trigger('b-mail-dropdown-closeall');
    });

    // Переключение табов в попапе горячих клавиш
    Actions.create("shortcuts.switch-tab", function(o) {
        Daria.Shortcuts.switchTab(o);
    });

    // Переход во вхощие из заглушки для несуществующего письма
    Actions.create('mail-common.inbox-from-message-error', function(e) {
        if (!e.params.noLog) {
            Jane.c({"Переход к недоступному письму": "клик по 'Вернуться в почту'"});
        }

        $('.b-message-error').addClass('g-hidden');
        $('.block-app').removeClass('g-hidden');

        Jane.events.unbind('pageload', Jane.$B('message')._onMessageErrorClose);

        if (!window.DariaAfterLoad) {
            Jane.events.trigger('pageinit');
            document.documentElement.className += ' m-loaded';
            window.DariaAfterLoad = true;
        }
    });

    Actions.create('mail-common.dialog-no-files', function() {
        var reply = (Daria.Page.type == 'compose') ?
            Jane.$B('compose') :
            Daria.QuickReply;
        var common = Daria.Compose.Common;
        var params = common.paramsStopWords;

        params.skipAttsStopWords = true;
        reply.send(params);
        common.logStopWords(true);
        Daria.Dialog.close();
    });

    Actions.create('mail-common.go-to-inbox', function() {
        Page.go('#inbox');
    });

})();

/* ../../actions/common/common.js end */

/* ../../actions/common/sound.js begin */
Jane.Actions.create('sound.message', function(e) {
    var hSettings = Jane.$H('settings');
    var soundName = 'message';

    if (hSettings.getSetting('color_scheme') === 'starwars') {
        soundName = 'message.lightside';
        var modifier = Jane.$H('settings-color-schemes-text').old_modifier;
        if (modifier && /darkside/.test(modifier) ||
            hSettings.getSetting('starwars-side') === 'darkside') {

            soundName = 'message.darkside';
        }
    }

    // если действие запущено из настроек
    if (e.params['setup']) {
        var nbCheck = nb.$block($(e.event.target).closest('.js-sound-message'));
        // если мы сейчас включаем эту настройку
        if (!nbCheck.isChecked()) {
            Daria.Sound.play(soundName);
        }
    } else {
        Daria.Sound.play(soundName);
    }

    return true;
});

/* ../../actions/common/sound.js end */


/* ../../actions/folders/add.js begin */
/*global Page, Actions, Handler, Action */

Daria.Folder = function(params) {
    var events = Jane.events;
    var hotkey = typeof(params.hotkey) == 'boolean' ? params.hotkey : true;

    return {
        validate: function() {
            var folder;
            var msg;
            if (!this.folderName) {

                msg = i18n('%Setup_Filters_Create_Error_Empty');
                events.trigger('folder.error', msg);
                return false;
            }
            var parent_id = params.parent_id || (this.parent_folder && this.parent_folder.data('fid'));
            folder = Jane.$H('folders').getFolderByName(this.folderName, parent_id);

            // Проверяем, что метки с таким именем еще нет.
            if (folder && folder.fid != params.id) {
                msg = folder['symbol'] ? i18n('%Folders_System_Msg', this.folderName) : i18n('%Folders_Exists_Msg');
                events.trigger('folder.error', msg);
                return false;
            }

            return true;
        },

        setName: function(name) {
            this.folderName = name;
            events.trigger('folder.name-changed', name);
        },

        bindEvents: function() {
            var that = this;
            var teaser = this.context.find('.b-teaser');
            var filterbox = this.context.find('.b-form-layout_filters-simple');

            if (this.filter) {
                this.filter.form = filterbox.find('form');
            }

            var error = {
                cls: 'b-popup__field_error',
                active: false,

                show: function(msg) {
                    this.notification = that.context.find('.b-notification__text');
                    this.row = this.notification.closest('.b-table');
                    if (msg) {
                        this.notification.text(msg);
                        this.row.addClass(this.cls);
                        this.active = true;
                    }
                },

                hide: function() {
                    this.row.removeClass(this.cls);
                    this.active = false;
                    events.trigger('folder.error.hide');
                }
            };

            events.bind('folder.error', function(name, msg) {
                error.show(msg);
                that.input.focus();
            });

            this.context.on('click', '.js-filter-open', function() {
                Jane.c(['Поп-ап создания папки', 'клик на открыть фильтры']);
                teaser.fadeOut(150, function() {

                    filterbox.fadeIn(200, function() {
                        var from = filterbox.find('input:visible').eq(0).focus();
                        var autocomplete = Daria.Autocompleter.getContact();

                        autocomplete.setOptions({
                            multiple: false,
                            formatResult: function(row) {
                                // Это группа
                                if (row.contacts) {
                                    var contacts = [];

                                    for (var i = 0, len = row.contacts.length; i < len; i++) {
                                        contacts.push(row.contacts[i].email);
                                    }

                                    return contacts.join(', ');
                                } else {
                                    return row.email;
                                }
                            }
                        });
                        autocomplete.bindField({ field: from, focus: 1 });
                        events.trigger('folder.filter.toggle', true);
                    });
                });
            });

            this.context.on('click', '.js-filter-close', function() {
                Jane.c(['Поп-ап создания папки', 'клик на свернуть фильтры']);
                filterbox.fadeOut(150, function() {
                    teaser.fadeIn(200, function() {
                        that.input.focus();
                        events.trigger('folder.filter.toggle', true);
                    });
                });
            });

            this.context.on('click', '.js-filter-link', function() {
                that.filter = false;
                that.success = function(id) {
                    Page.go('#setup/filters-create/folder=' + id);
                };
                that.onCreate();
                return false;
            });

            this.context.on('keyup', '.js-input-name', function(e) {
                var name = $.trim(this.value).replace(/\u0020/g, '\u00a0');

                if (name != that.folderName && error.active) {
                    error.hide();
                }

                that.setName(name);

                if (e.which === 13 && hotkey) {
                    that.onCreate();
                }
            });

            this.context.on('click', '.js-dropdown-folder-labels', function() {
                var maxHeight = $(window).height() - $(this).rect().top - 40;
                $('.js-folders-list').css('max-height', maxHeight).scrollTop(0);

            });
        },

        filter: Daria.FilterSimpleCreatePopup(),

        onCreate: function() {
            var that = this;
            this.setName($.trim(this.input[0].value).replace(/\u0020/g, '\u00a0'));
            if (this.validate()) {
                Daria.Dialog.close();
                this.create(function(id) {
                    if (that.filter) {
                        that.filter.params.move_folder = id;
                        that.filter.create();
                    }
                }, null, that.parent_folder.data('fid'));
            }
        },

        init: function() {
            this.input = $('input[name=folder_name]', this.context);
            this.parent_folder = $('.js-selink__folder', this.context);
            if (params.name) {
                this.input.val(params.name);
            }
            this.bindEvents();
            this.open();
        }
    };
};

Daria.FolderCreateContext = function(params) {
    var folderCreate = Daria.FolderCreatePopup(params);
    var data = params.filter ? {filter: null} : {};
    data.folders = Jane.$H('folders').getCacheByPageParams();
    data.isFolderPopup = true;

    $.extend(folderCreate, {
        context: $(Jane.tt('mail-common:folder-create', data)),
        onCreate: function() {
            var that = this;
            var dfd = $.Deferred();
            var onerror = Jane.events.bind('folder.error', function(event, message) {
                dfd.reject(message);
            });

            dfd.always(function() {
                Jane.events.unbind('folder.error', onerror);
            });
            if (this.validate()) {
                this.create(function(fid) {
                    if (that.filter) {
                        that.filter.params.move_folder = fid;
                        that.filter.create();
                    }

                    dfd.resolve(fid);

                }, function(data) {
                    var code = jpath(data, '.error.code')[0];
                    var msg = code == 1000 ? i18n('%Folders_System_Msg', this.folderName) : i18n('%Folders_Create_Error');
                    Jane.events.trigger('folder.error', msg);
                }, that.parent_folder.data('fid'));
            }

            return dfd;
        },
        open: function() {
            params.parent.html(this.context);
            this.input.keyup();
            this.input.focus();
        },
        // при необходимости дописать
        // @see folders.add
        success: function() {
            // Ресетим форму расширенного поиска
            Daria.SearchPrecise.reset();
            var pageType = Page.type;
            if (pageType == 'message' || pageType == 'messages' || pageType == 'compose') {
                Jane.$B('folders').run();
            }
        }
    });

    return folderCreate;
};

Daria.FolderCreatePopup = function(params) {
    var folderCreate = Daria.Folder(params);
    $.extend(folderCreate, {
        context: $(Jane.tt('mail-common:folder-create', { filter: null, folders: Jane.$H('folders').getCacheByPageParams(), isFolderPopup: true, withoutSubfolderDialog: params.withoutSubfolderDialog })),
        create: function(callback, errback, parent_id) {
            var that = this;
            var folderName = this.folderName;
            var parentId = parent_id || params.parent_id;
            Handler.doAll(
                ["do-folders-add", "folders"],
                { folder_name: folderName, parent_id: parentId },
                function() {
                    var folder = Jane.$H('folders').getFolderByName(folderName, parentId);

                    if (folder && folder.fid) {

                        if ($.isFunction(callback)) {
                            callback(folder.fid);
                        }

                        if ($.isFunction(that.success)) {
                            that.success(folder.fid);
                        }

                        // Гамификация
                        Jane.logUserActivity({ 'activity[verb]': 'mail.create', 'activity[yndx_type]': 'folder' });
                    } else {
                        if ($.isFunction(errback)) {
                            errback.call(that);
                        }
                    }
                }
            );
        },
        open: function() {
            var that = this;

            Daria.Dialog.open({
                title: i18n('%Folders_Создаём_папку'),
                body: this.context,
                buttons: [
                    {name: 'submit', value: i18n('%Folders_Add_Button'), onclick: function() {
                        Jane.c(["Поп-ап создания папки", "клик по создать"]);
                        that.onCreate();
                    }},
                    {name: 'cancel'}
                ],
                width: 432,

                oncancel: function() {
                    Jane.c(["Поп-ап создания папки", "клик по отменить"]);
                },

                onopen: function() {
                    Jane.c(["Поп-ап создания папки", "показ поп-апа"]);
                    that.input.keyup();
                    that.input.focus();
                    if (params['no-dialog']) {
                        if (params.name && !that.folderName) {
                            that.setName(params.name);
                        }

                        that.onCreate();
                    }
                }
            });
            $(document).trigger("b-mail-dropdown-closeall"); // Закрываем дропдаун после действия.
        }
    });

    return folderCreate;
};

Actions.add(
    new Action('folders.add', function(o) {
        var folderCreatePopup = Daria.FolderCreatePopup(o.params);
        $.extend(folderCreatePopup, {
            success: function(id) {
                if (Page.type != "setup") {
                    Actions.run("move", o.event, {
                        fid: id,
                        toolbar: o.params.toolbar
                    });
                }

                // Если есть блок "Папки и метки", то добавляем в него новый пункт
                if (Page.type == "setup") {
                    var tab = Page.params.tab;
                    if (tab == 'folders') {
                        var new_folders_html = Jane.tt('mail-setup:new-folders-list', {}, ['folders']);
                        $('.js-setup-folders-list').html(new_folders_html);
                    }

                    // на странице настройки сборщика нужно обновить список папок
                    if (tab == 'collector' && Page.params.popid) {
                        Jane.$B('setup-collector').updateFoldersItems(id);
                    }
                }

                // Ресетим форму расширенного поиска
                Daria.SearchPrecise.reset();
            }
        });

        folderCreatePopup.init();
    })
);

Actions.add(
    new Action('folders.add.filters', function(o) {
        var folderCreatePopup = Daria.FolderCreatePopup(o.params);
        $.extend(folderCreatePopup, {
            success: function(id) {
                var tab = Page.params.tab;
                var name = _.escape(this.folderName);

                if (tab === 'filters-create-simple') {
                    var bFiltersCreateSimple = Jane.$B('setup-filters-create-simple');
                    var nbSelect = bFiltersCreateSimple['nb-select_filter-simple_folder'];
                    var source = nbSelect.getSource();
                    // Вставляем новый option предпоследним. Так как последним должен быть
                    // "Новая папка"
                    source.push({
                        text: name,
                        value: id,
                        selected: true
                    });
                    nbSelect.setSource(source);
                }

                if (tab === 'filters-create') {
                    var bFiltersCreate = Jane.$B('setup-filters-create');
                    bFiltersCreate.nbFoldersSelect.addToSource({
                        text: name,
                        value: id,
                        selected: true
                    }, bFiltersCreate.nbFoldersSelect.getSource().length - 2); //Вставляем предпоследним
                }

                if (tab == 'filters-create-simple') {
                    $('<div class="b-mail-dropdown__item"><a href="#" class="b-mail-dropdown__item__content daria-action"' +
                        'data-action="filters.select-folder" data-params="val=' + id + '&amp;type=folder">' + name + '</a></div>')
                        .insertAfter('.b-form-layout__field_filters-simple-folder .b-mail-dropdown__box__content .b-mail-dropdown__item:first-child');
                    Actions.run('filters.select-folder', {type: 'folder', val: id});
                }
            },

            context: $(Jane.tt("mail-common:folder-create")),

            filter: false
        });

        folderCreatePopup.init();
    })
);

Jane.Actions.create('moveInFolder', function(o) {
    var params = o.params;
    var event = o.event;
    $(event.target).closest('.b-folders_dropdown').find('.b-folders__folder_current').removeClass('b-folders__folder_current');
    $(event.target).closest('.b-folders__folder').addClass('b-folders__folder_current');
    if (!params.fid) {
        $('.js-selink__folder').text(i18n('%Dont_Put_in_Folder'));
    } else {
        $('.js-selink__folder').attr('data-fid', params.fid).text(i18n('%Put_in_Folder', params.name));
    }
    Actions.run('dropdown.close-current');
});

/* ../../actions/folders/add.js end */

/* ../../actions/folders/clear.js begin */
(function() {

    var doFolderClear = function(params) {
        // Сбрасываем кэши хэндлеров: при удалении писем изменяется списки папок и меток (цифирки),
        // неопределенное количество списков писем (проще все разом грохнуть).
        // Еще есть списки писем в хэндлерах message-nearest и message-thread-nearest.
        Jane.Handler.clearCache(['folders', 'labels', 'messages', 'message-nearest', 'message-thread-nearest']);

        // Решаем, что перезапросить и с какими параметрами.
        var requestHandlers = ["do-folder-clear", "folders", "labels"]; // Это точно надо.

        var requestParams = {
            'cfid': params.fid,
            'method': params.method
        };

        //daria-4566
        $.each(['old_f', 'from_f', 'subj_f'], function(k, v) {
            if (params[v]) {
                requestParams[v] = params[v];
                requestParams['method'] = 'clearSelected';
            }
        });

        var pageType = Page.type;
        if (pageType == "messages") { // Если мы очищаем текущую папку, то можно сразу перезапросить данные для текущей страницы.
            $.extend(requestParams, Jane.$H("messages").extractParams(Page.params));
            requestHandlers.push("messages");
        }

        Jane.Handler.doAll(requestHandlers, requestParams, function(data) {

            Jane.Block.trigger('mail-left', 'invalidate');

            //FIXME: Блоки инвалидировать самому неправильно
            /*
            $.each(['messages-box', 'messages-list-box'], function(i, blockName) {
                // сами боксы инвалидировать не надо, надо блоки внутри них
                var box = Jane.$B(blockName);
                if (box) {
                    box.forEachBlockInBox(function(key, block) {
                        block.invalidate();
                    });
                    // aandrosov: box.active сбрасывать не надо, потому что мы можем находится в письме или списке писем
                    // его сбросит run при очередном запуске.
                    // box.active = null;
                }
            });
            */
            if (Page.type == "setup") {
                var bSetupFolders = Jane.$B("setup-folders");
                var item_element = $(".item-" + params.fid, bSetupFolders.foldersList.container);
                var iparams = Actions.getParams(item_element[0]);

                var error = false;
                if (jpath(data, '.handlers[.name == "do-folder-clear"].settings_folder_clear.error')[0]) {
                    Daria.Statusline.showMsg({
                        body: i18n('%Setup_Folders_clear_error'),
                        body3: i18n('%3pane_Setup_Folders_clear_error')
                    });
                    error = true;
                }

                // Обновляем количество новых и непрочитанных писем
                var f = jpath(data, '.handlers[.name == "folders"].folder[.fid == "' + params.fid + '"]')[0];
                if (f) {
                    iparams['count'] = f.count;
                    iparams['new'] = f['new'];
                }
                item_element.attr("data-params", $.param(iparams));

                bSetupFolders.foldersList.updateButtons(iparams);

                bSetupFolders.run();

                /*
                // В количестве писем ставим прочерк
                if (!error) {
                    //$(".b-folders__folder__counters__total", item_element).html("–");
                }
                */
            }

            if (Page.type == "messages") {
                if (Daria.layout !== '2pane' && params.fid == Page.params.current_folder) {
                    Page.go(Page.getCurrentCleanUrl(), function() {
                        Jane.Block.Mail.splitter.toggleOnePaneMode(true);
                    });
                } else {
                    Page.refresh();
                }
                Jane.events.trigger('folder.cleared', params.fid);
            } else {
                var bMailLeft = Jane.$B("mail-left");
                if (bMailLeft) {
                    bMailLeft.run();
                }
            }
        });
    };

    Daria.FolderClearPopup = function(params) {
        var folderClear = Daria.Folder(params);
        $.extend(folderClear, {
            context: params.template,
            init: function() {
                Daria.Dialog.confirm({
                    title: i18n('%Folders_Clear_Title'),
                    body: params.template,
                    nbInit: true,
                    onTarget: params.targetOffset ? {
                        x: Jane.$H("settings").isSet('hide_daria_header') ? 210 : 225,
                        y: params.targetOffset,
                        side: 'left',
                        pos: 'bottom'
                    } : null,
                    width: 455,
                    okValue: i18n('%Setup_Folders_Очистить'),
                    okHandler: function() {
                        var $popupBody = $(this.body);
                        var p;
                        var radioInputs = $popupBody.find('.nb-checkbox');
                        var nbSelectedRadioInput;
                        radioInputs.each(function(index) {
                            var nbRadioInput = nb.block(radioInputs[index]);
                            if (nbRadioInput && nbRadioInput.isChecked()) {
                                nbSelectedRadioInput = nbRadioInput;
                                return;
                            }
                        });
                        if (params.type == 'extended' && !Jane.$H("folders").isFolder(params.fid, ['trash'])) {
                            p = {
                                'method': nbSelectedRadioInput ? nbSelectedRadioInput.getValue() : '',
                                'fid': params.fid,
                                'old_f': nb.$block('.js-old_f', $popupBody).getState().value,
                                'from_f': nb.$block('#from_f', $popupBody).getValue(),
                                'subj_f': nb.$block('#subj_f', $popupBody).getValue()
                            };
                        } else {
                            p = {
                                'method': 'purge',
                                'fid': params.fid
                            };
                        }
                        doFolderClear(p);
                        //doFolderClear(params.fid, 'purge');
                    }
                });
            }
        });

        return folderClear;
    };

    Actions.add(new Action('folder.clear', function(o) {

        var e = o.event;
        var params = o.params;

        var fid = params.fid;
        var folder = Jane.$H("folders").getFolderById(fid);
        var name = folder.name;

        params.targetOffset = params.onTarget && e.target && ($(e.target).offset().top + $(e.target).height() / 2 - $(window).scrollTop());

        if (params.type == 'extended' && !Jane.$H("folders").isFolder(fid, ['trash'])) {
            params.template = $(Jane.tt("mail-common:folder-clear_extended"));
        } else {
            params.template = i18n('%Folders_Clear_Body', name);
        }

        var folderClearPopup = Daria.FolderClearPopup(params);
        folderClearPopup.init();

    }));

    // переместить все письма из папки в удалённые
    Actions.add(new Action("folder.messages-remove", function(o) {
        var params = o.params || {};

        if (!params.fid) {
            params.fid = Jane.Page.params.current_folder;
        }
        params.method = Jane.$H('folders').isFolder(params.fid, 'trash') ? 'purge' : 'clear';

        doFolderClear(params);
    }));


    /**
     * Изменение активности кнопки тулбара в списке сообщений
     */
    Jane.watcher.watch("action-folder.messages-remove-status", {
        get: function() {
            var actions = (Jane.watcher.get('folder-enable-actions') || '').split(',');
            return ($.inArray('folder-delete', actions) > -1);
        },
        deps: ['selected', 'pageKey', 'folder-enable-actions']
    });

})();

/* ../../actions/folders/clear.js end */

/* ../../actions/folders/mark-read.js begin */
Actions.add( new Action("folder.mark-read", function(o) {
    var params = o.params;
    var bSetupFolders = Jane.$B("setup-folders");
    var fid = params.fid || (typeof bSetupFolders != 'undefined') && bSetupFolders.foldersList.selectedItem;

    if (!fid || !Jane.$H('folders').getUnreadCount(fid)){
        return;
    }


    Handler.doAll(['do-folder-mark-read', 'folders'], { fid: fid }, function(data) {
        var resultStatus = jpath(data, '.handlers[.name == "do-folder-mark-read"].data.mark_folder_seen.result')[0];

        if (resultStatus == 'ok') {
            // чистим кэш писем полностью,
            // чтобы во всех контекстах (папки, метки) эти письма пометились прочитанными
            Jane.Handler.clearCache(['folders', 'messages', 'message-nearest', 'message-thread-nearest']);
            // Снимаем выделение с писем
            var table = Jane.Block.trigger('messages-list-box', 'getActiveTable');
            if (table) {
                table.deselect();
            }
            Jane.Page.refresh();
        }
    });

}));

/**
 * Помечает все письма в текущей папке как прочитанные.
 * По-сути, это экшен folder.mark-read без указания fid
 */
Jane.Actions.create('folder.current-mark-read', function() {
    Jane.Actions.run('folder.mark-read', {
        fid: Jane.Page.params.current_folder
    });
});


/**
 * Изменение активности кнопки тулбара в списке сообщений в зависимости от наличия непрочитанных писем
 */
Jane.watcher.watch("action-folder.current-mark-read-status", {
    get: function() {
        var actions = (Jane.watcher.get('folder-enable-actions') || '').split(',');
        return ($.inArray('folder-mark-as-read', actions) > -1);
    },
    deps: ['selected', 'pageKey', 'folder-enable-actions']
});

/* ../../actions/folders/mark-read.js end */

/* ../../actions/folders/edit.js begin */
Daria.FolderEditPopup = function(params) {
    var folderEdit = Daria.Folder(params);
    var id = params.id;

    var hFolders = Jane.$H("folders");
    var parent_id = hFolders.getFolderById(id)["parent_id"];

    if (parent_id) {
        params.parent_id = parent_id;
    }

    $.extend(folderEdit, {
        context: $(Jane.tt('mail-common:folder-edit', { fid: id, filter: null, withoutSubfolderDialog: true }, ['folders'] )),

        create: function(callback) {
            var that = this;
            Handler.doAll(
                ["do-folder-rename", "folders"],
                { fname: this.folderName, fid: id, parent_id: parent_id },
                function(data) {
                    var id = jpath(data, '.handlers[.name == "do-folder-rename"].data.body.updated')[0];
                    if (id) {

                        if ($.isFunction(callback)) {
                            callback(id);
                        }

                        if ($.isFunction(that.success)) {
                            that.success(id);
                        }
                    }
                }
            );
        },

        open: function() {
            var that = this;
            Daria.Dialog.open({
                title: i18n('%Folders_Edit_Title'),
                body: this.context,
                buttons: [{name: 'submit', value: i18n('%Сохранить'), onclick: this.onCreate.bind(this)}, {name: 'cancel'}],
                width: 432,
                onopen: function() {
                    that.input.focus();
                    that.input.keyup();
                }
            });
            $(document).trigger("b-mail-dropdown-closeall"); // Закрываем дропдаун после действия.
        }
    });

    return folderEdit;
};

Actions.add(
    new Action("folders.edit", function(o) {
        var folderEditPopup = Daria.FolderEditPopup(o.params);
        $.extend(folderEditPopup, {
            success: function() {
                $('.item-' + o.params.id + ' .b-folders__folder__link', Jane.$B("setup-folders").cache.node).text(this.folderName);
            }
        });

        folderEditPopup.init();
    })
);

/* ../../actions/folders/edit.js end */

/* ../../actions/folders/remove.js begin */
Actions.add(
    new Action("folder.remove", function(o) {
        var params = o.params;

        var fid = params.id;
        var hFolders = Jane.$H("folders");
        var folder = hFolders.getFolderById(fid);
        var name = _.escape(folder["name"]);
        var count = Number(folder["count"]);

        // Количество писем во вложенных папках
        var subMessagesCount;

        var subfolders = hFolders.getSubfolders(fid);

        if ( subfolders.length ) {
            subMessagesCount = (
                function processFolder( fid ) {
                    var subfolders = hFolders.getSubfolders(fid);
                    var res = 0;
                    for ( var i = 0; i < subfolders.length; i++ ) {
                        var subfolder = subfolders[i];
                        res += Number(subfolder.count);
                        if ( hFolders.getSubfolders([subfolder.fid]).length ) {
                            res += processFolder( subfolder.fid );
                        }
                    }

                    return res;
                }
            )(fid);
        }

        var allFiltersForFolder = Jane.$H("filters").getForFolder(fid); // все фильтры для папки, включая созданные сборщиками
        var collectorFilters = []; // фильтры, созданные сборщиками
        var userFilters = []; // фильтры, созданные пользователем
        $.each(allFiltersForFolder, function(i, a) {
            if (jpath(a, '.condition[.div == "X-yandex-rpop-id"]').length) {
                collectorFilters.push(a);
            } else {
                userFilters.push(a);
            }
        });

        var userFiltersCount = userFilters.length;
        var collectorFiltersCount = collectorFilters.length;

        var removeFolder = function(force) {
            Handler.doAll(
                [ "do-folder-remove", "folders" ],
                {
                    fid: fid,
                    force: force ? 'yes' : ''
                },
                function() {
                    if (Page.type === "setup" && Page.params.tab == 'folders') {
                        var new_folders_html = Jane.tt('mail-setup:new-folders-list', {}, ['folders']);
                        $('.js-setup-folders-list').html(new_folders_html);

                        var bSetupFolders = Jane.$B("setup-folders");
                        bSetupFolders.foldersList.selectedItem = '';
                        bSetupFolders.foldersList.updateButtons({});
                    }
                }
            );
        };

        // возвращает список фильтров, в кторых используется удаляемая папка
        var getUserFilters = function() {
            var filtersList = [];
            // перечисление всех имён фильтров
            for (var fIndex = 0; fIndex < userFiltersCount; fIndex++) {
                var fAction = userFilters[fIndex];
                filtersList.push('— «<a href="#setup/filters-create/id=' + fAction["filid"] + '">' +
                    _.escape(fAction["name"]) + '</a>»<br/>');
            }
            return filtersList.join('');
        };

        var confirmBody = [];
        var confirmOk = i18n('%Folders_Remove_Button');
        // Если count/subMessagesCount/count+subMessagesCount > 1,
        // в ключах выбираем множественное число
        var plural;

        if (count && userFiltersCount) {
            confirmBody.push(i18n('%Folders_Remove_Messages_Filters_Body_1', count, userFiltersCount, name));
            confirmBody.push(getUserFilters());
            confirmBody.push(i18n('%Folders_Remove_Messages_Filters_Body_2', count, userFiltersCount));
            confirmOk = i18n('%Folders_Remove_Messages_Filters_Button', count, userFiltersCount);
        } else if (count && subMessagesCount) {
            confirmBody.push(i18n('%Folders_Remove_Messages_Submessages_Body', count + subMessagesCount, name));
            plural = (count + subMessagesCount > 1) ? 2 : 1;
            confirmOk = i18n('%Folders_Remove_Messages_Button', plural);
        } else if (count) {
            confirmBody.push(i18n('%Folders_Remove_Messages_Body', count, name));
            plural = (count > 1) ? 2 : 1;
            confirmOk = i18n('%Folders_Remove_Messages_Button', plural);
        } else if (subMessagesCount) {
            confirmBody.push(i18n('%Folders_Remove_SubMessages_Body', subMessagesCount, name));
            plural = (subMessagesCount > 1) ? 2 : 1;
            confirmOk = i18n('%Folders_Remove_Messages_Button', plural);
        } else if (userFiltersCount) {
            confirmBody.push(i18n('%Folders_Remove_Filters_Body_1', userFiltersCount));
            confirmBody.push(getUserFilters());
            confirmBody.push(i18n('%Folders_Remove_Filters_Body_2', userFiltersCount));
            confirmOk = i18n('%Folders_Remove_Filters_Button', userFiltersCount);
        }

        if (collectorFiltersCount) {
            confirmBody.push(i18n('%Folders_Remove_Collectors_Body', collectorFiltersCount, count || userFiltersCount));
        }

        if (count || userFiltersCount || collectorFiltersCount || subMessagesCount) {
            Daria.Dialog.confirm({
                title: i18n('%Folders_Remove_Title'),
                width: 450,
                body: confirmBody.join(''),
                okValue: confirmOk,
                okHandler: function() {
                    removeFolder(true);
                    if (userFiltersCount || collectorFiltersCount) {
                        var filters = Jane.$H('filters').getForFolder(fid);
                        $.map(filters, function(filter) {
                            Jane.Actions.run('filters.delete', { id: filter.filid });
                        });
                    }
                }
            });
        } else {
            removeFolder();
        }
    })
);


/* ../../actions/folders/remove.js end */

/* ../../actions/folders/move.js begin */
Jane.Actions.create('folder.move', function(o) {
    var hFolders = Jane.$H('folders');
    var params = o.params;
    var fid = params.fid;
    var overFid = params.overFid;
    var action = params.action;
    var dfd = $.Deferred();

    switch (action) {
    case 'putin':
        hFolders.moveIn(fid, overFid).always(dfd.resolve);
        break;
    case 'putnext':
        hFolders.moveAfter(fid, overFid).always(dfd.resolve);
        break;
    case 'putbefore':
        hFolders.moveBefore(fid, overFid).always(dfd.resolve);
        break;
    }

    dfd.always(redraw);

    function redraw(status) {
        switch (status) {
        case 'nameduplicate':
            Daria.Statusline.showMsg({
                name: 'folders-move-error',
                speed: 'fast',
                body: i18n('%Folder_Move_Error_Nameduplicate'),
                body3: i18n('%Folder_Move_Error_Nameduplicate')
            });
            return;

        case 'actionerror':
            Jane.ErrorLog.send({
                event: 'folders.move.action',
                status: status,
                action: action
            });
            return;
        }

        Jane.events.trigger('folders.move');
    }

});


/* ../../actions/folders/move.js end */

/* ../../actions/folders/folders.js begin */
// Открываем-закрываем вложенные папки
Actions.add(
    new Action('folders.switch-open', function(o) {

        var hFolders = Jane.$H('folders');
        var fid = o.params.fid || o.params.current_folder || o.params.id;
        var folder = hFolders.getFolderById(fid);

        if (!folder) {
            return;
        }

        var hSettings = Jane.$H('settings');
        var cfids = hSettings.getOpenedFolders();
        var $folder = $(o.event.currentTarget).closest('.b-folders__nesting');
        // true - открыть, false - закрыть
        var isOpen;

        if (typeof o.params.open !== 'undefined') {
            isOpen = o.params.open;
        } else {
            isOpen = $.inArray(fid, cfids) === -1 && $folder.hasClass('b-folders__nesting_closed');
        }

        $folder.toggleClass('b-folders__nesting_closed', !isOpen);

        if (isOpen) {
            // при поиске надо проверять, что папка действительно открылась, т.к. входящие открыты по умолчанию
            cfids.push(fid);
            cfids = _.uniq(cfids);
            folder.opened = true;
            Jane.events.trigger('folder.switch-open', {type: 'unfold', fid: fid});

        } else {
            cfids = $.grep(cfids, function(e) {
                return e != fid;
            });

            delete folder.opened;
            Jane.events.trigger('folder.switch-open', {type: 'fold', fid: fid});
        }

        hSettings.setOpenedFolders(cfids);

        // Для IE8 нужно форсить репейнт при сворачивании папки, иначе метки прыгают под марку
        if (Modernizr.ielt8) {
            $('.js-layout-left').addClass('js-repaint-helper').removeClass('js-repaint-helper');
        }
    })
);

//Общая логика для сворачивания/разворачивания блоков для folder
Actions.add(new Action('folder.toggle', function(o) {
    var teaser = $(o.event.target).closest('.js-popup').find('.js-teaser-toggle')[0];
    var extra = $(o.event.target).closest('.js-popup').find('.js-extra-toggle')[0];

    $(teaser).toggleClass('g-hidden');
    $(extra).toggleClass('g-hidden');
}));


/* ../../actions/folders/folders.js end */


/* ../../actions/labels/add.js begin */
/*global Page, Actions, Handler, Action */

Daria.Label = function(params) {
    var events = Jane.events;
    var hotkey = typeof(params.hotkey) == 'boolean' ? params.hotkey : true;

    function convertColor(hex) {
        return parseInt(hex, 16);  // convert hex to decimal
    }

    return {
        validate: function() {
            var label;
            var msg;
            if (!this.labelName) {
                msg = i18n('%Setup_Filters_Create_Error_Empty');
                events.trigger('label.error', msg);
                return false;
            }

            label = Jane.$H('labels').getLabelByName(this.labelName);
            if (label && label.lid != params.id) { // Проверяем, что метки с таким именем еще нет.
                msg = label['symbol'] || label['social'] ?
                    i18n('%Labels_System_Msg', this.labelName) : i18n('%Labels_Exists_Msg');
                events.trigger('label.error', msg);
                return false;
            }

            return true;
        },

        setName: function(name) {
            this.labelName = name;
            events.trigger('label.name-changed', name);
        },

        setColor: function(color) {
            this.color = color;
            this.colorId = convertColor(color);
            events.trigger('label.color-changed', color);
        },

        bindEvents: function() {
            var that = this;
            var teaser = this.context.find('.b-teaser');
            var filterbox = this.context.find('.b-form-layout_filters-simple');

            this.colors = this.context.find('.b-label');

            if (this.filter) {
                this.filter.form = filterbox.find('form');
            }

            var error = {
                cls: 'b-popup__field_error',
                active: false,
                show: function(msg) {
                    this.notification = that.context.find('.b-notification__text');
                    this.row = this.notification.closest('.b-table');
                    if (msg) {
                        this.notification.text(msg);
                        this.row.addClass(this.cls);
                        this.active = true;
                    }
                },
                hide: function() {
                    this.row.removeClass(this.cls);
                    this.active = false;
                    events.trigger('label.error.hide');
                }
            };

            events.bind('label.error', function(name, msg) {
                error.show(msg);
                that.input.focus();
            });

            events.bind('label.name-changed', function(name, labelName) {
                that.example.toggle(!!labelName).html(_.escape(labelName));
            });

            events.bind('label.color-changed', function(name, color) {
                if (!that.example) {
                    that.example = $(Jane.tt('mail-common:label-sample'));
                    that.context
                        .closest('.b-popup')
                        .find('.b-popup__header')
                        .append(that.example);
                }
                that.example.css({'background': '#' + color});
            });

            this.context.on('click', '.js-filter-open', function() {
                Jane.c(['Промо меток', 'Новый поп-ап меток', 'клик на фильтры']);
                teaser.fadeOut(150, function() {
                    filterbox.fadeIn(200, function() {
                        var from = filterbox.find('input:visible').eq(0).focus();
                        var autocomplete = Daria.Autocompleter.getContact();
                        autocomplete.setOptions({
                            multiple: false,
                            formatResult: function(row) {
                                // Это группа
                                if (row.contacts) {
                                    var contacts = [];

                                    for (var i = 0, len = row.contacts.length; i < len; i++) {
                                        contacts.push(row.contacts[i].email);
                                    }

                                    return contacts.join(', ');
                                } else {
                                    return row.email;
                                }
                            }
                        });
                        autocomplete.bindField({ field: from, focus: 1 });
                        events.trigger('label.filter.toggle', true);
                    });
                });
            });

            this.context.on('click', '.js-filter-close', function() {
                Jane.c(['Промо меток', 'Новый поп-ап меток', 'клик по "свернуть"']);
                filterbox.fadeOut(150, function() {
                    teaser.fadeIn(200, function() {
                        that.input.focus();
                        events.trigger('label.filter.toggle', false);
                    });
                });
            });

            this.context.on('click', '.js-filter-link', function() {
                Jane.c(['Промо меток', 'Новый поп-ап меток', 'клик по "сложным условиям"']);
                that.onCreate(function() {
                    that.filter = false;
                    that.success = function() {
                        Page.go('#setup/filters-create/label=' + that.labelName);
                    };
                });
                return false;
            });

            this.context.on('keyup', '.js-input-name', function(e) {
                var name = $.trim(this.value).replace(/\u0020/g, '\u00a0');
                if (name != that.labelName && error.active) {
                    error.hide();
                }
                that.setName(name);

                if (e.which === 13 && hotkey) {
                    that.onCreate();
                }
            });

            this.context.on('click', '.js-label-sample', function() {
                var sample = $(this);
                var params = Daria.parseQuery(sample.attr('data-params'));
                that.colors.removeClass('b-label_current');
                sample.addClass('b-label_current');
                that.setColor(params.color);
            });
        },

        filter: Daria.FilterSimpleCreatePopup(),

        onCreate: function(callback) {
            var that = this;
            if (this.validate()) {
                Daria.Dialog.close();

                if ($.isFunction(callback)) {
                    callback();
                }
                this.create(function() {
                    if (that.filter) {
                        Jane.c(['Промо меток', 'Новый поп-ап меток', 'создание метки с настроенным фильтром']);
                        that.filter.params.move_label = Jane.$H('labels').getLIDByName(that.labelName);
                        that.filter.label_name = that.labelName;
                        that.filter.create();
                    }
                }, function(data) {
                    var code = jpath(data, '.error.code')[0];
                    var msg;

                    if (code == 1000) {
                        msg = i18n('%Labels_System_Msg', this.labelName);
                    } else {
                        msg = i18n('%Labels_Create_Error');
                    }
                    events.trigger('label.error', msg);
                });
            }
        },

        init: function() {
            this.input = $('input[name=label_name]', this.context);
            if (params.name) {
                this.input.val(params.name);
            }
            this.bindEvents();
            this.open();
        }
    };
};

Daria.LabelCreateContext = function(params) {
    var labelCreate = Daria.LabelCreatePopup(params);
    var data = params.filter ? {filter: null} : {};

    $.extend(labelCreate, {
        context: $(Jane.tt('mail-common:label-create', data, ['labels-colors'], {})),
        onCreate: function() {
            var that = this;
            var dfd = $.Deferred();
            var onerror = Jane.events.bind('label.error', function(event, message) {
                dfd.reject(message);
            });

            dfd.always(function() {
                Jane.events.unbind('label.error', onerror);
            });

            if (this.validate()) {
                this.create(function(lid) {
                    if (that.filter) {
                        that.filter.params.move_label = lid;
                        that.filter.create();
                    }

                    dfd.resolve(lid);

                }, function(data) {
                    var code = jpath(data, '.error.code')[0];
                    var msg = code == 1000 ? i18n('%Labels_System_Msg', this.labelName) : i18n('%Labels_Create_Error');
                    Jane.events.trigger('label.error', msg);
                });
            }

            return dfd;
        },
        open: function() {
            params.parent.html(this.context);
            this.colors.eq(0).click();
            this.input.keyup();
            this.input.focus();
            if ($.isFunction(this.onopen)) {
                this.onopen();
            }
        },
        // при необходимости дописать
        // @see labels.add
        success: function() {
            // Ресетим форму расширенного поиска
            Daria.SearchPrecise.reset();
            var pageType = Page.type;
            if (pageType == 'message' || pageType == 'messages' || pageType == 'compose') {
                // сообщаем о том, что появилась новая метка
                // по идеи блоки(их может быть много) labels-actions должны запустить на себе run
                Jane.events.trigger('new-label-created');
                Jane.$B('labels').run();
            }
        }
    });

    return labelCreate;
};

Daria.LabelCreatePopup = function(params) {
    var labelCreate = Daria.Label(params);

    $.extend(labelCreate, {
        context: $(Jane.tt('mail-common:label-create', { filter: null }, [ 'labels-colors' ], {})),
        create: function(callback, errback) {
            var that = this;
            Handler.doAll(
                [ 'do-labels-add', 'labels' ],
                {
                    label_name: this.labelName,
                    label_color: this.colorId
                },
                function(data) {
                    data = jpath(data, '.handlers[.name == "do-labels-add"]')[0];
                    var id = jpath(data, '.data.body.updated')[0];

                    if (id) {
                        if ($.isFunction(callback)) {
                            callback(id);
                        }

                        if ($.isFunction(that.success)) {
                            that.success(id);
                        }

                        // Гамификация
                        Jane.logUserActivity({ 'activity[verb]': 'mail.create', 'activity[yndx_type]': 'label' });
                    } else {
                        if ($.isFunction(errback)) {
                            errback.call(that, data);
                        }
                    }
                }
            );
        },
        open: function() {
            var that = this;

            Daria.Dialog.open({
                title: i18n('%Labels_Создаём_метку') + ' ',
                body: this.context,
                buttons: [
                    {name: 'submit', value: i18n('%Labels_Add_Button'), onclick: function() {
                        Jane.c(['Промо меток', 'Новый поп-ап меток', 'клик по создать']);
                        that.onCreate();
                    }},
                    {name: 'cancel'}
                ],
                width: 432,

                oncancel: function() {
                    Jane.c(['Промо меток', 'Новый поп-ап меток', 'клик по отменить']);
                },

                onopen: function() {
                    that.colors.eq(0).click();
                    that.input.keyup();
                    if (params.name && params.color) {
                        that.onCreate();
                    }
                    if ($.isFunction(that.onopen)) {
                        that.onopen();
                    }
                    that.input.focus();

                    Jane.c(['Промо меток', 'Новый поп-ап меток', 'показ поп-апа']);
                },

                close: function() {
                    if ($.isFunction(that.onclose)) {
                        that.onclose();
                    }
                }
            });
            $(document).trigger('b-mail-dropdown-closeall'); // Закрываем дропдаун после действия.
        }
    });

    return labelCreate;
};

Actions.add(
    new Action('labels.add.filters', function(o) {
        var labelCreatePopup = Daria.LabelCreatePopup(o.params);
        $.extend(labelCreatePopup, {
            success: function(id) {
                var tab = Page.params.tab;
                var name = this.labelName;

                if (tab === 'filters-create-simple') {
                    var bFiltersCreateSimple = Jane.$B('setup-filters-create-simple');
                    var nbSelect = bFiltersCreateSimple['nb-select_filter-simple_label'];
                    var source = nbSelect.getSource();
                    // Вставляем новый option предпоследним. Так как последним должен быть
                    // "Новая метка"
                    source.push({
                        text: name,
                        value: id,
                        selected: true
                    });
                    nbSelect.setSource(source);
                }

                if (tab === 'filters-create') {
                    var bFiltersCreate = Jane.$B('setup-filters-create');
                    bFiltersCreate.nbLabelsSelect.addToSource({
                        text: name,
                        value: id,
                        selected: true
                    }, bFiltersCreate.nbLabelsSelect.getSource().length - 2); //Вставляем предпоследним
                }

                if (tab == 'filters-create-simple') {
                    $('<div class="b-mail-dropdown__item"><a href="#" class="b-mail-dropdown__item__content daria-action"' +
                        'data-action="filters.select-folder" data-params="val=' + id + '&amp;type=label">' + _.escape(name) + '</a></div>')
                        .prependTo('.b-form-layout__field_filters-simple-folder .b-mail-dropdown__box__content');
                    Actions.run('filters.select-folder', {type: 'label', val: id});
                }
            },

            context: $(Jane.tt('mail-common:label-create', {}, [ 'labels-colors' ])),

            filter: false
        });

        labelCreatePopup.init();
    })
);

Actions.add(
    new Action('labels.add', function(o) {
        var params = o.params;
        var labelCreatePopup = Daria.LabelCreatePopup(params);
        $.extend(labelCreatePopup, {
            success: function(id) {
                if (Page.type != 'setup' && Page.type != 'done') {
                    if ('only-create' in params) {
                        Jane.Block.trigger('labels', 'run');
                    } else {
                        Jane.Actions.run('label', {
                            'current_label': id,
                            'message-id': params['message-id']
                        });
                    }
                }

                if (Page.type == 'setup') {
                    var tab = Page.params.tab;
                    // Если есть блок "Папки и метки", то добавляем в него новый пункт
                    if (tab == 'folders') {
                        var new_label_html = Jane.tt('mail-setup:new-label', { lid: id }, ['labels']);
                        $('.b-folder-list_labels', Jane.$B('setup-folders').cache.node)
                            .prepend(new_label_html);
                    }

                    if (tab === 'filters-create' || tab === 'filters-create-simple') {
                        var eName = this.labelName;
                        $('.labels-select', Jane.$B('setup-' + tab).getCache().node)
                            .append('<option value="' + eName + '" selected="selected">' + eName + '</option>')
                            .val(eName);
                    }

                    if (tab == 'filters-create-simple') {
                        $('<div class="b-mail-dropdown__item"><a href="#" class="b-mail-dropdown__item__content daria-action"' +
                            'data-action="filters.select-folder" data-params="val=' + id + '&amp;type=label">' + _.escape(this.labelName) + '</a></div>')
                            .prependTo('.b-form-layout__field_filters-simple-folder .b-mail-dropdown__box__content');
                        Actions.run('filters.select-folder', {type: 'label', val: id});
                    }

                    // на странице настройки сборщика нужно обновить список меток
                    if (tab == 'collector' && Page.params.popid) {
                        Jane.$B('setup-collector').updateLabelsItems(id);
                    }
                }

                // Ресетим форму расширенного поиска
                Daria.SearchPrecise.reset();
                var pageType = Page.type;
                if (pageType == 'message' || pageType == 'messages' || pageType == 'compose') {
                    // сообщаем о том, что появилась новая метка
                    // по идеи блоки(их может быть много) labels-actions должны запустить на себе run
                    Jane.events.trigger('new-label-created');
                }
            }
        });
        // Если это промо "Создать метку"
        if ('promo' in params) {
            Jane.$H('settings').setSettingOn('no-labels-promo');
        }

        labelCreatePopup.init();
    })
);

Actions.add(
    new Action('labels.add.done', function(o) {
        var labelCreatePopup = Daria.LabelCreatePopup(o.params);
        var bComposeDone = Jane.$B('compose-done');

        Jane.c(['Промо меток', 'Промо меток на done', 'клик по кнопке "перейти к созданию меток"']);

        function bubbleFromLabelsDone(settings) {
            Page.go('#inbox', function() {
                var label = $('.b-labels .b-label[class*=' + settings.labelId + ']');
                var x = label.offset()['left'] + label.outerWidth();
                var y = label.offset()['top'] + label.outerHeight() / 2;
                Daria.Dialog.open($.extend({
                    onTarget: {x: x, y: y, side: 'left', pos: 'bottom'},
                    additionalClass: 'b-popup_yellow',
                    onopen: function() {
                        var delta = $(window).height() - (label.offset()['top'] + label.outerHeight());
                        if (delta < 0) {
                            window.scroll(0, Math.abs(delta) + 50);
                        }
                        Jane.c(['Промо меток', 'Бабл "теперь метка есть"', 'показ бабла']);
                    },
                    onclose: function() {
                        Jane.c(['Промо меток', 'Бабл "теперь метка есть"', 'клик по крестику']);
                    }
                }, settings));
            });
        }

        $.extend(true, labelCreatePopup, {
            onopen: function() {
                if (bComposeDone.redirectTimeout) {
                    clearTimeout(bComposeDone.redirectTimeout);
                }
            },
            onclose: function() {
                bComposeDone.setRedirectTimeout();
            },
            filter: {
                success: function(id) {
                    var filter = $('action:has(id:contains(' + id + '))', Jane.$H('filters').data);
                    var filterFrom = $('item:has(field:contains(from)) pattern', filter).text();
                    var filterSubject = $('item:has(field:contains(subject)) pattern', filter).text();
                    var hasAtt = $('item:has(field:contains(att)) pattern', filter).size();
                    var labelName = this.label_name;
                    var body = [];

                    body.push(i18n('%Compose_Done_Labels_Bubble_text1'));

                    if (filterFrom) {
                        var fromText = i18n('%От_кого');
                        body.push(i18n('%Compose_Done_Labels_Bubble_text2', fromText, filterFrom, labelName, id));
                    }

                    if (filterSubject) {
                        var subjectText = i18n('%Тема');
                        body.push(i18n('%Compose_Done_Labels_Bubble_text2', subjectText, filterSubject, labelName, id));
                    }

                    if (!(filterSubject && filterFrom) && hasAtt) {
                        var attText = ' ' + i18n('%Setup_Filters_apply_att');
                        body.push((i18n('%Setup_Filters_все_письма_1', attText)).toLowerCase());
                    }

                    bubbleFromLabelsDone(
                        {
                            title: i18n('%Compose_Done_Labels_Bubble_title', labelName),
                            body: body.join(''),
                            width: 400,
                            labelId: Jane.$H('labels').getLIDByName(labelName)
                        }
                    );
                },
                error: function() {
                    bubbleFromLabelsDone(
                        {
                            title: '',
                            body: i18n('%Compose_Done_Labels_Bubble_title', this.label_name),
                            width: 300,
                            labelId: Jane.$H('labels').getLIDByName(this.label_name)
                        }
                    );
                }
            }
        });

        labelCreatePopup.init();
    })
);

/* ../../actions/labels/add.js end */

/* ../../actions/labels/edit.js begin */
Daria.LabelEditPopup = function(params) {
    var labelEdit = Daria.Label(params);
    var id = params.id;
    var color = Jane.$H("labels").getLabelById(id).color;

    $.extend(labelEdit, {
        context: $(Jane.tt("mail-common:label-edit", { lid: id, filter: null }, [ "labels-colors", "labels" ])),

        create: function(callback) {
            var that = this;
            Handler.doAll(
                ["do-label-edit", "labels"],
                {
                    lid: id,
                    label_name: this.labelName,
                    label_color: this.colorId
                },
                function(data) {
                    var lid = jpath(data, '.handlers[.name == "do-label-edit"].data.body.updated');
                    if (lid) {

                        if ($.isFunction(callback)) {
                            callback(lid);
                        }

                        if ($.isFunction(that.success)) {
                            that.success(lid);
                        }
                    }
                }
            );
        },

        open: function() {
            var that = this;
            Daria.Dialog.open({
                title: i18n('%Labels_Edit_Title') + ' ',
                body: this.context,
                buttons: [{ name: 'submit', value: i18n('%Labels_Edit_Button'), onclick: this.onCreate.bind(this) }, { name: 'cancel' }],
                width: 432,
                onopen: function() {
                    that.colors.filter('[data-params*=' + color + ']').click();
                    that.input.keyup();
                    that.input.focus();
                }
            });
            $(document).trigger("b-mail-dropdown-closeall"); // Закрываем дропдаун после действия.
        }
    });

    return labelEdit;
};

Actions.add(

    new Action("labels.edit", function(o) {
        var params = o.params;
        var labelEditPopup = Daria.LabelEditPopup(params);
        $.extend(labelEditPopup, {
            success: function() {
                // Если есть блок "Папки и метки", то добавляем в него новый пункт
                if (Page.type === 'setup' && Page.params.tab === 'folders') {
                    var new_label_html = Jane.tt("mail-setup:new-label", { lid: params.id }, ["labels"]);

                    var bSetupFolders = Jane.$B("setup-folders");
                    $(".b-folder-list_labels .item-" + params.id, bSetupFolders.cache.node)
                        .after(new_label_html)
                        .remove();

                    bSetupFolders.selectedItem = null;
                    bSetupFolders.labelsList.updateButtons({});
                }
            }
        });

        labelEditPopup.init();
    })
);

/* ../../actions/labels/edit.js end */

/* ../../actions/labels/remove.js begin */
Actions.add(new Action("label.remove", function(o) {
    var lid = o.params && o.params.id;

    var label = Jane.$H("labels").getLabelById(lid);
    var name = _.escape(label.name);
    var count = Number(label.count);
    var filtersIds = [];

    var filtersForLabel = [];
    var collectorFilters = [];
    var allFiltersForLabel = Jane.$H("filters").getForLabel(lid);
    $.map(allFiltersForLabel, function(filter) {
        if (jpath(filter, '.condition[.div == "X-yandex-rpop-id"]').length) {
            collectorFilters.push(filter);
        } else {
            filtersForLabel.push(filter);
        }
    });
    var filtersCount = filtersForLabel.length;
    var collectorsCount = collectorFilters.length;

    function deleteLabel(force) {
        Handler.doAll(
            ["do-labels-delete", "labels"],
            {
                lids: lid,
                force: force ? 'yes' : ''
            },
            function() {
                if (Page.type === "setup" && Page.params.tab == 'folders') {
                    var new_labels_html = Jane.tt("mail-setup:setup-new-labels", {}, ["labels", "settings"]);
                    $(".b-folder-list.b-folder-list_labels")
                        .replaceWith(new_labels_html);

                    var bSetupFolders = Jane.$B("setup-folders");
                    bSetupFolders.labelsList.selectedItem = '';
                    bSetupFolders.labelsList.updateButtons({});
                }
            }
        );
    }

    // возвращает список фильтров, которые используют метку и сохраняет айдишники этих фильтров
    function getFilters() {
        var filtersList = [];
        for (var fIndex = 0; fIndex < filtersCount; fIndex++) {
            var fAction = filtersForLabel[fIndex];
            var fId = fAction.filid;
            var ruleName = _.escape(fAction.name);

            filtersList.push('— «<a href="#setup/filters-create/id=' + fId + '">' + ruleName + '</a>»<br/>');
            filtersIds.push(fId);
        }
        return filtersList.join('');
    }

    var confirmBody = [];
    var confirmOk = i18n('%Labels_Remove_Button');

    if (count && filtersCount) {
        confirmBody.push(i18n('%Labels_Remove_Messages_Filters_Body_1', count, filtersCount, name));
        confirmBody.push(getFilters());
        confirmBody.push(i18n('%Labels_Remove_Messages_Filters_Body_2', filtersCount));
        confirmOk = i18n('%Labels_Remove_Messages_Filters_Button', filtersCount);
    } else if (count) {
        confirmBody.push(i18n('%Labels_Remove_Messages_Body', count, name));
    } else if (filtersCount) {
        confirmBody.push(i18n('%Labels_Remove_Filters_Body_1', filtersCount));
        confirmBody.push(getFilters());
        confirmBody.push(i18n('%Labels_Remove_Filters_Body_2', filtersCount));
        confirmOk = i18n('%Labels_Remove_Filters_Button', filtersCount);
    }

    if (collectorsCount) {
        confirmBody.push(i18n('%Labels_Remove_Collectors_Body', collectorsCount, count || filtersCount));
    }

    if (count || filtersCount || collectorsCount) {
        Daria.Dialog.confirm({
            title: i18n('%Labels_Remove_Title'),
            width: 400,
            body: confirmBody.join(''),
            okValue: confirmOk,
            okHandler: function() {
                deleteLabel(true);
                if (filtersCount || collectorsCount) {
                    var filters = Jane.$H('filters').getForLabel(lid);
                    $.map(filters, function(filter) {
                        Jane.Actions.run('filters.delete', { id: filter.filid });
                    });
                }
            }
        });
    } else {
        deleteLabel();
    }
}));

/* ../../actions/labels/remove.js end */

/* ../../actions/labels/wrapper.js begin */
// Врапперы для выбора непрочитанных и важных писем
Actions.add(
    new Action('labels-show', function(o) {
        var href = jpath(o, 'event.currentTarget.href')[0] || "#unread";
        var label = o.params.label;
        var eventName;

        Daria.Page.go(href, function() {
            switch (label) {
            case "unread":
                Jane.ErrorLog.send({
                    event: 'label-click',
                    // - По какой метке кликнули
                    label: "Непрочитанные",
                    // - uid пользователя
                    uid: Daria.uid
                });
                eventName = 'Label_unread';
                break;
            case "important":
                Jane.ErrorLog.send({
                    event: 'label-click',
                    // - По какой метке кликнули
                    label: "Важные",
                    // - uid пользователя
                    uid: Daria.uid
                });
                eventName = 'Label_important';
                break;
            case "attachments":
                Jane.ErrorLog.send({
                    event: 'label-click',
                    // - По какой метке кликнули
                    label: "С вложениями",
                    // - uid пользователя
                    uid: Daria.uid
                });
                break;
            }

            //@hotkeys
            if  (eventName) {
                Jane.Actions.run('trigger-hotkeys-promo-bubble', {
                    eventName: eventName
                });
            }
        });
    })
);

/* ../../actions/labels/wrapper.js end */


/* ../../actions/lenta-informer/lenta-informer.js begin */
Actions.add(
    new Action('lenta-statusline.go', function() {
        Daria.Statusline.hide();
        Jane.$H('lenta-informer').goInformerHandler();
        Daria.Page.go('#lenta/group/all');
        return false;
    })
);

Actions.add(
    new Action('lenta-informer.go', function(o) {
        var params = o.params || {};
        var hLentaInformer = Jane.$H('lenta-informer');
        var url = '#lenta/group/all';
        hLentaInformer.hideInformer();
        hLentaInformer.goInformerHandler();
        if (params.id) {
            url += '/item_id=' + params.id;
        }
        Daria.Page.go(url);
        return false;
    })
);

Actions.add(
    new Action('lenta-informer.close', function() {
        var hLentaInformer = Jane.$H('lenta-informer');
        hLentaInformer.hideInformer();
        hLentaInformer.closeInformerHandler();
        return false;
    })
);


/* ../../actions/lenta-informer/lenta-informer.js end */


/* ../../actions/message/charset.js begin */
Jane.Actions.create('message.change-charset', function(o) {
    // в 2pane меняем урл
    if (Daria.layout == '2pane') {
        return true;
    }

    $(document).trigger("b-mail-dropdown-closeall");
    // в 3pane запускаем run на блоке, и не меняем урл, чтобы не заморачиваться с тредами
    var params = o.params;
    //хак
    params._page = 'messages';
    // ищем message-body и запускам run
    Jane.$B('messages-box')
        .getActive()
        .getMessageBlock(params)
        .getBlockByName('message-body-box')
        .run(params);

    return false;
});

/* ../../actions/message/charset.js end */

/* ../../actions/message/label.js begin */
(function() {

    var command = new MessageAction("label", function(o) {

        var params = o.params;
        var labelID = params.current_label = (params.current_label || params.lid);
        var ids = o.ids;
        var action = o.action;

        // пользовательская кнопка в тулбаре
        // lid привязан к кнопке
        if (params.toolbar === '1' && (params['toolbar.button'] == 'label' || params['toolbar.button'] == 'unlabel')) {
            var bToolbar = Jane.$B('toolbar-box').getActive();
            var bSettings = bToolbar && bToolbar.toolbar.settings && bToolbar.toolbar.settings.get('label');
            var l = bSettings && bSettings.settings && bSettings.settings.label;

            if (l) {
                labelID = params.current_label = l;
            }
        }

        // Для композа, видимо, делаем отдельный метод в самом композе.
        // Он не должен ходить на сервер, должен только рисовать/скрывать метки визуально
        // и добавлять/удалять их из списка параметров, отсылаемых на сервер.
        if (Page.type === "compose") {
            Jane.$B("compose").addLabel(action, params);
            return false;
        }

        if (Jane.watcher.get("its-spam")) {
            Daria.Statusline.showMsg({
                body: i18n('%Message_Label_Spam_Msg'),
                body3: i18n('%3pane_Message_Label_Spam_Msg')
            });
            return false;
        }

        if (typeof o.params.hotkeysUsed === 'undefined') {
            //@hotkeys
            Jane.Actions.run('trigger-hotkeys-promo-bubble', {
                eventName: 'Labels_dialog'
            });
        }

        var hMessage = Jane.$H("message");

        var updatedIDs = hMessage.grep({mids: ids.ids, tids: ids.tids}, params, action);
        if (!updatedIDs) {
            return;
        }
        var hMessages = Jane.$H("messages");

        var methodName = action + "-do-html";
        if (labelID == Jane.$H("labels").getImportantLID()) {
            methodName += "-important";
        }
        var method = command[methodName];
        method(updatedIDs, labelID);

        // Сбрасываем все списки писем по данной метке.
        hMessages.clearCacheByLabel(labelID);
        hMessages.doActionInThread(ids.tids, params, action);

        // TODO: Может быть стоит переставить запрос и отрисовку, чтобы вторая отрисовка без лага была бы.
        Jane.Handler.doAll(
            [ "do-" + action, "labels" ],
            {
                lid: labelID,
                ids: ids.mids,
                tids: ids.tids
            },
            function(data) {
                var ids = [];
                if (action == "label") {
                    ids = jpath(data, '.handlers.data.thread[.lid == "' + labelID + '"].tid')[0];
                } else {
                    ids = jpath(data, '.handlers[.name == "do-unlabel"].data.thread[.lid != "' + labelID + '"].tid')[0];
                }
                ids = hMessage.grep({tids: ids}, params, action);
                if (ids) {
                    // тут не надо обновлять письма внутри треда,
                    // эти данные относятся только в заголовку треда
                    method(ids, labelID, true);
                }

                var bLabels = Jane.$B("labels");
                // Не делаем предварительно Jane.$B("labels").invalidate(). Потому, что в хэндлере labels уже более свежие данные
                // и блок labels автоматически пометится невалидным.
                if (bLabels) {
                    bLabels.run();
                }

                // И ничего больше не делаем. Когда мы в следующий раз зайдем в список меток, то увидим там обновленный список.

                // действие прямое и обратное, вочер отслеживает факт выполнения действия, поэтому по направлению не делится
                // действие указывается в параметра
                Jane.watcher.set('actions-message-label', action, {force: true});
                Jane.events.trigger('message.action.complete', { action: action, eventObject: o, skipFocus: true });
            }
        );

    });

    /* ------------------------------------------------------------------------------------------------------------- */

    function callback_do_html_important() {
        var $this = $(this);
        var importantLid = Jane.$H('labels').getImportantLID();
        var current_label = Daria.Page.params.current_label;

        if ($this.hasClass('b-message')) {
            $this.addClass('b-message_important');

            // DARIA-19545 - 3pane: При выделении важных писем в фильтре по метке Важное не должна появляться подсветка
            // DARIA-20837 - Не выделять фоном письмо в списке важных при клике на флажок
        } else if (current_label != importantLid) {
            $this.addClass('b-messages__message_important');
        }

        var $flag = $this.find('.b-ico_unimportant');
        if ($flag[0]) {
            $flag
                .addClass('b-ico_important')
                .removeClass('b-ico_unimportant')
                .attr("data-action", "unlabel");
        }
    }

    command["label-do-html-important"] = function(ids, labelID, preventThreadUpdate) {
        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");
        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, callback_do_html_important);
        }
        if (bMessagesBox) {
            bMessagesBox.iterateHeaders(ids.mids, callback_do_html_important);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, callback_do_html_important);
        }

        if (!preventThreadUpdate && Daria.layout !== '2pane' && ids.mids.length === 0) {

            // помечаем письма внутри тредов в 3пейне
            if (bMessagesBox) {
                bMessagesBox.iterateThread(ids.tids, function() {
                    $(this).find('> .b-message').each(callback_do_html_important);
                });
            }
        }
    };

    function callback_do_html_unimportant() {
        var $this = $(this);
        if ($this.hasClass('b-message')) {
            $this.removeClass('b-message_important');
        } else {
            $this.removeClass('b-messages__message_important');
        }

        var $flag = $this.find('.b-ico_important');
        if ($flag[0]) {
            $flag
                .addClass('b-ico_unimportant')
                .removeClass('b-ico_important')
                .attr("data-action", "label");
        }
    }

    command["unlabel-do-html-important"] = function(ids, labelID, preventThreadUpdate) {
        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");
        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, callback_do_html_unimportant);
        }
        if (bMessagesBox) {
            bMessagesBox.iterateHeaders(ids.mids, callback_do_html_unimportant);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, callback_do_html_unimportant);
        }

        if (!preventThreadUpdate && Daria.layout !== '2pane' && ids.mids.length === 0) {

            // размечаем письма внутри тредов в 3пейне
            if (bMessagesBox) {
                bMessagesBox.iterateThread(ids.tids, function() {
                    $(this).find('> .b-message').each(callback_do_html_unimportant);
                });
            }
        }
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    command["label-do-html"] = function(ids, labelID, preventThreadUpdate) {

        // Получаем HTML удаляемой метки и обычной
        var $newLabel = $(Jane.tt('mail-common:messages-new-labels', {
            'new-label-id': labelID
        }, ['labels']));
        var $deletable = $newLabel.find('#deletable').contents();
        var $simple = $newLabel.find('#simple').contents();

        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");

        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, iterateRows);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, iterateRows);
        }

        if (!preventThreadUpdate && Daria.layout != '2pane' && ids.mids.length === 0) {
            var hMessage = Jane.$H('message');
            if (bMessagesBox) {
                bMessagesBox.iterateThread(ids.tids, function() {
                    $(this).find('> .b-message').each(function() {
                        var id = this.className.match(/mid-(\d+)/)[1];
                        if (!hMessage.hasLabel(id, labelID)) {
                            iterateMessageHeader.call(this, id);
                        }
                    });
                });
            }
        }

        if (bMessagesBox) {
            bMessagesBox.iterateHeaders(ids.mids, iterateMessageHeader);
        }

        function iterateRows() {
            var subject = this.getElementsByClassName('b-messages__message__link')[0];
            $(subject).parent().find('.lid-' + labelID).remove();
            $simple.clone().insertBefore(subject);
        }

        function iterateMessageHeader(id) {
            var subject;

            var fakeLabel = $deletable.clone();

            // проставляем message-id для последующего удаления метки
            var actionNode = fakeLabel.find('.daria-action')[0];
            actionNode.setAttribute('data-params', actionNode.getAttribute('data-params') + id.toString());

            if (Daria.layout == '2pane') {
                subject = this.getElementsByClassName('b-message-subject')[0];
                var labels = subject.getElementsByClassName('b-label');
                if (labels.length) {
                    $(labels[labels.length - 1]).after(fakeLabel);
                } else {
                    $(subject).find('.b-ico_importance').after(fakeLabel);
                }

            } else {
                var $this = $(this);
                if ($this.hasClass('b-message_collapsed')) {

                    // свернутое письмо в треде
                    $this
                        .find('.js-collapsed-msg-labels')
                        .append(fakeLabel);
                } else {

                    // развернутое письмо
                    $this
                        .find('.b-message-head')
                        .addClass('b-message-head_labels')
                        .find('.b-message-head__field_labels .b-message-head__field__content')
                        .append(fakeLabel);
                }
            }
        }
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    command["unlabel-do-html"] = function(ids, labelID) {
        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");

        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, rowUnlabelIterator);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, rowUnlabelIterator);
        }

        if (bMessagesBox) {
            bMessagesBox.iterateHeaders(ids.mids, function() {
                var $label = $(this).find(".lid-" + labelID);
                if ($label[0]) {
                    if (Daria.layout != '2pane') {
                        var $parent = $label.parent();

                        // если меток больше нет, то скрываем пустое поле "Метки"
                        if (/*не короткая шапка*/!$parent.hasClass('js-collapsed-msg-labels') && $parent.children().length == 1/*1 - значит текущая метка*/) {
                            $parent.closest('.b-message-head').removeClass('b-message-head_labels');
                        }
                    }
                    $label.remove();
                }
            });
        }

        function rowUnlabelIterator() {
            var label = this.getElementsByClassName('lid-' + labelID)[0];
            if (label) {
                Jane.DOM.removeNode(label);
            }
        }
    };

    /* ------------------------------------------------------------------------------------------------------------- */

    Actions.add(command);

    Actions.copy("label", "unlabel");

}());


/* ../../actions/message/label.js end */

/* ../../actions/message/mark.js begin */
(function(/**Daria*/Daria, /**Jane*/Jane) {

    function touchBlock(key, block) {
        block.touch();
    }

    /**
     * Сортирует треды на 3 категории:
     *   1) выбранные треды с выбранными письмами (есть checkboxTree)
     *   2) невыбранные треды, но которые надо обновить (выбраны письма внутри них)
     *   3) выбранные треды без выбранных писем (нет checkboxTree)
     * @param {Array} mids Выбранные письма.
     * @param {Array} tids Выбранные треды.
     * @return {Object}
     */
    function prepareTids(mids, tids) {
        var hMessage = Jane.$H("message");

        var selectedTidsWithTree = {};
        var notSelectedTids = {};
        var selectedTidsWithoutTree = [];

        var i;
        var j;
        var mid;
        var tid;

        for (i = 0, j = mids.length; i < j; i++) {
            mid = mids[i];
            tid = hMessage.getThreadId(mid);

            if (tid) {
                if (tid in selectedTidsWithTree) {
                    selectedTidsWithTree[tid].push(mid);

                } else if (tid in notSelectedTids) {
                    notSelectedTids[tid].push(mid);

                } else if ($.inArray(tid, tids) > -1) {
                    selectedTidsWithTree[tid] = [mid];

                } else {
                    notSelectedTids[tid] = [mid];
                }
            }
        }

        for (i = 0, j = tids.length; i < j; i++) {
            tid = tids[i];
            if (!(tid in selectedTidsWithTree)) {
                selectedTidsWithoutTree.push(tid);
            }
        }

        return {
            notSelectedTids: notSelectedTids,
            selectedTidsWithTree: selectedTidsWithTree,
            selectedTidsWithoutTree: selectedTidsWithoutTree
        };
    }

    /**
     * Заменяет tid на массив mid'ов, чтобы облегчить запрос
     * @param {object} updatedIDs
     * @param {array} affectedMessages
     * @param {string} tid
     * @param {number} threadCount
     * @param {string} action
     */
    function changeTidToMids(updatedIDs, affectedMessages, tid, threadCount, action) {
        // чтобы рассчитать замену tid на [mid] можно пойти на хитрость
        // для mark - количество затронутых писем должно быть меньше или равно count (т.о. мы знаем сколько надо пометить)
        // для unmark - количество затронутых писем должно быть равно count (т.о. мы знаем все письма)
        var affectedCount = $.isArray(affectedMessages) ? affectedMessages.length : 0;
        if (
            affectedCount &&
                (
                    (action == 'mark' && threadCount >= affectedCount) ||
                        (action == 'unmark' && threadCount == affectedCount)
                    )
            ) {
            updatedIDs.mids = updatedIDs.mids.concat(affectedMessages);
        } else {
            updatedIDs.tids.push(tid);
        }
    }

    /**
     * Показывает синюю перду с предложением
     * всегда метить письма в этом треде прочитанными
     */
    var showIgnoreThreadLine = function(ids) {
        var tid;
        var tids = ids.tids;
        var mids = ids.mids;
        var hMessage = Jane.$H('message');
        var hLabels = Jane.$H('labels');
        var hFolders = Jane.$H('folders');

        // если выделено только несоклько писем - проверяем из какого они треда
        if (tids.length === 0 && mids.length > 0) {
            tids = _.uniq($.map(mids, hMessage.getThreadId.bind(hMessage)));
            mids = [];
        }
        // если остался или был выделен только один тред - можем ставить на него метку
        if (tids.length === 1 && mids.length === 0) {
            tid = tids[0];
            // если в треде больше одного письма
            // и пользователь не отказывался от предложения помечать его ранее
            // и он ещё не помечен
            // и папка этого письма не расшарина  - предлагаем пометить
            if (hMessage.getThreadCount(tid) > 1 &&
                Jane.Page.params.thread_id != tid &&
                !hMessage.hasLabel('t' + tid, hLabels.getLIDByName('ignore_thisthread:disable')) &&
                !hMessage.hasLabel('t' + tid, hLabels.getLIDByName('ignore_thisthread:mark')) &&
                !hFolders.isShared(hMessage.getFolderId('t' + tid)) &&
                !(ids.mids.length === 1 && Page.params.ids === ids.mids[0])
            ) {

                Actions.run('thread.ignore.show', {tid: tid});
            }
        }

    };

    /**
     * Помечаем письма и треда прочитанными/непрочитанными
     */
    var command = new MessageAction("mark", function(o) {
        var action = o.action;
        var ids = o.ids;

        var hMessages = Jane.$H("messages");
        var hMessage = Jane.$H("message");

        // обновляем xml-кеш отдельно для выделенных писем и тредов
        // тут фильтруются треды и письма вне тредов
        var updatedIDs = hMessage.grep({mids: ids.mids, tids: ids.tids}, null, action);
        if (!updatedIDs) {
            // экшен закончился не успев начатся, но все равно сообщим об этом
            Jane.events.trigger('message.action.complete', {action: action, eventObject: o, skipFocus: true});
            return;
        }

        //@hotkeys
        if (typeof o.params.toolbar !== 'undefined' && o.params.toolbar && Daria.Page.type !== 'message') {
            Jane.Actions.run('trigger-hotkeys-promo-bubble', {
                eventName: (action === 'mark') ? 'Mark_read' : 'Mark_unread'
            });
        }

        // если помечаем тред из прыща, то надо обязательно обрабатывать ids['ids'] (это письма из Table от треда)
        // иначе сам тред пометится, а письма внутри него (отрисованные на странице) - нет
        var updateMessageThread;
        if (o.params['bullet']) {
            if (ids.ids.length === 0) {
                // помечем тред без дерева, но возможно открытый справа
                // надо пойти в messages-box и пометить письма там
                updateMessageThread = true;

            } else {
                var threadMids = hMessage.grep({mids: ids.ids}, null, action);
                if (threadMids) {
                    // смело объединяем два массива
                    // если мы попали сюда, то помечаем тред и updatedIDs.mids будет пустой
                    updatedIDs.mids = updatedIDs.mids.concat(threadMids.mids);
                }
            }
        }

        // письма, которые надо обновить в DOM
        var affectedMessages = updatedIDs.mids;

        // отдельно помечаем письма внутри тредов
        // они не уходят в запрос в таком виде, потому что туда уйдет результат обработки треда
        if (ids['tids_ids']) {
            var affectedMessagesInTheads = hMessage.grep({mids: ids.tids_ids}, null, action);
            if (affectedMessagesInTheads) {
                affectedMessages = affectedMessages.concat(affectedMessagesInTheads.mids);
            }
        }

        var selectedTids = updatedIDs.tids;
        // сортируем треды
        var sortedTids = prepareTids(affectedMessages, selectedTids);
        // теперь tid'ы можно удалить, потом сюда добавятся нужные
        updatedIDs.tids = [];

        // Обновляет информацию о количестве непрочитанных писем в затронутом, но невыделенном треде
        // это та обработка, которая раньше приходила из wmi
        // эти треды надо обновить только в DOM'е
        var needUpdateTIDs = hMessage.updateThreadsUnreadCount(action, sortedTids.notSelectedTids);

        // обрабатываем треды без checkboxTree
        // для них одна особенность - они могут быть предзагружены, поэтому надо пройтись по письмам внутри них и сделать с ними действие
        var selectedTidsWithoutTree = sortedTids.selectedTidsWithoutTree;
        for (var i = 0, j = selectedTidsWithoutTree.length; i < j; i++) {
            var tidWithoutTree = selectedTidsWithoutTree[i];
            var affectedMessagesInTread = null;
            var threadPager = null;
            //берем rawCache, т.к. xml-list тут не нужен, а нужен только массив ids для данного треда
            var threadList = hMessages.getRawCacheByParams({thread_id: tidWithoutTree});
            if (threadList && threadList.data && threadList.data.ids) {
                threadPager = jpath(threadList.data.node, '.details.pager')[0];
                // если у треда нет пейджера или в нем одна страница, то все ок, заменяем его на mid'ы
                // тут конечно можно ходить по пейджеру, возможно остальные мы уже тоже загрузили
                if (!threadPager || threadPager['pages-count'] == 1) {
                    affectedMessagesInTread = hMessage.grep({mids: threadList.data.ids}, null, action);
                } else {
                    // очищаем кеш, мы не можем его посчитать, но он больше не валиден, потому что что-то в нем произошло
                    hMessages.unCacheByParams({thread_id: tidWithoutTree});
                }
            }

            changeTidToMids(
                updatedIDs,
                affectedMessagesInTread ? affectedMessagesInTread.mids : false,
                tidWithoutTree,
                hMessage.getThreadCount(tidWithoutTree),
                action
            );
        }

        var selectedTidsWithTree = sortedTids.selectedTidsWithTree;
        for (var tid in selectedTidsWithTree) {
            //берем rawCache, т.к. нам оттуда нужен только pager
            var threadCache = hMessages.getRawCacheByParams({thread_id: tid});
            var selectedMidsInThread = false;
            var threadCachePager = null;
            if (threadCache && threadCache.data && threadCache.data.node) {
                threadCachePager = jpath(threadCache.data.node, '.details.pager')[0];
                // если у треда нет пейджера или в нем одна страница, то все ок, заменяем его на mid'ы
                // тут конечно можно ходить по пейджеру, возможно остальные мы уже тоже загрузили
                if (!threadCachePager || threadCachePager['pages-count'] == 1) {
                    selectedMidsInThread = selectedTidsWithTree[tid];
                }
            }
            changeTidToMids(
                updatedIDs,
                selectedMidsInThread,
                tid,
                hMessage.getThreadCount(tid),
                action
            );
        }

        /*
        Список обновлений в DOM'е:
          - список затронутых писем из checkboxTree (updatedIds.mids)
          - выделенные tid'ы + tid'ы затронутые updatedIDs.mids
         */
        var method = action + "-do-html";
        command[method]({
            mids: affectedMessages,
            tids: selectedTids.concat(needUpdateTIDs)
        }, updateMessageThread);
        var activeMessageBlock;
        if (Daria.layout != '2pane' && (activeMessageBlock = Jane.$B('messages-box').getActive())) {
            if (activeMessageBlock.name === 'message-thread') {
                activeMessageBlock._redrawUnreads();
            }
        }

        var bMessagesListBox = Jane.$B("messages-list-box");
        if (bMessagesListBox) {
            bMessagesListBox.forEachBlockInBox(touchBlock);
        }

        if (Daria.layout == '2pane') {
            Jane.Actions.run('messages.deselect');
        } else {
            Jane.events.trigger("daria:selection-mode.redraw");
        }
        Jane.watcher.set("all-selected-is-read");

        // не очищаем списки непрочитанных, если сейчас находимся в непрочитанных
        // таким образом мы как бы сохраняем текущую выборку
        if (Jane.Page.params.extra_cond != 'only_new') {
            hMessages.clearUnreadsList();
        }

        // DARIA-22008 - Статус-лайн показывается с задержкой
        // показываем перду с игнорированием треда сразу
        if (Daria.IS_CORP && action == 'mark') {
            setTimeout(function() {
                if (Page.type == 'messages') {
                    showIgnoreThreadLine(updatedIDs);
                }
            }, 100);
        }

        // помечаем прочитанными
        Jane.Handler.doAll(
            [ "do-messages", "folders" ],
            {
                ids: updatedIDs.mids, /*выбранные письма, не входящие в треды*/
                tids: updatedIDs.tids, /*выбранные треды*/
                action: action
            },
            function() {
                // aandrosov: больше ответ нам не нужен, мы сами считаем непрочитанность треда
                var Page = Daria.Page;

                var bMailLeft = Jane.$B("mail-left");
                // Перерисовать цифирки в списке папок и меток. Например, просто перерисовав оба блока.
                if (bMailLeft) {
                    bMailLeft.run();
                }
                Jane.events.trigger('message.action.complete', {action: action, eventObject: o, skipFocus: true});

                Page.updateTitle();
                if (Daria.layout != '2pane') {
                    // чтобы обновилась ссылка "пометить все как прочитанные"
                    Jane.events.trigger("daria:selection-mode.redraw");
                }

                if (action == "unmark" && Page.type == "message") {
                    var id = Page.params.ids;
                    var fid = hMessage.getFolderId(id);
                    Page.go(Page.params2url({ _page: "messages", current_folder: fid }));
                }

            }, {
                loader: Jane.Loader.getActualLoader(o)
            }
        );

    });

    var markMessageHandler = function() {
        $(this).removeClass("b-messages__message_unread");
    };

    var unmarkMessageHandler = function() {
        $(this).addClass("b-messages__message_unread");
    };

    var markMessageNearest = function() {
        $(this).removeClass("b-message-prevnext__item_unread");
    };

    var markMessageThreadNearest = function() {
        $(this).removeClass("b-grid-item_unread");
    };

    var unmarkMessageNearest = function() {
        $(this).addClass("b-message-prevnext__item_unread");
    };

    var unmarkMessageThreadNearest = function() {
        $(this).addClass("b-grid-item_unread");
    };

    function markMessageInThread() {
        $(this)
            .removeClass('b-message_unread b-message_ignore')
            .addClass('b-message_read');
    }

    function unmarkMessageInThread() {
        $(this)
            .removeClass('b-message_read')
            .addClass('b-message_unread b-message_ignore');
    }

    function markAllMessagesInThread() {
        $(this).find('> .b-message').each(markMessageInThread);
    }

    function unmarkAllMessagesInThread() {
        $(this).find('> .b-message').each(unmarkMessageInThread);
    }

    command["mark-do-html"] = function(ids, updateMessageThread) {
        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");
        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, markMessageHandler);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, markMessageHandler);
        }

        if (Daria.layout == '2pane') {
            if (bMessagesBox) {
                bMessagesBox.iterateNearest(ids.mids, markMessageNearest);
            }
            if (bMessagesBox) {
                bMessagesBox.iterateThreadNearest(ids.mids, markMessageThreadNearest);
            }

        } else {
            if (updateMessageThread) {
                if (bMessagesBox) {
                    bMessagesBox.iterateThread(ids.tids, markAllMessagesInThread);
                }
            } else {
                if (bMessagesBox) {
                    bMessagesBox.iterateHeaders(ids.mids, markMessageInThread);
                }
            }
        }
    };

    command["unmark-do-html"] = function(ids, updateMessageThread) {
        var bMessagesBox = Jane.$B("messages-box");
        var bMessagesListBox = Jane.$B("messages-list-box");
        if (bMessagesListBox) {
            bMessagesListBox.iterateRows(ids.mids, unmarkMessageHandler);
        }
        if (bMessagesListBox) {
            bMessagesListBox.iterateThread(ids.tids, unmarkMessageHandler);
        }

        if (Daria.layout == '2pane') {
            if (bMessagesBox) {
                bMessagesBox.iterateNearest(ids.mids, unmarkMessageNearest);
            }
            if (bMessagesBox) {
                bMessagesBox.iterateThreadNearest(ids.mids, unmarkMessageThreadNearest);
            }

        } else {
            if (updateMessageThread) {
                if (bMessagesBox) {
                    bMessagesBox.iterateThread(ids.tids, unmarkAllMessagesInThread);
                }
            } else {
                if (bMessagesBox) {
                    bMessagesBox.iterateHeaders(ids.mids, unmarkMessageInThread);
                }
            }

        }
    };

    Actions.add(command);

    Actions.copy("mark", "unmark");

    Jane.Actions.create('message.read-unread', function(o) {
        var params = o.params;
        var id = params['thread-id'] || params['message-id'];
        var isNew = Jane.$H('message').isNew((params['thread-id'] ? 't' : '') + id);

        var action = isNew ? 'mark' : 'unmark';
        //специальная метка, что помечаем из прыща
        params['bullet'] = true;
        // помечаем
        Jane.Actions.run(action, params);
        // открываем
        if (action == 'unmark' && $(o.event.currentTarget).closest('.b-message').hasClass('b-message_collapsed')) {
            Jane.Actions.run('message.toggle', {
                ids: id,
                ignore: true
            });
        }
    });

}(Daria, Jane));


/* ../../actions/message/mark.js end */

/* ../../actions/message/reply.js begin */
(function() {
    // DARIA-17828
    var metric = function(params) {
        Jane.c(['Ответить всем', 'Паранжа'].concat(params));
    };

    function getReplyPromoCnt() {
        return parseInt(Jane.$H('settings').getSetting('reply-promo-cnt'), 10) || 0;
    }

    function clearCache() {
        Jane.Handler.clearCache([
            'messages',
            'message-nearest',
            'message-thread-nearest',
            'abook-contacts',
            'abook-contact',
            'abook-letters',
            'folders'
        ]);

        var pageParams = Jane.Page.params;
        var hMessagesPager = Jane.$H('messages-pager');
        var hFolders = Jane.$H('folders');

        hMessagesPager.clearCacheByParams(pageParams);
        hMessagesPager.clearCacheByParams({current_folder: hFolders.ids.sent});

        var table = Jane.$B('messages-list-box').getActiveTable();
        var ids = table && table.getIDs();
        var curRowId;
        if (ids && ids.mids.length) {
            curRowId = ids.mids[0];
        }

        Jane.$B('folders').run();

        if (Jane.Page.type == 'messages') {
            Jane.$B('messages').run(null, function() {
                if (!curRowId) {
                    return;
                }

                var table = Jane.$B('messages-list-box').getActiveTable();
                var msg = Jane.$H('message').getCache(curRowId);
                var thread = msg && table.getCheckboxTree('t' + msg.tid);

                // если сформировался тред, расскрыть и выделить сообщение
                if (thread) {
                    // событие после раскрытия треда
                    // @see actions/thread/toggle.js
                    var onupdate = Jane.events.bind('messages-date-pager.updateVisibility', function() {
                        Jane.events.unbind('messages-date-pager.updateVisibility', onupdate);
                        table.selectRow(curRowId);
                    });

                    Jane.Actions.get('thread.toggle').run({
                        params: $.extend({}, Jane.Page.params, {thread_id: msg.tid}),
                        event: {currentTarget: thread.tr}
                    });
                } else {
                    table.selectRow(curRowId);
                }
            });
        }
    }

    function parseSendResponse(responseStr) {
        var m = responseStr.match(/<error.*code=\"(\d*)\".*>/);
        if (m) {
            this.reject(parseInt(m[1], 10));
            return;
        }

        m = responseStr.match(/<status>(.+)<\/status>/);
        if (!m) {
            this.reject();
            return;
        }

        switch (m[1]) {
        case 'ok':
            clearCache();
            this.resolve();
            break;

        case 'attachment_too_big':
            this.reject(31);
            break;

        default:
            this.reject();
        }
    }

    // ответить шаблоном можно только на сообщения из "Входящие"
    // и только сообщением, расположенным в папке "Шаблоны"
    function sendTemplate(tmplMid, mid) {
        var dfd = $.Deferred();

        Jane.Handler.doAll([
            {handlers: ['folders']},
            {handlers: ['message', 'message-body'], params: {ids: tmplMid}},
            {handlers: ['message', 'message-body'], params: {ids: mid}}
        ], function(data, error) {
            if (!$.isEmptyObject(error)) {
                if (error[tmplMid] && error[tmplMid].code == 5000) {
                    dfd.reject(-1);
                    return;
                }

                dfd.reject();
                return;
            }

            var hFolders = Jane.$H('folders');
            var hMessage = Jane.$H('message');
            var hMessageBody = Jane.$H('message-body');

            var tmplMsg = hMessage.getCache(tmplMid);
            var tmplMsgBody = hMessageBody.getCacheByParams({ids: tmplMid});

            if (!tmplMsg || !tmplMsgBody) {
                dfd.reject(-1);
                return;
            }

            var msg = hMessage.getCache(mid);
            var msgBody = hMessageBody.getCacheByParams({ids: mid});

            if (!msg || !msgBody) {
                dfd.reject();
                return;
            }

            var tmplFid = hFolders.ids.template;
            var tmplMsgFid = hMessage.getFolderId(tmplMid);
            // шаблон не в папке "Шаблоны"
            if (!tmplFid || !tmplMsgFid || tmplMsgFid != tmplFid) {
                dfd.reject(-1);
                return;
            }

            var msgFid = hMessage.getFolderId(mid);
            var msgFolder = msgFid ? hFolders.getFolderById(msgFid) : null;

            // папка сообщения не "Входящие" и не пользовательская
            if (!(msgFid && msgFolder && (hFolders.isFolder(msgFid, 'inbox') || msgFolder.user))) {
                dfd.reject();
                return;
            }

            var hSettings = Jane.$H('settings');

            var tmplBody = hMessageBody.getComposeHTML(tmplMid);
            var msgMode = hMessageBody.getSubtype(mid);
            msgBody = hMessageBody.getReplyBody(mid, msgMode);

            var recipients = hMessageBody.getRecipients(mid, true);
            var messageId = hMessageBody.getMessageId(mid);
            var inreplyto = hMessageBody.getInReplyTo(mid);
            var references = hMessageBody.getReferences(mid);

            if (msgMode == 'plain') {
                tmplBody = Daria.Html2Text.html2text(tmplBody);
            }

            msgBody = tmplBody + msgBody;

            var params = {
                mark_ids: mid,
                overwrite: mid,
                ign_overwrite: 'yes',
                mark_as: 'replied',
                references: $.trim((references || inreplyto) + ' ' + messageId),
                inreplyto: messageId,
                //save_symbol: 'draft', //?
                ttype: msgMode,
                from_mailbox: hMessage.getToEmail(mid) || hSettings.getSetting('default_email'),
                from_name: hSettings.getSetting('from_name'),
                to: recipients.to,
                cc: recipients.cc,
                bcc: '',
                subj: 'Re: ' + hMessage.getSubject(mid, true),
                send: msgBody
            };

            Daria.SendMail.sendForm({
                $form: $('<form></form>'),
                params: params,
                success: function(responseStr) {
                    parseSendResponse.call(dfd, responseStr);
                },
                error: function() {
                    dfd.reject();
                }
            });
        });

        return dfd.promise();
    }

    function sendOnEmail(email, id) {
        var dfd = $.Deferred();

        Jane.Handler.getAll(['message', 'message-body'], {ids: id}, function() {
            var hMessage = Jane.$H('message');
            var hMessageBody = Jane.$H('message-body');
            var hSettings = Jane.$H('settings');
            var body = hMessageBody.getComposeHTML(id);
            var mode = hMessageBody.getSubtype(id);

            if (mode == 'plain') {
                body = Daria.Html2Text.html2text(body);
            }

            var parts = $.map(hMessageBody.getAttachments(id), function(n) {
                return n.type == 'message' ? n.hid : null;
            });

            var params = {
                ids: id, // добавление указанного сообщения вложенным
                ttype: mode,
                overwrite: id,
                ign_overwrite: 'yes',
                from_mailbox: hMessage.getToEmail(id) || hSettings.getSetting('default_email'),
                from_name: hSettings.getSetting('from_name'),
                to: email,
                cc: '',
                bcc: '',
                subj: 'Fwd: ' + hMessage.getSubject(id, true),
                send: body,
                inreplyto: hMessageBody.getMessageId(id),
                references: '',
                mark_as: 'forwarded',
                mark_ids: id,
                parts: parts
            };

            Daria.SendMail.sendForm({
                $form: $('<form></form>'),
                params: params,
                success: function(responseStr) {
                    parseSendResponse.call(dfd, responseStr);
                },
                error: function() {
                    dfd.reject();
                }
            });
        });

        return dfd.promise();
    }

    // DARIA-20195
    // Actions.add(
    //     new MessageAction("reply-with-hotkey", function(o) {
    //         var hSettings = Jane.$H('settings');

    //         o.params.ids          = o.ids;
    //         o.params.toolbar      = false;
    //         o.params.hotkeysUsed  = true;
    //         o.event               = $.Event('click');
    //         o.event.currentTarget = $('.b-toolbar__item_reply')[0];

    //         // Если нажали Shift+E
    //         if (o.params.hotkeysUsed
    //             && !$('html').hasClass('b-page_reply-promo') // еще не показано промо
    //             && Daria.layout === '2pane'
    //             && !hSettings.isSet('force-reply')
    //             && !hSettings.isSet('hk-reply-promo')) {
    //                 Jane.Actions.run('reply.confirm', o.event, o.params);
    //                 return;
    //         } else {
    //             Jane.Actions.run('reply', o.event, o.params);
    //             return;
    //         }
    //     })
    // );

    Actions.add(
        new MessageAction("reply", function(o) {
            var hSettings = Jane.$H('settings');
            var hMessageBody = Jane.$H('message-body');

            var action = o.action;
            var tab = '';
            var ids = o.ids;
            var params = o.params;

            if (!ids) {
                return;
            }

            // Ничего не делаем для писем про сборщики писем
            if (hMessageBody.isCollectorMessage(ids)) {
                return;
            }

            if (params.toolbar === "1" && // клик из тулбара
                !$('html').hasClass('b-page_reply-promo') && // еще не показано промо
                Daria.layout === '2pane' &&
                action === 'reply' &&
                !hSettings.getSetting('force-reply') &&
                hMessageBody.allowedReplyAll(ids.ids)
            ) {
                params.ids = ids;

                Jane.Actions.run('reply.confirm', o.event, params);
                return;
            }

            var preventConfirm = getReplyPromoCnt();

            // DARIA-23393 экшены срабатывают не только при клике на кнопку, но и при загрузке страницы
            if (!params.dynamicLink) {
                // если я из попапа нажал "Ответить", то увеличиваем счетчик
                if (action === 'reply' &&
                    !params.toolbar &&
                    preventConfirm < 2
                ) {
                    preventConfirm = preventConfirm + 1;

                    hSettings.setSettings({
                        'reply-promo-cnt': preventConfirm
                    });
                }

                // если я из попапа нажал "Ответить всем", то сбрасываем счетчик
                if (action === 'reply-all' &&
                    !params.toolbar &&
                    preventConfirm < 2
                ) {

                    hSettings.setSettings({
                        'reply-promo-cnt': 0
                    });
                }
            }

            var replyEmail;
            var buttonId;
            var bToolbar;
            var bSettings;
            if (action === 'sendon' && params.toolbar === '1') {
                buttonId = params['toolbar.button'];
                bToolbar = Jane.$B('toolbar-box').getActive();
                bSettings = bToolbar && bToolbar.toolbar.settings && bToolbar.toolbar.settings.get(buttonId);
                replyEmail = bSettings && bSettings.settings && bSettings.settings.email;

                if (!replyEmail) {
                    Daria.Statusline.showMsg({
                        name: 'message-sendon',
                        speed: 'fast',
                        body: i18n('%Message_Sendon_Msg_Error'),
                        body3: i18n('%3pane_Message_Sendon_Msg_Error')
                    });

                    return;
                }

                if (ids.ids.length == 1) {
                    if (!Jane.Toolbar.getButtonStatus(buttonId)) {
                        return;
                    }

                    Daria.Statusline.showMsg({
                        name: 'message-sending',
                        hideOnTimeout: false,
                        body: i18n('%Compose_Письмо_отправляется'),
                        body3: i18n('%3pane_Compose_Письмо_отправляется')
                    });

                    Jane.Toolbar.disableButton(buttonId);
                    sendOnEmail(replyEmail, ids.ids[0])
                        .done(function() {
                            Daria.Statusline.showMsg({body: i18n('%Compose_Письмо_отправлено'), body3: i18n('%3pane_Compose_Письмо_отправлено')});
                        })
                        .fail(function(code) {
                            var msg = {body: i18n('%Feedback_Error_Msg'), body3: i18n('%3pane_Feedback_Error_Msg')};

                            switch (code) {
                            case 31:
                                msg = {body: i18n('%Compose_attachment_too_big'), body3: i18n('%Compose_attachment_too_big')};
                                break;
                            }

                            Daria.Statusline.showMsg(msg);
                        })
                        .always(function() {
                            Daria.Statusline.hide('message-sending');
                            Jane.Toolbar.enableButton(buttonId);
                            Jane.events.trigger('message.action.complete', { action: action, eventObject: o });
                        });
                    return;
                }

                action = 'forward';
            }

            // ответить одному с Деньгами
            if (action == 'reply-money' && params.toolbar === '1') {
                action = 'reply';
                tab = 'tab=moneyletter&';
            }

            if (action == 'reply-tmpl' && params.toolbar === '1') {
                buttonId = params['toolbar.button'];
                bToolbar = Jane.$B('toolbar-box').getActive();
                bSettings = bToolbar && bToolbar.toolbar.settings && bToolbar.toolbar.settings.get(buttonId);
                var tmplMid = bSettings && bSettings.settings && bSettings.settings.tmpl;

                // шаблон не найден
                if (!tmplMid) {
                    Daria.Statusline.showMsg({
                        name: 'message-reply-tmpl',
                        speed: 'fast',
                        body: i18n('%Message_ReplyTmpl_Msg_Error'),
                        body3: i18n('%3pane_Message_ReplyTmpl_Msg_Error')
                    });

                    return;
                }

                // ответить шаблоном можно только на одно сообщение
                if (ids.tids.length > 0 || ids.mids.length > 1) {
                    Daria.Statusline.showMsg({
                        name: 'message-reply-tmpl',
                        speed: 'fast',
                        body: i18n('%Message_ReplyTmpl_Msg_Error2'),
                        body3: i18n('%3pane_Message_ReplyTmpl_Msg_Error2')
                    });

                    return;
                }

                if (!Jane.Toolbar.getButtonStatus(buttonId)) {
                    return;
                }

                Daria.Statusline.showMsg({
                    name: 'message-sending',
                    hideOnTimeout: false,
                    body: i18n('%Compose_Письмо_отправляется'),
                    body3: i18n('%3pane_Compose_Письмо_отправляется')
                });

                Jane.Toolbar.disableButton(buttonId);
                sendTemplate(tmplMid, ids.mids[0])
                    .done(function() {
                        Daria.Statusline.showMsg({body: i18n('%Compose_Письмо_отправлено'), body3: i18n('%3pane_Compose_Письмо_отправлено')});
                    })
                    .fail(function(code) {
                        var msg = {body: i18n('%Feedback_Error_Msg'), body3: i18n('%3pane_Feedback_Error_Msg')};

                        switch (code) {
                        case -1:
                            msg = {body: i18n('%Message_Template_NotFound', tmplMid), body3: i18n('%3pane_Message_Template_NotFound', tmplMid)};
                            break;
                        case 31:
                            msg = {body: i18n('%Compose_attachment_too_big'), body3: i18n('%Compose_attachment_too_big')};
                            break;
                        }

                        Daria.Statusline.showMsg(msg);
                    })
                    .always(function() {
                        Daria.Statusline.hide('message-sending');
                        Jane.Toolbar.enableButton(buttonId);
                        Jane.events.trigger('message.action.complete', { action: action, eventObject: o });
                    });

                return;
            }

            var uid = Jane.$H("account-information").getDataKey('uid');

            var url = '#compose/' + tab + 'oper=' + action;
            if (ids.mids.length) {
                url += $.map(ids.mids,function(a) {
                    return '&ids=' + a;
                }).join('');
            }
            if (ids.tids.length) {
                url += $.map(ids.tids,function(a) {
                    return '&tids=' + a;
                }).join('');
            }

            if (params.translate) {
                Jane.c({ "Compose-Translate": "Клик по " + (uid % 2 ? "зеленой" : "серой") + " кнопке 'ответить с переводчиком'" });
                url += '&translate=true';
            }

            //@hotkeys
            var hotkeysPromo = function(action) {
                var hotkeyActions = ['reply', 'reply-all'];

                if (o.params.hotkeysUsed) {
                    hotkeysPromo = $.noop;
                    return;
                }

                if (_.contains(hotkeyActions, action)) {
                    Jane.Actions.run('trigger-hotkeys-promo-bubble',{
                        eventName: action
                    });
                }
            };


            if (o.params.dynamicLink) {
                //@hotkeys
                hotkeysPromo(action);
                return url;

            } else {
                var onMessageFill = Jane.events.bind('compose-filled', function() {
                    Jane.events.unbind('compose-filled', onMessageFill);
                    if (replyEmail) {
                        Jane.$B('compose').setTo(replyEmail);
                    }
                });

                Daria.composeGo(url, function() {
                    //@hotkeys
                    hotkeysPromo(action);
                });
            }

            Jane.events.trigger('message.action.complete', { action: action, eventObject: o });
        })
    );

    Actions.copy('reply', 'forward');
    Actions.copy('reply', 'reply-all');
    Actions.copy('reply', 'reply-money');
    Actions.copy('reply', 'sendon');
    Actions.copy('reply', 'reply-tmpl');

    Actions.add(new Action("message.in-reply-to", function(o) {

        Handler.getAll(
            ["message-in-reply-to"],
            {mid: o.params.mid},
            function(data) {
                var mid;
                if (data) {
                    mid = jpath(data, '.handlers[.name == "message-in-reply-to"].data.mid')[0];
                } else {
                    //Данные не пришли, значит ищем по кэшу
                    mid = Jane.$H("message-in-reply-to").getCacheByParams({mid: o.params.mid}).mid;
                }
                if (mid) {
                    Page.go('#message/' + mid);
                }
            });
    }));

    Actions.create('reply-all.warning', function() {
        Daria.MessageAction.warning(i18n('%Message_ReplyAll_Warning'));
    });

    Actions.create('reply.confirm', function(o) {
        var hSettings = Jane.$H('settings');

        var pos;
        var conf;
        var $target;

        var hideParanja = function() {
            dialog.$paranja.addClass('g-hidden').removeClass('b-paranja_fadeout');
            highlightButton(true);
        };
        var highlightButton = function(revert) {
            if (!$target) {
                return;
            }

            $('html').toggleClass('b-page_reply-promo', !revert);
//            $('.b-page__content').css('z-index', revert ? '' : 'auto');
//            $('[data-action="reply"], [data-action="reply-all"]', $target.parent()).css('z-index', revert? '' : '1000');
        };

        var preventConfirm = getReplyPromoCnt();

        var mid = o.params.ids.mids;

        conf = {
            body: Jane.tt('mail-common:reply-confirm-dialog', {
                mid: mid,
                // +1 это тот кто прислал письмо
                participants: Jane.$H('message-body').participantsCount(mid) + 1,
                prevent: preventConfirm >= 2
            }),
            additionalClass: 'b-toolbar__popup',
            oncancel: function() {
                // при закрытии через крестик увеличиваем счетчик
                hSettings.setSettings({
                    'reply-promo-cnt': preventConfirm + 1
                });
                hideParanja();
            },
            onclose: hideParanja,
            width: 400,
            hideOnScroll: true
        };

        if (o.event && o.event.currentTarget) {

            $target = $(o.event.currentTarget);
            pos = $target.offset();

            pos.top += $target.height() + 15 - $(window).scrollTop();
            pos.left += $target.outerWidth() + 1;

            $.extend(conf, {
                onTarget: {
                    x: pos.left,
                    y: pos.top,
                    side: 'top',
                    pos: 'bottom'
                }
            });
        }

        var dialog = Daria.Dialog.open(conf);

        // Daria-20195
        hSettings.setSettings({'hk-reply-promo': 'on'});

        metric('Показы');

        highlightButton();
        dialog.$paranja.removeClass('g-hidden b-paranja_transparent').addClass('b-paranja_fadeout');
    });

    Actions.create('reply.not-ask', function(o) {
        var block = nb.block(o.event.currentTarget);

        // timeout нужен, чтобы чекбокс поменял свое внутренне состояние
        window.setTimeout(function() {
            Jane.$H('settings').setSettings({
                'force-reply': block.isChecked()
            });
            metric('Проставлено галочек');
        }, 1);

        return true;
    });
}());

/* ../../actions/message/reply.js end */

/* ../../actions/message/delete.js begin */
Actions.add(
    new MessageAction('delete', function(o) {

        var pageParams = Jane.Page.params;

        var action = o.action;
        var params = o.params;
        var originalAction = params.originalAction;
        var ids = o.ids;
        var pageType = Page.type;
        var activeTable;

        var bMessagesListBox = Jane.$B('messages-list-box');
        var folderID = params.current_folder = (params.current_folder || params.fid);

        if (pageType == 'messages') { // FIXME: Даже если bMessagesBox не видна (например, в композе), у нее все равно есть active.
            activeTable = bMessagesListBox && bMessagesListBox.getActiveTable();
            if (activeTable) {
                // очищаем текущий curRowId, потому что после переноса или удаления его уже может не быть
                activeTable.curRowId = null;
            }
        }

        var count = (activeTable) ? activeTable.getCount() || 1 : 1;

        var hFolders = Jane.$H('folders');
        var hMessage = Jane.$H('message');
        var hMessages = Jane.$H('messages');
        var hMessageNearest = Jane.$H('message-nearest');
        var hThreadNearest = Jane.$H('message-thread-nearest');

        // если мы переносим письмо в папке Удаленные, то это "Удалить"
        if (action == 'move' && hFolders && hFolders.ids && hFolders.ids['trash'] == folderID) {
            action = 'delete';
        }

        if (action == 'move') {
            // выфильтровываем все письма,
            // которые хотим переместить в ту папку,
            // в которой они уже и так лежат

            // по сути нам тут надо отфильтровать только mids (это письма вне тредов)
            // tids фильтровать нельзя, потому что тред принадлежит к неограниченному числу папок, а не к одной
            // если выбран tid, то значит его всегда можно перенести
            ids['mids'] = $.map(ids['mids'], function(id) {
                if (hMessage.getFolderId(id) === folderID) {
                    return null;
                } else {
                    return id;
                }
            });
            // да, тут мы не сможем обработать вариант, когда тред переносится в ту же папку, не зная всего содержимого треда
            // в wmi.log будет такая ошибка, если переносить нечего
            // [26/02/2013:19:46:55 +0400] mail.wmi[1108523328]: (59670986:mdb303) mailbox_oper status=31 hash=0635214ba785f509c819f069d5932259 reason=[Internal error (move_msgs:virtual long long unsigned int yamail::sql_pool::sql_pool_oracle::update(const std::string&, const yamail::sql_pool::data_defs&, bool, yamail::sql_pool::output_vars*): can't update query (2170000240000001064; (2170000000013232819, 2170000000013179171, 2170000000014083001, 2170000000014199255, 2170000000014243248, 2170000000014136315, 2170000000014395703, 2170000000014330892, 2170000000014325809, 2170000000014287805, 2170000000014457714, 2170000000014566800); 59670986): move_msgs:sql execute error: ORA-20124: CollectMails - MID list is empty. Nothing to do

            // все письма в выфильтровались (текущей папке)
            if (!ids['mids'].length && !ids['tids'].length) {
                return;
            }

            //@hotkeys
            Jane.Actions.run('trigger-hotkeys-promo-bubble', {
                eventName: 'Folders_dialog'
            });

            // message-thread-nearest: в спаме и удалённых треды не показываются, поэтому если в перемещении учавствуют эти папки, то кэши тредов становятся неактуальными
            Jane.Handler.clearCache(['messages', 'message-thread-nearest']);
            //новый пейджер для текущей папки
            Jane.$H('messages-pager').clearCacheByParams(Page.params);
            //новый пейджер для папки, куда переносим письма
            Jane.$H('messages-pager').clearCacheByParams(params);
        }

        // Решаем, что перезапросить и с какими параметрами.
        var requestHandlers = [ "do-messages", "folders", "labels" ]; // Это точно надо. Параметры для messages добавятся ниже.
        var requestParams = { // Параметры для собственно переноса писем.
            ids: ids.mids,
            tids: ids.tids,
            action: action
        };

        if (action == 'move') {
            requestParams.movefile = folderID;
        }

        var where;
        var folderId;
        var midsLength = ids.mids.length;
        var is3pane = (Daria.layout !== '2pane');
        if (!is3pane && (pageType == "message" || pageType == "compose")) { // Определяем, куда мы будем переходить после удаления/перемещения.

            switch (Jane.$H("settings").getSetting("page_after_" + (action == 'move' ? 'move' : 'delete'))) {
            case "current_list": // Переходим в "текущий" список или остаемся на странице (после переноса).
                if (action == 'move') {
                    where = Page.hash;
                    if (midsLength > 0) {
                        requestHandlers.push('message');
                    }
                    requestHandlers.push('message-thread-nearest');
                } else {
                    var prev = Page.History.prev(); // Достаем предыдущую страницу.
                    if (prev && prev.params._page == "messages") { // Это список писем.
                        where = prev.url;
                        $.extend(requestParams, hMessages.extractParams(prev.params)); // Сразу с удалением перезапросим и этот список.
                        requestHandlers.push("messages");
                    } else { // FIXME: Я зашел в список писем, из него в письмо, а из этого письма в другое. Нажал удалить.
                        // В какой "текущий" список я должен вернуться? --Пока что будет во "Входящие".--

                        // в таком случае перемещаемся в папку, в котором лежало удаляемое письмо
                        folderId = hMessage.getFolderId(ids.mids);
                        if (folderId) { // Если удалось однозначно определеить папку, иначе -- "Входящие"
                            where = "#folder/" + folderId;
                        }
                    }
                }
                break;
            case "next_message": // Переходим в следущее письмо.
                var mid = pageParams.ids;
                var nearest;

                var threadNearest;
                // Проверяем, включены ли треды или нет
                if (Jane.$H('settings').isSet('folder_thread_view')) {
                    var threadNearests = hThreadNearest.getNearestMessages(mid);
                    threadNearest = threadNearests.prev || threadNearests.next;
                }

                // Если треды были выключены, или включены, но в треде не было других писем,
                // то ищем ближайшие в списке писем
                if (threadNearest) {
                    nearest = threadNearest;
                } else {
                    var nearests = hMessageNearest.getNearestMessages(mid);
                    nearest = nearests.prev && nearests.prev.mid ? nearests.prev : nearests.next;
                }

                if (nearest && nearest['mid']) {
                    where = hMessage.getUrl(nearest['mid']);
                }

                // Если письмо было одно, нужно вернуться в папку
                if (!where) {
                    folderId = hMessage.getFolderId(ids.mids);
                    if (folderId) { // Если удалось однозначно определеить папку, иначе -- "Входящие"
                        where = "#folder/" + folderId;
                    }
                }
                break;
            case "deleted_list": // Переходим в "Удаленные".
                where = "#trash";
                requestParams.current_folder = hFolders.ids.trash;
                requestHandlers.push("messages");
                break;
            case "source_folder": // Переходим в папку, где лежало письмо до переноса.
                var mfid = hMessage.getFolderId(Page.params.ids);
                where = "#folder/" + mfid; // FIXME: Функция для генерации урлов.
                requestParams.current_folder = mfid;
                requestHandlers.push("messages");
                break;

            case "dest_folder": // Переходим в папку, куда попало письмо после переноса.
                where = "#folder/" + folderID; // FIXME: Функция для генерации урлов.
                requestParams.current_folder = folderID;
                requestHandlers.push("messages");
                break;
            case "inbox": // Переходим во "Входящие".
            }
            if (!where) { // Все, что не попало никуда выше, отправляем во "Входящие".
                where = "#inbox";
                requestParams.current_folder = hFolders.ids['inbox'];
                requestHandlers.push("messages");
            }

        } else if (pageType == 'messages') {
            $.extend(requestParams, hMessages.extractParams(pageParams));
            requestHandlers.push('messages');

            // Запоминаем состояние скролла, чтобы после перерисовки списка вернуть его на место
            var scrollBefore = activeTable && activeTable.getScrollArea().scrollTop();
        }

        //для 3pane делаем правильный переход
        if (!where && is3pane) {
            // если удаляем письмо из треда
            if (pageParams['thread_id']) {
                // если находимся в специальном окне, то берем общее количество писем в треде
                var threadCnt = Daria.WND_3PANE ? hMessage.getThreadCount(pageParams['thread_id']) : hMessages.getCountThreadMessageInFolder(pageParams);
                //если количество непонятно
                if (threadCnt === false) {
                    // просто рефрешим страницу
                    Jane.$H('settings').deleteLOM(pageParams['current_folder']);
                } else if (threadCnt === 1) {
                    if (Daria.WND_3PANE && action != 'move') {
                        // если в отдельном окне, то отправляем все запросы туда и закрываем это окно
                        doRequestAndCloseWnd();
                        return;
                    } else {
                        // если письмо всего одно, то тред удалится из этой папки
                        Jane.$H('settings').deleteLOM(pageParams['current_folder']);
                    }
                    /*
                    nearestMessage = activeTable.getNearestMessage({
                        tids: [pageParams['thread_id']]
                    });
                    if (nearestMessage) {
                        where = Jane.DOM.getElementsByClassName(nearestMessage.tr, 'b-messages__message__link')[0].hash;
                    }
                    */

                } else {
                    // можно просто удалить письмо из списка
                    hMessages.deleteMessage(pageParams, o.params['message-id']);
                    if (action != 'move') {
                        Jane.$B('messages-box').getActive().deleteMessage(o.params['message-id']);
                        where = false;
                    }
                }

            } else {
                if (Daria.WND_3PANE) {
                    if (action == 'move') {
                        hMessage.clearCacheByParams(pageParams);

                    } else {
                        // если в отдельном окне, то отправляем все запросы туда и закрываем это окно
                        doRequestAndCloseWnd();
                        return;
                    }

                } else {
                    Jane.$H('settings').deleteLOM(pageParams['current_folder']);
                }
                /*
                nearestMessage = activeTable.getNearestMessage(ids);
                if (nearestMessage) {
                    where = Jane.DOM.getElementsByClassName(nearestMessage.tr, 'b-messages__message__link')[0].hash;
                }
                */
            }
        }

        // Сбрасываем кэши хэндлеров: при удалении письма изменяется списки папок и меток (цифирки), неопределенное количество списков писем (проще все разом грохнуть).
        // FIXME: Если удаляем одно письмо, то можно более гуманно с кэшами обращаться.
        Jane.Handler.clearCache(['messages', 'message-nearest', 'message-thread-nearest', 'messages-thread-participants']);
        var hMessagesPager = Jane.$H('messages-pager');
        // удаляем кеш текущей папки
        hMessagesPager.clearCacheByParams(pageParams);
        // удаляем кеш папки назначения
        if (hFolders && hFolders.ids) {
            var destPath;
            switch (action) {
            case 'delete':
                destPath = 'trash';
                break;

            case 'tospam':
                destPath = 'spam';
                break;

            case 'notspam':
                destPath = 'inbox';
                break;
            }
            if (destPath) {
                hMessagesPager.clearCacheByParams({current_folder: hFolders.ids[destPath]});
            }
        }

        /**
         * Чистим кэш message-body, если мы помечаем сообщение как спам/не спам.
         * Нужно для отображения/скрытия картинок в теле письма (DARIA-3588)
         * [DARIA-25232] при удалении сообщение, если не почистить кэш, оно продолжает открываться по прямой ссылке
         */
        var isSpamFolder = hMessage.isSpam(ids.mids[0]);
        if (action == 'delete' || action.indexOf('spam') >= 0 || (action === 'move' && isSpamFolder)) {
            o.hasCouponMessage = false;

            var midsHash = Daria.array2obj(ids.mids);
            var tidsHash = Daria.array2obj(ids.tids);
            // если действие выполняется только над одним письмом или тредом
            // сохраняем данные о письме в свойство события
            /*jshint -W016 */
            if ((ids.mids.length === 1) ^ (ids.tids.length === 1)) {
                o.messageInfo = $.extend(true, {}, hMessage.getCache(ids.tids.length ? 't' + ids.tids[0] : ids.mids[0]) || {});
            }

            Jane.$H('message-body').clearCache(function(key, cache) {
                return midsHash[cache.params.ids];
            });

            // вероятность повторного открытия письма после перемещения мала, поэтому чистим кэш
            hMessage.clearCache(function(key, cache) {
                if (o.ids.ids && $.inArray(cache.params.ids, o.ids.ids) > -1 && hMessage.isCouponService(cache.data)) {
                    o.hasCouponMessage = true;
                }

                return midsHash[cache.params.ids] || tidsHash[cache.params.ids];
            });
        }

        //пока не сделали треды, просто рефрешим список
        if (!where && is3pane) {
            //TODO: надо реализовать логику "куда переходить после удаления"
            if (pageType == "compose") {
                where = '#inbox';
            } else if (!Daria.WND_3PANE) {
                var paramsCopy = $.extend({}, Daria.Page.params);
                delete paramsCopy['ids'];
                where = Jane.Page.params2url(paramsCopy);
            }
        }

        Jane.Handler.doAll(requestHandlers, requestParams, function() {
            /**
             * Принудительно снимаем выделение со всех писем. Делать это нужно потому, что в новом списке
             * писем (без пэйджера) блоки с письмами обновляются по мере их показа. Таким образом удалив
             * несколько писем из разных блоков, письма в невидимых блоках останутся выделенными и счетчик
             * выделенных писем будет врать.
             */
            if (activeTable) {
                activeTable.deselect(true);

                // DARIA-19519
                activeTable.curRowId = null;
            }

            if (where) {
                Page.go(where, null, {ignoreUnsavedDraft: o.params.ignoreUnsavedDraft});

            } else if (where !== false) {
                Page.refresh(function() {
                    // Восстанавливаем состояние скролла
                    var $scrollArea = activeTable && activeTable.getScrollArea();
                    if ($scrollArea) {
                        $scrollArea.scrollTop(scrollBefore);
                    }
                }, {ignoreUnsavedDraft: o.params.ignoreUnsavedDraft});
            }

            var body = i18n('%Message_Delete_Msg', count);
            var body3 = i18n('%3pane_Message_Delete_Msg', count);

            if (action == 'tospam') {
                body = i18n('%Message_To_Spam_Msg', count);
                body3 = i18n('%3pane_Message_To_Spam_Msg', count);
            } else if (action == 'notspam') {
                body = i18n('%Message_Not_Spam_Msg', count);
                body3 = i18n('%3pane_Message_Not_Spam_Msg', count);
            } else if (action == 'move') {
                var title = _.escape(Jane.$H('message').getSubject(ids.mids[0]));
                if (originalAction == 'archive') {
                    if (count === 1) {
                        body = i18n('%Message_MoveArchive_Msg_One', title);
                        body3 = i18n('%3pane_Message_MoveArchive_Msg_One');
                    } else {
                        body = i18n('%Message_MoveArchive_Msg', count);
                        body3 = i18n('%3pane_Message_MoveArchive_Msg', count);
                    }
                } else {
                    if (count === 1) {
                        body = i18n('%Message_Move_Msg_One', title);
                        body3 = i18n('%3pane_Message_Move_Msg_One');
                    } else {
                        body = i18n('%Message_Move_Msg', count);
                        body3 = i18n('%3pane_Message_Move_Msg', count);
                    }
                }

                // Если переносили одно письмо, предлагаем создать фильтр
                // DARIA-25173 предложение не показывает, если перенесли письмо при помощи кнопок тулбара "Архивировать" и "В папку"
                if (count === 1 &&
                    folderID != hFolders.ids.trash &&
                    Number(Jane.$H('filters').getForFolder(folderID).length) === 0 &&
                    originalAction != 'archive' &&
                    originalAction != 'infolder'
                ) {
                    Actions.run('message.filter-move.show', {mid: ids.mids[0], fid: folderID});
                    Jane.events.trigger('message.action.complete', {action: action, eventObject: o, message: body});
                    return;
                }
            }

            Daria.Statusline.showMsg({
                name: 'message-' + (action == 'move' ? 'moved' : 'removed'),
                speed: 'fast',
                body: body,
                body3: body3
            });

            Jane.events.trigger('message.action.complete', {action: action, eventObject: o, message: body});
        }, {
            loader: Jane.Loader.getActualLoader(o)
        });

        function doRequestAndCloseWnd() {
            var opener = window.opener;
            if (opener) {
                // вызываем дублирующий экшен в родительском окне
                opener.Jane.Actions.run(requestParams['action'], {
                    'message-id': requestParams.ids[0]
                });
            }
            // а это закрываем
            window.setTimeout(function() {
                window.close();
            }, 100);
        }
    })
);

Actions.copy("delete", "tospam");
Actions.copy("delete", "notspam");
Actions.copy("delete", "move");


/* ../../actions/message/delete.js end */

/* ../../actions/message/show.js begin */
// какая-то магия с actions, но без этого событие вверх до mail.message.show-or-select не пойдет
Jane.Actions.create('message.show', function(evt) {
    // @see blocks/messages/messages.js
    // не чистим кэш списка сообщений от прочитанных при переходе по списку не прочитанных в 3pane
    if (evt.params.extra_cond === 'only_new' && Daria.themeId === '3pane') {
        Jane.Page.params.no_clear_reads = true;
    }
    return true;
});

Jane.Actions.create('mail.message.show-or-select', function(o) {
    var activeTable = Daria.Table.active;
    var event = o.event;
    var $curTarget = $(event.currentTarget);

    // Навигация с клавиатуры
    // Обработка должна сработать, лишь когда была вызвана компонентой Table
    // @see https://jira.yandex-team.ru/browse/DARIA-38179
    if ($curTarget.hasClass('b-messages__message_focus') && o.event.tableOpenCurrent) {
        var $link = $curTarget.find('.b-messages__message__link');

        if ($link.length && $link[0].href) {
            return Daria.layout == '2pane' ? $link.trigger($.Event('click', {doGoToTicketAction: true})) : Jane.Page.go($link[0].href);
        }
    } else if (Daria.layout == '2pane') {
        return true;
    }

    // по двойному клику снимаем выделение и переходим в письмо
    if (event.type == 'dblclick') {
        var $target = $(o.event.target);
        var $closestAction = $target.closest('.daria-action, a');

        // это защита от двойных кликов по количеству писем в треде, метке и т.п.
        if (
            $closestAction[0] == o.event.currentTarget ||
            $closestAction.hasClass('b-messages__message__link')
        ) {
            var id = o.event.currentTarget.getAttribute('data-id');
            var hash = id.indexOf('t') === 0 ? 'thread/' + id.slice(1) : 'message/' + id;
            Daria.openNewWindow('?page=3pane-wnd#' + hash);
            return false;
        } else {
            return true;
        }

    } else {
        var isMac = navigator.platform.toLowerCase().indexOf('mac') > -1;
        // если shift или ctrl/cmd, то добавляем в выделение
        var shiftKey = o.event.shiftKey;
        var ctrlKey = (isMac && event.metaKey) || (!isMac && event.ctrlKey);
        if (shiftKey || ctrlKey) {
            // ctrl+click и нет текущего выделения
            if (Jane.watcher.get('selectedCount') === 0 && ctrlKey) {
                // выделяем текущее письмо и то, куда кликнули
                activeTable.selectCurrent();
            }
            activeTable.addToSelection(o.event);
        } else {

            // иначе сбрасываем выделение и открываем письмо
            activeTable.deselect();
        }
        // если не в selection-mode, то пропускам клик
        return !(shiftKey || ctrlKey);
    }
});

Jane.Actions.create('message.go-to-ticket', function(o) {
    var origMID = $(o.event.target).closest('.js-message').attr('data-id');
    if (origMID) {
        window.setTimeout(function() {
            Jane.Actions.run('mark', {
                'message-id': origMID
            });
        }, 500);
    }

    // Если это ссылка, то не обрабатываем переход, 
    // за исключением, когда обработка разрешена вызвавшим событие
    // @see https://jira.yandex-team.ru/browse/DARIA-38179
    if ($(o.event.target).closest('a')[0] && !o.event.doGoToTicketAction) {
        return true;
    }

    if (o.params.widget) {
        Jane.c('aviaeticket', 'widget' + o.params.widget, 'go-to-ticket', 'missed-click');
    }

    var p = $.extend({}, Jane.Page.params);
    p.ids = o.params.ids;
    p._page = 'message';

    if (o.event.ctrlKey || (o.event.metaKey && Modernizr.mac)) {
        window.open(Jane.Page.params2url(p), '_blank');
    } else {
        Jane.Page.go(Jane.Page.params2url(p));
    }
});

/* ../../actions/message/show.js end */

/* ../../actions/message/stop-waitforreply.js begin */
(function(/**Daria*/Daria) {

    Jane.Actions.add(
        new Daria.MessageAction("stop-waitforreply", function(o) {
            var waitforeplyLabelID = Jane.$H('labels').getLIDByName('remindme_threadabout:mark');
            if (waitforeplyLabelID) {
                Jane.Actions.run('unlabel', {
                    current_label: waitforeplyLabelID
                });
                $(o.event.target).closest('.b-notification').remove();
                return true;
            }
        })
    );

})(Daria);

/* ../../actions/message/stop-waitforreply.js end */

/* ../../actions/message/thread.js begin */
Jane.Actions
    .create('message.toggle', function(o) {
        Jane.$B('messages-box').getActive().openBody(o.params.ids, o.params.ignore);
    })
    .create('message.toolbar.open-dropdown', function(o) {
        var params = o.params;
        var $el = $(o.event.currentTarget);

        if ($el.hasClass('js-open-dropdown')) {
            Daria.Dropdown.closeCurrent();
            return;
        }

        var ids = {
            ids: [params['message-id']]
        };

        var bDropdown = Jane.Block.make(params.type + '-actions', {
            'current-message-id': params['message-id']
        });
        bDropdown.run({}, function() {
            showPopup();
        }, {
            'xsl-params': {
                // специально сделал необычное название, чтобы не пересечься
                'current-message-id': params['message-id']
            }
        });

        function showPopup() {
            var $node = $(bDropdown.getCacheNode());
            bDropdown.$dropdown = $node;

            Daria.Dropdown.toggle(null, {
                dropdown: $node,
                content: $node,
                handle: $(o.event.currentTarget)
            });

            bDropdown.onopen(ids);

            $el.addClass('js-open-dropdown');
            $node.on('b-mail-dropdown-close.message-toolbar', function() {
                $el.removeClass('js-open-dropdown');

                //он больше не нужен
                bDropdown.onhtmldestroy();
                $node
                    .off('.message-toolbar')
                    .remove()
                    .empty();
            });
        }
    })
    .create('message.thread.pager', function(o) {
        var loader = $('<div class="b-messages-loader"><img class="b-ico" src="//yastatic.net/lego/_/VOdUH6EmccJUJXLDoH3CwgIp7gA.gif" alt="" width="50"/></div>');
        var params = o.params;
        var handlers = [ 'messages', 'labels', 'folders', 'settings' ];
        var key = Jane.Block.getKey('message-thread', { thread_id: params.thread_id });

        $(o.event.currentTarget).parent().replaceWith(loader);

        Jane.Handler.getAll(handlers, params, function() {
            loader.remove();
            var boxActive = Jane.$B('messages-box').getActive();

            // пока грузим письма, можем перейти на другое письмо/тред и boxActive уже не торт
            if (boxActive && boxActive.key === key) {
                var next = Jane.tt('mail-common:message-thread-next', {
                    'page-params': params
                }, handlers, params);

                var hMessages = Jane.$H('messages').getCacheByParams(params);
                boxActive.appendMessages(next, hMessages);
            }
        });
    })
    .create('message.thread.nextunread', function() {
        Jane.$B('messages-box').getActive().srcollToNextUnread();
    });

/* ../../actions/message/thread.js end */

/* ../../actions/message/filter.js begin */
(function() {

    var M = 'Статуслайн для фильтров';

    var Stickyline = Daria.Stickyline;

    var hFolders = Jane.$H('folders');
    var hMessage = Jane.$H('message');
    var hSettings = Jane.$H('settings');

    var offSettingName = 'disable_move_filter';
    var stickylineName = 'message-filter-move';

    var modeName = 'statusline-create-filter-on-message-move';

    Actions
        .create('message.filter-move.show', function(o) {
            var mid = o.params.mid;
            var fid = o.params.fid;
            var folderName = hFolders.getFolderById(fid).name;
            var fromEmail = hMessage.getFromEmail(mid);

            if (hSettings.isSet(offSettingName)) {
                return;
            }

            Stickyline.showMsg({
                name: stickylineName,
                body: Jane.tt(
                    'mail-common:' + modeName,
                    {mid: mid, fid: fid, from: fromEmail, folder: folderName}
                ).innerHTML,
                body3: Jane.tt(
                    'mail-common:' + modeName + '-3pane',
                    {mid: mid, fid: fid, from: fromEmail, folder: folderName}
                ).innerHTML,
                onclose: function() {
                    Jane.c(M, 'Шаг 1', 'Крестик');
                }
            });

            Jane.c(M, 'Шаг 1', 'Показ');
        })
        .create('message.filter-move.create', function(o) {

            var mid = o.params.mid;
            var fid = o.params.fid;
            var fromEmail = hMessage.getFromEmail(mid);

            var setupFilterCreate = Daria.FilterSimpleCreate({
                validate: function() {
                    return true;
                },
                success: function(filid) {
                    var body = Jane.tt('mail-common:' + modeName + '-done', {
                        mid: mid,
                        from: fromEmail,
                        filid: filid,
                        'new-search': Jane.$H('settings').getSetting('search-version') >= '2014.03.14'
                    });

                    Stickyline.showMsg({
                        name: stickylineName,
                        body: body.innerHTML,
                        body3: Jane.tt(
                            'mail-common:' + modeName + '-done-3pane',
                            {mid: mid, from: fromEmail, filid: filid}
                        ).innerHTML,
                        onclose: function() {
                            Jane.c(M, 'Шаг 2', 'Крестик');
                        }
                    });

                    Jane.c(M, 'Шаг 2', 'Показ');
                },
                params: {
                    letter: 'all',
                    name: i18n('%Setup_Filters_default_rule_name'),
                    logic: 1,
                    field1: 'from',
                    field2: 1,
                    field3: fromEmail,
                    clicker: 'move',
                    move_folder: fid
                }
            });

            setupFilterCreate.create();

            Jane.c(M, 'Шаг 1', 'Перекладывать');
        })
        .create('message.filter-move.disable', function() {
            //hSettigns.setSettingOn(offSettingName);
            Stickyline.hide(stickylineName);

            Jane.c(M, 'Шаг 1', 'Не предлагать');
        })
        .create('message.filter-move.apply', function(o) {
            var filid = o.params.filid;

            Jane.Handler.doAll(['filters-apply'], {id: filid}, function(data) {
                var error = jpath(data, '/.handlers[.name == "filters-apply"].error.type')[0];

                if (!error) {
                    Stickyline.showMsg({
                        body: i18n('%Statusline_create_filter_on_message_move_done_applied'),
                        body3: i18n('%Statusline_create_filter_on_message_move_done_applied'),
                        onclose: function() {
                            Jane.c(M, 'Шаг 3', 'Крестик');
                        }
                    });

                    Jane.c(M, 'Шаг 3', 'Показ');
                }
            });

            Jane.c(M, 'Шаг 2', 'Переложить');
        })
        .create('message.filter-move.edit', function(o) {
            var filid = o.params.filid;

            Page.go('#setup/filters-create/id=' + filid);

            Jane.c(M, 'Шаг 2', 'Изменить правило');
        });

})();

/* ../../actions/message/filter.js end */

/* ../../actions/message/ignore.js begin */
Actions.add(new MessageAction('ignore', function(o) {
    var threadIds = $.merge([], o.ids.tids);
    var messageIds = o.ids.mids;
    var l = messageIds.length;
    var hMessage = Jane.$H('message');
    var hMessages = Jane.$H('messages');
    var hLabels = Jane.$H('labels');
    var ignoreName = 'ignore_thisthread:mark';
    var ignoreLID = hLabels.getLIDByName(ignoreName);
    var btAction = o.action;
    var action = btAction === 'ignore' ? 'do-label' : 'do-unlabel';
    var messageAction = btAction === 'ignore' ? 'label' : 'unlabel';
    var dfdLabel = $.Deferred();
    var dfdIgnore = $.Deferred();

    while (l--) {
        var m = hMessage.getCache(messageIds[l]);
        threadIds.push(m.tid);
    }

    threadIds = _.uniq(threadIds);

    if (ignoreLID) {
        dfdLabel.resolve();

    } else {
        Jane.Handler.doAll(['do-labels-add', 'labels'], {
            label_name: ignoreName,
            label_type: 'threadWide'
        }, function(data) {
            ignoreLID = jpath(data, '.handlers[.name == "do-labels-add"].data.body.updated')[0];
            if (ignoreLID) {
                dfdLabel.resolve();
            } else {
                dfdLabel.reject();
            }
        });
    }

    dfdLabel.done(function() {
        Jane.Handler.doAll([action/*, 'labels', 'messages'*/], {
            lid: ignoreLID,
            tids: threadIds
        //    thread_id: threadIds
        }, function(data, errors) {
            if ($.isEmptyObject(errors)) {
                dfdIgnore.resolve();
            } else {
                dfdIgnore.reject();
            }
        });
    });

    dfdLabel.fail(function() {
        dfdIgnore.reject();
    });


    dfdIgnore.done(function() {
        $.each(threadIds, function(i, tid) {
            hMessage[messageAction]('t' + tid, {current_label: ignoreLID});
        });

        hMessages.doActionInThread(threadIds, {current_label: ignoreLID}, messageAction);

        $.each(o.ids.mids, function(i, mid) {
            hMessage[messageAction](mid, {current_label: ignoreLID});
        });

        // действие прямое и обратное, вочер отслеживает факт выполнения действия, поэтому по направлению не делится
        // действие указывается в параметра
        Jane.watcher.set('actions-message-ignore', btAction, {force: true});
    });


}));

Actions.copy('ignore', 'unignore');

/* ../../actions/message/ignore.js end */

/* ../../actions/message/archive.js begin */
Actions.add(new MessageAction('archive', function(o) {

    var action = o.action;
    var dfd = Jane.$H('folders').createArchiveFolder();

    dfd.fail(function() {
        Daria.Statusline.showMsg({
            name: 'message-' + action,
            speed: 'fast',
            body: i18n('%Message_Archive_Msg_Error1'),
            body3: i18n('%3pane_Message_Archive_Msg_Error1')
        });
    });

    dfd.done(function(fid) {
        // обновление списка папок
        Jane.$B('folders').run();

        // текущая папка или папка сообщения
        var current = Jane.Page.params.current_folder ||
            (Jane.Page.params.ids && Jane.$H('message').getFolderId(Jane.Page.params.ids));

        // текущая папка архивная
        if (current && current == fid) {
            Daria.Statusline.showMsg({
                name: 'message-' + action,
                speed: 'fast',
                body: i18n('%Message_Archive_Msg_Error2'),
                body3: i18n('%3pane_Message_Archive_Msg_Error2')
            });

            return;
        }

        // завершение перемещения и установка вочера события архивирования
        // по данному вочеру обрабатывается активность кнопки тулбара
        var complete = Jane.events.bind('message.action.complete', function() {
            Jane.events.unbind('message.action.complete', complete);
            // принудительный пересчет признаков its-spam и др.
            Jane.watcher.set('pageKey', Jane.watcher.get('pageKey'), {force: true});
            Jane.watcher.set('actions-message-archive', true, {force: true});
        });

        Jane.Actions.get('move').run($.extend(true, {}, o, {
            action: 'move',
            params: {
                fid: fid,
                originalAction: 'archive'
            }
        }));
    });
}));

/* ../../actions/message/archive.js end */

/* ../../actions/message/infolder.js begin */
Actions.add(new MessageAction('infolder', function(o) {

    var params = o.params;
    var buttonId = params['toolbar.button'];
    var bToolbar = Jane.$B('toolbar-box').getActive();
    var bSettings = bToolbar.toolbar.settings && bToolbar.toolbar.settings.get(buttonId);
    var moveFolderId = bSettings && bSettings.settings && bSettings.settings.folder;

    if (!moveFolderId) {
        return;
    }

    // завершение перемещения и установка вочера события архивирования
    // по данному вочеру обрабатывается активность кнопки тулбара
    var complete = Jane.events.bind('message.action.complete', function() {
        Jane.events.unbind('message.action.complete', complete);
        // принудительный пересчет признаков its-spam и др.
        Jane.watcher.set('pageKey', Jane.watcher.get('pageKey'), {force: true});
        Jane.watcher.set('actions-message-infolder', true, {force: true});
    });

    Jane.Actions.get('move').run($.extend(true, {}, o, {
        action: 'move',
        params: {
            fid: moveFolderId,
            originalAction: 'infolder'
        }
    }));
}));

/* ../../actions/message/infolder.js end */


/* ../../actions/translate/translate.js begin */
// Контекстное меню
Actions.add(
    new Action(
        "translate.menu",
        function(o) {
            var target = o.event.currentTarget;
            var dropdown = $(target).closest(".b-mail-dropdown");
            var params = o.params;
            var mode = o.params.mode || "message";

            // Все языки
            var langs = Daria.Translate.langs["all"];

            // Меню выбора, на какой язык переводим
            if (params.dir === "to") {
                // Выбираем языки, которые подходят для перевода
                langs = Daria.Translate.langs[Daria.Translate.getLang(mode)[0]];
            }

            if (!dropdown.data('dropdown-content')) {
                var menu_content = Jane.tt("mail-common:translate-dropdown", { dir: params.dir, langs: langs });
                dropdown.append(menu_content);
            }

            Actions.run("dropdown.toggle", o.event);

            Jane.c(71105, 'msg.click.select' + params.dir);
        }
    )
);

Actions.add(
    new Action(
        "translate",
        function(o) {
            var params = o.params;
            var mode = params.mode;
            var $infoline = $(o.event.currentTarget).closest(".b-notification");

            $infoline.addClass("b-notification_thinking");

            if (mode === "message") {
                var bMessageBody = Jane.Block.getInstance(o.event.target, 'message-body');
                var messageBodyNode = bMessageBody.cache.node;
                var $body = $(".b-message-body__content", messageBodyNode);

                var langs = Daria.Translate.getLang(params.mode);
                var body = $body.html();
                var subject = jpath(Jane.$H('message').getCacheByParams({ids: bMessageBody.hKeys['message'].key}), ".subject")[0];

                var startTime = new Date().getTime();

                Daria.Translate.translate(
                    langs[0],
                    langs[1],
                    [subject, body],
                    function(res) {
                        var mid = Daria.Page.params.ids;
                        var duration = (new Date().getTime() - startTime) / 1000;

                        // Логируем время, которое занял перевод (DARIA-9438)
                        Jane.ErrorLog.send({
                            event: "translate",
                            duration: duration,
                            langs: langs[0] + '-' + langs[1],
                            mid: mid
                        });

                        var node = Jane.$B("messages-box").active.cache.node;
                        var $subject = $(".js-message-subject", node);
                        $subject.text(res[0]);

                        $body.html(res[1]);

                        if (!Daria.Translate.getCache(mid)) {
                            Daria.Translate.setCache(mid, [subject, body]);
                        }
                        Daria.Translate.showInfolineDone(langs[0], langs[1]);
                        $infoline.removeClass("b-notification_thinking");
                    },
                    function() {
                        $infoline.removeClass("b-notification_thinking");
                        Daria.Dialog.notice({
                            body: i18n('%Translate_Fail'),
                            width: 350
                        });
                        Jane.c(71105, 'msg.click.error');
                        Jane.ErrorLog.send(
                            {
                                errorType: "translateError",
                                mid: Daria.Page.params.ids
                            }
                        );
                    }
                );

                Jane.c(71105, 'msg.click.go');
            }

            return true;
        }
    )
);

Actions.add(
    new Action(
        "translate.show-infoline",
        function() {
            var node = Jane.$B("messages-box").active.cache.node;
            var $cont = $(".b-message-body__content", node);
            var text = $cont.html();

            if (text.length < 200000) {
                Daria.Translate.showInfoline(node, true);
            } else {
                Daria.Dialog.notice({
                    body: i18n('%Translate_Message_Too_Long'),
                    width: 350
                });
            }

            $(document).trigger("b-mail-dropdown-closeall");

            Jane.c({ 'Просмотр письма': { 'Развернутая шапка': 'клик по "Перевести"' } });

            return false;

        }
    )
);

Actions.add(
    new Action(
        "translate.choose-lang-dropdown",
        function(o) {
            var params = o.params;
            var $target = $(o.event.currentTarget);
            var dropdown = $target
                .closest(".b-mail-dropdown__box__content")
                .data("dropdown-handle");

            // Ручка, открывающая дропдаун
            var $handle = $(dropdown).find(".b-mail-dropdown__handle");
            var dropdownParams = Jane.Actions.getParams($handle[0]);
            var mode = dropdownParams.mode || "message";

            $handle.text(o.params.langl);

            // Убираем аттрибут выделенности со всех пунктов меню
            //$target.closest(".b-mail-dropdown__box__content")
            //    .find(".b-mail-dropdown__item")
            //    .removeClass("b-mail-dropdown__item_selected");

            // Выделяем нужный пункт меню
            //$target.closest(".b-mail-dropdown__item")
            //    .addClass("b-mail-dropdown__item_selected");

            // Обновляем в выпадушке параметр lang

            dropdownParams['lang'] = params.lang;
            $handle.attr('data-params', $.param(dropdownParams));

            // Если язык поменяли в выборе from, то надо перерисовать выпадушку to
            if (params.dir === "from") {
                Daria.Translate.updateMenu(params.lang, mode);
            }

            $(document).trigger("b-mail-dropdown-closeall");

            if (mode === "compose") {
                Jane.c({ "Compose-Translate": "Клик по " + params.lang });

                Jane.$B("compose").translate();
            }
        }
    )
);

// Закрытие инфолайна с предложением перевести
Actions.add(
    new Action(
        "translate.close-infoline",
        function(o) {
            $(o.event.currentTarget)
                .closest(".b-message-notification")
                .addClass("g-hidden");
        }
    )
);

Actions.add(
    new Action(
        "translate.revert",
        function() {
            Daria.Translate.revert();
            Jane.c(71105, 'msg.click.cancel');
        }
    )
);

/* ../../actions/translate/translate.js end */


/* ../../actions/messages/threaded.js begin */
Actions.add(
    new Action("messages.threaded", function() {
        var hSettings = Jane.$H("settings");
        if (hSettings.isThreaded()) {
            hSettings.threadedOff();
        } else {
            hSettings.threadedOn();
        }
        var params = $.extend({}, Page.params);
        delete params['page_number'];
        var url = Page.params2url(params);
        Page.go(url);
    })
);


/* ../../actions/messages/threaded.js end */

/* ../../actions/messages/deselect.js begin */
Actions.add(
    new Action("messages.deselect", function() {
        $(document).trigger("b-mail-dropdown-closeall"); // Закрываем дропдаун
        var bMessagesListBox = Jane.$B("messages-list-box");
        var table = bMessagesListBox && bMessagesListBox.active && bMessagesListBox.active.table;
        if (table) {
            table.deselect();
        }
    })
);

Actions.add(
    new Action('messages.select-all', function(o) {
        var bMessagesBox = Jane.$B('messages-list-box');
        var table = bMessagesBox && bMessagesBox.active && bMessagesBox.active.table;
        if (table) {
            // DARIA-3172 - В mail-ya-team предлагать пометить все письма прочитанными
            // чтобы чекбоксикик ставились, когда кликаем по ссылке
            if (o.params.force) {
                table.toggleSelectAll();
            }

            table.updateFolderActionsMode(true);
        }
    })
);

Actions.add(
    new Action('messages.warning', function() {
        if ((Daria.Page.type === 'messages' || Daria.Page.type == 'ppyrus') && Jane.watcher.get('selectedCount') === 0) {
            MessageAction.warning();
        }
    })
);

/* ../../actions/messages/deselect.js end */

/* ../../actions/messages/next.js begin */
Actions.add(
    new Action("messages.next", function(o) {

        var active = Jane.$B("messages-list-box").active;
        if (!active) { return; }

        var node = active.getCacheNode();
        if (!node) { return; }

        var action = o.action;
        var className = (action === 'messages.next') ? 'b-pager__next' : 'b-pager__prev';
        var link = node.getElementsByClassName(className)[0];
        if (!link) { return; }

        var href = link.href;
        if (!href) { return; }

        Page.go(href);
    })
);

Actions.copy("messages.next", "messages.prev");


/* ../../actions/messages/next.js end */

/* ../../actions/messages/message-attachments.js begin */
(function() {
    var ATTACH_WIDTH = 102;

    Actions.create('messages.show-attachments', function(o) {
        var mid = o.params.mid;

        if (Daria.Dialog.isOpen() &&
            Daria.Dialog.params.name === 'inbox-attachments-popup' &&
            Daria.Dialog.params.mid === mid) {
            Daria.Dialog.close();
            return;
        }

        Jane.c('Аттачи в списке писем', 'Ссылка с количеством файлов', 'Клик');

        var $tailTarget = $(o.event.currentTarget);
        var $message = $tailTarget.closest('.b-messages__message');

        if (Daria.layout === '2pane') {
            $tailTarget = $tailTarget.add($tailTarget.find('span:visible, i:visible, a:visible')).last();

            // В опере неверно рассчитывается .offset()
            // DARIA-36807
            if (Modernizr.opera) {
                $tailTarget = $tailTarget.closest('.daria-action');
            }

        } else {
            $tailTarget = $tailTarget.closest('.b-mail-dropdown');
        }
        var inboxState = calcInboxPreviews($message);

        Daria.Dialog.open({
            name: 'inbox-attachments-popup',
            body: $('<div class="b-messages__attachments__popup__inner_init">')[0],
            width: 242,
            mid: mid,
            onTarget: {
                target: $tailTarget[0],
                side: 'top',
                pos: (Daria.layout === '3pane-vertical') ? 'left' : 'right'
            },
            additionalClass: 'b-messages__attachments__popup',
            inboxMessageState: inboxState,
            previousDocumentSize: {
                width: $(document).width(),
                height: $(document).height()
            },
            logArrowClick: Jane.c.bind(Jane, 'Аттачи в списке писем', 'Баббл', 'Клик по стрелочкам'),
            delayedIndicatorTimer: 0,
            onopen: onDialogOpen,
            onclose: onDialogClose,
            bindEvents: bindEvents,
            updateSlider: updateSlider,
            shrinkFilenames: shrinkFilenames,
            checkPositionCollision: checkPositionCollision,
            createNavigationState: createNavigationState,
            bindImageLoading: bindImageLoading
        });
    });

    function calcInboxPreviews($message) {
        var $attachmentsContainer = $message.find('.b-messages__attachments');
        var allCount = $attachmentsContainer.data('attachmentscount');

        var state = {
            isShowAll: false,
            showCount: 0
        };

        if ($attachmentsContainer.is(':visible')) {
            var $previews = $attachmentsContainer.find('.b-file');
            if ($previews.length) {
                var pos = $previews.first().position().top;
                $previews.each(function() {
                    if ($(this).position().top === pos) {
                        state.showCount++;
                    } else {
                        return false;
                    }
                });
            }
            state.isShowAll = state.showCount === allCount;
        }
        return state;
    }

    function onDialogOpen() {
        this.$dialogRoot = $(this.body).closest('.b-messages__attachments__popup');

        this.checkPositionCollision();
        this.delayedIndicatorTimer = setTimeout(function() {
            $(this.body).addClass('b-messages__attachments__popup__inner_empty');
        }, 200);

        var idsParams = { ids: this.mid };
        Handler.getAll(['message-body'], idsParams, (function() {
            var message = Jane.$H('message').getCacheByParams(idsParams);
            var templateParams = {
                mid: this.mid,
                ids: this.mid,
                sumSize: message ? message.size : 0,
                smallMode: this.inboxMessageState.isShowAll,
                swapFirst: this.inboxMessageState.showCount
            };
            var body = Jane.tt('mail-common:messages-attachments-popup', templateParams, ['message-body'], idsParams);
            this.$body = $(body);

            if (this.$body.hasClass('js-no-attachments')) {
                Jane.ErrorLog.send({
                    attach: 'no-attach',
                    mid: this.mid
                });
            }

            this.createNavigationState();

            clearTimeout(this.delayedIndicatorTimer);
            this.previousDocumentSize = {
                width: $(document).width(),
                height: $(document).height()
            };

            $(this.body).replaceWith(body);

            this.bindImageLoading();

            this.checkPositionCollision(true);
            this.shrinkFilenames();
            this.bindEvents();
            this.updateSlider();

            // Ya.browser repaint hack (DARIA-30021)
            var that = this;
            Daria.setZeroTimeout(function() {
                that.$dialogRoot.css('background-color', 'white');
            });
        }).bind(this));
    }

    function createNavigationState() {
        var $body = this.$body;
        this.navigation = {
            common: {
                index: 0,
                count: $body.data('attachments-native-count'),
                $sliderBag: $body.find('.js-attachments-native .b-messages__attachments__popup__inner__slider__bag'),
                $buttonLeft: $body.find('.js-attachments-native .js-attachments-popup-left'),
                $buttonRight: $body.find('.js-attachments-native .js-attachments-popup-right')
            },
            disk: {
                index: 0,
                count: $body.data('attachments-disk-count'),
                $sliderBag: $body.find('.js-attachments-disk .b-messages__attachments__popup__inner__slider__bag'),
                $buttonLeft: $body.find('.js-attachments-disk .js-attachments-popup-left'),
                $buttonRight: $body.find('.js-attachments-disk .js-attachments-popup-right')
            }
        };
    }

    function checkPositionCollision(forceResize) {
        if (forceResize) {
            this.width = this.$dialogRoot.children('.b-popup__box').width();
            Daria.Dialog.position();
        }
        var $d = $(document);

        if (this.previousDocumentSize.height != null) {
            if (this.onTarget.side !== 'bottom') {
                if ($d.height() > this.previousDocumentSize.height && this.onTarget.side !== 'right') {
                    this.onTarget.side = 'right';
                    Daria.Dialog.position();

                }
                if ($d.height() > this.previousDocumentSize.height) {
                    this.onTarget.side = 'bottom';
                    Daria.Dialog.position();
                }
            }
            this.previousDocumentSize.height = null;
        }

        if (this.previousDocumentSize.width != null) {
            if ($d.width() > this.previousDocumentSize.width) {
                this.onTarget.pos = 'center';
                Daria.Dialog.position();
            }
            this.previousDocumentSize.width = null;
        }
    }

    function bindEvents() {
        var that = this;
        that.$body.on('click.attachments', '.js-attachments-popup-left', function() {
            var block = that.navigation[($(this).closest('.js-attachments-native').length ? 'common' : 'disk')];

            if (block.index > 0) {
                that.logArrowClick('Назад');
                block.index--;
                that.updateSlider();
            }
        }).on('click.attachments', '.js-attachments-popup-right', function() {
            var block = that.navigation[($(this).closest('.js-attachments-native').length ? 'common' : 'disk')];

            if (block.index < block.count - 5) {
                that.logArrowClick('Вперёд');
                block.index++;
                that.updateSlider();
            }
        }).on('click.attachments', '.js-attachments-native .b-file', function() {
            Jane.c('Аттачи в списке писем', 'Баббл', 'Клик по превьюшке');
        }).on('click.attachments', '.js-attachments-disk .b-file', function() {
            Jane.c('Аттачи в списке писем', 'Баббл', 'Клик по превьюшке (Диск)');
        });
    }

    function updateSlider() {
        var that = this;
        $.each(['common', 'disk'], function() {
            var block = that.navigation[this];

            block.$sliderBag.css('left', -block.index * ATTACH_WIDTH);
            block.$buttonLeft.add(block.$buttonRight).removeClass('b-messages__attachments__popup__inner__button_disabled');

            if (block.count <= 5) {
                block.$buttonRight.add(block.$buttonLeft).addClass('b-messages__attachments__popup__inner__button_disabled');
            } else {
                if (block.index === 0) {
                    block.$buttonLeft.addClass('b-messages__attachments__popup__inner__button_disabled');
                } else if (block.index === block.count - 5) {
                    block.$buttonRight.addClass('b-messages__attachments__popup__inner__button_disabled');
                }
            }
        });
    }

    function shrinkFilenames() {
        this.$body.find('.b-shrinker').each(function() {
            var $shrinker = $(this);
            var extWidth = $shrinker.find('.b-file__extension').width();
            $shrinker.css('margin-right', extWidth);
        });
    }

    function bindImageLoading() {
        this.$body.find('.b-file__pic__image').not('.b-file__pic_player .b-file__pic__image')
            .on('load.imgloader error.imgloader', function(e) {
                $(this).off('.imgloader');
                if (e.type === 'load') {
                    Block.Messages.resizeAttachmentPreviewImage.call(this);
                }
            });
    }

    function onDialogClose() {
        clearTimeout(this.delayedIndicatorTimer);
        $(this.body).off('.attachments');
    }

})();

/* ../../actions/messages/message-attachments.js end */

/* ../../actions/messages/message-search.js begin */
// DARIA-8248
Jane.Actions.create("messages.metrika-search", function(o) {
    if ( Daria.Page.params.search ) {
        Jane.c([ "Search", "Click", o.params.type ]);
    }

    return true;
});

/* ../../actions/messages/message-search.js end */

/* ../../actions/messages/load.js begin */
/**
 * Экшен загружает порцию писем и вставляет его под списком уже загруженных писем
 */

Actions.add(
new Action('messages.load', function(o) {
    var messagesBlock = Jane.$B('messages-list-box').getActive();
    var pageInfo = Jane.$H('messages').getPageInfo(messagesBlock.params);
    var messagesData = Jane.$H('messages').getCacheByPageParams();
    var params = $.extend({}, messagesBlock.params);
    var product = 'BIG';
    var isSearch = (params.search == 'yes');
    if (Daria.Config.PDD.domain) {
        product = 'PDD';
    } else if (Daria.IS_CORP) {
        product = 'CORP';
    }
    if (isSearch) {
        // clck.yandex.ru/redir/dtype=PS/r=test/project=search_mail/product=CORP/type=pager/reqid=12123123/user=1231231/page=2/
        Daria.counterClick('pagerClick', encodeURIComponent(messagesData.details['search-options'].request), 'search_mail', product, 'pager', messagesData.details.reqid, Daria.uid, pageInfo.current);
    }
    // XXX
    // Проблема c onsetcache in messages handler, этот
    // метод вызвается даже если run был прерван
    // поэтому в pageInfo устанавливается не верный номер
    // следующей страницы. Т.е. данные пришли а в блок не вставились.
    var nextPage = this.nextPage || pageInfo.next;

    if (nextPage && !this.loading) {
        this.loading = true;
        var node = messagesBlock.getCacheNode();
        var pagerClass = isSearch ? '.js-pager-cont' : '.js-date-pager-cont';
        var $cont = $(pagerClass, node);

        params.page_number = nextPage;

        // Логируем нажатия кнопки Ещё
        if (o.event && !isSearch) {
            Jane.c({
                "Пейджер по датам": "Клик на кнопку Ещё " + (nextPage - 1)
            });
        }

        var newBlock = Block.make("messages-wrap", params);

        var that = this;
        newBlock.run(params, function() {
            // На второй странице выдачи показываем поиск
            if (params.page_number === 2 && $cont && !isSearch) {
                $cont.removeClass("b-messages__nosearch");
                Jane.c(["Пейджер по датам", "Показ поисковой строки"]);
            }

            // Вставляем блок в список писем
            var newNode = newBlock.getCacheNode();
            $(node).find('.block-messages-wrap:last').after(newNode);

            // Запоминаем блок в блоке messages
            messagesBlock.childBlocks.push(newBlock);

            // Обновляем список писем
            messagesBlock.table.update();

            // Вызываем callback (используется при начальной подгрузке сообщений)
            if (o.params.callback) {
                o.params.callback();
            }

            that.loading = false;
            that.nextPage = null;

            if (!isSearch) {
                Jane.events.trigger("messages-date-pager.updateVisibility");
            }

            // Убираем кнопку "Еще письма" если закончились результаты поиска
            if (isSearch && !pageInfo.next) {
                $cont.addClass('b-messages_all-loaded');
            }
        }, {
            loader: new Jane.Loader({
                start: function() {
                    $cont.addClass("b-messages__loading");
                },
                stop: function() {
                    $cont.removeClass("b-messages__loading");
                }
            }, 0),
            // Subscribe on run abort
            onerror: function() {
                that.nextPage = nextPage;
                that.loading = false;
            }
        });
    }
}));

/* ../../actions/messages/load.js end */

/* ../../actions/messages/messages-pager.js begin */
/**
 * Показывает попап с пейджером по датам
 */

Actions.add(
    new Action(
        "messages-pager.show-pager-top",
        function(o) {
            var $button = $(o.event.currentTarget);
            // если уже есть открытый попап, то закрываем его
            if ($button.data('popup')) {
                Daria.Dialog.close();
                setPopupInfo();
                return;
            }

            Jane.c(["Пейджер по датам", "Открытие верхнего пейджера"]);

            var params = $.extend({}, Daria.Page.params);

            // Нам нужен пейджер в сокращенной форме
            params.pager_top = "yes";

            var block = Block.make("messages-date-pager", params);
            block.run(
                params,
                function() {
                    var MAX_WIDTH = 720;

                    $button.data('popup', true);
                    var body = block.getCache().node;
                    var $body = $(body);

                    var buttonPos = $button.offset();
                    var buttonHeight = $button.height();
                    var buttonWidth = $button.width();

                    var pos = $button.closest('.b-layout__inner').offset();

                    // Координаты попапа
                    var x;
                    var y = buttonPos.top + buttonHeight - $(window).scrollTop();

                    // чтобы посчитать ширину пейджера, вставляем его невидимым в dom
                    var pagerWidth = $body.addClass('g-invisible').appendTo('body')
                        // прямо от body width() взять не получается из-за IE < 9
                        .find('.js-messages-pager-scroll').width();

                    $body.removeClass('g-invisible');
                    if (pagerWidth < MAX_WIDTH) {
                        // равняем попап по середине кнопки
                        x = Math.floor(buttonPos.left + buttonWidth / 2 - (pagerWidth + 30) / 2);
                        // не уходим за левый край списка писем
                        if (x < pos.left) {
                            x = pos.left;
                        }

                    } else {
                        pagerWidth = MAX_WIDTH;
                        x = pos.left;
                    }

                    $body.width(pagerWidth);

                    Daria.Dialog.open({
                        body: body,
                        onTarget: {
                            x: x,
                            y: y,
                            side: "bottom",
                            needTail: false
                        },
                        width: pagerWidth + /*b-popup padding*/30,
                        onclose: setPopupInfo,
                        oncancel: setPopupInfo
                    });
                }
            );

            function setPopupInfo() {
                $button.data('popup', false);
            }
        }
    )
);

/* ../../actions/messages/messages-pager.js end */


/* ../../actions/thread/toggle.js begin */
Actions.add(
    new Action("thread.toggle", function(o) {
        var THREAD_OPENED_CLASS = 'b-messages__message_thread-open';
        var messages = Jane.$B("messages-list-box").getActive();
        var table = messages.table;
        var params = o.params;
        var id = params["thread_id"];

        /*if (!o.event) { // если нет event, то значит надо открывать тред в режиме preview (2 первых письма)
         params._thread_preview = 'true';
         }*/

        var target = o.event.currentTarget;
        /*if (o.event) {
            target = o.event.currentTarget;
        } else {
            // может прийти открытие треда для не текущий папки
            target = table.getRow(id);
            if (target) {
                target = target.tr;
            } else {
                return;
            }
        }*/

        var $row = $(target).closest(".b-messages__message");
        var $toggleIcon = $row.find(".b-messages__thread-count > .b-mail-icon_pseudo");

        var threadId = 't' + id;
        var thread = messages.getThreadBlock(threadId);
        if (!thread) { // Тред еще не существует в DOM'е.

            // aandrosov: folder_id не нужен, а только сплитит кэш
            // Пробрасываем текущую папку, если она есть.
            /*if (Page.params.current_folder) {
                params.current_folder = Page.params.current_folder;
            }*/

            // Явный лоадер нужен затем, чтобы его можно было выключить в Run.stop(), если вдруг стартовал другой run.
            var loader = {
                start: function() {
                    $toggleIcon.addClass('b-mail-icon_arrow_loading');
                },
                stop: function() {
                    $toggleIcon.removeClass('b-mail-icon_arrow_loading');
                }
            };

            /**
             * @type Jane.Block
             */
            var threadBlock = Block.make("thread", params);
            thread = {
                block: threadBlock
            };
            messages.addThreadBlock(threadId, $row.closest('.block-messages-wrap')[0], thread);

            threadBlock.run(params, function() {
                var cacheNode = threadBlock.getCacheNode();
                if (!cacheNode) {
                    messages.removeThreadBlock(threadId);
                    return;
                }
                var $threadBox = $('<div class="block-thread-box b-messages__thread js-thread-box" style="display: none"></div>'); // Нода, содержащая в себе все ноды страниц треда и "пейджер".
                var $node = $(cacheNode);

                $threadBox.append($node);
                $row.after($threadBox).addClass(THREAD_OPENED_CLASS);

                table.updateRows(); // Пересчитываем список видимых писем в гриде.

                // Сохраняем информацию о свежедобавленном треде: ссылку на его ноду и открыт/закрыт.
                thread['$box'] = $threadBox;
                thread['open'] = true;

                $threadBox.slideDown('fast');

                Daria.SocialAvatarsMessages($node[0], params);

                Jane.events.trigger("messages-date-pager.updateVisibility");

            }, {
                parallel: true,
                loader: loader,
                // current_folder нужен, чтобы напротив писем рисовать папку, если они не в текущей
                // для запроса он не нужен, поэтому прокидываем его только в XSL
                "xsl-params": {
                    current_folder: Page.params.current_folder
                },
                onerror: function() {
                    messages.removeThreadBlock(threadId);
                }
            });

        } else { // Тред уже есть, нужно лишь его спрятать или показать.

            // если нет open, то тред уже запросили, но еще не отрисовали
            if (!('open' in thread)) {
                return;
            }

            if (thread.open) {
                thread.open = false;
                thread.$box.slideUp('fast', function() {
                    if (Daria.layout === '2pane') {
                        table.moveCurrentToRoot();
                    }
                    /*
                    else {
                        table.moveCurrentTo(threadId, false, Daria.Table.DENY);
                    }
                    */
                });
            } else {
                thread.open = true;
                /*var callback = (Daria.layout === '2pane') ? null : function() {
                    table.moveCurrentTo(thread.lastMsgId, false);
                };
                thread.$box.slideDown('fast', callback);*/
                thread.$box.slideDown('fast');
            }

            $row.toggleClass(THREAD_OPENED_CLASS, thread.open);
            //$toggleIcon.toggleClass('b-mail-icon_rarr', !thread.open).toggleClass('b-mail-icon_barr', thread.open);

            table.updateRows(); // Пересчитываем список видимых писем в гриде.

            Jane.events.trigger("messages-date-pager.updateVisibility");

        }
    })
);

/* ../../actions/thread/toggle.js end */

/* ../../actions/thread/pager.js begin */
Actions.add(
    // открывает весь тред после предзагрузки
    new Action("thread.close-preview", function(o) {
        var $target = $(o.event.target);
        var $thread = $target.closest('.block-thread');
        $thread.find('.b-messages__message, .b-messages__thread-more').removeClass('g-hidden');
        $target.closest('.b-messages__thread-more').remove();
    })
);


Actions.add(
    new Action("thread.pager", function(o) {

        var params = o.params;

        var messages = Jane.$B("messages-list-box").active;
        var thread = messages.getThreadBlock('t' + params["thread_id"]);
        var $threadBox = thread.$box;

        var $more = $threadBox.find(".b-messages__thread-more");

        // aandrosov: folder_id не нужен, а только сплитит кэш
        // Пробрасываем текущую папку, если она есть.
        /*if (Page.params.current_folder) {
            params.current_folder = Page.params.current_folder;
        }*/

        var threadBlock = Block.make("thread", params);

        threadBlock.run(params, function() {
            var $node = $(threadBlock.getCache().node);

            $more.remove();
            $threadBox.find(".block-thread:last").after($node); // Ищем последнюю страницу в треде.

            messages.table.updateRows(); // Пересчитываем список видимых писем в гриде.

            Daria.SocialAvatarsMessages($node[0], params);

        }, {
            // current_folder нужен, чтобы напротив писем рисовать папку, если они не в текущей
            // для запроса он не нужен, поэтому прокидываем его только в XSL
            'xsl-params': {
                current_folder: Page.params.current_folder
            }
        });
    })
);


/* ../../actions/thread/pager.js end */

/* ../../actions/thread/ignore.js begin */
(function() {

    var M = 'Статуслайн игнорирования треда';
    var ignoreName = 'ignore_thisthread:mark';
    var disableName = 'ignore_thisthread:disable';

    Actions
        .create('thread.ignore.show', function(o) {
            Daria.Stickyline.showMsg({
                body: Jane.tt('mail-common:statusline-ignore-this-thread', {tid: o.params.tid}).innerHTML,
                body3: Jane.tt('mail-common:statusline-ignore-this-thread-3pane', {tid: o.params.tid, layout: '2pane'}).innerHTML,
                onclose: function() {
                    Jane.c(M, 'Крестик');
                }
            });

            Jane.c(M, 'Показ');
        })
        .create('thread.ignore.on', function(o) {
            var tid = o.params.tid;
            var hLabels = Jane.$H('labels');
            var labelName = o.action === 'thread.ignore.on' ? ignoreName : disableName;
            var ignoreLID = hLabels.getLIDByName(labelName);

            var mark = function(lid) {
                Jane.Handler.doAll(
                    [ 'do-label', 'labels', 'messages' ],
                    {
                        lid: lid,
                        tids: tid,
                        thread_id: tid
                    },
                    function() {
                        Jane.$H('message').label('t' + tid, {current_label: lid});
                        // нужно будет перерисовать треды, даже если они уже отрисованы
                        if (Daria.layout !== '2pane') {
                            Jane.$B('message-thread').invalidate();
                        }
                    }
                );
            };

            if (ignoreLID) {
                mark(ignoreLID);

                // если такой системной метки ещё нет - создадим её
            } else {
                Jane.Handler.doAll(
                    ['do-labels-add', 'labels'],
                    {label_name: labelName, label_type: 'threadWide'},
                    function(data) {
                        var lid = jpath(data, '.handlers[.name == "do-labels-add"].data.body.updated')[0];
                        if (lid) {
                            mark(lid);
                        }
                    }
                );
            }

            if (o.action === 'thread.ignore.on') {
                Jane.c(M, 'Игнорировать');
            } else {
                Jane.c(M, 'Не предлагать');
            }
        })
        .create('thread.ignore.off', function(o) {
            var tid = o.params.tid;
            var hLabels = Jane.$H('labels');
            var ignoreLID = hLabels.getLIDByName(ignoreName);
            var target = $(o.event.currentTarget);

            Jane.Handler.doAll(['do-unlabel', 'labels', 'messages'], {tids: tid, lid: ignoreLID, thread_id: tid}, function(data) {
                if (jpath(data, '.handlers[.name == "do-unlabel"].data.affected')[0] == 1) {
                    Jane.$H('message').unlabel('t' + tid, {current_label: ignoreLID});

                    if (Daria.layout == '2pane') {
                        target.closest('.b-message-notification_ignorethread').remove();
                    } else {
                        target.closest('.block-message-thread').find('.b-message-notification_ignorethread').remove();
                    }
                }
            });

            Jane.c(M, 'Отменить');

        })
        .copy('thread.ignore.on', 'thread.ignore.disable');

})();

/* ../../actions/thread/ignore.js end */


/* ../../actions/compose/go.js begin */
Actions.add(
new Action("compose.go", function(o) {
    var is3paneCopmoseinNewWindow; // открытие композа в новом окне в 3pane
    var composeBlock = Jane.$B("compose");
    var hash = "#compose";
    var params = o.params || {};
    if (params.tab) {
        hash += '/tab=' + params.tab;
    }

    if (Page.type === 'compose') { // Если находимся в композе, то нужно вручную прочистить форму композа

        // Что-то еще переводим
        if (composeBlock.isTranslating) {
            Actions.run("compose.translate-revert");
        }

        var resetCompose = function() {
            if (!params.restore) {
                composeBlock.reset();
            }

            //надо перейти в #compose, т.к. возможно наш урл уже #compose/12345
            Page.go(hash, function() {
                composeBlock.open(params);
            }, {
                ignoreUnsavedDraft: true
            });
        };

        //force-означает не реагировать на несохраненные изменения в композе
        if (!params.force && Daria.unsavedCompose()) { // если есть несохранненные изменения
            Daria.showUnsavedComposeDialog({
                'yes': function() {
                    Daria.Dialog.close();
                    // мы, конечно, попытаемся сохранить черновик...
                    // но обработать ошибки всё равно не сможем
                    composeBlock.save({
                        dontReplace: true
                    });
                    resetCompose();
                },
                'no': function() {
                    Daria.Dialog.close();
                    resetCompose();
                }
            });
        } else {
            resetCompose();
        }
    } else {
        // если есть params.to на странице контактов, то это вызов из карточки
        if (Page.type === 'contacts' && !params.to) {
            // Если находимся в АК, то кладем заселекченные контакты в Daria.composeParams
            Daria.composeParams = Jane.Block.Abook.getContactsBlock().selectedToString();
        } else {
            // Засовываем параметры для композа в Daria.composeParams. При открытии композ смотрит в Daria.composeParams.
            // Например, чтобы открыть композ с заполненным полем "Кому", нужно сохранить в Daria.composeParams свойство to.
            // <a class="daria-action" action="compose.go" params="to=stepan@yandex-team.ru">
            Daria.composeParams = params;
        }
        if (params.type === 'new') {
            is3paneCopmoseinNewWindow = true;
        } else {
            is3paneCopmoseinNewWindow = Daria.layout === '2pane' ? false : Boolean(Jane.$H('settings').getSetting('compose-in-window'));
        }
        Daria.composeGo(hash, is3paneCopmoseinNewWindow);
    }


    // FIXME: видимо временное решение
    if (params.metrika) {
        switch (params.metrika) {
        case 'mr-email':
            Jane.c('Карточка контакта', 'Клик по имейлу');
            break;
        case 'mr-compose':
            if (Page.type === 'contacts') {
                Block.Abook.Metrika.c('Карточка контакта', 'Клики', 'Написать письмо');
            } else {
                Jane.c('Карточка контакта', 'Написать письмо');
            }
            break;
        case 'mr-request':
            Jane.c('Карточка контакта', 'Запросить телефон');
            break;
        }
        delete params.metrika;
    } else if ('toolbar' in o.params && Page.type === 'contacts') {
        Block.Abook.Metrika.c('Тулбар', 'Клик Написать');
    }
}));

Actions.add(
new Action('compose.edit', function(o) {
    Daria.composeGo('#compose/' + o.params.ids);
}));

Actions.add(
new Action('compose.open', function(o) {
    var params = $.extend({}, o.params || {}, Jane.Page.params);
    var ids = params.ids;
    var query = [];
    var hash = '#compose';

    if (params.tab) {
        hash += '/tab=' + params.tab;
    }

    if (params.oper) {
        query.push('oper=' + params.oper);
    }

    if (params.ids) {
        // DARIA-19433
        ids = $.isArray(ids) ? ids.join('&ids=') : ids;
        query.push('ids=' + ids);
    }

    Daria.composeGo(hash + '/' + query.join('&'), true);
}));

/**
 * Переключение способа открытия композа в 3pane
 */
(function() {
    var popup;
    Jane.Actions.create('compose.toogle-openning', function() {
        popup = popup || nb.$block('.popup-openning-compose-type');
        popup.open({where: $('.js-toolbar-compose-arrow')[0]});
    });

    Jane.Actions.create('compose.toogle-openning-type', function(o) {
        popup = popup || nb.$block('.popup-openning-compose-type');
        $(popup.node).find('.item_selected_yes').removeClass('item_selected_yes');
        $(o.event.currentTarget).addClass('item_selected_yes');

        if (o.params.type === 'new') {
            Jane.$H('settings').setSettingOn('compose-in-window');
        } else {
            Jane.$H('settings').setSettingOff('compose-in-window');
        }
        Actions.run('compose.go', o.event, o.params);
        popup.close();
    });
})();

/* ../../actions/compose/go.js end */

/* ../../actions/compose/done.js begin */
Actions.add(
    new Action(
        'compose-done.groups-go-to-ak',
        function(o) {
            var promoDone = Daria.PromoComposeDone({}, {}, {});
            var promoGroup = promoDone.groups;
            var cids = promoGroup.getContactsCids(o.params.emails.split(','));
            var context = Jane.$B('compose-done').getCacheNode();
            var $preloaderElem = $('.js-group-promo-preloader', context);
            var $errorElem = $('.js-group-promo-error', context);
            $preloaderElem.removeClass('g-hidden');
            $errorElem.addClass('g-hidden');
            var buttonWant = nb.$block('.js-group-promo-button');
            if (buttonWant) {
                buttonWant.disable();
            }

            function goToAK() {
                var promoSection = Daria.uidEnds([5, 6, 7, 8, 9]) ? 'Аватары' : 'Адресаты';
                Jane.c(['Промо-групп', promoSection, 'переход в АК']);
                Page.go('#contacts', function() {
                    var bAbookContacts = Jane.Block.Abook.getContactsBlock();
                    bAbookContacts.removeAllFromSelected();
                    var cids = promoGroup.json.cids;
                    cids.forEach(bAbookContacts.addCidToSelected, bAbookContacts);
                    Jane.events.bind('abook-add-new-group', function() {
                        var tid = Daria.Page.params.tid;
                        var group = Jane.$H('abook-groups').getGroupByTid(tid);
                        Jane.c(['Промо-групп', promoSection, 'показ попапа_2']);

                        Daria.Dialog.open({
                            width: 630,
                            body: Jane.tt('mail-compose:promo-group-done-success', {group: group.title}),
                            additionalClass: 'group-promo-success-dialog'
                        });
                    });
                    function showFirstPopup() {
                        Jane.c(['Промо-групп', promoSection, 'показ попапа_1']);
                        Jane.events.bind('new-group-create', clickPromoGroupCreate);
                        function clickPromoGroupCreate() {
                            Jane.c(['Промо-групп', promoSection, 'клик на "создать"']);
                            Jane.events.unbind('new-group-create', clickPromoGroupCreate);
                            Jane.events.unbind('abook-new-group-show', showFirstPopup);
                        }
                    }
                    Jane.events.bind('abook-new-group-show', showFirstPopup);
                    Actions.run('abook-new-group.show');
                    $preloaderElem.addClass('g-hidden');
                    if (buttonWant) {
                        buttonWant.enable();
                    }
                });
            }
            cids.fail(function() {
                    $errorElem.removeClass('g-hidden');
                    $preloaderElem.addClass('g-hidden');
                    if (buttonWant) {
                        buttonWant.enable();
                    }
                }).done(goToAK);
        }
    )
);

Actions.add(
    new Action(
        "compose-done.stop-done-timer",
        function() {
            Jane.$B("compose-done").clearRedirectTimeout();
        }
    )
);

Actions.add(
    new Action(
        "compose-done.start-done-timer",
        function() {
            Jane.$B("compose-done").setRedirectTimeout();
        }
    )
);

// done со сменой тем оформления
(function() {
    function showPromoDialog(className) {
        var $target = $('.promo-themes');
        // не показываем в свернутом виде
        if ($target.is(':visible')) {
            Daria.Dialog.open({
                body: '<span style="font-size : 110%">' + i18n('%ThemesPromo') + '</span>',
                onTarget: {
                    target: $target,
                    pos: 'right',
                    side: 'top'
                },
                width: 250,
                additionalClass: className || 'b-popup_yellow'
            });
        }
    }

    Jane.Promo.add(
        {
            name: 'themes-promo',
            priority: 70,
            check: function() {
                return !!Daria.getCookie('show_themes_promo');
            },
            callback: function() {
                var promoCookie = Daria.getCookie('show_themes_promo');
                var isBlack;
                Daria.delCookie('show_themes_promo');
                isBlack = (promoCookie == 'bears' || promoCookie == 'zverushki' || promoCookie == 'seasons' || promoCookie == 'khl' || /^region_/.test(promoCookie));
                showPromoDialog(isBlack ? 'b-popup_black' : '');
            }
        }
    );

    // Экшен берет значение цветовой темы из кук и устанавливает её

    Actions.add(
        new Action(
            "compose-done.reset-color-scheme",
            function() {
                var hSettings = Jane.$H('settings');
                var color_scheme = Daria.getCookie("default_color_scheme");
                var old_color_scheme = hSettings.getSetting('color_scheme');

                if (color_scheme == old_color_scheme) {
                    return;
                }

                Daria.delCookie("default_color_scheme");
                Daria.setCookie("show_themes_promo", "yes", {duration: 1});

                Jane.c({"Done-Promo": "Вернуть всё как было"});

                hSettings.setSettings({ 'color_scheme': color_scheme }, function() {
                    document.location.reload();
                });
            }
        )
    );

    Actions.add(
        new Action("compose-done.check-color-scheme", function() {
            if (Daria.getCookie("default_color_scheme")) {
                Daria.delCookie("default_color_scheme");
                showPromoDialog();
            }
        })
    );
})();

// done с инвайтом на Яндекс.Почту
(function() {

    function getInviteText(domain) {
        var res;
        var phoneStr = Daria.Page.params.phonestr || '';

        // промо SMS
        if (phoneStr) {
            return i18n('%Compose_Done_Invite_TextSms');
        }

        switch (domain) {
        case 'hotmail.com':
        case 'hotmail.com.tr':
            res = i18n('%Compose_Done_Invite_Text1');
            break;

        case 'gmail.com':
            res = i18n('%Compose_Done_Invite_Text3');
            break;

        case 'mynet.com':
            res = i18n('%Compose_Done_Invite_Text4');
            break;

        default:
            res = i18n('%Compose_Done_Invite_Text2');
        }

        return res;
    }

    // Хэндлер для скрытия курсора, если текстария неактивна
    function hideCursorHandler() {
        if (this.getAttribute('readonly')) {
            this.blur();
        }
    }

    /**
     * Функция для дергания счетчиков
     */
    var inviteLog = function() {
        var args = Array.prototype.slice.call(arguments);

        if (Daria.Page.params.phonestr) {
            args.unshift('промо SMS', '"Пригласи друга" на done');
        } else {
            if (Daria.Dialog.params.inviteMetrika) {
                args.unshift(Daria.Dialog.params.inviteMetrika);
            }
            args.unshift('"Пригласи друга" на done');
        }

        Jane.c.apply(Jane, args);
    };

    // Изменить текст приглашения в Я.Почту
    Actions.add(
        new Action('compose-done.edit-invite', function(o) {
            var $editLink = $(o.event.target);
            var $editor = $editLink.closest('.b-popup__body').find('.js-editor');
            var cancelEdit = !!o.params.cancel;
            var domain = o.params.domain;

            // Меняем вид и поведение кнопки
            $editLink.attr('data-params', (cancelEdit ? null : 'cancel=1'))
                .text(cancelEdit ? i18n('%Редактировать') : i18n('%Отменить_изменения'));

            // Показываем/скрываем поле редактирования
            $editor.attr('readonly', cancelEdit)
                .toggleClass('b-message-body__editor_disabled', cancelEdit);
            if (cancelEdit) {
                // Возвращаем исходный текст
                $editor.val(Daria.Html2Text.html2text(getInviteText(domain)));
            } else {
                $editor.focus();
            }

            inviteLog('Клик по ' + (cancelEdit ? '"Отменить изменения"' : '"Редактировать"'));
        })
    );

    // Добавить получателей
    Actions.add(
        new Action(
            "compose-done.add-contacts",
            function(o) {
                var $target = $(o.event.currentTarget);

                $target.addClass('g-hidden')
                    .closest('.b-popup__field').find('.b-form-layout').removeClass('g-hidden')
                    .find('.js-extra-contacts').focus();

                inviteLog('Клик по "Добавить адресатов"');
            }
        )
    );

    // Показать попап инвайта
    Actions.add(
        new Action('compose-done.show-invite-popup', function(o) {
            var mail = Daria.Page.params.tostr;
            var inviteMetrika = o.params.inviteMetrika;
            var params = {};
            var domain;
            if (mail) {
                params = Jane.FormValidation.contact2obj(mail);
                domain = params.email.split('@')[1];
            }
            params['cid'] = o.params.cid;
            // Для разных почтовых служб, разные тексты приглашения
            params['invite-text'] = Daria.Html2Text.html2text(getInviteText(domain));

            // Диалог открыт со страницы #done. Если нет, то надо сразу показать поле ввода адресатов.
            if (Daria.Page.type === 'done') {
                params['from-done'] = 'yes';
            }

            var $dialog = $(Jane.tt('mail-compose:promo-done-invite-popup', params));

            Daria.Dialog.open({
                body: $dialog,
                title: i18n('%Compose_Done_Invite_Popup_Title'),
                additionalClass: 'b-popup_blue b-popup_invite',
                width: '620px',
                onopen: function() {
                    $dialog.find('form').on('submit', false);
                    if (Daria.Page.type == 'done') {
                        $dialog.find('input[type="submit"]').focus();
                        Jane.Actions.run('compose-done.stop-done-timer');
                    }
                    // Добавляем автокомплитер для выбора контактов
                    var EmailsAutocompleter = Daria.Autocompleter.getContact();
                    EmailsAutocompleter.bindField({
                        field: $dialog.find('.js-extra-contacts')[0]
                    });
                    EmailsAutocompleter.setOptions({
                        multiple: true,
                        formatResult: Daria.Autocompleter.emailAutocompleterOpts.sections[0].formatResult
                    });
                    // Скрываем курсор в текстарии, если она неактивна
                    $dialog.find('.js-editor').on('focus', hideCursorHandler).blur();

                    inviteLog('Показы попапа');
                },
                onclose: function() {
                    if (Daria.Page.type == 'done') {
                        setTimeout(function() {
                            Jane.Actions.run('compose-done.start-done-timer');
                        }, 300);
                    }
                    $dialog.find('.js-editor').off('focus', hideCursorHandler);
                },
                oncancel: function() {
                    inviteLog('Клик на крестик (закрытие попапа)');
                },
                inviteMetrika: inviteMetrika
            });

        })
    );

    //Показываем следующий банл подписок
    Actions.add(
        new Action(
            "compose-done.next-bundle",
            function() {
                Jane.$B("compose-done").initPromo({nextBundle: true});
            }
        ));

    //Уходим в выбранный банл подписок
    Actions.add(
        new Action(
            "compose-done.goto-bundle",
            function(o) {
                var button = $(o.event.currentTarget);
                Jane.c(Block.ComposeDone.M.concat(['lenta', button.attr('data-topic'), "переход в ленту"]));
                Page.go(button.attr('data-href'));
            }
        ));

    // Отсылаем инвайт
    Actions.add(
        new Action('compose-done.send-invite', function(o) {
                inviteLog('Клик по "Отправить"');

                var mail = Daria.Page.params.tostr;
                var to = mail || '';

                var $form = $(o.event.currentTarget).closest('.b-popup__body').find('form');
                var $cc = $form.find('input[name="to"]');
                var cc = $.trim($cc.val());

                if (cc) {
                    to += (mail ? ', ' : '') + cc;
                }

                // Проверем адрес получателя
                var error = !(to && Jane.FormValidation.checkContacts(to));
                $cc.closest('.b-form-layout__line').toggleClass('b-popup__field_error', error);
                if (error) {
                    return false;
                }

                var $text = $form.find('textarea[name=text]');
                var text = Daria.Html2Text.text2html($text.val(), 'p');

                // Добавляем кнопку "Принять приглашение"
                var url = 'http://mail.' + Daria.Config["yandex-domain"] + '/neo2/collect/?invite';
                var contacts = Jane.FormValidation.splitContacts(to);

                if (contacts.length == 1) {
                    var email = contacts[0].email;
                    var login = email.split('@')[0];
                    url = 'http://' + Daria.Config["passport-host"] + '/passport?mode=simplereg&from=mail';
                    url += '&login=' + login;
                    url += '&retpath=' + encodeURIComponent('http://mail.' + Daria.Config["yandex-domain"] + '/neo2/collect/?invite&created=1&login=' + email);
                }

                text += '<p><a href="' + url + '" style="background:#4d85d9; padding : 5px 10px 5px 10px; color: #fff;" >' + i18n("%Compose_Done_Принять_приглашение") + '</span></p>';

                var settings = Jane.$H('settings');
                Jane.Handler.doAll(['do-send'], {
                    send: text,
                    to: to,
                    subj: i18n("%Compose_Done_Invite_Subj"),
                    from_name: settings.getSetting('from_name'),
                    from_mailbox: settings.getSetting('default_email'),
                    "compose_check": Jane.$H('account-information').getDataKey('compose-check'),
                    ttype: 'html'
                }, function(data) {
                    if (data && !jpath(data, '.error').length) {
                        inviteLog('Удачная отправка инвайта');
                        if (o.params['cid']) {
                            // выставляем тег, что уже отправили приглашалку
                            Jane.Handler.doAll(['do-abook-invite-send'], o.params);
                        }
                    }
                });

                // Показываем сообщение, что приглашение отправлено
                var block = Jane.$B('compose-done');
                if (block && block.getCache() && Daria.Page.type === 'done') {
                    var params = $.extend({'invite': 'yes'}, Daria.Page.params);
                    block.invalidate();
                    block.run(params);

                    Jane.Actions.run('compose-done.start-done-timer');
                }

                Daria.Dialog.close();
            }
        )
    );
})();

/* ../../actions/compose/done.js end */

/* ../../actions/attachments/attachments.js begin */
Jane.Actions.create("attachments.retry", function(o) {
    Daria.Dropdown.closeAll();
    // этот экшен вызывает из дропдауна, который в body, поэтому теряет контекст блока
    // пытаемся его найти
    // говнокод, так говнокод :-/
    if (Daria.Page.type == 'compose') {
        Jane.$B('compose')._attachments._callAction(o.action, o.params);
    } else if (Daria.Page.type == 'message') {
        // quick-reply
        Daria.QuickReply._attachments._callAction(o.action, o.params);

    }
});

/*
Actions.add(
    new Action("attachments.mark-deleted", function(o) {
        Daria.Attachments.markDeleted(o.params.id);
    })
);

Actions.add(
    new Action("attachments.unmark-deleted", function(o) {
        Daria.Attachments.unmarkDeleted(o.params.id);
    })
);

Actions.add(
    new Action("attachments.retry", function(o) {
        Daria.Attachments.retry(o.params.id);
    })
);
*/

/*Actions.add(
    new Action("attachments.confirm-narod-agreement", function() {
        Daria.Attachments.confirmNarodAgreement();
    })
);*/

/*
Actions.add(
    new Action("attachments.show-html-button", function() {
        Daria.Attachments.initHTML();
    })
);

Actions.add(
    new Action("attachments.mark-deleted-and-show-html-button", function(o) {
        Daria.Attachments.markDeleted(o.params.id);
        Daria.Attachments.initHTML();
    })
);
*/

Actions.add(
    new Action("attachments.show-attached-message", function(o) {
        var params = o.params;
        var subject = $(o.event.currentTarget).closest(".b-file").find('.b-file__text').text();
        var $html = $('html');

        Handler.getAll([ "message-body" ], params, function() {
            var body = Jane.tt('mail-common:attached-message', {
                subject: subject,
                params: params,
                'message-hid': params.hid
            }, ['message-body', 'account-information', 'settings'], params);

            var msgBody = Jane.$H('message-body').getHTML(params);
            if (Jane.$B('message-body')) {
                //Здесь свой хитрый способ показать письмо и хаб message может быть не загружен.
                //Если он не загружен, то и черт с ним (DARIA-37777)
                Jane.$B('message-body').showLocations($(msgBody));
            }

            var $body = $(body);
            $body.find('> .b-message__i1').append(msgBody);

            Daria.Dialog.open({
                title: i18n('%Attachments_Вложенное_письмо'),
                body: $body,
                width: 980,
                isMaxHeight: true,
                onopen: function() {
                    $html.addClass('b-page_popup-message');
                    Block.MessageHead.prototype.onhtmlinit.call(null, body);
                    Daria.MessageProcess.initQuotesByPage(body);
                },
                onclose: function() {
                    $html.removeClass('b-page_popup-message');
                }
            });
        });
    })
);

Actions.add(
    new Action('attachments.toggle', function(o) {
        var $btn = $(o.event.currentTarget);
        var selectedClass = 'b-mail-button_light-selected';
        var hide = $btn.hasClass(selectedClass);
        $btn.toggleClass(selectedClass, !hide);
        // Скрываем/показываем блок атачей в шапке и кнопки переключения видов
        var bMessageBody = Jane.$B('messages-box').getActive().getMessageBodyBlock();
        var atts = bMessageBody.attachments;

        atts.blocks.head.toggleClass('g-hidden', hide);
        atts.buttons.head.toggleClass('g-hidden', hide);
        if (!hide) {
            bMessageBody.shrinkAttachmentsNames('head');
        }

        $(document).trigger('b-mail-dropdown-closeall');

        // Логируем нажание
        Jane.c(71326, 'attach.head.viewlist');
    })
);

Actions.add(
    new Action('attachments.switch-view', function(o) {
        var params = o.params;
        // Скрываем/показываем блок атачей в шапке и кнопки переключения видов
        var bMessageBody = Jane.$B('messages-box').getActive().getMessageBodyBlock(params['message-id']);
        bMessageBody.switchAttachmentsView(params.where, params.view);
        // Логируем нажатие
        var logPath = ['attach', params.where, params.view + 'view'];
        Jane.c.apply(null, logPath);
    })
);

/*
Actions.create('attachments.narod-agreement.checkbox', function(e) {
    var checkbox = e.event.currentTarget;
    Daria.toggleButton($(checkbox).closest('.b-popup').find(".b-popup__confirm .b-mail-button:eq(0)"), !checkbox.checked);
    return true;
});
*/

Actions.add(new Action('attachments.image-preview', function(o) {
    Jane.c('Просмотрщик картинок', 'Открытие');
    Daria.ImageViewer.open(o.params.mode, o.params.mid, o.params.hid, o.params['message-hid']);
}));

Actions.add(new Action('attachments.image-preview-next', function() {
    Jane.c('Просмотрщик картинок', 'Показ стрелок');
    Jane.c('Просмотрщик картинок', 'Клик по стрелкам');
    Daria.ImageViewer.next();
}));

Actions.add(new Action('attachments.image-preview-prev', function() {
    Jane.c('Просмотрщик картинок', 'Показ стрелок');
    Jane.c('Просмотрщик картинок', 'Клик по стрелкам');
    Daria.ImageViewer.prev();
}));

Actions.add(new Action('attachments.image-preview-print', function(o) {
    Jane.c('Просмотрщик картинок', 'Печать');
    var win = window.open();
    win.document.open();
    win.document.write('<!doctype html><html><body><img src="' + o.params.src + '"></body></html>');
    win.document.close();
    win.onload = function() {
        try {
            win.focus();
            win.print();
            win.close();
        } catch(e) {}
    };
}));

Actions.add(new Action('attachments.image-preview-gallery', function(o) {
    Jane.c('Просмотрщик картинок', o.params.closer ? 'Клик по крестику галереи' : 'Показать всё');
    Daria.ImageViewer.toggleGallery();
}));

Actions.add(new Action('attachments.image-preview-select', function(o) {
    Daria.ImageViewer.select(Number(o.params.index));
    Daria.ImageViewer.hideGallery();
}));

Actions.add(new Action('attachments.image-preview-scroll', function(o) {
    Daria.ImageViewer.scrollGallery(Number(o.params.to));
}));

Actions.add(new Action('attachments.image-preview-subject', function(o) {
    Jane.c('Просмотрщик картинок', 'Клик по теме');
    Daria.Layer.close();
    Jane.Page.go(o.event.target.hash);
}));

Actions.add(new Action('attachments.image-preview-download', function(o) {
    Jane.c('Просмотрщик картинок', o.params.count);
    return true;
}));

Actions.add(
    new Action('attachments.open-disk-browser', function() {
        Daria.Dialog.close();
        var block = Page.type === 'message' ? 'message' : 'compose';
        Jane.$B(block).getBlockByName('browse-disk').open();
    })
);

Actions.add(
    new Action('attachments.close-disk-browser', function() {
        var block = Page.type === 'message' ? 'message' : 'compose';

        Jane.$B(block).getBlockByName('browse-disk').close();
        Jane.c('Аттачи из Диска', 'Отмена прикрепления');
    })
);

Actions.add(
    new Action('attachments.count-click', function() {
        var hasDisk = $.inArray('59', Daria.SIDS) !== -1 && !Daria.IS_CORP && !Jane.Config.PDD.domain;

        Jane.c('Кнопка Прикрепить', hasDisk ? 'Клик по Прикрепить с Диском' : 'Клик по Прикрепить без Диска');

        return true;
    })
);

/* ../../actions/attachments/attachments.js end */


/* ../../actions/search/search.js begin */
/* ------------------------------------------------------------------------- */

Actions.create('search', function(o) {
        var $form;

        if (o.event) {
            $form = $(o.event.currentTarget);
        } else {
            var $bSearch = $(Jane.$B('search').getCacheNode());
            $form = $bSearch.find('FORM.jane-search');
        }

        var nbInput = nb.$block('.js-search-input', $form);

        var request = nbInput.getValue().trim();
        var url = o.params.url;

        if (o.params.datePagerSearchEmptyList) {
            Jane.c('Пейджер по датам', 'Клик на кнопку Найти если писем не нашлось');
        }

        if (o.params.datePagerSearch) {
            Jane.c('Пейджер по датам', 'Клик на кнопку Найти под списком писем');
        }

        if (request) {
            if (!url) {
                var searchOptions = {
                    request: request
                };

                if (Daria.Page.params.current_folder && Daria.IS_CORP) {
                    searchOptions.fid = Daria.Page.params.current_folder;
                }

                if (o.params.options) {
                    _(searchOptions).extend(o.params.options);
                }

                url = '#search/' + Jane.Common.objectToQueryString(searchOptions);
            }

            Jane.c('Поиск', "'Клик по 'найти'");

            // FIXME: Как-то искать по текущей папке.
            Jane.events.trigger('search', true);

            Page.go(url, afterSearch, {
                onerror: afterSearch
            });
        } else {
            Page.go('#inbox');
        }


        function afterSearch() {
            var autocompleter = Daria.Autocompleter.getSearch();
            autocompleter.destroy();

            var currentResponse = Jane.$H('messages').getCacheByPageParams();
            var correctedRequest = jpath(currentResponse, '.details.search-options.request')[0];

            if (nbInput.getValue().trim() !== correctedRequest) {
                nbInput.setValue(correctedRequest);
            }

            if (!Jane.$H('settings').isSet('dont_save_history')) {
                autocompleter.flushCache();
            }

            Jane.events.trigger('search', false);
        }
    });

/* ------------------------------------------------------------------------- */

/* ../../actions/search/search.js end */

/* ../../actions/search-options/search-options.js begin */
/* ------------------------------------------------------------------------- */

Actions.create('search-options.open', function() {
    Daria.SearchOptions.open();
});

/* ------------------------------------------------------------------------- */

/* ../../actions/search-options/search-options.js end */


/* ../../actions/table/table.js begin */
Actions.add(
    new Action("table.check", function(o) { // FIXME: Непонятно, а зачем нужен этот экшн? Вроде при клике в чекбокс он не используется?
        var event = o.event;
        var target = event.currentTarget;

        var checkbox = target.getElementsByClassName('b-messages__message__checkbox__input')[0];
        if (!checkbox) {
            return;
        }
        var params = o.params || {
            checked: !checkbox.checked
        };
        checkbox.checked = params.checked;
        Daria.Table.active.check(event, checkbox);
        return false;
    })
);


/* ../../actions/table/table.js end */

/* ../../actions/table/focus.js begin */
Jane.Actions.create('table.focus', function() {
    if (Daria.Focus) {
        Daria.Focus.changeColumnToFirstPane();
    }
    return true;
});

/* ../../actions/table/focus.js end */


/* ../../actions/journal/journal.js begin */
/** Экшены для журнала изменений */

Actions.add(
    new Action("journal.full-log", function(o) {
        var userSelection;

        if (window.getSelection){
            userSelection = window.getSelection();
            userSelection = userSelection.toString();
        } else if (document.selection) {
            userSelection = document.selection.createRange();
            userSelection = userSelection.text;
        }

        if (!$.trim(userSelection)) {
            $(o.event.target).closest(".b-account-activity-log__entry")
                             .find(".b-account-activity-log__full, .b-account-activity-log__value__actions")
                             .toggleClass("g-hidden");
        }
    })
);


/* ../../actions/journal/journal.js end */

/* ../../actions/passport/validate-phone.js begin */
Jane.Actions.create("passport.phone-check", function() {
    Jane.Handler.doAll([ "phone-check" ], {}, function(data) {
        var status = jpath(data, ".handlers.data.hascurrentphone")[0];
        Jane.events.trigger("phone-checked", status);
    });
});

Jane.Actions.create('passport.phone-register', function(o) {
    var loader = o.params.loader || null;

    // Добавляем язык на котором надо отправить sms
    o.params.lang = o.params.lang || Daria.locale;
    Jane.Handler.getAll(['phone-register'], o.params, function(data) {
        if (data) {
            var status = jpath(data, '.handlers.data.errorcode')[0] || 'ok';

            if (status == 'ok') {
                Jane.$H('settings').setSettings({
                    'phone-number': Jane.$H('phone-register').getNumber()
                });
                Jane.events.trigger('phone-registered-success', { status: status, o: o });

                if (o.params.revalidate) {
                    Jane.events.trigger('phone-revalidate-success', { status: status, o: o });
                }
            } else {
                Jane.events.trigger('phone-registered-failure', { status: status, o: o });
            }
        }

        Jane.events.trigger('phone-registered-end');
    }, { force: true, loader: loader });
});

Jane.Actions.create("passport.phone-confirm", function(o) {
    var loader = o.params.loader || null;
    Jane.Handler.doAll([ "phone-confirm" ], o.params, function(data) {
        var status = jpath(data, ".handlers.data.errorcode")[0] || (Number(jpath(data, ".handlers.data.phone.valid")[0]) ? 'ok' : 'NOVALIDCODE');
        var left = jpath(data, ".handlers.data.phone.left")[0];
        status = left == "0" ? 'VALEXEEDED' : status;
        if (status == 'ok') {
            Jane.$H("settings").setSettings({ "phone-number": Jane.$H("phone-register").getNumber() });
            Jane.events.trigger("phone-confirmed-success", status);
        } else {
            Jane.events.trigger("phone-confirmed-failure", { status: status, left: Number(left) });
        }
        Jane.events.trigger('phone-confirmed-end');
    }, {force: true, loader: loader});
});

/* ../../actions/passport/validate-phone.js end */


/* ../../actions/collectors-promo/collectors-promo.js begin */
(function(global) {
    /**
     * import global variables
     */
    var Daria = global.Daria;
    var Jane = global.Jane;
    var Block = Jane.Block;
    var Actions = Jane.Actions;
    var Action = Jane.Action;


    /**
     * Scope variables
     */
    var step;
    var from;
    var tr;
    var metrika;
    tr = {
        'button': 'Кнопка',
        'button2': 'Кнопка 2',
        'settings': 'Настройки',
        'buttondirect': 'Кнопка на второй шаг',
        'start': 'Вместо бабла',
        'all': 'На всех'
    };
    metrika = Block.Collectors.Metrika;

    /**
     * Actions declarations
     */
    Actions.add(new Action('collectors-promo.open', function(o) {
        step = o.params.form ? 2 : 1;
        from = o.params.from;

        if (!tr[from]) {
            Jane.ErrorLog.send({
                collectorspromo: from
            });
        }

        Jane.Handler.getAll(['collector-texts'], {}, function() {
            var handlers = ['collectors', 'collector-settings', 'collector-texts'];
            // DARIA-14083 - Более заметная ссылка "нет других ящиков": не приходит default_email для новых пользователей
            var params = {
                'email': Jane.$H('settings').getSetting('default_email') || (Daria.login + '@' + Jane.$H('settings').getSetting('default_mailbox'))
            };
            if (o.params.form) {
                params.form = 'yes';
            }
            params.from = o.params.from;

            // Generate template for collector-promo
            var dialog = $(Jane.tt('mail-common:collectors-promo-block', {
                'collectors-promo': $.extend({
                    // TODO Такое поведение (эмулирование) возможно
                    // попарвят при вызове функции data в yate
                    // тогда это можно будет убрать
                    handlersKeys: {
                        collectors: 0,
                        'collector-settings': 0,
                        'collector-texts': 0
                    }
                }, params)
            }, handlers, {}));

            var ename = 'onCollectorCreateSuccess.collectors-promo';


            // инициализация валидатора настроек
            var settings = new Daria.Collectors.Settings(dialog.find('form'));

            var promoDialog = Daria.Dialog.open({
                body: dialog,
                width: 600,
                additionalClass: 'b-popup_collectors-promo',
                onopen: function() {
                    if (from !== 'all') {
                        Jane.$H('settings').setSettings({'collectors_promo_s': Daria.now()});
                    }
                },
                onclose: function() {
                    var saveSettings = {'no_collectors_bubble': true};
                    if (from == 'all') {
                        saveSettings['no_collect_bubbl_all'] = true;
                    }

                    Jane.$H("settings").setSettings(saveSettings);
                    settings.destroy();
                    Jane.events.unbind(ename);
                },
                oncancel: function() {
                    Jane.c.apply(null, [metrika, tr[from], "Закрытие попапа на шаге " + step]);
                }
            });

            settings.onFill = function() {
                Daria.Collectors.Settings.prototype.onFill.apply(this, arguments);
                // выравнивание по центру после скрытия блока дополнительных параметров сборщика
                promoDialog.position(true);
            };
            settings.onEmpty = function() {
                Daria.Collectors.Settings.prototype.onEmpty.apply(this, arguments);
                // выравнивание по центру после показа блока дополнительных параметров сборщика
                promoDialog.position(true);
            };



            Jane.c.apply(null, [metrika, tr[from], "Открыт попап"]);
            // DARIA-10334 - проверяем и дорабатываем статистику промо-сборщиков
            if (from === 'button') {
                Jane.c(71487, 'addmailbox');
                Jane.ErrorLog.send({
                    collectors_promo: 'button'
                });
            }

            // сборщик успешно создан
            Jane.events.bind(ename, function(e, params) {
                Jane.c.apply(null, [metrika, tr[from], "Cборщик создан"]);

                Jane.$H("settings").setSettingOn('collect_from_promo', function() {
                    Daria.Dialog.close();
                    var bCollectors = Jane.$B('collectors');

                    if (bCollectors) {
                        bCollectors.run({}, function() {
                            var collector = $(bCollectors.getCache().node).find('.b-label__content:contains(' + params.email + ')');
                            if (collector.length) {
                                var x = Jane.$H("settings").isSet('hide_daria_header') ? 210 : 225;
                                var y = collector.offset().top + collector.height() / 2 - $(window).scrollTop();

                                Daria.Dialog.open({
                                    title: i18n('%Collectors_Promo_ящик_добавлен_заголовок'),
                                    body: i18n('%Collectors_Promo_ящик_добавлен_тело', params.email),
                                    onTarget: {
                                        x: x,
                                        y: y,
                                        side: 'left',
                                        pos: 'bottom'
                                    },
                                    width: 455
                                });
                            }
                        });
                    }
                    Jane.Handler.doAll(["do-collector-run"], {
                        popid: params.popid
                    });
                });
            });

        });

        return false;
    }));

    Actions.add(new Action('collectors-promo.toggle', function(o) {
        var prev = step;
        step = step === 1 ? 2 : 1;

        $(o.event.target).closest('.js-collectors-toggle').children().toggleClass('g-hidden').find('input[name=email]').focus();

        Jane.c.apply(null, [metrika, tr[from], "Переход с шага " + prev + " на шаг " + step]);
    }));

    Actions.add(new Action('collectors-promo.disable', function(o) {
        var settings = {'no_collectors_promo': true};
        if (from == 'all') {
            settings['no_collect_promo_all'] = true;
        }

        Jane.$H("settings").setSettings(settings, function() {
            Jane.$B('collectors').run({}, function() {
                if (o.params.from !== 'wizard') {
                    Daria.Dialog.close();
                }
            });
        });

        if (o.params.from == 'letter') {
            Jane.c('message-collector', 'Клик на нет других ящиков');
            return true;
        } else {
            Jane.c.apply(null, [metrika, tr[from] || 'wizard', 'У меня нет других ящиков']);
        }
    }));

}(this));

/* ../../actions/collectors-promo/collectors-promo.js end */

/* ../../actions/settings/collector.js begin */
// ------------------------------------------------------------------------------------------------------------- //
//                                     Экшены, меняющие значения на сервере                                      //
// ------------------------------------------------------------------------------------------------------------- //

/**
 * Проверка параметров сборщика (настройки сервера)
 * Предполагается, что это событие будет вызываться только через Action.run
 * и в параметрах будет сериализованная форма с настройками сборщика
 */

Actions.add(new Action('collector._check', function(o) {

    // параметры, которые будут проверяться
    // если событие не искусвтенное, то параметры запроса берутся из близжайшего к таргету формы
    // если искуственное, то параметры запроса должны хратьися в data.params
    var params = o.event ? $(o.event.currentTarget).closest('form').serializeObject() : o.params;
    var email = params.email;

    // Выполняется попытка соединения с сервером $server.
    // Запрос выполняется…
    Jane.events.trigger('onCollectorCheckStart');

    Jane.Handler.doAll(["do-collector-check"], params, function(data) {
        var resultStatus = jpath(data, '.handlers[.name == "do-collector-check"].data.body.test');

        if (resultStatus && resultStatus[0] === 'ok') {
            // DARIA-24432 проверка не дает пользователю создать сборщик на свой логин, если он у него через точку
            // (обнаружилось, что если логин, например, mr.kibin, то сборщик на mr.kibin@ya.ru создать можно, а mr-kibin@ya.ru нельзя)
            // и выводит ошибку, если пользователь пытается отредактировать созданный сборщик на свой яндексовский логин
            if (email && $.inArray(email.toLowerCase(), Jane.$H('account-information').getEmails()) != -1) {
                Jane.events.trigger('onCollectorCheckFail', {
                    status: 'this_server_belongs_to_yandex'
                });
            } else {
                Jane.events.trigger('onCollectorCheckSuccess');
            }
        } else {
            Jane.events.trigger('onCollectorCheckFail', {
                status: 'auth_failed'
            });
        }
    });
}));

/**
 * Создание нового сборщика
 */

Actions.add(new Action('collector.create', function(o) {
    o.event.preventDefault();

    var form = $(o.event.currentTarget).closest('form');
    var owner = o.params.owner;

    if ($.data(form[0], 'settings').validate()) {
        if (Jane.$H('collectors').getCount() < 10) {
            Daria.Collectors.Creator.run(form, owner);
        } else {
            Daria.Dialog.notice({
                title: i18n('%Setup_Collector_Dialog_Create_title'),
                body: i18n('%Setup_Collector_Dialog_Create_body')
            });
        }
    }
}));

/**
 * Изменение параметров сборщика (настрокий фильтров и сервера)
 */

Actions.add(new Action('collector.edit', function(o) {
    o.event.preventDefault();

    var form = $(o.event.currentTarget).closest('form');
    var owner = o.params.owner;
    var settings = $.data(form[0], 'settings');

    if (!settings || settings.validate()) {
        Daria.Collectors.Editor.run(form, owner);
    }
}));

/**
 * Проверка параметров сборщика по кнопке "Проверить соединение"
 */

Actions.add(new Action('collector.check', function(o) {
    o.event.preventDefault();

    var form = $(o.event.currentTarget).closest('form');
    var owner = o.params.owner;

    if ($.data(form[0], 'settings').validate()) {
        Daria.Collectors.Checker.run(form, owner);
    }
}));

/**
 * Удаление сборщика
 */

Actions.add(new Action('collector.remove', function(data) {
    data.event.preventDefault();
    var popid = data.params.popid;

    Daria.Dialog.confirm({
        title: i18n('%Setup_Collector_Dialog_Remove_title'),
        body: i18n('%Setup_Collector_Dialog_Remove_body', data.params.email),
        width: 350,
        okValue: i18n('%Удалить'),
        okHandler: function() {
            Jane.Handler.doAll(
                ["do-collector-remove"],
                data.params,
                // никаких проверок не делаем, предполагаем, что удаление всегда проходи гладко
                function() {
                    // чистим кэш списка сборщиков, чтобы перезапросилась страница
                    Jane.$H("collectors").clearCache();

                    var filters = Jane.$H('filters').getForCollector(popid);
                    $.map(filters, function(filter) {
                        Jane.Handler.doAll(['do-filters-delete'], { id: filter.filid });
                    });
                    // кэш фильтров
                    Jane.$H("filters").clearCache();

                    // переходим на страницу списка сборщиков
                    Daria.Page.go('#setup/collectors');
                });
        }
    });
}));

/**
 * Включение сборщика и визуальное изменение переключателя
 */

(function() {
    var cfgs = {
        'setup-collectors': {
            wrapper: '.b-switch',
            process: function(wrapper) {
                return wrapper.hasClass('b-switch_off');
            },
            success: function(wrapper) {
                wrapper.removeClass('b-switch_off').addClass('b-switch_on');
            }
        },
        'collectors-promo': {
            wrapper: '.b-smart-collector',
            process: function() {
                return true;
            },
            success: function(wrapper) {
                wrapper.removeClass('b-smart-collector_disabled');
                wrapper.find('.b-smart-collector__block_link').addClass('g-hidden');
            }
        }
    };

    Actions.add(new Action("collector.on",

        function(o) {
            var target = $(o.event.currentTarget);
            var cfg = cfgs[o.params.owner];
            var wrapper = target.closest(cfg.wrapper);

            if (cfg.process(wrapper)) {
                Jane.Handler.doAll(
                    ["do-collector-on", "collectors"],
                    o.params,

                    function() {
                        cfg.success(wrapper);
                    });
            }
        }));
}());

/**
 * Выключение сборщика и визуальное изменение переключателя
 */

Actions.add(new Action("collector.off", function(data) {
    var $stateWrapper = $(data.event.target).closest('.b-switch');
    if ($stateWrapper.hasClass('b-switch_on')) {
        Jane.Handler.doAll(
            ["do-collector-off", "collectors"],
            data.params,

            function() {
                $stateWrapper.removeClass('b-switch_on').addClass('b-switch_off');
            });
    }
}));

// ------------------------------------------------------------------------------------------------------------- //
//                                            Интерфейсные экшены                                                //
// ------------------------------------------------------------------------------------------------------------- //

/**
 * Перебрасывает на страницу настройки сборщика
 */

Actions.add(new Action('collector.open-settings', function(data) {
    Daria.Page.go('#setup/collector/popid=' + data.params.popid + '&email=' + data.params.email);
}));

/**
 * На странице настройки сборщика скрывает/показывает параметры сервера
 */

Actions.add(new Action('collector.toggle-server-settings', function(data) {
    $(data.event.target).closest('.b-form-layout_collectors').find('.b-form-layout__block_server-settings').toggleClass('g-hidden');
}));

/**
 * На странице списка сборщиков показывает/скрывает дополнительную информацию сборщика
 */

Actions.add(new Action('collector.toggle-extra-info', function(data) {
    $(data.event.target).closest('.b-pop__email').toggleClass('b-pop__email_more');
}));

(function() {

    // Отбиндиваемся от событий если таковые есть
    function unbind() {
        Jane.events.unbind("onCollectorCheckStart");
        Jane.events.unbind("onCollectorCheckSuccess");
        Jane.events.unbind("onCollectorCheckFail");
    }

    Jane.Actions

        /*
         * Daria-9911, показываем бабл для неработающего сборщика
         */

        .create("collector.warning", function(o) {
            var warning;

            // Находим ноду варнинга и логгируем клик
            if (o.event) {
                warning = o.event.target;

                Jane.c(["Неработающий сборщик", "клик на полоску"]);
            } else {
                warning = o.params;
            }

            var $warning = $(warning).closest(".b-collectors_warning");

            // Находим ноду неактивного сборщика
            var $unactive = $warning.prev();

            // Через jQuery.fn.data, айдишник вытащить нельзя ибо в data-* аттрибутах хранятся примитивы, а не строки
            // поэтому число 2130000000001058364 будет преобразовано в 2130000000001058300
            var popid = $unactive.attr("data-popid");

            var hCollectorsCache = Jane.$H("collectors").getCacheByParams();
            var collector = jpath(hCollectorsCache, '.[ .popid == "' + popid + '" ]')[0];

            if (!collector) {
                return;
            }

            var hidden = {};

            // Хидден полями выставляем все возможные параметры для правильной работы хендлеря смены пароля,
            // некоторые из них не нужны, но на всякий
            $.each(collector, function(name, value) {

                if (name === "password") {
                    return true;
                }

                hidden[name] = value;
            });

            var mail = $unactive.text();
            var link = $unactive.data("help-link");
            var server = $unactive.data("company") || mail.split("@")[1];

            var body = {
                hidden: hidden,
                mail: mail,
                popid: popid,

                time: collector.human_time,
                server: server,
                company: server.substr(0, 1).toUpperCase() + server.substr(1)
            };

            // Если у нас есть адрес службы поддержки, показываем текст вместе с ссылкой
            // если его нету будем просто показывать текст без ссылки на поддержку коллектора
            if (link) {
                body.link = link;
            }

            var y = $unactive.offset().top + $unactive.outerHeight() / 2 + 1;

            var $dialog = Jane.Actions.get('collector.warning').showDialog($unactive, body);

            var $elems = $dialog.find("form, .b-mail-button");
            // Сохраняем некоторые настройки, они понадобиться при других событиях
            $elems.filter("form").data({
                popid: popid,
                y: y,
                $warning: $warning,
                $unactive: $unactive
            });
        })

        /*
         * Показ бабла редактирования пароля
         */

        .create("collector.edit-password", function(o) {
            o.event.preventDefault();

            var timeout;
            var $form = $(o.event.target);
            var data = $form.data();

            var $elems = $form.find(".b-notification_loading, .b-mail-button, .b-notification_auth_failed");
            var $failer = $elems.filter(".b-notification_auth_failed");
            var $loader = $elems.filter(".b-notification_loading");
            var $button = $elems.filter(".b-mail-button");

            unbind();

            // Показываем спиннер, убираем ошибку если она есть
            Jane.events.bind("onCollectorCheckStart", function() {
                timeout = window.setTimeout(function() {
                    $loader.removeClass("g-hidden");
                    $failer.addClass("g-hidden");
                }, 250);
            });

            // Показываем ошибку, убираем спиннер если он успел показаться
            Jane.events.bind("onCollectorCheckFail", function() {
                unbind();
                Jane.$B("collectors").log("клик на новый пароль ошибка");

                window.clearTimeout(timeout);
                $loader.addClass("g-hidden");
                $failer.removeClass("g-hidden");

                Jane.enableButton($button);
            });

            // Показываем бабл о том что все клево изменилось
            Jane.events.bind("onCollectorEditSuccess.password-" + o.params.popid, function() {
                unbind();
                Jane.$B("collectors").log("клик на новый пароль успешный");

                window.clearTimeout(timeout);

                // Jane.$H("collectors").clearCache();

                // Включаем сборщик и запускаем сбор писем при удачной смене пароля
                Jane.Handler.doAll(["do-collector-run", "do-collector-on"], {
                    popid: data.popid
                });

                Daria.Dialog.open({
                    body: Jane.tt('mail-common:collector-warning-popup-header', {
                        header: i18n("%Setup_Collectors_Сбор_писем_прождолжен"),

                        // Сейчас нам нужна другая иконка
                        src: "b-mail-icon_green-tick.gif"
                    }),

                    // Те же координаты что и у родительского бабла
                    onTarget: {
                        target: $('.js-collector-unactive[data-popid=' + o.params.popid + ']'),
                        side: "left",
                        pos: "top"
                    },

                    onopen: function() {
                        window.setTimeout(function() {

                            // Если открытый попап это все еще попап о том что все клево –
                            // закрой его
                            if (Daria.Dialog.$dialog.hasClass("b-collectors__tick")) {
                                Daria.Dialog.close();
                            }
                        }, 2000);
                    },

                    additionalClass: "b-popup_yellow b-collectors__popup b-collectors__tick"
                });

                data.$warning.remove();
            });

            Jane.Actions.run("collector.edit", o.event, o.params);
        })

        /*
         * Показываем бабл с подверждением удаления
         */

        .create("collector.stop", function(o) {
            Jane.$B("collectors").log("клик на остановить сбор писем");
            var data = {};

            if (o.event) {
                data = $(o.event.target).closest("form").data();
            }

            // Да, опен всегда закрывает диалог перед тем как открыть, но
            // нам нужна именно такая последовательность вызова,
            // так как попап, может влиять на скролл окна,
            // а нам это влияние при расчитывание координат не нужно
            Daria.Dialog.close().open({
                title: Jane.tt('mail-common:collector-warning-popup-header', {
                    header: i18n("%Setup_Collectors_remove")
                }),

                body: Jane.tt('mail-common:collector-remove-popup', {
                    mail: o.params.mail,
                    popid: o.params.popid
                }),

                width: 480,

                // Координаты те же что и у родительского бабла
                onTarget: {
                    x: $(Jane.$B("mail-left-box").cache.node).outerWidth() + 9,
                    y: data.y - $(window).scrollTop(),
                    side: "left",
                    pos: "top"
                },

                additionalClass: "b-popup_yellow b-collectors__popup"

                // Сохраняем дату от формы, она нам еще понадобиться
            }).$dialog.data(data);
        })

        /*
         * То что же что и collectors.remove, только с другим представлением
         */

        .create("collector.kill", function(o) {
            var collectors = Jane.$B("collectors");

            // никаких проверок не делаем, предполагаем, что удаление всегда проходит гладко
            Jane.Handler.doAll(["do-collector-remove"], {
                popid: o.params.popid
            }, function() {

                // Сбрасываем кэши
                Jane.$H("filters").clearCache();
                Jane.$H("collectors").clearCache();

                collectors.run();
            });

            Daria.Dialog.close();
        })

        .create("collector.close-remove-popup", function() {
            Daria.Dialog.close();
        })

        /*
         * Логгируем переход на настройки
         */

        .create("collector.help-go", function() {
            Jane.$B("collectors").log("переход на настройки");

            return true;
        })

        /*
         * Логгируем переход на подержку
         */

        .create("collector.support-go", function() {
            Jane.$B("collectors").log("переход на поддержку");

            return true;
        });

    Jane.Actions.get('collector.warning').showDialog = function($unactive, body) {
        var collectors = Jane.$B("collectors");

        Daria.Dialog.open({
            title: Jane.tt('mail-common:collector-warning-popup-header', {
                header: i18n("%Setup_Collectors_warning-popup-header", body.mail)
            }),
            body: Jane.tt('mail-common:collector-warning-popup', body),
            width: 480,
            onopen: function() {
                Jane.c(["Неработающий сборщик", "показали"]);
            },
            // показываем бабл с параметрами родительского бабла
            onTarget: {
                target: $unactive,
                side: "left",
                pos: "top"
            },
            onclose: function() {
                Jane.$B("collectors").log("закрытие попапа");

                if (collectors.$warnings.first().is(":hidden")) {

                    // Показываем "сбор писем приостановлен" под адресом сбощика для всех сломанных сборщиков
                    collectors.$warnings.removeClass("g-hidden").each(function() {
                        Jane.c(["Неработающий сборщик", "показ полоски слева"]);
                    });

                    // Кладем закрытие бабла в куки, с этого момента всегда
                    // показываем "сбор писем приостановлен" под адресом сбощика
                    Daria.setCookie("broken_collector", "1", 30);
                }
            },
            additionalClass: "b-popup_yellow b-collectors__popup"
        });

        var $dialog = Daria.Dialog.$dialog;
        var $button = $dialog.find(".js-dialog-button");

        // Включаем кнопку только когда в ней есть не проблельные символы
        // TODO(maksimrv): Заменить на nb.find('.js-collector-passwd').on('change', onChange);
        // когда добавят такую функциональность #106
        $dialog.on("keyup", ".js-collector-passwd", function() {
            var nButton = nb.block($button.get(0));
            var nInput = nb.block(this);

            if (!nButton) {
                return nButton;
            }

            if ($.trim(nInput.getValue())) {
                nButton.enable();
                return;
            }

            nButton.disable();
        });

        return $dialog;
    };
}());

/* ../../actions/settings/collector.js end */


/* ../../actions/settings/filters-lists.js begin */
/*global i18n, Actions, Action */
/*
 * Экшены списков ящиков (белого и чёрного)
 */
(function() {
    var getListItemsForNode = function(rootNode) {
        return $(rootNode).find('.js-email-from-list input[type=checkbox]');
    };

    /**
     * Добавление ящика в текущий список и удаление из другого, если передан последний параметр
     * @param {String} handler имя handlera
     * @param {String} email добавляемый ящик
     * @param {$} $form форма из которой ведётся добавление
     * @param {$} $currentList текущий список (в который ведётся добавление)
     * @param {$} $otherList другой список
     */
    var addEmail = function(handler, email, $form, $currentList, $otherList) {

        // дизейблится кнопка на время выполнения запроса
        if ($form) {
            $form.find('.b-search__submit').prop('disabled', true);
        }

        var listType = (handler[0] === 'do-filters-blacklist-add') ? 'black' : 'white';

        /**
         * Определяем ящики яндекса, чтобы предупредить о добавлении их в черный список
         * оставляем закомментированными все сервисы, адресе которых мы не знаем, иначе мы их потеряем
         */
        var listOfYandexEmails = {
            // '': {
            //     name: i18n('%ServiceTabs_yaru'),
            //     unsubscribeLink: 'http://my.ya.ru/options_notification.xml'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_news'),
            //     unsubscribeLink: 'http://news.yandex.ru/podpiska/login.pl'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_maps'),
            //     unsubscribeLink: 'http://n.maps.yandex.ru/users/{LOGIN}/edit/'
            // },
            'partner@market\\.(yandex|ya)\\.': {
                name: i18n('%ServiceTabs_market'),
                unsubscribeLink: 'http://market.yandex.ru/mail-settings.xml'
            },
            // '': {
            //     name: i18n('%ServiceTabs_video'),
            //     unsubscribeLink: 'http://video.yandex.ru/tunes/'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_video'),
            //     unsubscribeLink: 'http://narod.yandex.ru/disk/all/'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_moikrug'),
            //     unsubscribeLink: 'http://moikrug.ru/settings/subscription/'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_narod'),
            //     unsubscribeLink: 'http://webmaster.yandex.ru/settings/messages/types.xml'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_direct'),
            //     unsubscribeLink: 'http://direct.yandex.ru/registered/main.pl?cmd=userSettings'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_metrika'),
            //     unsubscribeLink: 'http://metrika.yandex.ru/{COUNTER_NUMBER}'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_auto'),
            //     unsubscribeLink: 'http://auto.yandex.ru/subscribe.xml'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_music'),
            //     unsubscribeLink: 'http://music.yandex.ru/#!/subscription/manage'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_rabota'),
            //     unsubscribeLink: 'http://rabota.yandex.ru/subscriptions.xml'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_fotki'),
            //     unsubscribeLink: 'http://fotki.yandex.ru/tunes/'
            // },
            // '': {
            //     name: i18n('%ServiceTabs_business'),
            //     unsubscribeLink: 'http://business.yandex.ru/#subscription'
            // },
            'hello@money\\.(yandex|ya)\\.': {
                name: i18n('%ServiceTabs_money'),
                unsubscribeLink: 'https://sp-money.yandex.ru/tunes.xml?from=bal'
            },
            '([\\s\\S])@yandex-team\\.': {},
            'devnull@(yandex|ya)\\.': {},
            'support@(yandex|ya)\\.': {},
            'abo-dev@(yandex|ya)\\.': {},
            'hello@(yandex|ya)\\.': {},
            'subscriptions-no-reply@(yandex|ya)\\.': {}
        };

        if (listType === 'black') {
            var listHasThisEmail = false;
            var testEmailIterator;
            var testEmailBody;
            var testEmailReg;
            var userLogin = Jane.$H("account-information").getData().login;
            for (testEmailIterator in listOfYandexEmails) {
                if (listOfYandexEmails.hasOwnProperty(testEmailIterator)) {
                    testEmailReg = new RegExp(testEmailIterator + '(ru|by|com|kz|ua|com\\.tr|com\\.ua)', 'i');
                    if (testEmailReg.test(email)) {
                        listHasThisEmail = true;
                        if (listOfYandexEmails[testEmailIterator].name && listOfYandexEmails[testEmailIterator].unsubscribeLink) {
                            testEmailBody = Jane.tt('mail-common:js-blacklist-warning-popup', {
                                name: listOfYandexEmails[testEmailIterator].name,
                                unsubscribeLink: listOfYandexEmails[testEmailIterator].unsubscribeLink.replace('{LOGIN}', userLogin)
                            });
                        } else {
                            testEmailBody = Jane.tt('mail-common:js-blacklist-warning-popup-unknown-service');
                        }
                        break;
                    }
                }
            }
            if (listHasThisEmail) {
                Daria.Dialog.open({
                    body: testEmailBody,
                    buttons: [
                        {name: 'submit', value: i18n('%Blacklist_warning_popup_button'), onclick: submit},
                        {name: 'cancel'}
                    ]
                });
            } else {
                submit();
            }
        } else {
            submit();
        }

        function submit() {
            Jane.Handler.doAll(handler, {email: email}, function(data) {
                var nodeHandler = jpath(data, '.handlers[.name == "' + handler[0] + '"]')[0];
                var error = jpath(nodeHandler, '.error.data[.status == "error"]')[0];

                if (!error) {
                    if ($form) {
                        $currentList
                            // отображается форма на сулчай, если не было ещё ни одного ящика
                            .find('.b-filters-list__added')
                            .removeClass('g-hidden')
                            // добавляется новый ящик
                            .find('.b-filters-list__added-list')
                            .prepend(Jane.tt('mail-setup:filters-lists-emails-email', {addresses: email}));

                        // если передан другой список, значит ящик переносится из него в текущий
                        // и из другого надо ящик удалить
                        if ($otherList) {
                            getListItemsForNode($otherList).filter(function() {
                                return this.value === email;
                            }).closest('.b-filters-list__item-list').remove();

                            // если в другом списке не осталось ящиков, то форму удаления нужно скрыть
                            if (!$otherList.find('.b-filters-list__item-list').length) {
                                $otherList.find('.b-filters-list__added').addClass('g-hidden');
                            }
                        }
                        // TODO(maksimrv): Убрать привзяку к стилевому классу
                        // очиска поля ввода адреса
                        $form.find('.b-input__text').val('');
                    } else {
                        Daria.Statusline.showMsg({
                            name: "setup.filters-lists-add-from-message",
                            body: listType === 'black' ?
                                i18n('%Setup_Filters_blist_added', email) :
                                i18n('%Setup_Filters_wlist_added', email),
                            body3: listType === 'black' ?
                                i18n('%3pane_Setup_Filters_blist_added', email) :
                                i18n('%3pane_Setup_Filters_wlist_added', email)
                        });
                    }
                } else {
                    Daria.Statusline.showMsg({
                        name: "setup.filters-lists-add-error",
                        body: i18n('%Setup_Общая_ошибка'),
                        body3: i18n('%3pane_Setup_Общая_ошибка')
                    });
                }

                // запрос выполен - кнопку нужно раздизейблить
                if ($form) {
                    $form.find('.b-search__submit').prop('disabled', false);
                }
            });
            Daria.Dialog.close();
        }
    };

    /**
     * TODO(maksimrv): Сделать свойством действия `filters.lists-add`.
     * Жертва ради тестов
     */
    Jane.Action['x:addEmail'] = addEmail;

    /**
     * Добавить ящик в список
     */
    Actions.add(new Action(
        "filters.lists-add",
        function(data) {
            var listType = data.params.listtype;
            var userEmails = Jane.$H("account-information").getEmails();
            var handler = ["do-filters-" + listType + "list-add", "filters-" + listType + "list" ];

            var $form = $(data.event.target).closest('form');
            var email = $.trim($form.find('.nb-input').val());

            // ссылки на списки
            var $wrapper = $form.closest('.b-filters__lists');
            // текущий список - список, добавление ящика в который обрабатывается
            var $currentList = $wrapper.find('.b-filters-list_' + listType);
            // другой список - тот, в который ящик не добавляется сейчас (оставшийся/соседний список)
            var $otherList = $wrapper.find('.b-filters-list_' + (listType === 'black' ? 'white' : 'black'));

            // проверка имени добавляемого ящика

            // скрываются все ошибки
            $form.find('.b-notification').addClass('g-hidden');
            // поле не заполнено
            if (!email) {
                $form.find('.b-notification_error-required').removeClass('g-hidden');
            // поле заполнено не верно
            } else if (!Jane.FormValidation.checkEmail(email)) {
                $form.find('.b-notification_error-pattern').removeClass('g-hidden');
            // пытаются добавить свой емейл в список
            } else if ($.inArray(email, userEmails) > -1) {
                $form.find('.b-notification_error-own-email').removeClass('g-hidden');
            // имя ящика уже присутвует в текущем списке
            } else if (getListItemsForNode($currentList).filter(function() {
                return this.value === email;
            }).length) {
                $form.find('.b-notification_error-already').removeClass('g-hidden')
                    .find('.b-notification__var-email').text(email);
            // имя ящика присутсвует в другом списке
            } else if (getListItemsForNode($otherList).filter(function() {
                return this.value === email;
            }).length) {
                // Хендлерам тоже нужно сказать удалить адрес из соседнего листа
                handler.push('do-filters-' + (listType === 'black' ? 'white' : 'black') + 'list-remove',
                             'filters-' + (listType === 'black' ? 'white' : 'black') + 'list');
                // нужно переспросить - действительно ли переносить ящик из другого списка в текущий
                Daria.Dialog.confirm({
                    title: '',
                    body: listType === 'black' ?
                        i18n('%Setup_Filters_blist_from_wlist', email) :
                        i18n('%Setup_Filters_wlist_from_blist', email),
                    width: 350,
                    okValue: i18n('%Да'),
                    cancelValue: i18n('%Нет'),
                    okHandler: function() {
                        addEmail(handler, email, $form, $currentList, $otherList);
                    }
                });
            // ошибок не случилось - просто добавляется ящик в текущий список
            } else {
                addEmail(handler, email, $form, $currentList);
            }
        }
    ));

    Actions.add(new Action("filters.lists-add-from-message", function(data) {
            var email = data.params.email;
            if (!email) {
                return;
            }

            var handler = ["do-filters-" + data.params.listtype + "list-add", "filters-blacklist", "filters-whitelist" ];
            var listType = data.params.listtype;
            var handlerName = 'filters-' + (listType === 'black' ? 'blacklist' : 'whitelist');
            var anotherHandlerName = "filters-" + (listType === 'black' ? 'whitelist' : 'blacklist');
            var userEmails = Jane.$H("account-information").getEmails();

            $(document).trigger("b-mail-dropdown-closeall"); // дропдаун всё равно закрывается

            if ($.inArray(email, userEmails) !== -1) {
                if (listType === 'black') {
                    Daria.Statusline.showMsg({
                        name: 'setup.filters-blist-add-self-forbidden',
                        body: i18n('%Setup_Filters_blist_add_self_forbidden'),
                        body3: i18n('%3pane_Setup_Filters_blist_add_self_forbidden')
                    });
                } else {
                    Daria.Statusline.showMsg({
                        name: 'setup.filters-wlist-add-self-forbidden',
                        body: i18n('%Setup_Filters_wlist_add_self_forbidden'),
                        body3: i18n('%3pane_Setup_Filters_wlist_add_self_forbidden')
                    });
                }

                return;
            }

            Jane.Handler.doAll(["filters-blacklist", "filters-whitelist"], {}, function() {
                // имя ящика уже присутствует в списке
                if (Jane.$H(handlerName).hasEmail(email)) {
                    Daria.Statusline.showMsg({
                        name: 'setup.filters-lists-add-from-message',
                        body: listType === 'black' ?
                            i18n('%Setup_Filters_blist_already_js') :
                            i18n('%Setup_Filters_wlist_already_js'),
                        body3: listType === 'black' ?
                            i18n('%3pane_Setup_Filters_blist_already_js') :
                            i18n('%3pane_Setup_Filters_wlist_already_js')
                    });
                // имя ящика присутсвует в другом списке
                } else if (Jane.$H(anotherHandlerName).hasEmail(email)) {
                    // нужно переспросить - действительно ли переносить ящик из другого списка в текущий
                    Daria.Dialog.confirm({
                        body: listType === 'black' ?
                            i18n('%Setup_Filters_blist_from_wlist', email) :
                            i18n('%Setup_Filters_wlist_from_blist', email),
                        width: 350,
                        okValue: i18n('%Да'),
                        cancelValue: i18n('%Нет'),
                        okHandler: function() {
                            handler.push('do-filters-' + (listType === "black" ? 'white' : 'black') + 'list-remove');
                            addEmail(handler, email);
                        }
                    });
                } else {
                    addEmail(handler, email);
                }
            });
        }
    ));

    /**
     * Удалить ящик/ящики из списка
     */
    Actions.add(new Action(
        "filters.lists-remove",
        function(data) {

            var handler = ["do-filters-" + data.params.listtype + "list-remove", "filters-" + data.params.listtype + "list"];
            var $form = $(data.event.currentTarget);
            var params = $form.serializeObject();

            // дизейблится кнопка в знак обработки удаления
            $form.find('.b-filters-list__added-button').prop('disabled', true);

            // нужно вырезать из массива нечекнутые чекбоксы (пустые значения)
            params['email'] = $.grep($.makeArray(params['email']), function(a) {
                return a;
            });

            // если не осталось ящиков, которые надо бы удалить - можно не продолжать
            if (!params.email || !params.email.length) {
                return;
            }

            Jane.Handler.doAll(handler, params, function(data) {
                var error = jpath(data, '.handlers[.name == "' + handler[0] + '"].error.data[.status == "error"]')[0];

                if (!error) {
                    var $emails = getListItemsForNode($form);
                    var $checked = $emails.filter(':checked');

                    // если удалены все ящики из списка,
                    // нужно удалить все ящики и скрыть форму
                    if ($emails.length === $checked.length) {
                        $form.closest('.b-filters-list__added').addClass('g-hidden');
                        $form.find('.b-filters-list__added-list').empty();
                    } else {
                        $checked.closest('.b-filters-list__item-list').remove();
                    }
                } else {
                    // если запрос не выполнился успешно - надо раздизейблить кнопку,
                    // чтобы пользователь мог попробовать ещё раз,
                    // если же все выделенные ящики успешно удалены, то выделенных не осталось,
                    // и по логике - кнопка должна оставаться задизейбленной
                    $form.find('.b-filters-list__added-button').prop('disabled', false);
                }
            });
        }
    ));
}());

/* ../../actions/settings/filters-lists.js end */

/* ../../actions/settings/filters.js begin */
(function() {

    /*
     * Экшен включения/выключения фильтра
     */
    Actions.add(new Action("filters.on", function(o) {
        var params = o.params;
        var e = o.event;
        var handler = params.enabled === '1' ? 'do-filters-on' : 'do-filters-off';

        Handler.doAll(
        [
            {
                handlers: [handler],
                params: {
                    id: params.id,
                    enabled: params.enabled
                }
            },
            {
                handlers: ['filters']
            }
        ],

        function(data) {
            var error = jpath(data, '.handlers.error.data[.status == "error"]')[0];
            // Если всё прошло удачно, то патчим HTML
            if (!error) {
                var $elem = $(e.target).closest(".b-switch");
                if (params.enabled === '1') {
                    $elem.removeClass("b-switch_off").addClass("b-switch_on");
                    $elem.closest(".b-filters-filter").removeClass("b-filters-filter_disabled").addClass("b-filters-filter_enabled");
                } else {
                    $elem.removeClass("b-switch_on").addClass("b-switch_off");
                    $elem.closest(".b-filters-filter").addClass("b-filters-filter_disabled").removeClass("b-filters-filter_enabled");
                }
            }
        });
    }));

    Actions.copy("filters.on", "filters.off");

    /**
     * Удаление фильтра
     */
    Actions.add(new Action("filters.delete", function(o) {
        var params = o.params;
        var e = o.event;

        function delete_filter() {

            Daria.Dialog.close();

            Handler.doAll(
            [
                {
                    handlers: ['do-filters-delete'],
                    params: { id: params.id }
                },
                {
                    handlers: ['filters']
                }
            ],

            function(data) {
                var error = jpath(data, '/.handlers[.name == "do-filters-delete"].error.data[.status == "error"]')[0];

                if (!error) {

                    if (e) {
                        // Удаляем текущий фильтр из списка
                        $(e.target).closest('.b-filters-filter').remove();
                    }

                    var hFilters = Jane.$H('filters');

                    // Если больше нет фильтров, тогда скрываем блок b-filters__created
                    if (jpath(hFilters.getCache(hFilters.getKey()), '.action[!.hidden && .condition.field != "X-yandex-rpop-id")]').length === 0) {
                        $('.b-filters__created, .b-filters__created-title', Jane.$B('setup-filters').getCache().node).remove();
                    }
                }
            });
        }

        // конфёрм нужен, только если пользователь кликнул по ссылке удалить
        if (e) {
            Daria.Dialog.open({
                title: i18n('%Setup_Filters_Dialog_Remove_title'),
                body: i18n('%Setup_Filters_Dialog_remove_body'),
                buttons: [{
                    name: 'submit',
                    value: i18n('%Удалить'),
                    onclick: delete_filter
                }, {
                    name: 'cancel'
                }]
            });
        } else {
            delete_filter();
        }

    }));

    /**
     * Добавление фильтра
     */
    Actions.add(new Action("filters.add", function(o) {

        var $form = $(o.event.currentTarget);
        var $submit = $form.find('input[type=submit]');
        var setupFilterCreate = Daria.FilterSimpleCreate();

        var complete = function() {
            $submit.prop('disabled', false);
            $form.prop('disabled', false);
        };

        var success = function() {
            Page.go('#setup/filters');
        };

        $.extend(setupFilterCreate, {
            complete: complete,
            success: success,
            form: $form,
            validate: function(params) {
                return Jane.Block.SetupFiltersCreate.validate($form, params);
            }
        });

        setupFilterCreate.create();
    }));

    /**
     * Редактировать фильтр
     */
    Actions.add(new Action("filters.edit", function(o) {

        var opts = o.params || {};
        var $form = opts.$form || $(o.event.currentTarget);
        var params = $form.serializeObject();
        //TODO: надо объединить edit и add, они делают одно и тоже
        Jane.Block.SetupFiltersCreate.processParams(params);

        if (o.params.confirm) {
            Jane.Actions.run('filters.enable-forwarding-options', {
                onsave: true
            });
            return;
        }

        if (!Jane.Block.SetupFiltersCreate.validate($form, params)) {
            return;
        }

        if (params.forward_with_store == 'on') {
            for (var i = 0, len = params.clicker.length; i < len; i++) {
                params.clicker[i] = (params.clicker[i] == 'forward') ? 'forwardwithstore' : params.clicker[i];
            }
        }

        Handler.doAll(
        [
            {
                handlers: ['do-filters-edit'],
                params: params
            },
            {
                handlers: ['filters']
            }
        ],

        function(data) {

            //DARIA-16138 - Y-T: Применение фильтра к существующим письмам
            var id = jpath(data, '/.handlers[.name == "do-filters-edit"].data.id')[0];
            if (Daria.IS_CORP || Jane.$H('settings').getSetting('search-version') >= '2014.03.14') {
                if (opts.callback && id) {
                    opts.callback(id);
                    return;
                }
            }

            if (id) {
                Page.go('#setup/filters');
            } else {
                Daria.Statusline.showMsg({
                    body: i18n('%Произошла_ошибка'),
                    body3: i18n('%3pane_Произошла_ошибка')
                });
            }
        });
    }));

    // Прокручиваем наверх
    Actions.add(new Action("filters.scrollTop", function() {
        if (Daria.layout !== '2pane') {
            $(".b-layout__inner").scrollTop(0);
            return;
        }

        $(window).scrollTop(100);
    }));

    /**
     * Получаем список писем,
     * которые удовлетворяют заданному фильтру.
     *
     * TODO:
     * 1. mailboxBuilder.itemsPerPage=10; - Узнать у kneht можно ли поменять на 30
     */
    Actions.add(
    new Action('filters.preview', function(o) {
        // находим ближайшею форму
        var target = o.event.currentTarget;
        var $form = $(target).closest('form');
        var params = $form.serializeObject();

        Block.SetupFiltersCreate.processParams(params);

        var increment = 10;
        var handlers = ['filters-preview', 'filters', "labels", "folders", "collectors", "settings", "filters"];

        params.offset = parseInt(o.params.offset || 0, 10);
        params.count = increment;

        // Добавляем индикатор загрузки
        $(target).addClass("b-messages__loading");

        // Получаем список писем попавших под фильтр.
        Handler.doAll(handlers, params, function(data) {
            // Удаляем индикатор загрузки
            $(target).removeClass("b-messages__loading");
            var listHTML = Jane.tt('mail-setup:filtered-messages-preview', {
                offset: params.offset + increment,
                increment: increment,
                config: Daria.Config.XSL
            }, handlers, params);

            var rootNode = Jane.$B('setup-box').active.getCache().node;
            var containerNode = $('.js-preview-actions', rootNode);

            if (listHTML) {
                var $list = $(listHTML);
                $list.find('input[type="checkbox"]').hide();

                // Если это не перый запрос и не запрос с новыми
                // параметрами то тогда заменяем кнопки
                // и добавляем результат к уже существующему
                // списку.
                if (containerNode.length && !o.params.clean) {
                    containerNode.replaceWith($list);
                    return;
                }

                // Иначе создаем новый список.
                $('.js-preview-list', rootNode).html($list);
                $('.js-preview-header').removeClass('g-hidden');

                params.messages = jpath(data, '.handlers[.name == "filters-preview"]')[0];
                Daria.SocialAvatarsFiltersPreview($('.js-preview-list'), params);
            }
        });
    }));

    Actions.add(
    new Action('filters.apply', function(o) {
        var target = o.event.currentTarget;
        var $form = $(target).closest('.daria-form');

        Actions.run('filters.edit', {
            $form: $form,
            refresh: true,
            callback: function(filterID) {
                var handlers = ['filters-apply'];
                var params = {
                        id: filterID
                    };
                Jane.Handler.doAll(handlers, params, function(data) {
                    var error = jpath(data, '/.handlers[.name == "filters-apply"].error.type')[0];

                    if (error) {
                        $('.js-preview-list', Jane.$B('setup-box').active.getCache().node).text(i18n('%Произошла_ошибка'));
                        return;
                    }

                    // show notification
                    Page.go('#setup/filters', function() {
                        // clear cache for redraw folders
                        // and messages
                        Jane.Handler.clearCache(['folders', 'messages', 'message-nearest', 'message-thread-nearest']);

                        Daria.Statusline.showMsg({
                            name: 'filters-apply',
                            speed: 'fast',
                            body: i18n('%Setup_Filters_Фильтр_успешно_применился'),
                            body3: i18n('%3pane_Setup_Filters_Фильтр_успешно_применился')
                        });
                    });
                });
            }
        });
    }));

    /**
     * Раздисейбливает поля с правилами пересылки
     */
    Actions.add(new Action("filters.enable-forwarding-options", function(o) {
        var callback;
        var dialog;
        var key = o.params.key;
        var watcherName = 'filterPasswordTries';
        var tries = Jane.watcher.get(watcherName) || 0;

        var onSubmit = function() {
            var $body = dialog.$body;
            var password = $body.find('[name="password"]').val();
            var withCaptcha = key;
            var userKey;

            if (withCaptcha) {
                userKey = $.trim($body.find('[name="captcha_entered"]').val());
            }

            if (!password) {
                $body.find('.b-notification_error-password').removeClass('g-hidden');
                return;
            }

            // не ввели captcha
            if (withCaptcha && !userKey) {
                reset();
                $body.find('.b-notification_error-captcha').removeClass('g-hidden');
                getCaptcha();
                return;
            }

            $body.find('.b-notification').addClass('g-hidden');
            // check password on the server
            Jane.Handler.doAll(withCaptcha ? ['captcha-check', 'filters-check-password'] : ['filters-check-password'], {
                password: password,
                type: 'nlatm',
                captcha_key: key,
                captcha_entered: userKey
            }, function(data) {
                var passwordCheck = jpath(data, '/.handlers[.name == "filters-check-password"].data.body.check')[0];
                passwordCheck = passwordCheck === 'true';

                var captchaStatus = jpath(data, '/.handlers[.name == "captcha-check"].data.status')[0];
                var captchaCkeck = !withCaptcha || captchaStatus === "ok";
                var $formNode;

                var isCorrect = passwordCheck && captchaCkeck;

                if (isCorrect) {
                    Jane.events.trigger('dependence.change', {
                        id: 'passwd',
                        disable: false,
                        instance: 'setup-filters-create'
                    });
                    $('.js-setup_passwd').addClass('g-hidden');
                    dialog.close();
                    $formNode = Jane.$B('setup-filters-create').$node.find('.daria-form');
                    $formNode.attr('data-params', '');
                    $formNode.append('<input type="hidden" name="password" value="' + password + '" />');
                    $('body').focus();

                    setTries(0);

                    if (callback) {
                        callback();
                    }
                    return;
                }

                // при неверном вводе пароля показываем captcha

                reset();

                if (setTries() > 2) {
                    getCaptcha();
                }

                if (captchaCkeck) {
                    $body.find('.b-notification_error-password').removeClass('g-hidden');
                } else {
                    $body.find('.b-notification_error-captcha').removeClass('g-hidden');
                }

            });
        };

        var reset = function() {
            if (!dialog) {
                return;
            }
            dialog.$body.find('input[type="text"]').val('');
        };

        var setTries = function(value) {
            tries = value || tries + 1;
            Jane.watcher.set(watcherName, tries);
            return tries;
        };

        // Загружаем captcha
        var getCaptcha = function() {
            var dfd = $.Deferred();
            Jane.Handler.doAll(["captcha"], {
                type: 'nlatm'
            }, function(data) {
                var addr = jpath(data, ".handlers.data.url")[0] || '';
                var key = addr.split("key=")[1];

                showCaptcha(key, addr);
                dfd.resolve([addr.split("key=")[1], addr]);
            });

            return dfd;
        };

        // показываем captcha
        var showCaptcha = function(newKey, addr) {
            var $body;

            if (!dialog) {
                return;
            }

            Jane.$B('setup-filters-create').$node.find('[action="filters.enable-forwarding-options"]').attr('data-params', 'key=' + newKey + '&addr=' + addr);
            // устанавливаем картинку и показываем captcha
            $body = dialog.$body;
            $body.find('.b-notification_captcha').removeClass('g-hidden');
            $body.find('.b-captcha__image').attr('src', addr);

            // сохраняем ключ
            key = newKey;
        };

        var title = i18n('%Setup_Filters_password_dialog_title');

        if (o.params.onsave) {
            title = i18n("%Setup_Filters_password_alert");
            callback = function() {
                Actions.run('filters.edit', {
                    $form: Jane.$B('setup-filters-create').$node.find('.daria-form'),
                    refresh: true
                });
            };
        }

        // показываем диалог
        dialog = Daria.Dialog.open({
            body: Jane.tt('mail-setup:filters-check-password', o.params),
            title: title,
            width: 430,
            onopen: function() {
                var $body = $(this.body);
                var $inputNode = $body.find('[name="password"]');

                $inputNode.bind('keyup', function(e) {
                    var password = $inputNode.val();
                    var invalidPassword = !/^[-a-z0-9.`!@#$%^&*()_=+\[\]{};:"\\|,<>\/?]*$/i.test(password);

                    $body.find('.b-notification__error').addClass('g-hidden');
                    if (invalidPassword) {
                        // Invalid password
                        $body.find('.b-notification_error-invalid-password').removeClass('g-hidden');
                        return;
                    }

                    if (e.keyCode == 13) {
                        onSubmit();
                        return;
                    }
                });

                $body.find('.js-filters-captcha').bind('keyup', function(e) {
                    if (e.keyCode == 13) {
                        onSubmit();
                        return;
                    }
                });

                // показать другую картинку
                $body.on("click", ".js-reload-update", getCaptcha);
                $inputNode.keyup().focus();
            },
            buttons: [{
                name: 'submit',
                value: i18n('%Setup_Filters_password_dialog_confirm'),
                onclick: onSubmit
            }, {
                name: 'cancel'
            }]
        });
    }));

    /**
     * Показать инпут с названием фильтра
     */
    Actions.add(new Action("filters.show-filter-name", function(o) {
        $(o.event.target).closest('.b-form-layout__block').addClass('g-hidden').next('.b-form-layout__block').removeClass('g-hidden').find('.b-form-element__input-text').focus();
    }));

    /**
     *  Экшен добавляет названия папки/метки в инпут на облегченной странице создания фильтра
     */

    Actions.add(new Action("filters.select-folder", function(o) {
        $("input[name=" + o.params.type + "_name], input[name=label_name]", Jane.$B("setup-filters-create-simple").cache.node).val(
        ((o.params.type === "label") ? Jane.$H("labels").getLabelById(o.params.val) : Jane.$H("folders").getFolderById(o.params.val)).name);
        $(document).trigger("b-mail-dropdown-closeall");
    }));

    /**
     * Экшн подтверждения email-a
     */
    Actions.add(new Action("filters.accept-email", function(o) {
        var $confirmStatus = $(o.event.currentTarget).find('.b-settings-field__confirm-filter');
        Handler.doAll(
        ["do-filters-accept-email"], {
            e: Daria.Page.params.e
        },

        function(data) {
            var error = jpath(data, '/.handlers[.name == "do-filters-accept-email"].error.data[.status == "error"]')[0];
            if (!error) {
                $confirmStatus.addClass('b-settings-field__confirm-filter_on');
            } else {
                $confirmStatus.addClass('b-settings-field__confirm-filter_error');
            }
            $confirmStatus.removeClass('b-settings-field__confirm-filter_off');
        });
    }));

    /**
     * Экшн добавления фильтра в попапе
     */
    Actions.add(new Action("folder.filter", function(o) {
        var body = $(Jane.tt("mail-common:simple-filter-create-folder", {
            fid: o.params.id,
            single: null
        }));
        var filter = Daria.FilterSimpleCreatePopupSingle({
            form: body.find("form")
        });
        body.on("click", ".js-filter-link", function() {
            Jane.c(["Новый поп-ап фильтров", "папка", "клик на подробные условия"]);
        });
        Daria.Dialog.open({
            title: i18n("%Setup_Filters_Simple_title_folder"),
            body: body,
            buttons: [{
                name: 'submit',
                value: i18n("%Setup_filters-create_title"),
                onclick: function() {
                    Jane.c(["Новый поп-ап фильтров", "папка", "клик по создать"]);
                    return filter.create();
                }
            }, {
                name: 'cancel'
            }],
            oncancel: function() {
                Jane.c(["Новый поп-ап фильтров", "папка", "клик по отменить"]);
            },
            width: 432,
            onopen: function() {
                Jane.c(["Новый поп-ап фильтров", "папка", "показ поп-апа для создания фильтра на папку"]);
                body.find("input[name=field3]").eq(0).focus();
                filter.bindAutocompleter();
            }
        });
    }));

    Daria.FilterSimpleCreatePopupSingleLabel = function(params) {
        var label = Jane.$H('labels').getLabelById(params.id);
        var labelName = (label['symbol'] == 'priority_high') ? 'priority_high' : label.name;
        var body = $(Jane.tt('mail-common:simple-filter-create-label', {
            name: labelName,
            id: params.id,
            single: null
        }));
        var filter = Daria.FilterSimpleCreatePopupSingle({
            form: body.find("form")
        });
        var open = function() {
            Daria.Dialog.open({
                title: i18n("%Setup_Filters_Simple_title_label"),
                body: body,
                buttons: [{
                    name: 'submit',
                    value: i18n("%Setup_filters-create_title"),
                    onclick: function() {
                        Jane.c(["Новый поп-ап фильтров", "метка", "клик по создать"]);
                        return filter.create();
                    }
                }, {
                    name: 'cancel'
                }],
                oncancel: function() {
                    Jane.c(["Новый поп-ап фильтров", "метка", "клик по отменить"]);
                },
                width: 432,
                onopen: function() {
                    Jane.c(["Новый поп-ап фильтров", "метка", "показ поп-апа для создания фильтра на метку"]);
                    body.find("input[name=field3]").eq(0).focus();
                    filter.bindAutocompleter();
                }
            });
        };

        body.on("click", ".js-filter-link", function() {
            Jane.c(["Новый поп-ап фильтров", "метка", "клик на подробные условия"]);
        });

        return {
            open: open,
            filter: filter
        };
    };

    Actions.add(new Action("label.filter", function(o) {
        var simpleFilterLabel = Daria.FilterSimpleCreatePopupSingleLabel(o.params);
        simpleFilterLabel.open();
    }));

    Actions.add(new Action("label.filter.empty-list", function(o) {
        var simpleFilterLabel = Daria.FilterSimpleCreatePopupSingleLabel(o.params);

        Jane.c(["Промо меток", "Писем с такой меткой нет", "клик по ставить метку автоматически"]);

        $.extend(simpleFilterLabel.filter, {
            success: function() {
                Page.go(window.location.hash);
            }
        });

        simpleFilterLabel.open();
    }));
}());

/* ../../actions/settings/filters.js end */

/* ../../actions/wizard/wizard.js begin */
Actions.add(
    new Action("wizard.start", function(o) {
        Daria.Wizard.start(o.params.step ? o.params : {"step": "interface"});
        // фиксируем последнюю активность пользователя при клике на "Далее" в визарде
        Jane.$H('settings').setLastActive();
    })
);

//sender
Actions.add(
    new Action("wizard.userpicMake", function() {
        Jane.$B('wizard-sender').userpicMake();
    })
);

Actions.add(
    new Action("wizard.userpic-remove", function() {
        Daria.upicUploader.upload(null, Jane.$B('wizard-sender').userpicRemove.bind(Jane.$B('wizard-sender')));
    })
);

Actions.add(new Action(
    "settings.userpic-cancel",
    function(o) {
        $(o.event.target).closest("#camera").addClass("g-hidden");
    }
));

//labels
Actions.add(
    new Action("wizard.colorPicker", function(o) {
        var color = o.params.color;
        Daria.Dropdown.getCurrent().find('.b-label').attr({'style': 'background:' + color, 'data-params': 'color=' + color.replace('#', '')});
        $(document).trigger("b-mail-dropdown-closeall");
    })
);

//done
Actions.add(new Action("wizard.done", function() {
    Daria.Dialog.close();
    // фиксируем последнюю активность пользователя при клике на "Далее" в визарде
    Jane.$H('settings').setLastActive();
}));

Actions.add(
    new Action("wizard.changeStep", function(o) {
        Jane.Block.WizardDone.changeStep(o.params.to);
    })
);

Jane.Actions.create('wizard.open-inline-block', function() {
    Daria.InlineWizard.open(null, 1);
});

Jane.Actions.create('wizard.close-inline-block', function() {
    Daria.InlineWizard.close();
});

Jane.Actions.create('wizard.step-inline-block', function(o) {
    Daria.InlineWizard.step(o.params.step);
});

Jane.Actions.create('wizard.end-inline-block', function() {
    Daria.InlineWizard.end();
});


/* ../../actions/wizard/wizard.js end */


/* ../../actions/alerts/alerts.js begin */
Daria.Alerts = {
    messages: {
       // "1" : "phone"
    },
    callback: function(alerts) {
        var that = this;
        if (alerts.messages) {
            $.each(alerts.messages, function() {
                var callback = that.messages[this.id];
                if (typeof that[callback] == "function") {
                    that[callback](this);
                }
            });
        }
    }
};

/* ../../actions/alerts/alerts.js end */


/* ../../actions/header/header.js begin */
// Меняет значение почты по-умолчанию в хедере страницы
Jane.Actions.create("header.update-default-email", function(e) {
    var email = e.params['email'] || Jane.$H('settings').getSetting('default_email');

    if (email) {
        $('.js-header-user-name').text(email);
    }
});

/* ../../actions/header/header.js end */

/* ../../actions/footer/footer.js begin */
Jane.Actions.create("footer.whats-new", function() {
    Jane.c([ "Что нового", "Клики" ]);

    return true;
});

Jane.Actions.create("footer.how-plasticine", function() {
    Jane.c([ "Как делалась пластилиновая тема", "Клики" ]);

    return true;
});

/* ../../actions/footer/footer.js end */

/* ../../actions/phone/phone.js begin */
Actions.add(new Action("phone.getAppLink", function(o) {
    var number;

    if (o.event) {
        number = $(o.event.currentTarget).find("[name=number]").val();
    }

    number = number || o.params.phoneNumber;
    number = number && $.trim(number.replace(/(?:\(|\)|\s+|\-)/g, ""));

    Jane.events.trigger("phone-disable-buttons");

    if (!number) {
        Jane.events.trigger("phone.link-sent-failure", { status: "NONUMBER" });
        return;
    }

    if (!number.match(/\d{10}/)) {
        Jane.events.trigger("phone.link-sent-failure", { status: "BADNUMFORMAT" });
        return;
    }

    Jane.Handler.doAll(["get-link-app"], { phone_full: number }, function(data) {
        if (data) {
            Jane.events.trigger("phone.linkSent", {
                number: number
            });
            return;
        }
        // Иначе обрабатываем зажигаем событие говорящее
        // об ошибке
        Jane.events.trigger("phone.link-sent-failure", {
            status: 'DONTKNOWYOU'
        });
    });
}));

Actions.add(new Action("phone.close", function() {
    Daria.phoneValidation.close();
    Jane.c(Daria.phoneValidation.metrika("Клик по крестику"));
}));

Actions.add(new Action("phone.revalidate", function(o) {

    // При ревалидации на #done, надо заменить ссылку на "Код отправлен повторно"
    if (o.params.done) {
        $(o.event.target).closest('.b-done__box_phone').addClass('b-done__box_phone_revalidate');
    }

    var params = {
        number: o.params.number || Jane.$H("phone-register").getNumber(),
        revalidate: "yes",
        force: true
    };

    Actions.run("passport.phone-register", o.event, params);
}));

Actions.add(new Action("phone.goBack", function(o) {
    Jane.events.trigger('phone-goBack', {
        originalObject: o
    });
    return true;
}));

Actions.add(new Action("phone.faq", function(o) {
    var target = $(o.event.target);
    var offset = target.offset();
    var options = {
            width: 550,
            body: i18n('%Messages_phone_hint', Daria.Config["passport-domain"]),
            side: 'left',
            onTarget: {
                y: offset.top + 22,
                x: offset.left + 15,
                side: 'top',
                pos: "right"
            }
        };

    if (o.params.confirm) {
        $.extend(options, {
            width: 450,
            body: i18n('%ValidatePhone_hint', Daria.Config["passport-domain"])
        });
    }

    Daria.Dialog.open(options);
}));

Actions.add(new Action("phone.register", function(o) {
    var target = o.event ? $(o.event.target) : o.params.$node;

    // Запускаем экшн только по кнопке
    if (target.is("form, button, input[type=submit], input[type=button]") || "force" in o.params) {
        var $target = o.event ? $(o.event.currentTarget) : o.params.$node;
        var number = $target.find("input[name=number]").val() || "";
        var params;
        var action;
        var logComposeSettings = function(logObject) {
            // Считаем настройки в compose daria-10199
            Jane.c({
                'отправить адресату SMS-уведомление после отправки письма': logObject
            });
        };
        number = number && number.replace(/(?:\(|\)|\s+|\-)/g, "");

        Jane.events.trigger('phone-registered-begin');
        Jane.events.trigger("phone-disable-buttons");

        if (!number) {
            logComposeSettings({
                'клик на подтвердить телефон': 'ошибка'
            });

            Jane.events.trigger("phone-registered-failure", { status: "NONUMBER", o: o });
            Jane.events.trigger('phone-registered-end');
            return;
        }

        if (!number.match(/^\+|\d{10}/)) {
            logComposeSettings({
                'ввод телефона': 'ошибка'
            });

            Jane.events.trigger("phone-registered-failure", { status: "BADNUMFORMAT", o: o });
            Jane.events.trigger('phone-registered-end');
            return;
        }

        params = {
            number: number
        };

        if (number == Jane.$H("settings").getSetting("phone-number")) {
            action = "phone.revalidate";
        } else {
            action = "passport.phone-register";
        }

        Jane.Actions.run(action, o.event, params);
    } else {
        return true;
    }
}));

Actions.add(new Action('phone.confirm', function(o) {
    var target = o.event ? $(o.event.target) : o.params.$node;
    // Запускаем экшн только по кнопке
    if (target.is('form, button, input[type=submit], input[type=button]') || 'force' in o.params) {
        var $target = o.event ? $(o.event.currentTarget) : o.params.$node;
        var code = $.trim($target.find('input[name=code]').val());
        var params;
        var number = o.params.number || Jane.$H('settings').getSetting('phone-number') || Jane.$H('phone-unconfirmed').getNumber();
        var phoneid = Jane.$H('phone-unconfirmed').getIdByNumber(number);

        Jane.events.trigger('phone-confirmed-begin');
        Jane.events.trigger('phone-disable-buttons');

        if (!code) {
            Jane.events.trigger('phone-confirmed-failure', {status: 'NOCODE'});
            Jane.events.trigger('phone-enable-buttons');
            Jane.events.trigger('phone-confirmed-end');
            return;
        }

        params = {
            number: number,
            code: code
        };

        if (phoneid) {
            params.phoneid = phoneid;
        }

        Actions.run('passport.phone-confirm', o.event, params);
    } else {
        return true;
    }
}));


/**
 * Перехват работы ссылки для проверки, не послужил ли показ какой-нибудь промо мотивационным толчком
 * к переходу по ссылки и для отправки метрики
 */
Jane.Actions.create('validation.security-motivation', function(o) {
    var goalMetrikaMessage = {
        'phones': 'Переход в телефоны',
        'auxilary-emails': 'Переход в дополнительные адреса'
    }[o.params.goal];

    var phonesPromo = Daria.phoneValidation;
    var SQWizard = Daria.SecurityQuestionsWizard;

    var WEEK = Daria.timify({weeks: 1});
    var isLessOneWeekPhonePromo = phonesPromo.isLessThenOneWeekAfterShow();
    var isLessOneWeekSQPromo = SQWizard.isLessThenAfterShow(WEEK);
    var isLessOneWeekSQPromoExperiment = SQWizard.isLessThenAfterShow(WEEK, 'select-as-link');

    // Здесь надо учитывать, что проверяется недельный срок после показа этих промок, и
    // конфликта быть не должно так как промоменеджер показывает промки не чаще одного раза в неделю
    if (isLessOneWeekPhonePromo) {
        phonesPromo.motivationMetrika(goalMetrikaMessage);
    } else if (isLessOneWeekSQPromo) {
        new SQWizard().motivationMetrika(goalMetrikaMessage);
    } else if (isLessOneWeekSQPromoExperiment) {
        new SQWizard({experiment: 'select-as-link'}).motivationMetrika(goalMetrikaMessage);
    }

    o.event.preventDefault();
    var $target = $(o.event.currentTarget);
    var href = $target.attr('href');
    var windowTarget = $target.attr('target');
    var win = window.open(href, windowTarget);
    win.focus();
});

/* ../../actions/phone/phone.js end */


/* ../../actions/groupon/groupon.js begin */
(function(global) {
    var Jane = global.Jane;
    var Action = Jane.Action;

    var repaint = function($node) {
        $node = $node || $('body');
        setTimeout(function() {
            $node.addClass('repaint-ie').removeClass('repaint-ie');
        }, 0);
    };

    var metrika = function() {
        var msg = ['Предложение фильтровать групоны'];
        var bGrouponFilters = Jane.Block.GrouponFilters;
        var rest = $.merge([], arguments);

        if (bGrouponFilters.grouponPagType) {
            msg.push(bGrouponFilters.grouponPagType);
        }

        if (bGrouponFilters.grouponAction) {
            msg.push(bGrouponFilters.grouponAction);
        }

        // Добавляем больше конкретики
        // Например номер показа 1-й, 2-й или 3-й
        // промо диалога
        rest = $.map(rest, function(str) {
            return $.trim(Daria.supplant(str, [bGrouponFilters.popupShowed || '']));
        });

        $.merge(msg, rest);

        if (Daria.DEBUG) {
            if (console && console.info) {
                console.info('metrika groupon: ', msg);
            }
        }

        Jane.c(msg);
    };

    /**
     * Создает папку
     */
    var createFolder = function(params, callback) {
        return Jane.Handler.doAll(['do-folders-add', 'folders'], params, function() {
            var folder = Jane.$H('folders').getFolderByName(params.folder_name);
            if (folder && folder.fid) {
                callback(folder);
            }
        });
    };
    var deleteFilter = function(id) {
        return Jane.Handler.doAll(
            ["do-filters-delete", "filters"], {
                id: id
            }, function(data) {
                var ok = jpath(data, '/.handlers.data[.name == "do-filters-delete" && .status == "ok"]');
                return ok;
            });
    };

    /**
     * @desc Выбрать условие для фильтра
     */
    var addCondition = new Action('groupon.addCondition', function(o) {
        var $domNode = $(o.event.currentTarget);

        var metrikaParams = [];

        if ($domNode.is('[data-nb=checkbox]')) {
            // это островная чекбокс-кнопка (промка групонов)
            $domNode.toggleClass('is-checked');
            metrikaParams.push('Промо на всех', 'Выбор ' + $domNode.attr('data-label'));
        } else {
            $domNode.addClass('b-link_selected');
            metrikaParams.push('Плашки с тематиками (popup)', 'Тематики {0}', $domNode.attr('data-label'));
        }

        $domNode.attr('data-action', 'groupon.removeCondition').attr('data-selected', 'selected');

        Jane.Block.GrouponFilters.onChangeCondition(true);

        //@metrika
        metrika.apply(null, metrikaParams);

        return true;
    });

    /**
     * @desc Удалить условие для фильтра
     */
    var removeCondition = new Action('groupon.removeCondition', function(o) {
        var $domNode = $(o.event.currentTarget);
        $domNode.removeClass('b-link_selected').attr('data-action', 'groupon.addCondition').removeAttr('data-selected');

        Jane.Block.GrouponFilters.onChangeCondition();
        return true;
    });

    /**
     * @desc Созадать пользовательское условие для фильтра
     */
    var addCustomCondition = new Action('groupon.addCustomCondition', function() {
        var $domNode = Jane.Block.GrouponFilters.getCurrentNode();
        var $label = $domNode.find('.js-groupon-filter-input');
        var label = $label.val();
        var itemNode;

        if (!label) {
            return;
        }

        itemNode = Jane.tt('mail-common:groupon-filter-item', {
            label: label,
            selected: true
        });
        $domNode.find('.js-groupon-list').append(itemNode);
        $label.val('');

        //@metrika
        metrika('Плашки с тематиками (popup)', 'Тематики {0}', label);
        Jane.Block.GrouponFilters.onChangeCondition(true);
    });

    /**
     * @desc Создание фильтра для groupon вида:
     *       - Если 'Тело письма' совпадает с 'авиа'
     *       - или 'Тело письма' совпадает с 'йога'
     *       - ...
     */
    var createFilter = new Action('groupon.createFilter', function(o) {
        var $domNode = Jane.Block.GrouponFilters.getCurrentNode();
        var bGrouponFilters = Jane.Block.GrouponFilters;

        var onComlete = function() {
            $domNode.find('.b-link_js').removeClass('g-hidden');
            $domNode.find('[data-text]').each(function() {
                var $node = $(this);
                $node.html($node.attr('data-text'));
                $node.removeAttr('data-text');
            });

            if (!Jane.Block.GrouponFilters.isPromo) {
                Jane.Block.GrouponFilters.showSuccessPopup();
            } else {
                Jane.Block.GrouponFilters.dialog.close();
            }
        };
        var inbox = Jane.$H("folders").getFolderBySymbol('inbox');
        var handlers = [];

        var $nodes = $domNode.find('[data-selected]:not([data-filter-id])').each(function() {
            var label = $(this).attr('data-label');

            handlers.push({
                handlers: ['do-filters-add', 'filters'],
                params: {
                    fid: o.params.fid1,
                    clicker: 'move',
                    field1: ['ya_syslabel', 'body'],
                    field2: ['1', '3'],
                    field3: ['vtnrf0grouponsite', label],
                    name: 'X-Yandex-Groupon',
                    letter: 'nospam',
                    logic: 1,
                    move_folder: inbox.fid
                }
            });
        });

        var isSetFilter = Jane.$H('settings').getSetting('groupon_filter');

        $domNode.find('[data-filter-id]:not([data-selected])').each(function() {
            var id = $(this).attr('data-filter-id');
            deleteFilter(id);
            $(this).attr('data-filter-id', false);
        });

        if (isSetFilter) {
            //@metrika
            metrika('Плашки с тематиками (popup)', 'Сохранить изменения');
        }

        Jane.Handler.getAll(handlers, function(data) {
            var filterIds = jpath(data, '/.handlers[.name == "do-filters-add"].data.id');

            if (filterIds.length) {
                $nodes.each(function(index) {
                    var id = filterIds[index][0];
                    $(this).attr('data-filter-id', filterIds[index][0]);
                    filterIds[index] = id;
                });
            }

            if (isSetFilter) {
                var hFilters = Jane.$H('filters');
                var ids = jpath(hFilters.data, '.action[.name == "X-Yandex-Groupon"].filid');
                var id = jpath(hFilters.data, '.action[.name == "X-Yandex-Groupon-2"].filid')[0];

                $.merge(ids, filterIds);
                ids.push(id);

                Jane.Handler.doAll(["do-filters-sort"], {
                    list: ids.join(',')
                });
            }
        }, {
            force: true
        });

        if (isSetFilter) {
            onComlete();
            return;
        }

        if (!Jane.$H('settings').getSetting('groupon_time')) {
            Jane.$H('settings').setSettings({
                groupon_time: (new Date().getTime())
            });
        }

        //@metrika
        // разделяем метрику из промо бабла и из старого попапа
        var metrikaPrefix = o.params['promo'] ? 'Промо на всех' : 'Плашки с тематиками (popup)';
        metrika(metrikaPrefix, 'Мне интересны только такие скидки {0}');

        bGrouponFilters.editing = true;
        bGrouponFilters.popupShowed = null;
        createFilterMoveToDiscount(onComlete);
    });

    var createFilterMoveToDiscount = function(callback) {
        // hide groupon actions
        grouponHeadActions();

        var hFolders = Jane.$H('folders');
        var folderName = 'Скидки';

        //DARIA-21162
        Jane.$H('settings').setSettings({
            groupon_filter: 'on',
            groupons_merge: 'disable'
        });

        // создаем папку 'Скидки'
        createFolder({
            folder_name: hFolders.getFolderByName(folderName) ? 'Скидочные сервисы' : folderName
        }, function(data) {
            // создаем фильтр "все письма от групонов класть в папку Скидки"
            Jane.Handler.getAll(['do-filters-add', 'filters'], {
                clicker: 'move',
                field1: ['ya_syslabel'],
                field2: ['1'],
                field3: ['vtnrf0grouponsite'],
                name: 'X-Yandex-Groupon-2',
                letter: 'nospam',
                logic: 0,
                move_folder: data.fid
            }, callback, {
                force: true
            });
        });
    };

    /**
     * @desc Показываем блок для создания фильтра
     */
    var showFilter = new Action('groupon.showFilter', function() {
        Jane.Block.GrouponFilters.showPopup();
    });

    /**
     * @desc Показываем промку для создания фильтра
     * @type {global.Jane.Action}
     */
    var showPromo = new Action('groupon.showPromo', function() {
        Jane.Block.GrouponFilters.showPromoPopup();
    });

    /**
     * @desc Скрываем блоки
     */
    var hide = new Action('groupon.hide', function(o) {
        var $domNode;

        grouponHeadActions(true, o);

        if (Boolean(o.params['get_all'])) {
            metrika('Промо на всех', 'Получать все');
        }

        if (Jane.Block.GrouponFilters.$dialog) {
            Jane.events.trigger('dialog.close');
            return;
        }

        if (Jane.$B('groupon-filters')) {
            $domNode = Jane.$B('groupon-filters').constructor.getCurrentNode();
            $domNode.find('.js-hiding').delay(100).slideUp();
        }
    });

    var grouponHeadActions = function(show, opts) {
        var hSettings = Jane.$H('settings');
        if (show) {
            $('.js-groupon-head-actions').show();

            //@metrika
            if (!opts || !opts.params.skip_mcounter) {
                metrika('Кнопки в шапке без плашек', 'Показ кнопок в шапке');
            }
            hSettings.setSettingOn('show_groupon_actions');
            return;
        }

        $('.js-groupon-head-actions').hide();
        hSettings.setSettingOff('show_groupon_actions');
    };

    var undo = new Action('groupon.undo', function(o) {
        var $domNode = Jane.$B('groupon-filters').constructor.getCurrentNode();
        var $editorNode;
        var node;

        // полностью заменяем groupon блок
        if (o.params.force) {
            node = Jane.tt('mail-common:groupon-container', null, ['filters', 'groupon-topics', 'filters', 'message-body', 'folders', 'message', 'settings']);
            $domNode.removeClass('b-intruder__unsubscribe').html(node);
            $editorNode = $(node);
        } else {
            node = Jane.tt('mail-common:groupon-filter-list', null, ['filters', 'groupon-topics']);
            $domNode.find('.js-groupon-list').replaceWith(node);
            Jane.Block.GrouponFilters.onChangeCondition();
            $editorNode = $domNode.find('.js-groupon-editor');
        }

        var $previous = $domNode.find('[data-previous]').removeAttr('data-previous');

        $editorNode.delay(100).slideUp(function() {
            var callback;
            var metrka_message = $previous.attr('data-mcounter');

            if (Modernizr.msie) {
                callback = $.proxy(repaint, null, $previous);
            }

            if (metrka_message) {
                //@metrika
                metrka_message = metrka_message.split(':');
                metrika.apply(metrika, metrka_message);
            }

            $previous.delay(100).slideDown('slow', callback);
        });
    });

    var cancel = new Action('groupon.cancel', function(o) {
        var hFilters = Jane.$H('filters').data;
        // Идентификаторы фильтров для Groupon
        var ids = jpath(hFilters, '.action[.name == "X-Yandex-Groupon" || .name == "X-Yandex-Groupon-2"].filid');
        var _h = [];

        $.each(ids, function(index, id) {
            _h.push({
                handlers: ['do-filters-delete', 'filters'],
                params: {
                    id: id
                }
            });
        });

        // включаем склейку скидочных сервисов
        Jane.$H('settings').setSettings({
            groupon_filter: false,
            groupons_merge: 'enable',
            groupon_time: false
        });
        Jane.Block.GrouponFilters.editing = false;

        if (_h.length) {
            Jane.Handler.getAll(_h, function() {
                Jane.Actions.run('groupon.undo', {
                    force: true
                });
            }, {
                force: true
            });
            if (!o.params.skip_mcounter) {
                //@metrika
                metrika('Плашки с тематиками (popup)', 'Получать все скидки');
            }
        } else {
            Jane.Actions.run('groupon.undo');
            if (!o.params.skip_mcounter) {
                //@metrika
                metrika('Плашки с тематиками (popup)', 'Оставить как есть');
            }
        }

        Jane.Actions.run('groupon.hide', null, o.params);
    });

    /**
     * @desc Отписаться
     * Кидает все письма в папку спам
     */
    var tospam = new Action('groupon.tospam', function(o) {
        var params = o.params;
        var byAction;
        var dialog;

        if (params.mcounter) {
            delete params.mcounter;
        }
        params.skip_mcounter = true;

        Jane.Actions.run('groupon.cancel', null, params);

        // Отправляем в спам только если находимся в письме
        if (Daria.Page.type === 'message') {
            dialog = Jane.Block.GrouponFilters.dialog;
            byAction = dialog && dialog.params.byAction;

            // и если перешли в это письмо не по действию
            // и если письмо от скидочного сервиса
            var hMessage = Jane.$H('message');
            if (!byAction && hMessage.isCouponService(hMessage.getCacheByPageParams())) {
                Jane.Actions.run('tospam', null, params);
            }
        }
    });

    /**
     * @desc Разворачивает/сворачивает список тематик
     */
    var toggle = new Action('groupon.toggle', function(o) {
        var $target = $(o.event.currentTarget);
        var bghc = 'block-groupon-filters';
        var $listNode = $target.closest('.b-intruder_promo');
        var current = $listNode.height(); // current height of topic list

        if ($listNode.hasClass(bghc + '_full')) {
            $listNode.removeClass(bghc + '_full');

            //@metrika
            metrika('Плашки с тематиками (popup)', 'Нажали Скрыть');
        } else {
            $listNode.removeClass(bghc + '_short');
            $listNode.addClass(bghc + '_full');

            //@metrika
            metrika('Плашки с тематиками (popup)', 'Нажали Больше скидок');
        }

        var est = $listNode.height();
        $listNode.height(current);
        $listNode.animate({
            height: est
        }, 'fast', function() {
            $listNode.removeAttr('style');
            if (Modernizr.msie) {
                repaint($listNode.closest('.block-groupon-filters'));
            }
        });

        return true;
    });

    /**
     * Добавляем в черный список отправителей
     */
    var blackList = new Action('groupon.blackList', function() {
        var bGrouponFilters = Jane.Block.GrouponFilters;
        //var hMessage = Jane.$H('message');
        //var ids = bGrouponFilters.blackListIds;
        var spamFolder = Jane.$H('folders').getFolderBySymbol('spam');
        var handlers = [];

        //var emails = $.map(ids, function(mid) {
        //var emailObj = hMessage.getEmails(mid);
        //return emailObj && emailObj.from.email && emailObj.from.email;
        //});

        //emails = $.unique(emails);

        //@metrika
        metrika('Плашки с тематиками (popup)', 'Нажали Отписаться. Письма от скидочных сервисов перекладывать в СПАМ');

        //$.each(emails, function(i, email) {
        handlers.push({
            handlers: ['do-filters-add', 'filters'],
            params: {
                clicker: 'move',
                field1: ['ya_syslabel'],
                field2: ['1'],
                field3: ['vtnrf0grouponsite'],
                name: 'Письма от скидочных сервисов перекладывать в СПАМ',
                letter: 'nospam',
                logic: 1,
                move_folder: spamFolder.fid
            }
        });

        //Jane.Actions.run('filters.lists-add-from-message', {
        //email: email,
        //listtype: 'black'
        //});
        //});

        bGrouponFilters.blackListIds = null;
        Jane.Handler.doAll(handlers);
        Jane.events.trigger('dialog.close');
    });

    /**
     * Кнопка "Добавь свою"
     */
    var focusInput = new Action('groupon.focusInput', function() {
        Jane.Block.GrouponFilters.focusInput();
    });

    //Export actions
    Jane.Actions.add(addCondition);
    Jane.Actions.add(addCustomCondition);
    Jane.Actions.add(removeCondition);
    Jane.Actions.add(createFilter);
    Jane.Actions.add(showFilter);
    Jane.Actions.add(showPromo);
    Jane.Actions.add(hide);
    Jane.Actions.add(undo);
    Jane.Actions.add(cancel);
    Jane.Actions.add(tospam);
    Jane.Actions.add(toggle);
    Jane.Actions.add(blackList);
    Jane.Actions.add(focusInput);
}(this));

/* ../../actions/groupon/groupon.js end */


/* ../../actions/layer/layer.js begin */
Actions.add(new Action('layer.close', function() {
    Daria.Layer.close();
}));

/* ../../actions/layer/layer.js end */



/* ../../actions/toolbar/toolbar.js begin */
Actions.create('toolbar.settings', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.show($(o.event.currentTarget));

    if (o.params['toolbar.button'] && o.params['toolbar.button'] == 'toolbar-settings') {
        Jane.ToolbarMetric.ub('клик на шестеренку');
    } else {
        Jane.ToolbarMetric.ub('клик на предложение "Добавить"');
    }
});

Actions.create('toolbar.settings.button.select', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.select(o.params);
});

Actions.create('toolbar.settings.apply', function() {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.apply();
});

Actions.create('toolbar.settings.back', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.back(o.params);
});

Actions.create('toolbar.settings.applybutton', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.buttonApply(o.params);
});

Actions.create('toolbar.settings.button.options', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.buttonOptions(o.params);
});

Actions.create('toolbar.settings.button.remove', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.settings.removeButton(o.params);
});

/* ../../actions/toolbar/toolbar.js end */

/* ../../actions/toolbar/more.js begin */
Actions.create('toolbar.more', function(o) {
    var bToolbar = Jane.$B('toolbar-box').getActive();
    bToolbar.toolbar.showExtendButtons($(o.event.currentTarget));
});

/*
Jane.Actions
    .create('toolbar.more', function(o) {
        var bToolbarMore = Jane.$B('toolbar-more-actions');
        if (bToolbarMore) {
            showPopup();

        } else {
            bToolbarMore = Jane.Block.make('toolbar-more-actions', {});
            bToolbarMore.run({}, function() {
                showPopup();
            });
        }


        function showPopup() {
            //октрываем первый экран
            Jane.Actions.run('toolbar.more.go');
            var $node = $(bToolbarMore.getCacheNode());
            // скрываем недоступные кнопки
            bToolbarMore.beforeOpen();
            Daria.Dropdown.toggle(null, {
                dropdown: $node,
                content: $node,
                handle: $(o.event.currentTarget)
            });
        }
    })
    .create('toolbar.more.go', function(o) {
        var block = o.params.block || 'main';
        var bToolbarMore = Jane.$B('toolbar-more-actions');
        var $node = $(bToolbarMore.getCacheNode());

        //триггерим события, чтобы перерисовался блок
        if (block == 'labels') {
            bToolbarMore.blocks[0].$dropdown = $node;
            bToolbarMore.blocks[0].onopen();

        } else if (block == 'folders') {
            bToolbarMore.blocks[1].$dropdown = $node;
            bToolbarMore.blocks[1].onopen();
        }

        $node
            .find('.b-toolbar-more__block')
            .addClass('g-hidden')
            .end()
            .find('.b-toolbar-more__block_type_' + block)
            .removeClass('g-hidden');
    });

Jane.watcher.watch("action-toolbar.more-status", {
    get: function() {
        return Jane.watcher.get('selectedCount') > 0;
    },
    deps: ['selectedCount']
});
*/

/* ../../actions/toolbar/more.js end */


/* ../../actions/eticket/eticket.js begin */
Actions.create('eticket.common.clck', function(o) {
    Actions.run('common.clck', o.event, o.params);
    Daria.AviaETicket.log.userAction(o.params.widget);
    return true;
});

Actions.create('eticket.common.show-hint', function(o) {
    Actions.run('common.show-hint', o.event, o.params);
    Daria.AviaETicket.log.userAction(o.params.widget);
    if (o.params.metrika) {
        Jane.c(o.params.metrika.split(':'));
    }
    return true;
});

Actions.create('eticket.messages.message-attachments', function(o) {
    Actions.run('messages.show-attachments', o.event, o.params);
    Daria.AviaETicket.log.userAction(o.params.widget);
    return true;
});

Actions.create('eticket.message.go-to-ticket', function(o) {
    Actions.run('message.go-to-ticket', o.event, o.params);
    Daria.AviaETicket.log.userAction(o.params.widget);
    return true;
});

/* ../../actions/eticket/eticket.js end */


/* ../../actions/ppyrus/ppyrus.js begin */
Jane.Actions.create('ppyrus.create', function(o) {
    var $el = $(o.event.currentTarget)
        .addClass('b-toolbar__item_loading b-toolbar__item_disabled')
        .removeAttr('data-action');

    Jane.Handler.doAll(['do-ppyrus-create'], {
    }, function(response) {
        var newProjectID = jpath(response, '.handlers[ .name == "do-ppyrus-create"].data.id')[0];
        if (newProjectID) {
            Jane.$H('ppyrus-list').clearCache();
            Jane.Page.go('#ppyrus/' + encodeURIComponent(newProjectID));

        } else {
            Jane.ErrorLog.send({
                errorType: 'ppyrus.create',
                response: window['JSON'] ? JSON.stringify(response) : 'NO_STRINGIFY'
            });
        }

        $el
            .attr('data-action', 'ppyrus.create')
            .removeClass('b-toolbar__item_loading b-toolbar__item_disabled');
    });

    Jane.c('Живые письма в почте', 'клики на живое письмо в композе');
});

Jane.Actions.create('ppyrus.delete', function() {
    var table = Daria.Table.active;
    var ids = table && table.getIDs();

    if ((!ids || !ids.length) && Jane.Page.params.id) {
        ids = [Jane.Page.params.id];
    }
    var count = ids.length;

    if (count) {
        Jane.Handler.doAll(['do-ppyrus-delete'], { spec: '/' + ids.join('/') }, function(response) {
            var status = jpath(response, '.handlers[.name == "do-ppyrus-delete"].status')[0];
            var cb = function() {
                var body = i18n('%Message_Delete_Msg', count);
                Daria.Statusline.showMsg({
                    name: 'message-removed',
                    speed: 'fast',
                    body: body
                });

                if (table && count == table.getTotal()) {
                    Jane.watcher.set('selectedCount', 0);
                }
            };

            if (status == 'ok') {
                Jane.Handler.clearCache('ppyrus-list');

                if (Jane.Page.params.id) {
                    Jane.Page.go('#ppyrus', cb);
                } else {
                    Jane.Page.refresh(cb);
                }
            }
        });
    } else {
        Jane.Actions.run('messages.warning');
    }
});

/* ../../actions/ppyrus/ppyrus.js end */



/* ../../actions/user-feedback/user-feedback.js begin */
(function(/**Jane*/Jane) {
    Jane.Actions.create('user-feedback.show', function(o) {
        if (o.event) {
            o.event.preventDefault();
        }

        var params = $.extend({
            canAttachEml: !!Daria.Page.params.ids,
            canTakeScreenshot: Modernizr.blobconsructor
        }, o.params);

        if (!params.report) {
            Jane.c('ФОС', 'Клик по ссылке "Обратная связь"');
        } else {
            Jane.c('ФОС', 'Шаг 4', 'Показ шага');
        }

        var bUserFeedbackBox = Jane.Block.make('user-feedback-box');

        bUserFeedbackBox.run(params, function(params) {
            Daria.Dialog.open({
                body: bUserFeedbackBox.getCacheNode(),
                title: i18n('%Feedback_form_title'),
                additionalClass: 'feedback-form' + (params.report ? ' feedback-form_report' : ''),
                width: 570,
                onopen: function(dialog) {
                    if (!params.report) {
                        Jane.c('ФОС', 'Шаг 1', 'Показ блока');
                    }

                    if (params.report) {
                        dialog.$dialog.data('step', 4);
                    } else {
                        dialog.$dialog.data('step', 1);
                    }
                },
                oncancel: function(dialog) {
                    Jane.c('ФОС', 'Шаг ' +  dialog.$dialog.data('step'), 'Клик на крестик ');
                },
                onclose: function() {
                    Daria.Dialog.$dialog.removeClass('feedback-no-header');
                    this.bFeedback.destroy();
                },
                bFeedback: bUserFeedbackBox
            });
        });
    });

    Jane.Actions.create('user-feedback.search', function(o) {

        var text = o.params.text || o.params.event.target.value;

        var bUserFeedbackBox = Jane.$B('user-feedback-box');
        bUserFeedbackBox.run({
            text: text,
            search: true,
            usesuggest: o.params.usesuggest || 'no'
        }, function() {
            Daria.Dialog.handleScroll();
        });
    });

    Jane.Actions.create('user-feedback.send', function() {
        Jane.$B('user-feedback-report').send();
    });

    Jane.Actions.create('user-feedback.next', function(o) {
        Jane.$B('user-feedback-report').setStep(Number(o.params.step) + 1);
    });

    Jane.Actions.create('user-feedback.prev', function(o) {
        Jane.$B('user-feedback-report').setStep(Number(o.params.step) - 1);
    });

    Jane.Actions.create('user-feedback.pseudo', function(o) {
        o.event.preventDefault();
    });

})(Jane);

/* ../../actions/user-feedback/user-feedback.js end */


/* ../../actions/money/money.js begin */
(function() {


    // TODO неправильно выполнять этот расчет тут.
    // необходима возможность задать таргет и смещение в Dialog
    function getToolbarTargetOffset(target) {
        var $target = $(target);
        var offset = $target.offset();
        var x = offset.left + Math.ceil($target.outerWidth() / 2);
        var y = offset.top + $target.height() + 8 - $(window).scrollTop();
        return { x: x, y: y };
    }

    /**
     * Клик на "создать счет" в окне-сообщении о том, что не подключен кошелек ЯД
     */
    Jane.Actions.create('money.disabled.warning.click', function() {
        if (Daria.Money.isAvailable()) {
            return;
        }

        Daria.Money.metric('Композ', 'Клик на задизейбленную иконку денег', 'Бабл "заведите счет"', 'Клик на "создать счет"');
        Daria.Dialog.close();
        // клик по ссылке, поэтому не прерываем обработку события
        return true;
    });

    /**
     * Показ окна-сообщения о том, что не подключен кошелек ЯД
     */
    Jane.Actions.create('money.disabled.warning', function(o) {
        if (Daria.Money.isAvailable()) {
            // если деньги доступны, то клик без выбора аналогичен клику по любой кнопке тулбара
            Jane.Actions.run('messages.warning');
            return;
        }

        var options = {
            title: i18n('%Money_disabled_info_title'),
            body: Jane.tt('mail-common:js-money-disabled-warning', {}),
            additionalClass: 'b-money-disabled-warning',
            hideOnScroll: true,
            hideCrossClose: false
        };

        var extendButtons = Jane.watcher.get('toolbar.buttons.extend') || '';

        // открыли из тулбара композа
        // или кнопка не находится в выпадушке "Ещё"
        if (o.params['toolbar.button'] === 'moneyletter' || (extendButtons && extendButtons.indexOf('money') === -1)) {
            var offset = getToolbarTargetOffset(o.event.currentTarget);
            options.onTarget = {
                side: 'top',
                pos: 'center',
                x: offset.x,
                y: offset.y
            };
            options.hideCrossClose = true;
        }

        Daria.Money.metric('Композ', 'Клик на задизейбленную иконку денег', 'Бабл "заведите счет"', 'Показ');
        Daria.Dialog.open(options);
    });

    /**
     * Закрытие информационного блока в денежном композе композе
     */
    Jane.Actions.create('money.compose.info.close', function() {
        Jane.events.trigger('yamoney.compose.info.close');
        Daria.Money.metric('Денежный композ', 'Блок "как отправить деньги"', 'Скрыть');
    });

    /**
     * Выбор типа денежного письма в композе
     */
    Jane.Actions.create('money.compose.select.type', function(o) {
        if (!Daria.Money.isAvailable()) {
            return;
        }

        var bCompose = Jane.$B('compose');
        var contacts = [
            bCompose.getTo(),
            bCompose.getCc(),
            bCompose.getBcc()
        ].join(',');
        contacts = Jane.FormValidation.splitContacts(contacts);

        if (contacts.length > 1) {
            var offset = getToolbarTargetOffset(o.event.currentTarget);
            var options = {
                title: i18n('%Money_select_recipient'),
                body: Jane.tt('mail-common:js-compose-select-recipient', { contacts: contacts }),
                additionalClass: 'b-money-select-recipient',
                width: 380,
                buttons: [{
                    name: 'submit',
                    value: i18n('%Money_select_recipient_submit'),
                    onclick: function() {
                        var $contact = Daria.Dialog.$body.find('input[name=contact]:checked');
                        if ($contact.length) {
                            var contact = Jane.FormValidation.obj2contact({
                                name: String($contact.data('name')),
                                email: String($contact.data('email'))
                            });

                            bCompose.setTo(contact);
                            bCompose.setCc('');
                            bCompose.setBcc('');

                            Daria.Money.metric('Композ', 'Клик на активную иконку денег', 'Окно выбора получателя', 'Переход после выбора');
                            Daria.Dialog.close();

                            Jane.Actions.run('compose.switch-type', o.event, o.params);
                        } else {
                            Daria.Money.metric('Композ', 'Клик на активную иконку денег', 'Окно выбора получателя', 'Клик без выбора');

                            // вывод ошибки
                            Daria.Dialog.$buttons.find('.b-money-select-recipient_error').remove();
                            Daria.Dialog.$buttons.append('<span class="b-money-select-recipient_error">' + i18n('%Money_select_recipient_select_error') + '</span>');
                        }
                    }
                }],
                //hideOnScroll: true,
                oncancel: function() {
                    Daria.Money.metric('Композ', 'Клик на активную иконку денег', 'Окно выбора получателя', 'Закрыть на крестик');
                }
            };

            // показ окна только в 2х случаях
            // при клике на кнопку тулбара
            // при клике на элемент списка в дропдауне
            // т.к. 2х дропдаунов быть не может, показываем модальное окно
            if (o.params.toolbar) {
                options.onTarget = {
                    side: 'top',
                    pos: 'center',
                    x: offset.x,
                    y: offset.y
                };
            }

            Daria.Money.metric('Композ', 'Клик на активную иконку денег', 'Окно выбора получателя', 'Показ');

            Daria.Dialog.open(options);

        } else {
            Daria.Money.metric('Композ', 'Клик на активную иконку денег', 'Переход');
            Jane.Actions.run('compose.switch-type', o.event, o.params);
        }
    });

    /**
     * Сохранить как черновик и перейти в композ
     */
    Jane.Actions.create('money.compose.saveandclose', function() {
        Jane.$B('compose').save({ autosave: true }, function() {
            Jane.Actions.run('compose.close');
        });
    });

    /**
     * Клик на ссылку "пополнить счет"
     */
    Jane.Actions.create('money.compose.recharge', function() {
        Daria.Money.metric('Денежный композ', 'Клик "Пополнить счёт"');
        return true;
    });
})();


/* ../../actions/money/money.js end */


/* ../../actions/promo/promo.actions.js begin */
/**
 * Гб в подарок на ДР посты [DARIA-25810]
 */
Actions.create('promo.gb-present-bubble-click', function(o) {
    var params = o.params;
    Jane.c(['ГБ за ДР', 'Клик на кнопку', params.gb + ' год']);
    var context = Daria.Dialog.$dialog;
    var preloader = context.find('.js-gb-present-preloader');
    preloader.removeClass('g-hidden');
    var errorDiv = context.find('.js-gb-present-error-div');
    errorDiv.addClass('g-hidden');
    var buttonWant = nb.$block('.js-gb-present-button-want-present', context);
    buttonWant.disable();
    Jane.Handler.doAll(
        ['disk-gb-present-give'],
        {},
        function(data) {
            if (data && data.handlers[0].status === 'ok') {
                Jane.$H('settings').setSettings({ 'gb-present-second': Daria.now() });
                Jane.ErrorLog.send({
                    'type': 'GB_on_Birthday',
                    'event': 'without_disk_get_gb',
                    'year': 'year_' + params.gb,
                    'uid': Daria.uid
                });
                // здесь нельзя делать window.open,
                // потому что он будет выполнен асинхронно (не в одном потоке с событием) и
                // браузер его заблокирует как нежелательный попап
                window.location = 'http://disk.' + Jane.Config['yandex-domain'];
                preloader.addClass('g-hidden');
                Daria.Dialog.close();
            } else {
                preloader.addClass('g-hidden');
                buttonWant.enable();
                errorDiv.removeClass('g-hidden');
            }
        }
    );
    return true;
});

Actions.create('promo.gb-present-link-click', function(o) {
    var params = o.params;
    var yearsCount = params.yearsCount;
    Jane.c(['ГБ за ДР', 'Клик на ссылку']);
    Daria.Dialog.close();
    var $container = $('<div />');
    var body = Jane.tt('mail-common:gb-present-bubble-disk-link', {});
    Jane.share({
        el: $container,
        title: i18n('%Promo_gb_present_socials_text', yearsCount),
        description: i18n('%Promo_gb_present_socials_description'),
        link: Jane.Config['mail-url'] + '/share/birthday_gb?mdb=' + yearsCount,
        icon: Jane.getEntity('b-box__socials-gb-present-promo.png'),
        size: 'big',
        serviceSpecific: {
            twitter: { title: i18n('%Promo_gb_present_socials_text', yearsCount) }
        },
        onclick: function() {
            Jane.c(['ГБ за ДР', 'Клик на поделяшки', 'После клика на ссылку', yearsCount + ' год']);
        },
        onready: function() {
            // создаем попап
            Daria.Dialog.open({
                width: 500,
                body: body,
                tailPos: { top: 0, left: 0 },
                onopen: function() {
                    $(this.body).find('.b-disk-presentation-socials').append($container);
                    Jane.c(['ГБ за ДР', 'Показ', 'После клика на ссылку', yearsCount + ' год']);
                },
                oncancel: function() {
                    // чтобы выпадающие поделяшки закрывались при закрытии окна.
                    // Метода для этого нет и находятся они не в контейнере, поэтому просто ищем открытые и прячем
                    $('.b-share-popup-wrap_state_visibale').addClass('b-share-popup-wrap_state_hidden');
                    Jane.c(['ГБ за ДР', 'Клик на крестик', 'После клика на ссылку', yearsCount + ' год']);
                }
            });
        }
    });

    window.open('//disk.' + Jane.Config['yandex-domain'] + '/tuning', '_blank');
    return true;
});


/* ../../actions/promo/promo.actions.js end */



/* ../../actions/mailbox-actions.js end */


    /* mail.toolbar.js begin */
(function() {

    var is3pane = (Daria.layout !== '2pane');

    // главный тулбар
    var mailMailBox = {
        blocks: ['search'],
        // в 3pane нет скроллящего тулбара
        scroll: !is3pane,
        settings: true,
        buttons: [
            {
                id: 'compose',
                url: (is3pane ? '/neo2/?page=3pane-wnd' : '') + '#compose',
                action: 'compose.go',
                icon: 'compose',
                name: i18n('%Toolbar_Написать'),
                title: i18n('%Toolbar_Написать') + Daria.Shortcuts.getShortcutLabelFor('New_mail', 'global', true),
                arrowSwitch: is3pane
            }
        ]
    };

    /*
    if (is3pane) {
        mailMailBox.buttons.push(
            {
                id: 'more',
                action: 'toolbar.more',
                icon: 'more',
                name: 'Ещё',
                disabledAction: 'messages.warning'
            }
        );
        */

    if (!is3pane) {
        mailMailBox.blocks.push('labels-actions', 'folders-actions');
        mailMailBox.buttons.push(
            {
                id: 'check-mail',
                action: 'mailbox.check',
                icon: 'check-mail',
                name: i18n('%Toolbar_Проверить'),
                title: i18n('%Toolbar_Проверить_title') + Daria.Shortcuts.getShortcutLabelFor('Check_new_mail', 'global', true)
            },
            {
                id: 'reply',
                action: 'reply',
                icon: 'reply',
                disabledAction: 'messages.warning',
                name: i18n('%Toolbar_Ответить'),
                title: i18n('%Toolbar_Ответить') + Daria.Shortcuts.getShortcutLabelFor('Reply', 'message', true),
                _pages: ['message']
            },
            {
                id: 'reply-all',
                action: 'reply-all',
                icon: 'reply-all',
                disabledAction: 'reply-all.warning',
                name: i18n('%Toolbar_Ответить_всем'),
                title: i18n('%Toolbar_Ответить_всем') + Daria.Shortcuts.getShortcutLabelFor('Reply_all', 'message', true),
                _pages: ['message'],
                _visible: function() {
                    return Jane.watcher.get('message.has-multiply-reply-addresses');
                },
                _visibleDeps: ['message.has-multiply-reply-addresses']
            },
            {
                id: 'forward',
                action: 'forward',
                disabledAction: 'messages.warning',
                icon: 'forward',
                name: i18n('%Toolbar_Переслать'),
                title: i18n('%Toolbar_Переслать') + Daria.Shortcuts.getShortcutLabelFor('Forward', 'messages', true),
                _visible: function() {
                    return Page.type !== "message" && !Jane.watcher.get('its-template');
                },
                _visibleDeps: ['its-template']
            },
            {
                id: 'forward-message',
                action: 'forward',
                disabledAction: 'messages.warning',
                icon: 'forward',
                name: i18n('%Toolbar_Переслать'),
                title: i18n('%Toolbar_Переслать') + Daria.Shortcuts.getShortcutLabelFor('Forward', 'message', true),
                _visible: function() {
                    return Page.type === "message" && !Jane.watcher.get('its-template');
                },
                _visibleDeps: ['its-template']
            },
            {
                id: 'delete',
                action: 'delete',
                disabledAction: 'messages.warning',
                icon: 'delete',
                name: i18n('%Toolbar_Удалить'),
                title: i18n('%Toolbar_Удалить') + Daria.Shortcuts.getShortcutLabelFor('Delete_selected', 'messages', true),
                _visible: function() {
                    switch (Page.type) {
                    case 'messages':
                        return !Jane.watcher.get('folder-visible-actions');
                    default:
                        return true;
                    }
                },
                _visibleDeps: ['folder-visible-actions']
            },
            {
                id: 'folder-delete',
                action: 'folder.messages-remove',
                icon: 'delete',
                name: i18n('%Toolbar_Удалить'),
                _visible: function() {
                    var btn = (Jane.watcher.get('folder-visible-actions') || '').split(',');
                    return ($.inArray(this.id, btn) > -1);
                },
                _visibleDeps: ['folder-visible-actions'],
                _pages: ['messages']
            },
            {
                id: 'add-template',
                action: 'compose.go',
                params: 'save_symbol=template',
                icon: 'add-template',
                name: i18n('%Toolbar_Создать_шаблон'),
                _pages: ['messages'],
                _visible: function() {
                    return (/^#draft|template/).test(Jane.Page.hash);
                }
            },
            {
                id: 'spam',
                action: 'tospam',
                disabledAction: 'messages.warning',
                icon: 'spam',
                name: i18n('%Toolbar_Это_спам'),
                title: i18n('%Toolbar_Это_спам') + Daria.Shortcuts.getShortcutLabelFor('Label_spam', 'message', true),
                _visible: function() {
                    if (Jane.watcher.get("its-sent") || Jane.watcher.get("its-draft") || Jane.watcher.get("its-template")) {
                        return false;
                    }
                    return !Jane.watcher.get("its-spam");
                },
                _visibleDeps: ["its-spam", "its-sent", "its-draft", "its-template"]
            },
            {
                id: 'not-spam',
                action: 'notspam',
                disabledAction: 'messages.warning',
                icon: 'not-spam',
                name: i18n('%Toolbar_Не_спам'),
                _visible: function() {
                    return Jane.watcher.get("its-spam");
                },
                _visibleDeps: ["its-spam"]
            },
            {
                id: 'unsubscribe',
                action: 'unsubscribe',
                _pages: ['message'],
                icon: 'unsubscribe',
                name: i18n('%Toolbar_Unsubscribe'),
                _visible: function() {
                    if (Jane.watcher.get("its-sent") || Jane.watcher.get("its-draft")) {
                        return false;
                    }

                    return Jane.watcher.get("message.may-unsubscribe");
                },
                _visibleDeps: ["its-sent", "its-draft", "message.may-unsubscribe"]
            },
            {
                id: 'mark-as-read',
                action: 'mark',
                disabledAction: 'messages.warning',
                icon: 'mark-as-read',
                name: i18n('%Toolbar_Прочитано'),
                title: i18n('%Toolbar_Прочитано') + Daria.Shortcuts.getShortcutLabelFor('Label_read', 'messages', true),
                _pages: ['messages'],
                _visible: function() {
                    if (Jane.watcher.get('its-template')) {
                        return false;
                    }

                    switch (Page.type) {
                    case 'messages':
                        return !Jane.watcher.get('folder-visible-actions') && !Jane.watcher.get('all-selected-is-read');
                    default:
                        return !Jane.watcher.get('all-selected-is-read');
                    }
                },
                _visibleDeps: ['all-selected-is-read', 'folder-visible-actions', 'its-template']
            },
            {
                id: 'mark-as-unread-messages',
                action: 'unmark',
                disabledAction: 'messages.warning',
                icon: 'mark-as-unread',
                name: i18n('%Toolbar_Не_прочитано'),
                title: i18n('%Toolbar_Не_прочитано') + Daria.Shortcuts.getShortcutLabelFor('Label_unread', 'messages', true),
                _visible: function() {
                    if (Jane.watcher.get('its-template')) {
                        return false;
                    }

                    switch (Page.type) {
                    case 'messages':
                        return !Jane.watcher.get('folder-visible-actions') && Jane.watcher.get('all-selected-is-read');
                    case 'message':
                        return false;
                    default:
                        return Jane.watcher.get('all-selected-is-read');
                    }
                },
                _visibleDeps: ['all-selected-is-read', 'folder-visible-actions', 'its-template']
            },
            {
                id: 'mark-as-unread',
                action: 'unmark',
                disabledAction: 'messages.warning',
                icon: 'mark-as-unread',
                name: i18n('%Toolbar_Не_прочитано'),
                title: i18n('%Toolbar_Не_прочитано') + Daria.Shortcuts.getShortcutLabelFor('Label_unread', 'message', true),
                _visible: function() {

                    if (Page.type === 'message' && !Jane.watcher.get('its-template')) {
                        return true;
                    } else {
                        return false;
                    }
                },
                _visibleDeps: ['all-selected-is-read', 'folder-visible-actions', 'its-template']
            },
            {
                id: 'folder-mark-as-read',
                action: 'folder.current-mark-read',
                icon: 'mark-as-read',
                name: i18n('%Toolbar_Прочитано'),
                _pages: ['messages'],
                _visible: function() {
                    if (Jane.watcher.get('its-template')) {
                        return false;
                    }

                    var btn = (Jane.watcher.get('folder-visible-actions') || '').split(',');
                    return ($.inArray(this.id, btn) > -1);
                },
                _visibleDeps: ['folder-visible-actions', 'its-template']
            },
            /*
            // ручка снятия выделения со всех папок не готова, временно убрано
            {
                id: 'folder-mark-as-unread',
                action: 'folder.mark-unread',
                icon: 'mark-as-unread',
                name: i18n('%Toolbar_Не_прочитано'),
                _pages: ['messages'],
                _visible: function() {
                    var btn = (Jane.watcher.get('folder-visible-actions') || '').split(',');
                    return ($.inArray(this.id, btn) > -1);
                },
                _visibleDeps: ['folder-visible-actions']
            }
            */





            /*
            {
                id: 'ignore',
                action: 'ignore',
                icon: 'ignore',
                name: i18n('%Toolbar_Ignore'),
                description: i18n('%Toolbar_Ignore_Description'),
                disabledAction: 'messages.warning',
                settings: {},
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    // не выбрано пользователем
                    if (!b.toolbar.settings.get(this.id)) {
                        return false;
                    }

                    var hLabels = Jane.$H('labels');
                    var ignoreLID = hLabels.getLIDByName('ignore_thisthread:mark');

                    // метка не создана
                    if (!ignoreLID) {
                        return true;
                    }

                    // выбранных сообщений нет
                    if (!Jane.watcher.get('selectedCount') && !Jane.Page.params.ids) {
                        return true;
                    }

                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var ids = bMessagesListBox && bMessagesListBox.active && bMessagesListBox.active.table.getIDs();
                    if (!ids) {
                        ids = {
                            mids: $.makeArray(Jane.Page.params.ids),
                            tids: []
                        };
                    }

                    // если есть хотя бы одно сообщение без метки, вывод "игнорировать"
                    var l = ids.mids.length;
                    while (l--) {
                        if (!hMessage.hasLabel(ids.mids[l], ignoreLID)) {
                            return true;
                        }
                    }

                    l = ids.tids.length;
                    while (l--) {
                        if (!hMessage.hasLabel('t' + ids.tids[l], ignoreLID)) {
                            return true;
                        }
                    }

                    return false;
                },
                _visibleDeps: ['mail:mailbox:buttons', 'selectedCount', 'actions-message-ignore']
            },
            {
                id: 'unignore',
                action: 'unignore',
                icon: 'unignore',
                name: i18n('%Toolbar_Unignore'),
                disabledAction: 'messages.warning',
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    // не выбрано пользователем
                    if (!b.toolbar.settings.get('ignore')) {
                        return false;
                    }

                    var hLabels = Jane.$H('labels');
                    var ignoreLID = hLabels.getLIDByName('ignore_thisthread:mark');

                    // метки нет
                    if (!ignoreLID) {
                        return false;
                    }

                    // нет выбранных сообщений
                    if (!Jane.watcher.get('selectedCount') && !Jane.Page.params.ids) {
                        return false;
                    }

                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var ids = bMessagesListBox && bMessagesListBox.active && bMessagesListBox.active.table.getIDs();
                    if (!ids) {
                        ids = {
                            mids: $.makeArray(Jane.Page.params.ids),
                            tids: []
                        };
                    }

                    // если у всех выбранных сообщений есть метка, то вывод "не игнорировать"
                    var l = ids.mids.length;
                    while (l--) {
                        if (!hMessage.hasLabel(ids.mids[l], ignoreLID)) {
                            return false;
                        }
                    }

                    l = ids.tids.length;
                    while (l--) {
                        if (!hMessage.hasLabel('t' + ids.tids[l], ignoreLID)) {
                            return false;
                        }
                    }

                    return true;
                },
                _visibleDeps: ['mail:mailbox:buttons', 'selectedCount', 'actions-message-ignore']
            },
            */
            {
                id: 'archive',
                action: 'archive',
                icon: 'archive',
                name: i18n('%Toolbar_Archive'),
                title: i18n('%Toolbar_Archive') + Daria.Shortcuts.getShortcutLabelFor('Archive', 'messages', true),
                description: i18n('%Toolbar_Archive_Description'),
                disabledAction: 'messages.warning',
                settings: {},
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    var currentFolderId = Jane.$B('folders').selected;
                    var archiveFolderIsOpen = Jane.$H('folders').isArchive(currentFolderId);

                    return  Boolean(b.toolbar.settings.get(this.id)) && !archiveFolderIsOpen;
                },
                _visibleDeps: ['mail:mailbox:buttons'],
                _enable: function(b) {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var s = b.toolbar.settings.get(this.id);
                    if (!s) {
                        return false;
                    }

                    return Jane.watcher.get('selected') && !Jane.watcher.get('folder-actions-mode');
                },
                _enableDeps: [
                    'folder-actions-mode',
                    'mail:mailbox:buttons',
                    'actions-message-infolder'
                ]
            },
            {
                id: 'sendon',
                action: 'sendon',
                icon: 'sendon',
                name: i18n('%Toolbar_Sendon'),
                title: i18n('%Toolbar_Sendon') + Daria.Shortcuts.getShortcutLabelFor('Sendon', 'messages', true),
                description: i18n('%Toolbar_Sendon_Description'),
                disabledAction: 'messages.warning',
                settings: {email: null},
                _settingsValidate: function(settings) {
                    var errors = [];

                    if (!settings.email) {
                        errors.push('sendon_empty_email');

                    } else if (!Jane.FormValidation.checkEmail(settings.email)) {
                        errors.push('sendon_check_email');
                    }

                    return errors;
                },
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    if (!b.toolbar.settings.get(this.id)) {
                        return false;
                    }

                    b.$node.find('.js-toolbar-item-title-sendon').text(b.toolbar.settings.getSendonEmail());
                    return true;
                },
                _visibleDeps: ['mail:mailbox:buttons']
            },
            {
                id: 'infolder',
                action: 'infolder',
                icon: 'infolder',
                name: i18n('%Toolbar_Infolder'),
                title: i18n('%Toolbar_Infolder') + Daria.Shortcuts.getShortcutLabelFor('Infolder', 'messages', true),
                description: i18n('%Toolbar_Infolder_Description'),
                disabledAction: 'messages.warning',
                settings: {folder: null},
                settingsDeps: ['folders'],
                _settingsValidate: function(settings) {
                    var errors = [];
                    if (!settings.folder) {
                        errors.push('folder_empty');
                    }
                    return errors;
                },
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    var s = b.toolbar.settings.get(this.id);

                    if (!s) {
                        return false;
                    }

                    b.$node.find('.js-toolbar-item-title-infolder').text(b.toolbar.settings.getFolderName());

                    return true;
                },
                _visibleDeps: ['mail:mailbox:buttons'],
                _enable: function(b) {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var s = b.toolbar.settings.get(this.id);
                    if (!s) {
                        return false;
                    }

                    var hMessage = Jane.$H('message');
                    var cMessage = Jane.Page.params.ids;
                    var cFolder = cMessage ? hMessage.getFolderId(cMessage) : Jane.Page.params.current_folder;

                    if (cFolder && cFolder == s.settings.folder) {
                        return false;
                    }

                    return Jane.watcher.get('selected') &&
                        !Jane.watcher.get('folder-actions-mode');
                },
                _enableDeps: [
                    'folder-actions-mode',
                    'mail:mailbox:buttons',
                    'actions-message-infolder',
                    'actions-message-archive'
                ]
            },
            {
                id: 'label',
                action: 'label',
                icon: 'label',
                name: i18n('%Toolbar_Label'),
                title: i18n('%Toolbar_Label') + Daria.Shortcuts.getShortcutLabelFor('Defined_label', 'messages', true),
                description: i18n('%Toolbar_Label_Description'),
                disabledAction: 'messages.warning',
                settings: {label: null},
                settingsDeps: ['labels'],
                _settingsValidate: function(settings) {
                    var errors = [];
                    if (!settings.label) {
                        errors.push('label_empty');
                    }
                    return errors;
                },
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    var s = b.toolbar.settings.get(this.id);

                    if (!s) {
                        return false;
                    }

                    b.$node.find('.js-toolbar-item-title-label').text(b.toolbar.settings.getLabelName());

                    // выбранных сообщений нет
                    if (!Jane.watcher.get('selectedCount') && !Jane.Page.params.ids) {
                        return true;
                    }

                    var lid = s.settings.label;
                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var table = bMessagesListBox && bMessagesListBox.getActiveTable();
                    var ids = table && table.getIDs();
                    if (!ids) {
                        ids = {
                            mids: $.makeArray(Jane.Page.params.ids),
                            tids: []
                        };
                    }

                    // если есть хотя бы одно сообщение без метки, вывод "поставить метку"
                    var l = ids.mids.length;
                    while (l--) {
                        if (!hMessage.hasLabel(ids.mids[l], lid)) {
                            return true;
                        }
                    }

                    l = ids.tids.length;
                    while (l--) {
                        if (!hMessage.hasLabel('t' + ids.tids[l], lid)) {
                            return true;
                        }
                    }

                    return false;
                },
                _visibleDeps: ['mail:mailbox:buttons', 'selectedCount', 'actions-message-label'],
                _enable: function() {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var hFolders = Jane.$H('folders');
                    var cMessage = Jane.Page.params.ids;
                    var cFolder = cMessage ? Jane.$H('message').getFolderId(cMessage) : Jane.Page.params.current_folder;

                    if (cFolder) {
                        var folder = hFolders.getFolderById(cFolder);

                        if (!folder || (!folder.user && hFolders.spamOrTrash(cFolder))) {
                            return false;
                        }
                    }

                    return Jane.watcher.get('selected') && !Jane.watcher.get('folder-actions-mode');
                },
                _enableDeps: [
                    'folder-actions-mode',
                    'actions-message-infolder',
                    'mail:mailbox:buttons',
                    'actions-message-archive'
                ]
            },
            {
                id: 'unlabel',
                action: 'unlabel',
                icon: 'label',
                name: i18n('%Toolbar_Label'),
                description: i18n('%Toolbar_Label_Description'),
                disabledAction: 'messages.warning',
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    var s = b.toolbar.settings.get('label');

                    if (!s) {
                        return false;
                    }

                    b.$node.find('.js-toolbar-item-title-unlabel').text(b.toolbar.settings.getLabelName());

                    // нет выбранных сообщений
                    if (!Jane.watcher.get('selectedCount') && !Jane.Page.params.ids) {
                        return false;
                    }

                    var lid = s.settings.label;
                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var table = bMessagesListBox && bMessagesListBox.getActiveTable();
                    var ids = table && table.getIDs();
                    if (!ids) {
                        ids = {
                            mids: $.makeArray(Jane.Page.params.ids),
                            tids: []
                        };
                    }

                    // если у всех выбранных сообщений есть метка, то вывод "не игнорировать"
                    var l = ids.mids.length;
                    while (l--) {
                        if (!hMessage.hasLabel(ids.mids[l], lid)) {
                            return false;
                        }
                    }

                    l = ids.tids.length;
                    while (l--) {
                        if (!hMessage.hasLabel('t' + ids.tids[l], lid)) {
                            return false;
                        }
                    }

                    return true;
                },
                _visibleDeps: ['mail:mailbox:buttons', 'selectedCount', 'actions-message-label'],
                _enable: function() {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var hFolders = Jane.$H('folders');
                    var cMessage = Jane.Page.params.ids;
                    var cFolder = cMessage ? Jane.$H('message').getFolderId(cMessage) : Jane.Page.params.current_folder;

                    if (cFolder) {
                        var folder = hFolders.getFolderById(cFolder);

                        if (!folder || (!folder.user && hFolders.spamOrTrash(cFolder))) {
                            return false;
                        }
                    }

                    return Jane.watcher.get('selected') && !Jane.watcher.get('folder-actions-mode');
                },
                _enableDeps: [
                    'folder-actions-mode',
                    'actions-message-infolder',
                    'mail:mailbox:buttons',
                    'actions-message-archive'
                ]
            },
            {
                id: 'template',
                action: 'reply-tmpl',
                icon: 'template',
                name: i18n('%Toolbar_Template'),
                title: i18n('%Toolbar_Template') + Daria.Shortcuts.getShortcutLabelFor('Defined_reply', 'messages', true),
                description: i18n('%Toolbar_Template_Description'),
                disabledAction: 'messages.warning',
                settings: {tmpl: null},
                settingsDeps: ['messages'],
                _settingsParams: function() {
                    var dfd = $.Deferred();

                    Jane.Handler.getAll(['folders'], {}, function() {
                        var hFolders = Jane.$H('folders');
                        if (hFolders.ids.template) {
                            dfd.resolve({current_folder: hFolders.ids.template, first: 0, last: 500});
                        } else {
                            dfd.reject();
                        }
                    });

                    return dfd.promise();
                },
                _settingsValidate: function(settings) {
                    var errors = [];

                    if (!settings.tmpl) {
                        errors.push('template_empty');
                    }

                    return errors;
                },
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    return !!b.toolbar.settings.get(this.id);
                },
                _visibleDeps: ['mail:mailbox:buttons'],
                _enable: function(b) {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var s = b.toolbar.settings.get(this.id);
                    if (!s) {
                        return false;
                    }

                    if (Daria.Page.type == 'messages' && Jane.watcher.get('selectedCount') != 1) {
                        return false;
                    }

                    var hFolders = Jane.$H('folders');
                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var table = bMessagesListBox && bMessagesListBox.getActiveTable();
                    var ids = table && table.getIDs();
                    var cMessage = Jane.Page.params.ids || (ids && ids.mids[0]);
                    var cFolder = cMessage && hMessage.getFolderId(cMessage);
                    var folder = cFolder && hFolders.getFolderById(cFolder);

                    // только для пользовательских папок или входящих
                    if (!folder || (!folder.user && !hFolders.isFolder(cFolder, ['inbox']))) {
                        return false;
                    }

                    var bMessageBody = Jane.$B('message-body');
                    if (Jane.Page.type == 'message' && bMessageBody && bMessageBody.isCollectorsBody()) {
                        return false;
                    }

                    return true;
                },
                _enableDeps: [
                    'folder-actions-mode',
                    'mail:mailbox:buttons',
                    'actions-message-infolder',
                    'actions-message-archive',
                    'selectedCount'
                ],
                _init: function(b) {
                    var id = this.id;
                    // обновление mid шаблона при пересохрании, если для него задана пользовательская кнопка
                    Jane.events.bind('compose.mid.change', function(e, diff) {
                        if (!diff.oldValue) {
                            return;
                        }

                        var s = b.toolbar.settings.get(id);
                        if (!s) {
                            return;
                        }

                        if (s.settings.tmpl != diff.oldValue) {
                            return;
                        }

                        s.settings.tmpl = diff.value;
                        b.toolbar.settings.save();
                    });
                }
            },
            {
                id: 'money',
                action: 'reply-money',
                icon: 'yamoney',
                name: i18n('%Toolbar_Yamoney'),
                description: i18n('%Toolbar_Yamoney_Description'),
                disabledAction: 'money.disabled.warning',
                settings: {},
                settingsHide: true, // скрывать кнопку в настройках
                _pages: ['messages', 'message'],
                _init: function() {
                    // хак. правим параметры кнопки прямо в кэшэ
                    var hToolbar = Jane.$H('toolbar');
                    var money = jpath(hToolbar.getCache('mail:mailbox'), '.item[.id=="money"]')[0];
                    if (money) {
                        // кнопку в настройках показываем только при доступности операций с ЯД
                        money.settingsHide = !Daria.Money.isPossible();
                    }
                },
                _visible: function(b) {
                    return !!b.toolbar.settings.get(this.id) &&
                        Daria.Money.isPossible();
                },
                _visibleDeps: ['mail:mailbox:buttons'],
                _enable: function(b) {
                    if ($.isEmptyObject(Daria.Page.params)) {
                        return undefined;
                    }

                    var s = b.toolbar.settings.get(this.id);
                    if (!s) {
                        return false;
                    }

                    if (!Daria.Money.isAvailable()) {
                        return false;
                    }

                    if (Daria.Page.type == 'messages' && Jane.watcher.get('selectedCount') != 1) {
                        return false;
                    }

                    var hFolders = Jane.$H('folders');
                    var hMessage = Jane.$H('message');
                    var bMessagesListBox = Jane.$B('messages-list-box');
                    var table = bMessagesListBox && bMessagesListBox.getActiveTable();
                    var ids = table && table.getIDs();
                    var cMessage = Jane.Page.params.ids || (ids && ids.mids[0]);
                    var cFolder = cMessage && hMessage.getFolderId(cMessage);
                    var folder = cFolder && hFolders.getFolderById(cFolder);

                    // только для пользовательских папок или входящих
                    if (!folder || (!folder.user && !hFolders.isFolder(cFolder, ['inbox']))) {
                        return false;
                    }

                    return true;
                },
                _enableDeps: [
                    //'folder-actions-mode',
                    'mail:mailbox:buttons',
                    //'actions-message-infolder',
                    //'actions-message-archive',
                    'selectedCount'
                ]
            },

            {
                id: 'toolbar-add-button',
                action: 'toolbar.settings',
                icon: 'add-button',
                name: i18n('%Toolbar_AddButton'),
                disabledAction: 'messages.warning',
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    return !b.toolbar.settings.isActive();
                },
                _init: function() {
                    Jane.watcher.set('action-toolbar.settings-status', true, {force: true});
                }
            },

            {
                id: 'toolbar-more',
                action: 'toolbar.more',
                icon: 'more',
                name: i18n('%Toolbar_More'),
                disabledAction: 'messages.warning',
                _pages: ['messages', 'message'],
                _init: function(b) {
                    // динамический вочер состояния кнопок в "ещё"
                    // зависимости меняются от состава кнопок
                    // если хотя бы одна кнопка активна, то "ещё" активно
                    var wName = 'toolbar-button:toolbar-more:extend';
                    b.watcherExtends = Jane.watcher.watch(wName, {
                        get: function() {
                            var l = this.deps.length;
                            while (l--) {
                                if (Jane.watcher.get(this.deps[l])) {
                                    return true;
                                }
                            }
                            return false;
                        },
                        deps: []
                    });

                    Jane.events.bind(wName + '.change', function(e, diff) {
                        Jane.Toolbar.setButtonStatus('toolbar-more', diff.value);
                    });
                },
                _visible: function(b) {
                    var btns = Jane.watcher.get('toolbar.buttons.extend') || '';
                    var wName = 'toolbar-button:toolbar-more:extend';
                    var toolbar = b.toolbar;

                    // изменение зависимостей вочера состояния "ещё"
                    // при изменении состава кнопок
                    b.watcherExtends.deps = $.map(btns.split(','), function(id) {
                        var bt = toolbar.getButton(id);
                        if (!bt) {
                            return null;
                        }

                        return 'action-' + bt.action + '-status';
                    });

                    // принудительная проверка зависимостей после обновления списка
                    Jane.watcher.check(wName);

                    return !!btns;
                },
                _visibleDeps: ['toolbar.buttons.extend']
            },
            {
                id: 'toolbar-settings',
                action: 'toolbar.settings',
                icon: 'settings',
                name: i18n('%Toolbar_Settings'),
                disabledAction: 'messages.warning',
                _pages: ['messages', 'message'],
                _visible: function(b) {
                    return b.toolbar.settings.isActive();
                }
            }
        );
    }

    Jane.$H('toolbar').addService(
        function(p) {
            if (p._service != 'mail' || Daria.msgWindow) {
                return;
            }
            switch (p._page) {
            case 'contacts':
                return 'mail:abook';
            case 'ppyrus':
                return 'mail:ppyrus';
            default:
                return 'mail:mailbox';
            }
        },
        {
            'mail:mailbox': mailMailBox,
            'mail:abook': {
                scroll: !is3pane,
                buttons: [
                    { id: 'compose', url: '#compose', action: 'compose.go', icon: 'compose', arrowSwitch: is3pane,
                        name: i18n('%Toolbar_Написать') },
                    { id: 'abook-add', action: 'mail-common.person-popup', icon: 'add',
                        name: i18n('%Toolbar_Добавить_контакт') },
                    { id: 'abook-remove', action: 'abook.remove-contacts', icon: 'delete',
                        name: i18n('%Toolbar_Удалить') },
                    { id: 'abook-togroup', action: 'abook.groups-dropdown', icon: 'togroup',
                        name: i18n('%АК_Добавить_в_группу') },
                    { id: 'abook-outofgroup', action: 'abook.remove-contacts-from-group', icon: 'outofgroup',
                        name: i18n('%АК_Удалить_из_группы') },
                    {
                        id: 'abook-more',
                        action: 'abook.toolbar-more-actions',
                        icon: 'more',
                        name: i18n('%Toolbar_More')
                    }
                ]
            },
            'mail:ppyrus': {
                scroll: !is3pane,
                buttons: [
                    {
                        id: 'compose',
                        url: '#compose',
                        action: 'compose.go',
                        icon: 'compose',
                        name: i18n('%Toolbar_Написать')
                    },
                    {
                        id: 'check-mail',
                        action: 'mailbox.check',
                        icon: 'check-mail',
                        name: i18n('%Toolbar_Проверить')
                    },
                    {
                        id: 'ppyrus-delete',
                        action: 'ppyrus.delete',
                        disabledAction: 'messages.warning',
                        icon: 'delete',
                        name: i18n('%Toolbar_Удалить'),
                        _enable: function() {
                            return !!(Jane.watcher.get('selectedCount') || Page.params.id);
                        }
                    }
                ]
            }
        },
        true // default toolbar
    );
})();

/* mail.toolbar.js end */

    /* mail.rewrites.js begin */
/*global Jane: true, i18n: true, Page: true */

/**
 * Реврайтит урлы в почте.
 * @param {String} _url
 * @param {Object} options
 * @param {Boolean} [recursive=false] Специальный аргумент для 3pane, означает, что мы нахожимся в рекурсивном реврайте.
 * @return {*}
 */
Jane.Services.rewriteURL.mail = function(_url, options, recursive) {
    var parts = _url.split('/');
    var type = parts.shift();
    var isID = (parts[0] && /^\d+$/.test(parts[0])); // Есть числовой параметр: id-шник папки, метки, письма, треда.

    options = options || {};

    //начало урла, определяет тип страницы
    var urlStart = '';
    var url = '';
    var tab;
    switch (type) {
    case 'ppyrus':
        if (Daria.ALLOW_JP) {
            urlStart = '#ppyrus';
            if (parts[0]) {
                url = '&id=' + parts.shift();
            }
        } else {
            urlStart = '#403';
            url = '&disallow=ppyrus';
        }
        break;

        // Превращаем имена дефолтных папок в id-шники.
    case 'inbox':
    case 'folders-inbox': //оставил чтобы редиректить в inbox
    case 'sent':
    case 'spam':
    case 'trash':
    case 'draft':
    case 'outbox':
    case 'template':
    case 'archive':
        var ids = Jane.$H("folders").ids;
        urlStart = '#messages';
        type = type == "folders-inbox" ? "inbox" : type;
        url = '&current_folder=' + (ids && ids[type] ? ids[type] : '');
        break;

        // Список писем в папке или метке.
    case 'label':
    case 'folder':
        if (isID) {
            urlStart = '#messages';
            url = '&current_' + type + '=' + parts.shift();
        }
        break;

        // Просмотр письма.
    case 'message':
        if (isID) {
            urlStart = '#message';
            url = '&ids=' + parts.shift();
            var tabs = Jane.Block.MessageRight && Jane.Block.MessageRight.MTabs || {};
            var part;
            while ( (part = parts.shift()) ) {
                if (part in tabs) {
                    tab = part;
                } else {
                    url += '&' + part;
                }
            }
            if (Daria.layout == '2pane') {
                // На странице письма вкладка с тредами по умолчанию
                url += '&tab=' + (tab || 'thread');
            }
        }
        break;

        // Просмотр треда.
    case 'thread':
        if (isID) {
            urlStart = '#messages';
            url = '&thread_id=' + parts.shift();
        }
        break;

    case 'compose':
        urlStart = '#' + type;
        if (isID) {
            url += '&ids=' + parts.shift();
        } else {
            parts = [parts.join('/')];
            // обрабатываем mailto:address@domain.ru?subject=subject
            if (parts[0].indexOf('mailto=') > -1) {
                var params = decodeURIComponent(parts[0]).split(/\?|&/);
                params = $.map(
                    params,
                    function(p) {
                        p = decodeURIComponent(p);

                        if (p.indexOf('mailto=') === 0) {
                            p = 'to=' + p.split('=')[1].replace(/^mailto:/, '');
                        }
                        if (p.indexOf('subj=') === 0) {
                            p = 'subject=' + p.split('=')[1];
                        }
                        return p;
                    }
                );
                parts[0] = params.join('&');
            }
        }
        break;

    case 'done':
        // При переключении тем на #done запоминаем Daria.Page.params в куках
        var cookieParams = Daria.getCookie("Daria.Page.params");
        if (cookieParams) {
            // $.param зачемто меняет %20 на +
            cookieParams = cookieParams.replace(/\+/g, '%20');
            cookieParams = Daria.parseQuery(cookieParams);

            options.params = options.params || {};
            options.params = $.extend(options.params, cookieParams);

            Daria.delCookie("Daria.Page.params");
        }

        // разрешаем переходить на done только после отправки письма
        if (options.params && options.params.tostr) {
            urlStart = '#done';
        } else {
            // логируем пустые переходы на done
            Jane.ErrorLog.send($.extend({event: 'mail.rewrite.done'}, options.params));
            options.defaultHash = Daria.Page.HOME_HASH;
            options.replace = true;
            return;
        }
        break;

        // Поиск.
    case 'search':
        urlStart = '#messages';
        url = '&search=yes';
        break;

        // Контакты.
    case 'contacts':
        var groupRegExp = /group\-{0,1}\d+|all/;
        urlStart = '#contacts';

        if (parts.length && groupRegExp.test(parts[0])) {
            url += '&tid=' + parts.shift().replace(/[a-z]/gi, '');
        }

        if (parts.length) {
            url += '&q=' + parts.shift();
        }
        break;

        // Настройки.
    case 'setup':
        urlStart = '#setup';
        // если есть там и там простая строка
        // иначе можем получить фигню отсюда "#setup/abook?fail_xdr=1"
        if (parts[0] && /^[-_a-z0-9]+$/.test(parts[0])) {
            tab = parts.shift();
            url += '&tab=' + tab;

            if (tab === 'filters-confirm') {
                parts[0] = parts.join('/');
            } else if (tab === 'interface' && parts.length) {
                url += '&layout=' + parts.shift();
            } else if (tab === 'filters-create-simple' && parts.length) {
                url += '&action=' + parts.shift();
            }
        }

        break;

    case 'unread':
        urlStart = '#messages';
        url = '&goto=all&extra_cond=only_new';
        break;

    case 'attachments':
        urlStart = '#messages';
        url = '&goto=all&extra_cond=only_atta';
        break;

    case 'all':
        urlStart = '#messages';
        url = '&goto=all';
        break;

    case '404':
        urlStart = '#404';
        break;

    case 'phone':
        urlStart = '#phone';
        break;
    }

    if (Daria.layout == '2pane') {
        url = urlStart + url;
        // Если остались еще какие-то параметры, добавляем их к тому, что уже нареврайтилось.
        if (url && parts[0]) {
            url += '&' + parts.join('&');
        }
    } else {
        // попались какие-то доп. параметры, просто идем дальше
        if (recursive && !url && type) {
            url = '&' + type;
        }
        var partsLength = parts.length;
        // еще остались параметры, для 3pane надо их реврайтить рекурсивно, потому что там разные type в одном урле
        if (partsLength) {
            url = urlStart + url + Jane.Services.rewriteURL.mail(parts.join('/'), {}, true);
        } else if (!recursive) {
            url = urlStart + url;
        }
    }

    return url; // Если вернулся null, значит это "не наш" урл, на него переходить не нужно.
};

Jane.Services.rewriteParams.mail = function(params, paramsExtra) {

    switch (params._page) {

    case "messages":
        var fids = Jane.$H("folders").ids;
        var id = params["current_folder"];
        var dateRegExp = /\d{2}\.\d{2}\.\d{4}/;

        // Проверяем валидность datePager
        if (params.datePager && !/^(((1[0-2])|(0[0-9]))\.)?((19[7-9][0-9])|(20[0-9]{2}))$/.test(params.datePager)) {
            delete params.datePager;
        }

        var isUsualFid = (
            id &&
            id != fids.spam &&
            id != fids.trash &&
            id != fids.draft &&
            id != fids.template &&
            id != fids.archive
        );

        if (Jane.$H("settings").isThreaded() && !(params.extra_cond || params.datePager) && (/*первый запуск не из почты*/id === "" || isUsualFid)) {
            params.threaded = "yes";
        } else {
            delete params["threaded"];
        }

        // Находимся внутри выборки с пейджером по датам
        if (
            !params.search && !params.threaded &&
                dateRegExp.test(params.from) && dateRegExp.test(params.to) &&
                Daria.layout == "2pane"
            ) {
            params.datePagerSearch = "yes";
        }

        // Показываем пейджер по датам
//            var suid = Jane.$H("account-information").data.suid;
        if (Daria.layout == '2pane' && !(params["thread_id"] || params["current_label"] || params["extra_cond"] || params["search"])) {
            params.showDatePager = "yes";
        }

        // Из поиска пока отрываем excluded

        // Для поиска - не ищем в папках Исходящие и Спам.
        //if (params.request && !params.fid) {
        //    params.fid = fids.outbox + "," + fids.spam;
        //    params.excluded = "yes";
        //}

        break;

        /*case 'compose':
            // Добавляем регион юзера для таргетирования открыток (DARIA-7736)
            var card_region;
            switch (Daria.product) {
                case 'TUR':
                    card_region = 'tr';
                    break;

                case 'INT':
                    card_region = 'en';
                    break;

                default:
                    card_region = 'ru';
            }
            params.region = card_region;
            break;*/

    case "message":
        if (Daria.layout != '2pane' && Daria.WND_3PANE) {
            params._page = 'messages';
        }
        break;

    case "done":
        $.extend(params, paramsExtra);
        break;

    case 'contacts':
        params.type = 'normal';
        break;

    default:
        break;
    }
};

Jane.Services.titles.mail = function(params) {
    params = params || Page.params;
    var pageType = Jane.watcher.get("pageType");
    var title = '';
    var id = params.ids;

    var hMessage = Jane.$H("message");

    var subject;
    switch (pageType) {
    case 'message':
        subject = hMessage.getSubject(id);
        var from = hMessage.getFromName(id);
        if (subject && from) {
            title += i18n('%Title_message', subject) + ' — ' + from;
        }
        break;
    case 'messages':
        var fid = params.current_folder;
        if (fid) {
            var folder = Jane.$H("folders").getFolderById(fid);
            if (folder) {
                var fName = folder.name;
                var fNew = folder['new'];
                title += fNew > 0 ? fNew + ' · ' + fName : fName;
            }
        }
        break;
        // TODO: Можно и для всего остального написать. Для меток как минимум.
    case 'compose':
        if (!(id && /^\d+$/.test(id) && hMessage.isCached(id))) {
            title += i18n('%Title_compose');
            break;
        }

        subject = hMessage.getSubject(id);
        var oper = params.oper;

        switch (oper) {
        case 'reply':
        case 'reply-all':
            title += i18n('%Title_reply', subject);
            break;
        case 'forward':
            title += i18n('%Title_forward', subject);
            break;
        default:
            title += i18n('%Title_draft', subject);
        }
        break;
    }
    if (title) {
        title += ' — ';
    }
    title += i18n('%Title_mail');

    return title;
};

Jane.Services.favicons.mail = Daria.mailFavicon;

/* mail.rewrites.js end */

    /* mail.contexthelp.js begin */
Jane.contextHelpPages['mail'] = {
    RUS: {
        'message': 1113120,
        'contacts': 1113487,
        'compose': 1113122,
        'trash': 1113223,
        'search': 1113140,
        'spam': 1113148,
        'setup': {
            'interface': 1113091,
            'sender': 1113397,
            'collectors': 1113142,
            'security': 1113446,
            'folders': 1113138,
            'filters': 1113121,
            'filters-create': 1113121,
            'abook': 1113487,
            'chat': 1113272,
            'client': 1113199,
            'journal': 1113469,
            'todo': 1124708
        }
    },
    TUR: {
        'message': 1121442,
        'contacts': 1121408,
        'compose': 1121420,
        'search': 1121447,
        'spam': 1121451,
        'setup': {
            'interface': 1121406,
            'sender': 1121429,
            'collectors': 1121433,
            'security': 1121453,
            'folders': 1121445,
            'filters': 1121443,
            'filters-create': 1121443,
            'abook': 1121408,
            'client': 1118704,
            'journal': 1121407
        }
    },
    INT: {
        'message': 1114243,
        'contacts': 1114216,
        'compose': 1114252,
        'trash': 1114276,
        'search': 1114248,
        'spam': 1114262,
        'setup': {
            'interface': 1114213,
            'sender': 1114258,
            'collectors': 1114250,
            'folders': 1114245,
            'filters': 1114244,
            'filters-create': 1114244,
            'abook': 1114216,
            'security': 1114267,
            'client': 1114232,
            'journal': 1114215
        }
    }
};

/* mail.contexthelp.js end */

    /* mail.onpageinit.js begin */
/**
 * @fileOverview Здесь лежат все инициализационные процессы проекта mail
 */

// Префетч хэндлеров
Jane.events.bind("pageinit", function() {
    Jane.Handler.getAll(['filters']);

    Jane.Services.load('#message/1', function() {});
});

Jane.events.bind("pageinit", function() {
    // нужен doAll, потому что запрос требует ckey
    Jane.Handler.doAll(['do-mail-reset-recent-counter']);
});

// Гамификация
Jane.events.bind("pageinit", function() {
    var date = Daria.now();
    var regDate = Jane.$H('account-information').getDataKey('reg_date');
    var params = { 'activity[verb]': 'mail.show' };
    var hSettings = Jane.$H('settings');
    var lastLoginTs = hSettings.getSetting('last-login-ts');

    if (!lastLoginTs || (date - lastLoginTs) > Jane.Date.DAY) {
        params['activity[age]'] = Math.floor((date - regDate) / Jane.Date.DAY);
        hSettings.setSettings({ 'last-login-ts': date });
    }
    Jane.logUserActivity(params);
});

Jane.events.bind('pageinit', function() {
    Daria.Sound.preload('message');
});

// Отправка дайджеста газеты (DARIA-32572)
Jane.events.bind('pageinit', function() {
    // если у пользователя есть sid газеты
    if (Jane.$H('account-information').hasSid('76')) {
        // если у пользователя нет новых писем во входящих
        var hFolders = Jane.$H('folders');
        if (hFolders.getUnreadCount(hFolders.ids.inbox) === 0) {
            var hSettings = Jane.$H('settings');
            var lastTime = hSettings.getSetting('gazeta_digest-sent');
            var now = Daria.now();

            // если дайджест газеты еще не отправляли или прошло больше часа
            // час нужен газетчикам для отличия разных вызовов с нашей стороны
            if (!lastTime || (now - lastTime) / Jane.Date.HOUR >= 1) {
                // дергаем ручку
                Jane.Handler.doAll(['do-digest-send'], { }, function(data) {
                    var status = jpath(data, 'handlers[0].status')[0];
                    if (status === 'ok') {
                        // запоминаем время последней отсылки
                        hSettings.setSettings({'gazeta_digest-sent': now});
                    }
                });
            }

        }
    }
});

/* mail.onpageinit.js end */

    /* ../../js/components/promobar/promobar.js begin */
(function() {
    'use strict';

    var getUserPhones = Daria.Validator.getUserPhones.bind(Daria.Validator);
    var format = Daria.supplant;

    /**
     * Переход в следующее состояние,
     * шорткат для промисов
     */
    var transition;

    /**
     * Класс создающий плашку для создания альясов
     *
     * @class PromoBar
     *
     * @param {Boolean} [init] Выполнять ли начальную инициализацию
     * @param {Boolean} [modificationName='base'] модификатор плашки
     * @param {jQuery|Node} [location] контейнер ноды
     *
     */
    var PromoBar = Daria.PromoBar = function(init, modificationName, location) {
        /**
         * Предпологается, что сторонний код создающий плашку проверил
         * целесообразность ее показа:
         * юиды, сеть, страницы, наличие альяса
         */
        if (init) {
            this.init(modificationName || 'base', location);
        }
    };

    /**
     * Состояния промки альясов
     *
     * @const promoStates
     */
    var promoStates = PromoBar.promoStates = {
        // начальное состояние: ввод номера
        START: 'create-alias-init',
        // состояние потверждения создания альяса
        CONFIRM: 'create-alias-confirm',
        // состояние показа пользователю информации о том, что создание альяса завершено
        FINISH: 'create-alias-finish',
        // Состояние завершения работы промки
        CLOSE: 'close',
        // Метасостояние соответствует любому состоянию
        EVERYTHING: '*'
    };

    /**
     * Модификации плашки
     *
     * @member {Object} modifications
     */
    PromoBar.modifications = {
        // Стандартная вариация для показа плашки сверху
        'base': {
            close: true,
            header: i18n('%Promo_alias_title', Jane.Config['yandex-domain']),
            rightPromoContent: 'promo_video',
            name: 'base'
        },

        // Модификация для показа плашки на done
        'done': {
            close: false,
            header: i18n('%Promo_alias_title_done', Jane.Config['yandex-domain']),
            rightPromoContent: 'promo_image',
            name: 'done',
            metrika: 'done',
            closeTimeout: Daria.timify({seconds: 5})

        }
    };

    var proto = PromoBar.prototype;
    $.extend(proto, Daria.PubSubMixin);

    /**
     * Пространство имен для сохранения настроек в settings
     */
    var namespace = PromoBar.namespace = 'alias-promo';

    var debug = function(callback) {
        if (Daria.DEBUG === namespace) {
            callback();
        }
    };

    /**
     * Логирование событий плашки
     */
    var log = function(event, params) {
        var defaultParams = {
            event: [namespace].concat(event).join('-'),
            uid: Daria.uid
        };
        defaultParams = $.extend(defaultParams, params);

        debug(function() {
            console.warn('@log %s', defaultParams.event);
        });

        return Jane.ErrorLog.send(defaultParams);
    };

    /**
     * Логирование событий плашки
     *
     * @param {Array} metrikaPath
     */
    var metrika = proto.metrika = function(metrikaPath) {
        var base = ['Цифровой логин'];

        // Добавим отдельную ветку для метрик 3pane
        if (Daria.layout === '3pane') {
            base.push('3pane');
        } else if (this.modification.name !== 'base') {
            base.push(this.modification.metrika);
        }

        var metrikaArgs = base.concat(metrikaPath);

        debug(function() {
            console.warn('@metrika', metrikaArgs.join(' -> '));
        });

        return Jane.c(metrikaArgs);
    };

    /**
     * Начальная инициализация, вешаем обработчики и определяем состояние проекта
     *
     * @param {Object} modificationName модификация плашки
     * @param {jQuery|Node} [location=$('body')] место вставки ноды
     */
    proto.init = function(modificationName, location) {
        var that = this;
        transition = function(transitionName) {
            /**
             * @param {Object} payload данные от хэндлера
             */
            return function(payload) {
                that.transition(transitionName, payload);
            };
        };
        this.$location = location ? $(location) : $('body');

        if (!this.$location.length) {
            throw new TypeError('Argument location must be node or non-empty jQuery object');
        }

        this.modification = PromoBar.modifications[modificationName];
        metrika = this.metrika.bind(this);

        var states = this.stateConfig = {};

        // Обработчики входов и выходов в/из состояний
        states[promoStates.START] = {
            onenter: function() {
                Jane.events.bind('aliasify-submit', that.onAliasifySubmit);
                Jane.events.bind('aliasify-show-video', that.showVideo);
            },
            onchangestep: function() {
                that.getInputNumberNode().on('click', function(event) {
                    that.onClickInputNumber(event);
                });
            },
            onleave: function() {
                that.getInputNumberNode().off('click');
            }
        };

        states[promoStates.CONFIRM] = {
            onenter: function() {
                Jane.events.bind('aliasify-show-video', that.showVideo);
                Jane.events.bind('aliasify-commit', that.onAliasifyCommit);
                Jane.events.bind('aliasify-resend-code', that.onResendCode);
                Jane.events.bind('aliasify-back', that.onBack);
            },

            onleave: function() {
                that.password.$password = null;
                that.$node.find('.js-alias-password').off('keyup');
            }
        };
        states[promoStates.FINISH] = {
            onenter: function() {
                // Даем пользователю посмотреть видео в течении 4 секунд
                Jane.events.bind('aliasify-show-video', that.showVideo);
            }
        };

        // Декларация переходов и состояний
        this.states = new Daria.States({
            transitions: {
                // TODO разобраться с именованием
                'start-error': {from: promoStates.START, to: promoStates.START},

                'send': {from: promoStates.START, to: promoStates.CONFIRM},
                'send-error': {from: promoStates.START, to: promoStates.START},

                'confirm': {from: promoStates.CONFIRM, to: promoStates.FINISH},
                'confirm-error': {from: promoStates.CONFIRM, to: promoStates.CONFIRM},

                'resend-code': {from: promoStates.CONFIRM, to: promoStates.CONFIRM},
                'resend-code-error': {from: promoStates.CONFIRM, to: promoStates.CONFIRM},

                'back': {from: promoStates.CONFIRM, to: promoStates.START},
                'close': {from: promoStates.EVERYTHING, to: promoStates.CLOSE}
            },
            states: states,
            onEachState: {
                onenter: function() {
                    Jane.events.bind('aliasify-close', that.onAliasifyClose);
                },
                onleave: function() {
                    // TODO(hexode):
                    // Лучше вынести эту логику в отдельную фунцию, и завести
                    // метод destroy откуда продублировать данный вызов, который будет вызываться для последнего состояния
                    // его тоже надо как-то помечать при декларации
                    // TODO(hexode): так же можно перевести common.trigger на использование jquery
                    // для того, чтобы можно было отвязывать события по неймспейсу
                    Jane.events.unbind('aliasify-show-video', this.showVideo);
                    Jane.events.unbind('aliasify-submit', this.onAliasifySubmit);
                    Jane.events.unbind('aliasify-commit', this.onAliasifyCommit);
                    Jane.events.unbind('aliasify-resend-code', this.onResendCode);
                    Jane.events.unbind('aliasify-back', this.onBack);
                    Jane.events.unbind('aliasify-close', this.onAliasifyClose);

                    clearTimeout(that._timerId);
                }
            }
        });

        // TODO: от этого ада можно избавиться, так как states теперь обрел возможность вызывать методы у целевого объекта
        // Обработчики состояний
        this.states.onState(promoStates.START, this.onStateStart.bind(this));
        this.states.onState(promoStates.CONFIRM, this.onStateConfirm.bind(this));
        this.states.onState(promoStates.FINISH, this.onStateFinish.bind(this));
        this.states.onState(promoStates.CLOSE, this.onStateClose.bind(this));

        // Обработчики переходов
        var onError = this.onError.bind(this);
        var onSend = this.onSend.bind(this);

        this.states.onTransition('send', onSend);
        this.states.onTransition('send-error', onError);
        this.states.onTransition('confirm-error', onError);
        this.states.onTransition('resend-code-error', onError);

        // Обработчики событий элементов интерфейса плашки
        this.onAliasifyCommit = this.onAliasifyCommit.bind(this);
        this.onResendCode = this.onResendCode.bind(this);
        this.onBack = this.onBack.bind(this);
        this.onAliasifySubmit = this.onAliasifySubmit.bind(this);
        this.onAliasifyClose = this.onAliasifyClose.bind(this);
        this.onPasswordKeyup = this.onPasswordKeyup.bind(this);

        // Определяем текущее состояние плашки
        // TODO: переделать через run и колбэк onBeforeEachstates
        this.defineState().then(function(state) {
            that.beforeAllStates(state).then(function() {
                // TODO: устранить недостатки выявленные во время ревью
                // @see https://github.yandex-team.ru/Daria/mail/pull/641/files#L0R269
                // @see http://jing.yandex-team.ru/files/hexode/2014-04-09_1514.png
                if (state) {
                    that.states.setCurrentState(state);
                }
            });
        });

        // Используемые хэндлеры
        this.hAliasifyBind = Jane.$H('aliasify-bind');
        this.hAliasifyBound = Jane.$H('aliasify-bound');
        this.hSettings = Jane.$H('settings');

        // Исход работы плашки: альяс создан
        this.once('alias-promo.finish', function() {
            metrika('Альяс создан');
            that.saveSettings({
                closeStatus: 'alias-created',
                closeDate: Daria.now()
            });
            // обнуляем настройку автозакрытия
            Jane.Promo.setFirstStartSettingOff('alias-promo');
        });

        // Исход работы плашки: закрытие ее пользователем
        this.once('alias-promo.closed-by-user', function() {
            that.saveSettings({
                closeStatus: 'closed-by-user',
                closeDate: Daria.now()
            });
            // обнуляем настройку автозакрытия
            Jane.Promo.setFirstStartSettingOff('alias-promo');
        });
    };

    /**
     * Метасостояние предшествующее любому первому состоянию плашки
     *
     * @param {String} state состояние плашки
     *
     * @returns {jQuery.Deferred}
     */
    proto.beforeAllStates = function(state) {
        var that = this;

        // Если это форсированный показ и это первое состояние плашки
        if (state === promoStates.FINISH && this.isForceShow()) {
            // Логигируем показ заглушки
            log('stub');
            this.metrika(['Заглушка', 'показ']);

            // и отключаем дальнейшее логирование и метрику, чтобы не портить статистику
            metrika = log = _.noop;

        } else {
            log('show');
            this.metrika('Показ плашки');
        }

        this.trigger(format('{namespace}.show', {namespace: namespace}));
        return Daria.Validator.getUserPhones(true).then(function(phones) {
            // TODO(hexode): устранить недостатки выявленные во время ревью
            // @see https://github.yandex-team.ru/Daria/mail/pull/641/files#L0R269
            // @see http://jing.yandex-team.ru/files/hexode/2014-04-09_1519.png
            if (state === promoStates.FINISH) {
                // проставление телефонного номера в инстанс промо альясов в случае форсированного
                // показа на последнем шаге(заглушка)
                that._number = phones.getSecure().getNumber();

                // Добавляем настройку свидетельствующую о том, что надо предотвращать форсированный показ
                that.saveSettings({preventForceShow: true});
            }
        });
    };

    /**
     * Состояние соответствующее первому шагу создания альяса
     *
     * @param {Object} transitionInfo информация о переходе в это состояние
     */
    proto.onStateStart = function(transitionInfo) {
        var that = this;
        var transitionName = transitionInfo.transitionName;

        // Если это первый вход в состояние или мы пришли в это состояние по
        // кнопке назад
        if (!transitionName || transitionName === 'back') {
            getUserPhones(true).done(function(phones) {
                var securePhone = phones.getSecure();

                // текущий номер это либо номер защищенного телефона либо, либо номер сохраненный в settings
                var number = that._number = (securePhone && securePhone.getNumber()) || that._getNumber();

                var context = {
                    number: number,
                    lock: Boolean(securePhone)
                };

                that.changeStep(promoStates.START, context);

                // Если телефон не секьюрный разблокируем текстовое поле
                if (!securePhone) {
                    that.unlockEdit();
                }

                that.$node.find('button[type="submit"]:eq(0)').focus();

                var phoneList = phones.getAll();

                that.autocompleteData = $.map(phoneList, function(phone) {
                    return phone.getNumber();
                });

                // Если секьюрного телефона нет, но есть другие врубаем автокомплит и переводим фокус в текстовое поле
                if (!securePhone && phones.getPhoneCount()) {
                    that.$node.find('input:eq(0)').focus();
                    Daria.Autocompleter.getUserPhoneAutocompleter().bindField({
                        field: $('.b-intruder_promo-alias input'),
                        focus: 1
                    });
                }

            }).fail(transition('start-error'));
        }
    };


    proto.getInputNumberNode = function() {
        return this.$node.find('.js-alias-number');
    };

    /**
     * Разблокировать поле ввода номера
     */
    proto.unlockEdit = function() {
        Jane.enableInput(this.getInputNumberNode());
    };

    /**
     * Потверждение инициации процесса создания цифрового логина
     */
    proto.onAliasifySubmit = function() {
        metrika('Клик на "получить адрес"');
        var that = this;
        var number = this.getInputNumberNode().val();

        /**
         * Иницирует создание альяса
         *
         * @param {String} type тип ручки(bound|bind)
         * @param {String} number Номер телефона
         */
        var aliasifySubmit = function(type, number) {
            if (number) {
                that._number = number;
            }
            that._aliasifyHandlerName = 'aliasify-' + type;

            Jane.$H(that._aliasifyHandlerName).submit(number)
                .done(transition('send'))
                .fail(transition('send-error'));
        };

        getUserPhones(true).done(function(phones) {
            var phone = phones.getPhone(number);
            // Если телефон защищенный используем aliasify-bound
            if (phone && phone.isSecure() && phone.isValid()) {
                aliasifySubmit('bound');
            } else {
                aliasifySubmit('bind', number);
            }
        }).fail(transition('send-error'));
    };

    proto.onSend = function() {
        // Сохраним номер в случае, если он валиден
        this._saveNumber(this._number);
    };

    /**
     * Состояние ожидания потверждение процесса создания альяса кодом и
     * паролем(если он требуется)
     *
     * @param {Object} transitionInfo информация о переходе в это состояние
     */
    proto.onStateConfirm = function(transitionInfo) {
        var number = this._number;
        var transitionName = transitionInfo.transitionName;
        var handler = Jane.$H(this._aliasifyHandlerName);

        handler.offTrackIdExpired(number, this.onBack);
        handler.onTrackIdExpired(number, this.onBack);

        if ($.inArray(transitionName, ['send', 'resend-code']) > -1) {

            var context = {
                number: this._number,
                show_password: (handler.name === 'aliasify-bind')
            };

            this.changeStep(promoStates.CONFIRM, context);

            this.password.$password = this.$node.find('.js-alias-password');
            this.password.$password.on('keyup', this.onPasswordKeyup);
        }

        this._timer();
    };

    /**
     * Потверждение процесса создания альяса
     * отправка кода и пароля если нужно
     *
     */
    proto.onAliasifyCommit = function() {
        metrika('Клик на "потвердить"');
        var code = this.$node.find('.js-alias-code').val();
        var password = this.$node.find('.js-alias-password').val();
        var number = this._number;

        Jane.$H(this._aliasifyHandlerName).commit(number, code, password)
            .done(transition('confirm'))
            .fail(transition('confirm-error'));
    };

    proto._timer = function() {
        var that = this;
        var REFRESH_TIMEOUT = 1000;
        var getTimeout = function() {
            return Jane.$H(that._aliasifyHandlerName).getResendCodeTimeout(that._number);
        };
        var timeout = getTimeout();

        // Если таймаут больше нуля обновляем таймер и
        // рекурсивно вызываем сами себя
        if (timeout > 0) {
            // Самый первый запуск
            if (!this._timerId) {
                this._refreshResendTimeout(timeout);
            }

            this._timerId = setTimeout(function() {
                that._refreshResendTimeout(getTimeout());
                that._timer();
            }, REFRESH_TIMEOUT);
        // Если таймаут меньше или равен нулю, то данный код
        // будет выполнен последний раз и не вызовет сам себя рекурсивно
        } else {
            this._clearResendNotification();
            // Включаем кнопку отправить смс, которая по умолчанию отключена
            Jane.enableButton(this.$node.find('.js-code-resend'));
        }
    };

    proto._refreshResendTimeout = function(timeout) {
        var $timeout = this.$node.find('.js-resend-timeout');
        var MINUTE_IN_MS = 60 * 1000;

        var minutes = Math.floor(timeout / MINUTE_IN_MS);
        var seconds = Math.floor((timeout - minutes * MINUTE_IN_MS) / 1000);

        $timeout.html(format('{minutes}:{seconds}', {
            minutes: Jane.Common.n(minutes),
            seconds: Jane.Common.n(seconds)
        }));
    };

    proto._clearResendNotification = function() {
        this.$node.find('.js-resend-notification').html('');
    };

    proto.onResendCode = function() {
        metrika('Клик на "Прислать код еще раз"');
        Jane.$H(this._aliasifyHandlerName).resend(this._number)
            .done(transition('resend-code'))
            .fail(transition('resend-code-error'));
    };

    proto.onBack = function(event) {
        if (event.name === 'track_expired') {
            metrika('Возврат на первый шаг(по таймауту)');
        } else {
            metrika('Возврат на первый шаг');
        }
        this.transition('back');
    };

    /**
     * Определяет форсированный ли это показ промо по прямому урлу
     *
     * @returns {Boolean}
     */
    proto.isForceShow = function() {
        return Daria.urlParams.promo === namespace;
    };

    proto.onStateFinish = function() {
        var FINISH_CLOSE_TIMEOUT = this.modification.closeTimeout || Daria.timify({seconds: 4});
        if (this.isForceShow()) {
            // Для форсированнного показа удлиняем значение таймаута закрытия
            FINISH_CLOSE_TIMEOUT = Daria.timify({seconds: 10});
        }

        var context = {
            number: this._number,
            // Если это форсированный показ промо, то шаблон будет иметь другие варианты текстов
            forceShow: this.isForceShow()
        };

        this.changeStep(promoStates.FINISH, context);

        setTimeout(transition('close'), FINISH_CLOSE_TIMEOUT);
    };

    /**
     * Обработчик нажатия на крестик
     */
    proto.onAliasifyClose = function() {
        var metrikaMessage = (this.modification.name == 'done') ?
            'Уход со страницы' :
            'Крестик плашки';

        metrika(metrikaMessage);
        this.transition('close');
    };

    /**
     * Состояние закрытия плашки
     */
    proto.onStateClose = function(transitionInfo) {
        var previousState = transitionInfo.from;

        /**
         * Определяем по переходу исход работы плашки
         */
        switch (previousState) {
        case promoStates.FINISH:
            this.trigger(format('{namespace}.finish', {namespace: namespace}));
            break;
        case promoStates.START:
        case promoStates.CONFIRM:
            this.trigger(format('{namespace}.closed-by-user', {namespace: namespace}));
            break;
        }

        if (this.isForceShow) {
            // Добавляем настройку свидетельствующую о том, что надо предотвращать последующий форсированный показ
            this.saveSettings({preventForceShow: true});
        }

        this.removeNode().reset3pane();
    };

    /**
     * Удаляем закешированную и дом ноду
     */
    proto.removeNode = function() {
        this.$location.find('.b-intruder_promo-alias').remove();
        this.$node = null;
        return this;
    };

    /**
     * Скрываем плашку без
     * смены состояния
     */
    proto.hide = function() {
        this.trigger(format('{namespace}.hide', {namespace: namespace}));
        this.$node.hide();
        this.reset3pane();
    };

    /**
     * Показываем плашку без
     * смены состояния
     */
    proto.show = function() {
        this.trigger(format('{namespace}.show', {namespace: namespace}));
        this.$node.show();
        this.fix3pane();
    };

    proto.changeStep = function(step, ctx) {
        var $next = this.renderStep(step, ctx);

        this.removeNode();
        this.$location.prepend($next);

        this.$node = $next;
        var eventName = format('{namespace}.{step}.render', {namespace: namespace, step: step});
        this.trigger(eventName, this);

        // XXX: откровенный костыль - надо перенести в States
        var onchangestep = this.stateConfig[this.states.getCurrentStateName()].onchangestep;

        if (_.isFunction(onchangestep)) {
            onchangestep.call(this, this.$node);
        }

        this.fix3pane();
    };

    proto.onRenderStart = function(callback) {
        var eventName = format('{namespace}.{step}.render', {
            namespace: namespace,
            step: promoStates.START
        });
        this.once(eventName, callback);
    };

    proto.renderStep = function(step, ctx) {
        var userCountryPhoneCode = this.getUserCountryPhoneCode();

        ctx = ctx || {};
        ctx.step = step;
        ctx.modification = this.modification;

        log('country_phone_code', {
            user_country_phone_code: userCountryPhoneCode
        });

        ctx.placeholder = this.getPhonePlaceholder(userCountryPhoneCode);
        return $(Jane.tt('mail-common:promo-digital-alias', ctx));
    };

    proto.getPhonePlaceholder = function(userCountryPhoneCode) {
        return Daria.Validator.getLocalPhoneInfo(userCountryPhoneCode, 'placeholder');
    };

    /**
     * TODO(maksimrv): Вынести логику получения пользовательского
     * кода в функцию getLocalPhoneInfo. Мы всегда туда передаем
     * его первым параметром и всегда берем из модели
     * account-information
     */
    proto.getUserCountryPhoneCode = function() {
        return Jane.$H('account-information').getDataKey('country_phone_code');
    };

    proto.onError = function(transition) {
        var payload = transition.payload;
        var errors = payload.errors;

        var errorMetrika = function(errorPath) {
            metrika(['Ошибка'].concat(errorPath));
        };
        var error;
        if (errors && errors.length > 0) {
            error = errors.sort().join(':');

            switch (error) {
            case 'sms_limit.exceeded':
                this.showError(i18n('%Promo_alias_error_sms_limit_exceeded'));
                errorMetrika('Исчерпан лимит отправки смс');
                break;
            case 'phone_alias.exist':
                this.showError(i18n('%Promo_alias_error_alias_exist'));
                errorMetrika('Альяс уже создан');
                break;
            case 'number.invalid':
                this.showError(i18n('%Promo_alias_error_number_invalid'));
                errorMetrika('Неверный номер');
                break;
            case 'password.not_matched':
                this.showError(i18n('%Promo_alias_error_password_not_matched'));
                errorMetrika('Неверный пароль');
                break;
            case 'code.invalid':
                errorMetrika('Неверный код');
                this.showError(i18n('%Promo_alias_error_code_invalid'));
                break;

            // TODO: Нижележащий код явно можно улучшить, но нет времени думать как
            case 'number.empty':
                this.setHighlight('.js-alias-number');
                this.showError(i18n('%Promo_alias_error_form_invalid'));
                errorMetrika('Незаполнены все поля');
                break;
            case 'code.empty':
                this.setHighlight('.js-alias-code');
                this.showError(i18n('%Promo_alias_error_form_invalid'));
                errorMetrika('Незаполнены все поля');
                break;
            case 'password.empty':
                this.setHighlight('.js-alias-password');
                this.showError(i18n('%Promo_alias_error_form_invalid'));
                errorMetrika('Незаполнены все поля');
                break;
            case 'code.empty:password.empty':
                this.setHighlight('.js-alias-code');
                this.setHighlight('.js-alias-password');
                this.showError(i18n('%Promo_alias_error_form_invalid'));
                errorMetrika('Незаполнены все поля');
                break;

            default:

                debug(function() {
                    console.warn('%s: %s', namespace, error);
                });

                this.showError(i18n('%Promo_alias_error_unknown'));

                errorMetrika('Неизвестная ошибка');
                log('unhandled_error', {response: JSON.stringify(payload)});
            }
        // Ошибка отсутствия соединения
        } else if (transition.payload.errorcode === 'CONNECTION_ERROR') {
            // Смысла логировать отсуствие соединения нет, так как его нет ;)
            this.showError(i18n('%Promo_alias_error_connection_lost'));
        }

        // Сохраняем последнюю ошибку с которой столкнулся пользователь
        this.saveSettings({
            lastError: error || transition.payload.errorcode
        });
    };

    proto.setHighlight = function(selector) {
        var that = this;
        var $input = this.$node.find(selector);
        $input.addClass('b-input_error_highlight');

        // TODO Очищать хэндлеры
        $input.one('focus', function() {
            that.unsetHighlight('input');
        });
    };

    proto.unsetHighlight = function(selector) {
        this.$node.find(selector).removeClass('b-input_error_highlight');
    };

    proto.showError = function(msg) {
        var that = this;
        var $error = this.$node.find('.b-field_error');
        $error.text(msg.charAt(0).toUpperCase() + msg.slice(1)).removeClass('g-hidden');
        that.fix3pane();

        // TODO Очищать обработчики
        this.$node.find('input').one('focus', function() {
            that.hideError();
            that.fix3pane();
        });

    };

    proto.hideError = function() {
        var $error = this.$node.find('.b-field_error');
        $error.addClass('g-hidden');
    };

    /**
     * Выполняет проверку на наличие альяса
     *
     * @static
     *
     * @returns {jQuery.Deferred}
     */
    PromoBar.isAliasNotExist = function() {
        var deferred = $.Deferred();

        $.when(Daria.Validator.getUserPhones(true), Jane.$H('userinfo').get()).done(function(phones, userInfo) {
            var securePhone = phones.getSecure();

            // Если у пользователя нет пароля то
            // не показываем промо
            if (!userInfo.hasPassword) {
                return deferred.reject();
            }

            /**
             * Если нет защищенного телефона или есть, но он не провалидирован
             */
            if (!securePhone || !securePhone.isValid()) {
                return deferred.resolve();
            }

            return Jane.$H('alias-exist').check(securePhone.getNumber()).done(function(checkResult) {
                if (checkResult.aliasExist) {
                    deferred.reject();
                } else {
                    deferred.resolve();
                }
            }).fail(function(/*error*/) {
                deferred.reject();
            });
        }).fail(function() {
            deferred.reject();
        });

        return deferred.promise();
    };

    /**
     * TODO(hexode): заменить на updateSetting
     */
    PromoBar.saveSettings = proto.saveSettings = function(settings) {
        var hSettings = Jane.$H('settings');
        var allSettings = hSettings.getMultiSetting(namespace);
        $.extend(allSettings, settings);

        return hSettings.saveMultiSetting(namespace, allSettings);
    };

    /**
     * Возращает true, если плашка была закрыта пользователем
     *
     * @returns {Boolean}
     */
    PromoBar.isClosedByUser = proto.isClosedByUser = function() {
        return PromoBar.getSetting('closeStatus') === 'closed-by-user';
    };

    /**
     * Возращает true, если плашка была закрыта пользователем
     *
     * @returns {Number} 0 - если плашка не показывалась
     */
    PromoBar.getLastUsageTime = proto.getLastUsageTime = function() {
        return PromoBar.getSetting('closeDate') || 0;
    };

    /**
     * Возвращает настройки относительно промки альясов
     *
     * @public
     * @static
     * @param {String} key ключ настройки

     * return {String}
     */
    PromoBar.getSetting = proto.getSetting = function(key) {
        var hSettings = Jane.$H('settings');
        return hSettings.getMultiSetting(namespace)[key];
    };

    /**
     * Очистить настройки для плашки альясов
     *
     * @description для тестировщиков
     * @static
     * return {Promise}
     */
    PromoBar.flushSettings = function() {
        var hSettings = Jane.$H('settings');
        return hSettings.saveMultiSetting(namespace, {});
    };

    proto._saveNumber = function(number) {
        this.saveSettings({number: number});
    };

    proto._getNumber = function() {
        return this.getSetting('number');
    };

    proto._saveState = function(state) {
        this._saveAnything('state', state);
    };

    proto._getState = function() {
        return this.getSetting('state');

    };

    /**
     * Эта функция в любой момент с минимально прилагаемыми усилиями
     * должна уметь определять состояние
     */
    proto.defineState = function() {
        var deferred = $.Deferred();

        // Пытаемся восстановить сохраненное состояние
        var state = this._getState();
        switch (state) {
        case promoStates.START:
        case promoStates.CONFIRM:
            // TODO: на данный момент сохранение состояния CONFIRM
            // не реализовано, так как таит в себе некоторые технические трудности:
            // необходимо сохранять и отслеживать свежесть трэка и определять хэндлер,
            // c помощью которого выполнялась альясификация, поэтому здесь происходит
            // сброс состояния
            return deferred.resolve(promoStates.START).promise();
        case promoStates.FINISH:
        case promoStates.CLOSE:
            return deferred.resolve(promoStates.CLOSE).promise();
        }

        // Если состояние не сохранено, значит это первый вызов плашки
        // пытаемся определить состояние с нуля
        return $.when(
            Daria.Validator.getUserPhones(true),
            Jane.$H('userinfo').get()
        ).then(this.getStateByPhones, function(/*error*/) {
            /* Состояние нет падаем */
            return null;
        });
    };

    /**
     * Получить состояние базируясь на телфонах и наличии альясов
     * есть секьюрный телефон являющийся альясом - promoStates.FINISH
     * Иначе - promoStates.START
     *
     * @static
     * @param {Validator._UserPhones} phones
     * @param {Object} userInfo - данные ручки userinfo
     *
     * @returns {jQuery.Deferred} Promise<String> валидное состояние для FSM
     */
    PromoBar.getStateByPhones = proto.getStateByPhones = function(phones, userInfo) {
        var deferred = $.Deferred();

        // Если нет пароля не показываем плашку
        if (!userInfo.hasPassword) {
            return deferred.resolve(null).promise();
        }

        var securePhone = phones.getSecure();
        if (securePhone && securePhone.isValid()) {
            // TODO(hexode): подумать о выносе функциональности определения телефонов в userphones
            return Jane.$H('alias-exist').check(securePhone.getNumber()).then(function(checkResult) {
                if (checkResult.aliasExist) {
                    return promoStates.FINISH;
                }
                return promoStates.START;
            });
        }

        return deferred.resolve(promoStates.START).promise();
    };

    proto.transition = function() {
        this.states.transition.apply(this.states, arguments);
    };

    /**
     * @desc Показывает промо видеоролик
     * @param {Object} [templateParameters] Параметры для шаблона.
     * Нужны для тестирования, можно передать video_url
     */
    proto.showVideo = function(templateParameters) {
        metrika('Клик на видео');

        var dialog = Daria.Dialog.open({
            width: '700',
            body: Jane.tt('mail-common:promo-alias-video', templateParameters),
            onopen: function() {
                metrika('Открытие попапа с видео');
            },
            onclose: function() {
                metrika('Крестик видео');
                /**
                 * NOTE: setZeroTimeout необходим для того, чтобы отработало удаление src из iframe.
                 * Подробнее: DARIA-32365 - В ИЕ 9,10 после закрытия ролика выскакивает ошибка
                 */
                var $iframe = dialog.$body.find('iframe');
                $iframe.attr('src', '');
                $iframe.addClass('g-hidden').appendTo(document.body);
                Daria.setZeroTimeout(function() {
                    $iframe.remove();
                });
            }
        });

        return dialog;
    };

    //TODO (smoogly): у нас этот регексп уже в нескльких местах один и тот же. Где его правильно хранить?
    proto.validPasswordRegexp = /^[-a-z0-9.`!@#$%^&*()_=+\[\]\{\};:"\\|,<>\/?]*$/i;
    proto.onPasswordKeyup = function() {
        if (this.validPasswordRegexp.test(this.$password.val())) {
            this.hideError();
            this.unsetHighlight(this.$password.selector);
        } else {
            this.showError(i18n('%Authdialog_login-invalid'));
            this.setHighlight(this.$password.selector);
        }
    };

    proto.password = {
        $password: null,

        validPasswordRegexp: /^[-a-zA-Z0-9!@#$%^&*()+_:;.,]*$/,
        containsInvalidCharacters: function(password) {
            return !this.validPasswordRegexp.test(password);
        }
    };

    proto.onPasswordKeyup = function() {
        if (this.password.containsInvalidCharacters(this.password.$password.val())) {
            this.showError(i18n('%Authdialog_login-invalid'));
            this.setHighlight(this.password.$password.selector);
        } else {
            this.hideError();
            this.unsetHighlight(this.password.$password.selector);
        }
    };

    /**
     * Фиксируем высоту блока 3pane при показе плашки
     */
    proto.fix3pane = function() {
        if (Daria.layout === '2pane') {
            return;
        }
        var pageContent = this.pageContent = $(".b-page:eq(0)").find('.b-page__content');
        var promoHeight = this.$node.height();

        if (!this._pageContentTop) {
            this._pageContentTop = pageContent.css('top');

            this.onResize3pane = function() {
                this.fix3pane();
            }.bind(this);

            $(window).resize(this.onResize3pane);
        }
        pageContent.css('top', promoHeight + 1);
    };

    /**
     * @desc Обработчик onclick на поле ввода
     * телефонного номера. Автоматически вставляет
     * код страны
     */
    proto.onClickInputNumber = function(event) {
        var that = this;
        var $input = $(event.currentTarget);

        Daria.Validator.predictInput($input, function() {
            var userCountryPhoneCode = that.getUserCountryPhoneCode();
            return Daria.Validator.getLocalPhoneInfo(userCountryPhoneCode, 'code');
        });

        Daria.Validator.moveCaretToEnd($input);
    };

    /**
     * Восстановление после закрытия плашки
     *
     * @see fix3pane
     */
    proto.reset3pane = function() {
        if (Daria.layout === '2pane') {
            return;
        }
        this.pageContent.css('top', this._pageContentTop);
        $(window).off('resize', this.onResize3pane);
    };

})();

/* ../../js/components/promobar/promobar.js end */

    /* ../../js/components/states.js begin */
(function() {
    'use strict';
    var format = Daria.supplant;

    /**
     * Некоторое подобие конечного автомата
     *
     * @description
     * Цель:
     * Позволяет формально выразить логику объекта через состояния и переходы между ними
     *
     * Особенности:
     * - управляется на базе pubsub механизма
     * управляемый объект подписывается на события состояний и переходов задекларированные в
     * конечном автомате(States)
     *
     * - Путем формализации упрощает сложную логику, делает ее более явной и прозрачной. Декларация
     * переходов может легко быть преобразована в диаграмму конечных состояний
     *
     * Минусы:
     * Требуется некоторое понимание работы ДКА, к примеру регэкспы и промисы есть ДКА
     *
     * В рамках нашего фронтенда ДКА будет хорошо работать:
     * 1. с визардами
     * 2. со сложной промофункциональностью
     * 3. с объектами меняющими состояние
     *
     * Минусы текущей реализации(TODO):
     *
     * Данная реализация далеко не идеальна, в частности:
     * - отсутствует возможность в промежуточных метасостояниях(before, after) кидать промисы
     * - инициализация несколько избыточна и вызов событий должен выполняться автоматически на
     * целевом управляемом объекте(частично сделано)
     * - Подумать о лучшем механизме симбиоза с целевым объектом(миксин, наследование, или декларация
     *   цели при инстанциировании)(сделано через декларацию цели)
     *
     * - нет возможности задавать допустимые исходные и конечные состояния переходов через массивы(или
     *   даже через функции, когда надо сделать вычислимое допустимое состояние)(частично сделано)
     *
     * идеи:
     * если сделать вызов событий автоматически, то возникает проблема когда на один метод целового
     * объекта должны ссылаться несколько событий(делать схему событие == метод - иногда расточительно).
     * Надо дать возможность переопределить такое поведение через onTransition,
     * onState с указанием массива состояний/переходов
     *
     * @constructor
     *
     * @param {Object} params конфигурация ДКА
     *
     * @param {Object} params.transitions декларация переходов
     * @param {Object} params.transitions.<transition-name> декларация перехода, где <transition-name>
     * уникальное имя
     * @param {Object} params.transitions.<transition-name>.from исходное допустимое состояние
     * @param {Object} params.transitions.<transition-name>.to конечное допустимое состояние
     *
     * @param {Object} [params.states] декларация событий состояний onleave, onenter
     *
     * @param {Object} [params.onEachState] декларация хуков на вход и выход каждого состония
     * @param {Function} [params.onEachState.onleave] срабатывает при выходе из состояния
     * @param {Function} [params.onEachState.onenter] срабатывает при входе в состояние
     *
     */
    var States = Daria.States = function(params) {
        if (!params.transitions) {
            throw new Error('Argument params.transitions is compulsory');
        }

        // добавляем pubsub механизм
        _.extend(this, Daria.PubSubMixin);

        // хранилище деклараций переходов
        this._transitions = params.transitions;

        // хранилище состояний
        this._states = params.states || {};

        // хуки на вход и выход из состояний
        this._onEachState = params.onEachState;

        // текущее состояние null по умолчанию
        this._currentState = null;

        this._initialState = params.initialState;

        this._target = params.target || null;
    };

    /**
     * Переводит идентификаторы из pascal-case(underscore) или dot-case в camel-case нотацию
     *
     * @param {string} identifier идентификатор
     *
     * @returns {string}
     */
    var camelize = States.camelize = function(identifier) {
        var boundaryDetectRegexp = /(?:(\w)[-._]([^\W_]))/g;
        return identifier.replace(boundaryDetectRegexp, function(match, letterBefore, letterAfter) {
            return letterBefore + letterAfter.toUpperCase();
        });
    };

    /**
     * Возращает имя текущего состояния
     *
     * @returns {string}
     */
    States.prototype.getCurrentStateName = function() {
        return this._currentState;
    };

    /**
     * Устанавливает новое текущее состояние
     *
     * @param {string} stateName состояние
     * @param {string} [transitionName] переход который привел в это состояние
     *
     * @fires States#state.<state-name>
     *
     * @returns {States}
     */
    States.prototype.setCurrentState = function(stateName, transitionName) {
        var oldStateName = this.getCurrentStateName();

        var transitionInfo = {
            from: oldStateName,
            to: stateName,
            transitionName: transitionName || null,
            target: this._target
        };

        // Вызываем хуки(если они определены) на каждое состояние
        var eachState = this._onEachState;
        if (eachState) {
            if (oldStateName && _.isFunction(eachState.onleave)) {
                eachState.onleave.call(this, transitionInfo);
            }

            if (_.isFunction(eachState.onenter)) {
                eachState.onenter.call(this, transitionInfo);
            }

        }

        // Вызов onenterState, onleaveState на целевом объекте
        if (_.isObject(this._target)) {
            if (oldStateName && _.isFunction(this._target.onleaveState)) {
                this._target.onleaveState(transitionInfo);
            }


            if (_.isFunction(this._target.onenterState)) {
                this._target.onenterState(transitionInfo);
            }
        }

        // Вызываем необязательный хук onleave предыдущего состояния
        var oldState = this._getState(oldStateName);
        if (oldState && _.isFunction(oldState.onleave)) {
            oldState.onleave.call(this, transitionInfo);
        }

        // Вызываем необязательный хук onenter предыдущего состояния
        var newState = this._getState(stateName);
        if (newState && _.isFunction(newState.onenter)) {
            newState.onenter.call(this, transitionInfo);
        }

        // Проставляем текущее состояние
        this._currentState = stateName;

        /**
         * Событие перехода в состояние
         *
         * @event States#state.<state-name>
         * @type {object}
         * @property {string} from - предыдущее состояние
         * @property {string} to - текущее состояние
         * @property {string} transitionName - имя перехода
         */
        this.trigger('state.' + stateName, transitionInfo);

        // вызываем метод onState<StateName> на целевом объекте, если он определен
        if (_.isObject(this._target)) {
            var onStateEvent = this._target[camelize('on-state-' + stateName)];
            if (_.isFunction(onStateEvent)) {
                // TODO: UNIT TESTS
                onStateEvent.call(this._target, transitionInfo);
            }

            if (_.isFunction(this._target.oneachState)) {
                this._target.oneachState(transitionInfo);
            }
        }

        return this;
    };

    /**
     * Получить состояние
     * @private
     *
     * @param {string} name имя состояния
     *
     * @returns {Object} объект состояния
     */
    States.prototype._getState = function(name) {
        return this._states[name];
    };

    /**
     * Получить объект перехода
     * @private
     *
     * @param {string} name имя перехода
     *
     * @returns {Object} объект перехода
     */
    States.prototype._getTransition = function(name) {
        return this._transitions[name];
    };

    /**
     * Извлекает целевое состояние перехода
     *
     * @param {string} stateName имя перехода
     *
     * @returns {Object} states
     */
    States.prototype.getNextStateByTransition = function(stateName) {
        var currentState = this.getCurrentStateName();
        var transition = this._getTransition(stateName);

        return (_.isFunction(transition.to)) ? transition.to(currentState) : transition.to;
    };

    /**
     * Выполняет переход в состояние transitionName если есть возможность
     *
     * @param {string} transitionName имя состояния
     * @param {Object} [payload] дополнительные данные
     *
     * @throws кидает ошибку если переход в состояние не возможен согласно декларации
     * @fires transition.<transitionName> содержит объект перехода
     *
     * @returns {States}
     */
    States.prototype.transition = function(transitionName, payload) {
        payload = payload || null;
        var currentState = this.getCurrentStateName();
        if (_.isUndefined(currentState)) {
            throw new Error('Current state must not be undefined');
        }

        var transition = this._getTransition(transitionName);
        if (!transition) {
            throw new Error('No transition with name `' + transitionName + '` found');
        }

        // проверяем допустимость перехода в следущее состояние
        // TODO: UNIT_TEST
        var guards = [
            // набор исходных состояний проставлен статически в виде строки
            transition.from !== currentState,
            // или в виде массива
            (_.isArray(transition.from) && !_.contains(transition.from, currentState)),
            // или динамически в виде метода
            transition.from !== '*'
        ];

        if (_.all(guards)) {
            throw new Error('Transition can not be completed - invalid `from` state');
        }

        // Если исходное состояние любое, или найдено в массиве допустимых исходных состояний
        // то переходим в целевое состояние
        if (transition.from === '*' || _.isArray(transition.from)) {
            transition.from = this.getCurrentStateName();
        }

        /**
         * XXX: снабжаем объект перехода дополнительными данными, чтобы до них было возможно достучаться
         * в состоянии
         * ИМХО это костыльное решение и надо бы это выпилить
         */
        transition.payload = payload;
        transition.target = this._target;

        // Тригерим событие о переходе
        this.trigger('transition.' + transitionName, transition);

        // вызываем метод onTransition<TransitionName> на целевом объекте, если он определен
        if (_.isObject(this._target)) {
            var transitionEvent = this._target[camelize('on-transition-' + transitionName)];
            if (_.isFunction(transitionEvent)) {
                transitionEvent.call(this._target, transition);
            }
        }

        // Если следующее состояние динамическое - вычисляем его
        var nextState = this.getNextStateByTransition(transitionName);

        // переходим в следующее состояние
        this.setCurrentState(nextState, transitionName);

        return this;
    };

    /**
     * Вешает обработчик на состояние
     *
     * @param {string} stateName
     * @param {Function} listener
     *
     * @returns {States}
     */
    States.prototype.onState = function(stateName, listener) {
        this.on(format('state.{stateName}', {stateName: stateName}), listener);

        return this;
    };

    /**
     * Вешает обработчик на переход
     *
     * @param {string} transitionName
     * @param {Function} listener
     *
     * @returns {States}
     */
    States.prototype.onTransition = function(transitionName, listener) {
        this.on(format('transition.{transitionName}', {transitionName: transitionName}), listener);

        return this;
    };

    /**
     * Определяет текущее состояние с помощью параметра
     * verifyInitialState или initialState
     */
    States.prototype.verifyInitialState = function(callback) {
        if (!this._verifyInitialState) {
            if (this._initialState) {
                callback(this._initialState);
            }
        }
        // TODO: promise
        if (_.isFunction(this._verifyInitialState)) {
            return this._verifyInitialState();
        }
    };

    /**
     * Активация конечного автомата
     * @desc
     * определяет начальное состояние и устанавливает его в качестве текущего
     * если определен beforeAllStates, то вызывает его
     *
     * @param {Function} [beforeAllStates]
     *
     * @returns {States}
     */
    States.prototype.run = function(beforeAllStates) {
        var that = this;
        this.verifyInitialState(function(initialState) {
            beforeAllStates = beforeAllStates || _.noop;
            // TODO: unit test
            var result = beforeAllStates.call(that._target || that, initialState) || {};
            if (result.done) {
                result.done(that.setCurrentState.bind(that, initialState));
            } else {
                that.setCurrentState(initialState);
            }

        });

        return this;
    };



    /**
     * Возращает функцию `verifyNextState`
     *
     * @param {Object} nextStates декларация состояний вида 'currentState': 'nextState'
     *
     * @returns {States~verifyNextState}
     */
    States.nextState = function(nextStates) {
        /**
         * функция принимает на вход текущее состояние, а возращает целевое
         *
         * @callback verifyNextState
         *
         * @param {string} currentStateName текущее состояние
         *
         * @throws Кидает ошибку если целевое состояние не может быть вычислено
         *
         * @returns {string} целевое состояние
         */
        return function(currentStateName) {
            var nextState = nextStates[currentStateName];
            if (nextState) {
                return nextState;
            }
            throw new Error('Transition can not be completed - no next state');
        };
    };

    /**
     * Возращает функцию `States~loopback`
     *
     * @returns {States~loopback} currentStateName
     */
    States.loopback = function() {
        /**
         * Функция принимает на вход текущее состояние и его же возвращает
         *
         * @callback loopback
         *
         * @param {string} currentStateName текущее состояние
         *
         * @returns {string}
         */
        return function(currentStateName) {
            return currentStateName;
        };
    };
})();

/* ../../js/components/states.js end */

    /* ../../js/components/security-questions.js begin */
(function() {
    'use strict';

    var NAMESPACE = 'security-questions';

    var States = Daria.States;

    /**
     * Визард для создания 3 контрольных вопросов
     *
     * @constructor
     */
    var Wizard = Daria.SecurityQuestionsWizard = function(params) {
        params = params || {};

        /**
         * Наличие эсперимента
         *
         * @property {?string}
         */
        this.experiment = params.experiment;

        /**
         * Индексы выбранных вопросов для селектов
         * null - еще ничего не выбрано
         *
         * questionSelectIx[0] - для первого селекта
         * questionSelectIx[1] - для второго
         * questionSelectIx[2] - для третьего
         *
         * @property {Array} questionSelectValues
         */
        this.questionSelectValues = [null, null, null];

        /**
         * Нода визарда
         *
         * @property
         */
        this.$node = null;

        /**
         * Неймспейс для хранения настроек
         *
         * @property {string}
         */
        this.namespace = NAMESPACE;
    };
    $.extend(Wizard.prototype, Daria.PubSubMixin);

    /**
     * Получить имя для настройки
     * @static
     *
     * @param {string} [experiment]
     *
     * @returns {string}
     */
    Wizard.getSettingName = function(experiment) {
        var experimentToPostfix = {
            'select-as-link': '1'
        };
        var postfix = experimentToPostfix[experiment] || '';

        return NAMESPACE + postfix;
    };
    /**
     * Сохранение настроек
     *
     * @param {Object} settings
     * @param {string} [experiment]
     *
     * @static
     */
    Wizard.saveSettings = function(settings, experiment) {
        Jane.$H('settings').updateSetting(Wizard.getSettingName(experiment), settings);
    };

    /**
     * Обновление времени показа
     *
     * @param {string} [experiment]
     *
     * @static
     */
    Wizard.updateTimestamp = function(experiment) {
        Wizard.saveSettings({
            timestamp: Daria.now()
        }, experiment);
    };

    /**
     * Показывался ли визард ранее
     *
     * @param {string} [experiment]
     *
     * @returns {boolean}
     */
    Wizard.isShown = function(experiment) {
        return Boolean(Jane.$H('settings').getSetting(Wizard.getSettingName(experiment), 'json').timestamp);
    };

    /**
     * Прошло ли достаточно времени с момента последнего показа
     *
     * @param {number} duration - in ms
     * @param {string} [experiment]
     *
     * @returns {boolean} true, если прошло, false если не прошло или показа не было
     */
    Wizard.isLessThenAfterShow = function(duration, experiment) {
        var timestamp = Jane.$H('settings').getSetting(Wizard.getSettingName(experiment), 'json').timestamp || 0;
        timestamp = Number(timestamp);
        if (timestamp === 0) {
            return false;
        }

        return Daria.now() - timestamp < duration;
    };

    /**
     * Возращает базу для метрики
     *
     * @returns {string}
     */
    Wizard.prototype.getMetrikaBase = function() {
        return (this.experiment === 'select-as-link') ? '3КВО - эксперимент' : '3КВО';
    };

    /**
     * Логирует метрику
     *
     * @param {string|Array} base
     * @param {string|Array} path
     */
    Wizard.prototype.metrika = function(base, path) {
        var fullPath = [].concat(base, path);
        Jane.c(fullPath);

        if (Daria.urlParams.logger === this.namespace) {
            console.info('@METRIKA:', fullPath.join(' => '));
        }
    };

    /**
     * Метрика, которая послужила мотивацией для создания средства восстановления
     * аккаунта
     *
     * @param {string|Array} metrikaPath
     *
     */
    Wizard.prototype.motivationMetrika = function(metrikaPath) {
        this.metrika(this.getMetrikaBase(), ['Мотивация'].concat(metrikaPath));
    };

    /**
     * Инициализация визарда
     *
     * @returns {Wizard}
     */
    Wizard.prototype.init = function() {
        // Декларируем fsm для визарда
        var fsm = this.fsm = new States({
            transitions: {
                // Декларация перехода на следующий шаг
                next: {
                    // Допустимые исходные состояние
                    from: ['first', 'second', 'third'],
                    // Допустимые выходные состояния
                    to: States.nextState({
                        'first': 'second',
                        'second': 'third',
                        'third': 'done'
                    })
                },
                // Декларация перехода на предыдущий шаг
                previous: {
                    // Допустимые исходные состояния
                    from: ['second', 'third'],
                    // допустимые выходные состояния
                    to: States.nextState({
                        'second': 'first',
                        'third': 'second'
                    })
                },
                // Ошибка валидации
                'validate-error': {
                    from: ['first', 'second', 'third'],
                    // возращаемся в то же состояние в котором произошла ошибка
                    to: States.loopback()
                },
                // Ошибка создания 3КВО
                'create-error': {
                    from: ['third'],
                    // возращаемся в то же состояние в котором произошла ошибка
                    to: States.loopback()
                },
                // Закрытие
                close: {
                    from: '*',
                    to: 'close'
                }
            },
            initialState: 'first',
            target: this
        });

        var metrikaBase = this.getMetrikaBase();
        Daria.initializeMetrika(metrikaBase, this, {
            'openModal': [
                '@once',
                'Показ'
            ],
            'onTransitionValidateError': [
                'Ошибки','Ошибка валидации'
            ],
            'onStateSecond': [
                '@once',
                'Первый шаг пройден'
            ],
            'onStateThird': [
                '@once',
                'Второй шаг пройден'
            ],
            'onTransitionCreateError': [
                'Ошибки', 'Ошибка создания 3КВО'
            ],
            'onCreateSecurityQuestions': [
                '@once',
                'Пользователь завел 3КВО'
            ],
            'complete': [
                '@once',
                'Кнопка Готово!'
            ],
            'onClose': [
                '@once',
                'Клик по крестику'
            ],
            'previousQuestion': [
                'Возрат на предыдущий шаг'
            ]
        }, this.metrika.bind(this));

        fsm.run(this.beforeRun);

        return this;
    };

    /**
     * Выполняет приготовления перед работой
     */
    Wizard.prototype.beforeRun = function() {
        // подготавливаем список вопросов
        this.questionList = Jane.$H('security-questions-patterns')
            .getAll()
            .map(function(question, index) {
                return {
                    text: question,
                    value: String(index)
                };
            });

        this.$node = $(this.render({
            experiment: this.experiment
        }));

        this.openModal(this.$node)
            .bindEvents(this.$node);
    };

    /**
     * Привязываем события дома
     *
     * @param {jQuery.Node} $node
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.bindEvents = function($node) {
        var that = this;
        $node.on('click keypress focusin', '.js-security-questions[data-event]', function(event) {
            var $this = $(this);
            var eventType = event.type;

            $this.data('event').split(/\s*,\s*/).forEach(function(eventInfo) {
                eventInfo = eventInfo.split('.');
                var type = eventInfo[0];
                var methodName = eventInfo[1];

                if (type === eventType) {
                    that[methodName](event);
                }
            });
        });

        return this;
    };

    /**
     * Отвязываем события дома
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.unbindEvents = function($node) {
        $node.off();
        nb.destroy($node);

        return this;
    };

    /**
     * @param {Object} context
     *
     * @return {HtmlElement}
     */
    Wizard.prototype.render = function(context) {
        return Jane.tt('mail-common:promo-security-questions', context);
    };

    /**
     * Показать модальное окно
     *
     * @param {Jquery.Node} $modal
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.openModal = function($modal) {
        nb.block($modal.get(0)).open();

        Wizard.updateTimestamp(this.experiment);

        return this;
    };

    /**
     * Закрыть модальное окно
     *
     * @param {Jquery.Node} $modal
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.closeModal = function($modal) {
        nb.block($modal.get(0)).close();
        return this;
    };

    /**
     * Вернуть контейнер с содержимым
     */
    Wizard.prototype.get$Content = function() {
        if (!this.$content) {
            this.$content = this.$node.find('.js-security-questions-content');
        }

        return this.$content;
    };

    /**
     * Переключает шаг
     *
     * @param {number|string} step
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.changeStep = function(step) {
        if (!this.$content) {
            this.$content = this.$node.find('.js-security-questions-content');
        }

        this.$content
            .removeClass()
            .addClass('jane-security-questions-content')
            .addClass('jane-security-questions-content_at-step_' + step);

        return this;
    };

    /**
     * Возращает номер шага по состоянию
     *
     * @param {string} stateName
     *
     * @returns {?number} номер шага
     */
    Wizard.prototype.stateToStep = function(stateName) {
        return {
            'first': 1,
            'second': 2,
            'third': 3
        }[stateName] || null;
    };

    /**
     * Возвращает объект с наноблоками(вопросы и ответы)
     *
     * @returns {Object}
     */
    Wizard.prototype.getEntities = function() {
        if (!this.nbEntities) {
            var $entities = this.$node.find('.js-answer,.js-question');

            this.nbEntities = _.reduce($entities, function(nbEntities, node) {
                var nanoblock = nb.block(node);
                var name = nanoblock.getName();
                nbEntities[name] = nanoblock;

                return nbEntities;
            }, {});
        }

        return this.nbEntities;
    };

    /**
     * Возращает инстанс блока по его имени и шагу/состоянию
     *
     * @param {string} entityName
     * @param {string|number} step
     *
     * @returns {?nb.block}
     */
    Wizard.prototype.getEntity = function(entityName, step) {
        step = _.isNumber(step) ? step : this.stateToStep(step);

        return this.getEntities()[entityName + step] || null;
    };

    /**
     * Возращает сериализованные вопросы и ответы
     *
     * @description
     * TODO: Где-то в наностровах заводил issue про сериализацию,
     * если сделают есть смысл переписать этот участок
     *
     * @returns {Object}
     */
    Wizard.prototype.serializeAll = function() {
        var nbEntities = this.getEntities();
        return _.transform(nbEntities, function(result, nbEntity, key) {
            var value;
            var nbType = nbEntity.getType();
            if (nbType === 'select') {
                value = nbEntity.getState().text;
            } else if (nbType === 'input') {
                value = nbEntity.getValue();
            }
            result[key] = value;
        });
    };

    /**
     * Синхронизирует значение селекта на определенном шаге с questionSelectValues
     *
     * @param {string} stateName
     */
    Wizard.prototype.updateQuestionSelectValues = function(stateName) {
        var nbQuestion = this.getEntity('question', stateName);
        if (nbQuestion) {
            var selectValue = nbQuestion.getState().value;

            var selectIx = this.stateToStep(stateName) - 1;
            this.questionSelectValues[selectIx] = selectValue || null;
        }
    };

    /**
     * Обработчик входа в каждое состояние
     *
     * @param {States~transitionInfo} transitionInfo данные по переходу
     */
    Wizard.prototype.onenterState = function(transitionInfo) {
        var fromState = transitionInfo.from;
        if (fromState) {
            this.updateQuestionSelectValues(fromState);
        }

        var step = this.stateToStep(transitionInfo.to);
        if (step) {
            var nbQuestionsSelect = nb.block(this.$node.find('.js-questions-select-' + step).get(0));

            // Перед переходом на следующий шаг(первый, второй, третий)
            // обновляем список вопросов для селекта этого шага
            var selectIx = step - 1;
            this.updateQuestionsForSelect(selectIx, nbQuestionsSelect);
        }

        // Если перешли в состояние из этого же состояния
        // то не отключаем контролы, что бы не спровоцировать баг
        // в IE @see https://github.com/yandex-ui/nanoislands/issues/370
        if (transitionInfo.from !== transitionInfo.to) {
            this.preventTabFocusOut(step);
        }
    };

    /**
     * Обработчик, который выполняется на любом состоянии
     */
    Wizard.prototype.oneachState = function(transitionInfo) {
        var state = this.fsm.getCurrentStateName();

        // Выполняем только на шагах 1, 2, 3
        if (!this.isAnswerStep(state)) {
            return;
        }

        var TRANSITION_END_EVENT = [
            'webkitTransitionEnd',
            'oTransitionEnd',
            'transitionend',
            'mozTransitionEnd'
        ].join(' ');

        var that = this;
        var step = this.stateToStep(state);

        // Если это не первый показ визарда(т.е. никакой анимации не было)
        // и при этом поддерживается csstransitions
        // то ставим фокус по окончании анимации
        if (transitionInfo.from && Modernizr.csstransitions) {
            var $content = this.get$Content();
            $content
                .off(TRANSITION_END_EVENT)
                .one(TRANSITION_END_EVENT, that.focusOnAnswer.bind(that, step));
        // Иначе просто ставим фокус
        } else {
            this.focusOnAnswer(step);
        }
    };


    /**
     * Устанавливает фокус на нужном шаге
     *
     * @param {string|number} step номер шага
     *
     * @returns {Wizard}
     */
    Wizard.prototype.focusOnAnswer = function(step) {
        var nbAnswer = this.getEntity('answer', step);
        if (nbAnswer) {
            nbAnswer.focus();
        }

        return this;
    };

    /**
     * Предотвращаем навигацию по контрлам соседних шагов
     *
     * @param {number} step
     *
     * @returns {Wizard}
     */
    Wizard.prototype.preventTabFocusOut = function(step) {
        step = step || 'done';
        // Отключаем все контролы везде
        nb.$bulk(this.$node, 'disable');
        // и включаем на текущем шаге
        nb.$bulk('.js-security-questions-step-' + step, this.$node, 'enable');

        return this;
    };

    /**
     * Обновить список вопросов для селекта
     *
     * @param {number} selectIx индекс(нумерация с нуля) текущего селекта
     *
     * @returns {Wizard}
     */
    Wizard.prototype.updateQuestionsForSelect = function(selectIx, nbQuestionsSelect) {
        var selectValue = nbQuestionsSelect.getState().value;
        if (selectValue) {
            this.questionSelectValues[selectIx] = selectValue;
        }

        // Обновляем селект не занятыми вопросами
        var questionSource = this.getQuestionsForSelect(selectIx, this.questionList, this.questionSelectValues);
        nbQuestionsSelect.setSource(questionSource);

        // Если значение у селекта было выставлено до обновления вопросов, то
        // восстанавливаем его
        if (selectValue) {
            var state = _.find(this.questionList, {value: selectValue});
            nbQuestionsSelect.setState(state);
        }

        return this;
    };

    /**
     * Возращает список вопросов для селекта, так чтобы вопросы не пересекались
     * @static
     *
     * @param {number} selectIx индекс(нумерация с нуля) текущего селекта
     * @param {Array} questionList список всех вопросов
     * @param {Array} questionSelectValues выбранные значения всех селектов
     *
     * @returns {Array} список вопросов
     */
    Wizard.prototype.getQuestionsForSelect = function(selectIx, questionList, questionSelectValues) {
        var neighbourSelectValues = questionSelectValues.slice();
        // Обнуляем выбранное значение для текущего селекта
        neighbourSelectValues[selectIx] = null;

        return _.reject(questionList, function(question) {
            return _.contains(neighbourSelectValues, question.value);
        });
    };

    /**
     * Валидируем ответ
     *
     * @param {string} answer содержимое-ответ
     *
     * @returns {boolean}
     */
    Wizard.prototype.validateAnswer = function(answer) {
        return Boolean(answer);
    };

    /**
     * Валидация перехода на следущий шаг
     *
     * @param {string} state состояние
     *
     * @returns {string}
     */
    Wizard.prototype.validateNext = function(state) {
        var nbAnswer = this.getEntity('answer', state);

        return this.validateAnswer(nbAnswer.getValue());
    };

    /**
     * Обрабатывает нажатие по enter в инпуте
     *
     * @param {$.Event} event
     */
    Wizard.prototype.onkeypressAnswer = function(event) {
        var keycode = (event.keyCode ? event.keyCode : event.which);
        if (keycode == Jane.Common.keyCode.ENTER) {
            this.nextQuestion();
            event.preventDefault();
        } else {
            this.hideErrors();
        }
    };

    /**
     * Обрабатывает нажатие фокус в инпуте с ответом
     */
    Wizard.prototype.onfocusAnswer = function() {
        this.hideErrors();
    };

    /**
     * Отвечает на вопрос является ли данное состояние шагом ввода ответа
     *
     * @param {string} state
     *
     * @returns {boolean}
     */
    Wizard.prototype.isAnswerStep = function(state) {
        return _.contains(['first', 'second', 'third'], state);
    };

    /**
     * Перейти на следующий шаг визарда
     */
    Wizard.prototype.nextQuestion = function() {
        var state = this.fsm.getCurrentStateName();
        // Валидируем поле ответа
        if (this.isAnswerStep(state) && !this.validateNext(state)) {
            this.fsm.transition('validate-error');
            return;
        }

        var nextState = this.fsm.getNextStateByTransition('next');

        // Если следующий шаг завершающий и валидация пройдена
        if (nextState === 'done') {
            // Сохраняем 3 контрольных вопроса и ответа
            Jane.$H('security-questions').create(this.serializeAll())
                // Успех - переходим на завершающий шаг
                .done(this.onCreateSecurityQuestions.bind(this))
                // Неудача - делаем loopback на текущее состояние
                // с помощью перехода create-error
                .fail(this.fsm.transition.bind(this.fsm, 'create-error'));

        } else {
            // Если шаг не завершающий и валидация пройдена - идем на следущий шаг
            this.fsm.transition('next');
        }
    };

    /**
     * Контрольные вопросы созданы успешно
     */
    Wizard.prototype.onCreateSecurityQuestions = function() {
        // Переходим в завершающий шаг
        this.fsm.transition('next');
    };

    /**
     * Общий обработчик ошибок
     *
     * @param {string} type тип ошибки
     *
     */
    Wizard.prototype.onError = function(type) {
        this.showError(type);
    };

    /**
     * Событие срабатывает при валидационной ошибке
     */
    Wizard.prototype.onTransitionValidateError = function() {
        this.onError('validate');
    };

    /**
     * Событие срабатывает при ошибке создания хэндлера
     */
    Wizard.prototype.onTransitionCreateError = function() {
        this.onError('create');
    };

    /**
     * Возвращает ноду с ошибкой, указанного-типа
     *
     * @param {string} type тип ошибки
     *
     * @returns {jQuery}
     */
    Wizard.prototype.get$Error = function(type) {
        var errorNodeName = '$error' +  type[0].toUpperCase() + type.slice(1);
        if (!this[errorNodeName]) {
            this[errorNodeName] = this.$node.find('.js-' + type + '-error');
        }
        return this[errorNodeName];
    };

    /**
     * Показать валидационную ошибку
     *
     * @param {string} type тип ошибки
     */
    Wizard.prototype.showError = function(type) {
        this.get$Error(type).removeClass('g-hidden');
    };

    /**
     * Спрятать ошибки
     */
    Wizard.prototype.hideErrors = function() {
        this.get$Error('validate').addClass('g-hidden');
        this.get$Error('create').addClass('g-hidden');
    };

    /**
     * Перейти на предыдущий шаг визарда
     */
    Wizard.prototype.previousQuestion = function() {
        // При переходе назад скрываем сообщение об ошибках
        this.hideErrors();

        this.fsm.transition('previous');
    };

    /**
     * Обработчик состояния первого шага
     */
    Wizard.prototype.onStateFirst = function() {
        this.changeStep(1);
    };

    /**
     * Обработчик состояния второго шага
     */
    Wizard.prototype.onStateSecond = function() {
        this.changeStep(2);
    };

    /**
     * Обработчик состояния третьего шага
     */
    Wizard.prototype.onStateThird = function() {
        this.changeStep(3);
    };

    /**
     * Обработчик состояния завершающего шага
     */
    Wizard.prototype.onStateDone = function() {
        this.hideHeader().changeStep('4');
    };

    /**
     * Скрыть заголовок
     *
     * @returns {Wizard} this
     */
    Wizard.prototype.hideHeader = function() {
        this.$node.find('.js-security-questions-header')
            .css('visibility', 'hidden');

        return this;
    };


    /**
     * Завершить работу визарда(успех)
     */
    Wizard.prototype.complete = function() {
        this.fsm.transition('close');
    };

    /**
     * Обработчик клика по крестику модального окна
     */
    Wizard.prototype.onClose = function() {
        this.fsm.transition('close');
    };

    /**
     * Состояние закрытия визарда
     *
     * @description
     * Очищаем обработчики событий, тригерим событие о закрытии
     */
    Wizard.prototype.onStateClose = function(transitionInfo) {
        // Закрытие после успешного создания 3КВО
        if (transitionInfo.from === 'done') {
            this.trigger('create');
        // в остальных случаях
        } else {
            this.trigger('create');
        }
        this.unbindEvents(this.$node).closeModal(this.$node);
    };
})();

/* ../../js/components/security-questions.js end */

    /* ../../js/daria.promo.js begin */
// Вручение Гб на ДР почты
Jane.Promo.add({
    name: 'gb-present',
    priority: Number.NEGATIVE_INFINITY,
    params: {
        ignoreShowPromoSetting: true,
        ignorePromoDelay: true
    },
    check: function() {
        var dateHelper = /* ../../jane/jsx/datehelper.jsx begin */
/**
 * Функции для разной работы с датами
 **/
(function() {
    var dateHelper = {};
    /**
     * Функция для проверки попадает ли дата в промежуток дней относительно другой даты
     * @param {Object} fromDate - дата которую нужно проверить
     * @param {Object} toDate - дата в период которой должна попасть fromDate
     * @param {Object} daysCount отклонение от toDate
     * @param {Object} daysCount.from отклонение в прошлое
     * @param {Object} daysCount.to отклонение в будущее
     **/
    dateHelper.isAnniversary = function(fromDate, toDate, daysCount) {
        var toDateYear = toDate.getFullYear();
        var fullYearsFromRegistration = toDateYear - fromDate.getFullYear();
        var newFromDate;
        // проверяем не попадают ли даты на конец и начало года
        if (fromDate.getMonth() === 11 && fromDate.getDate() >= 26 && toDate.getMonth() === 0 && toDate.getDate() <= daysCount.to) {
            newFromDate = fromDate.setFullYear(toDateYear - 1);
            fullYearsFromRegistration -= 1;
        } else if (fromDate.getMonth() === 0 && fromDate.getDate() <= 3 && toDate.getMonth() === 11 && toDate.getDate() >= 29) {
            newFromDate = fromDate.setFullYear(toDateYear + 1);
            fullYearsFromRegistration += 1;
        } else {
            newFromDate = fromDate.setFullYear(toDateYear);
        }
        var differenceDate = Math.round((toDate.getTime() - newFromDate) / 86400000);
        if (differenceDate >= -daysCount.from && differenceDate <= daysCount.to && fullYearsFromRegistration >= 1) {
            return fullYearsFromRegistration;
        } else {
            return false;
        }
    };

    return dateHelper;
})();

/* ../../jane/jsx/datehelper.jsx end */
;

        var daysCount = {
            from: 3,
            to: 6
        };
        // проверяем попали ли мы в период дня рождения
        var isAnniversaryReturn = dateHelper.isAnniversary(new Date(Jane.$H('account-information').getData().reg_date), new Date(Daria.now()), daysCount);
        // выносим найденное количество лет в this для callback
        this.params = {
            yearsCount: isAnniversaryReturn
        };
        var dontWant = parseFloat(Jane.$H('settings').getSetting('gb-present-not-want'));
        var lastYearDate = parseFloat(Jane.$H('settings').getSetting('gb-present-second'));

        return !Jane.Config.PDD.domain &&
            Daria.Page.type === 'messages' &&
            !!this.params.yearsCount &&
            !!(dontWant ? dateHelper.isAnniversary(new Date(dontWant), new Date(Daria.now()), daysCount) : true) &&
            !!(lastYearDate ? dateHelper.isAnniversary(new Date(lastYearDate), new Date(Daria.now()), daysCount) : true);
    },
    callback: function() {
        var that = this;
        // для вызова попапа из консоли
        if (!that.params) {
            that.params = {
                yearsCount: 0
            };
        }

        var d;
        // объект с размером в МБ контента (вынесен больше для читаемости, чтобы было понятно откуда цифры взялись, и чтобы менялись в одном месте)
        var contentParams = {
            photo: 0.2,
            texts: 0.4,
            sing: 4.5
        };
        var body;
        var hasDisk;
        var hSettings = Jane.$H('settings');

        // дата конца периода, в который нужно зайти в следующем году
        var regDate = new Date(Jane.$H('account-information').getData().reg_date);

        var goHereFrom = new Date(new Date().getFullYear() + 1, regDate.getMonth(), regDate.getDate());
        goHereFrom = Jane.Date.format('%Date_dmY__dot', new Date(goHereFrom.getTime() - 3 * 86400000));

        var goHereTo = new Date(new Date().getFullYear() + 1, regDate.getMonth(), regDate.getDate());
        goHereTo = Jane.Date.format('%Date_dmY__dot', new Date(goHereTo.getTime() + 6 * 86400000));

        // проверяем есть ли у пользователя диск
        Jane.Handler.doAll(
            ['disk-gb-present'],
            {},
            function(data) {
                if (data && data.handlers[0].status === 'ok') {
                    if (!data.handlers[0].data.error && data.handlers[0].data.need_init) {
                        // 1 - пользователя нет, 0 - пользователь есть (так сказал диск)
                        // здесь я делаю ! чтобы удобнее было проверять, иначе потом будет сложно в логике разобраться
                        hasDisk = !parseFloat(data.handlers[0].data.need_init);
                        renderPromo();
                        // если пользователь есть, то сразу выдаем GB
                        if (hasDisk) {
                            Jane.Handler.doAll(
                                ['disk-gb-present-give'],
                                {},
                                function(dataGive) {
                                    if (dataGive && dataGive.handlers[0].status === 'ok') {
                                        hSettings.setSettings({
                                            'gb-present-second': Daria.now(),
                                            'gb-present-close': 0
                                        });
                                    }
                                }
                            );
                        }
                    }
                }
            }
        );

        function closeDialog() {
            var countTimes = parseFloat(hSettings.getSetting('gb-present-close') || 0);
            if (countTimes > 1) {
                hSettings.setSettings({
                    'gb-present-second': Daria.now(),
                    'gb-present-close': 0
                });
            } else {
                hSettings.setSettings({'gb-present-close': countTimes + 1});
            }
        }

        function renderPromo() {
            // проверяем выдавались ли ГБ в прошлом году
            var iSeeYouAgane = Jane.$H('settings').isSet('gb-present-second');

            // показываем промо диалог
            var $container = $('<div />');
            // функция для создания диалога с поделяшками для тех у кого есть диск
            var getParamsForDialog = function(body) {
                return {
                    el: $container,
                    title: i18n('%Promo_gb_present_socials_text', that.params.yearsCount),
                    description: i18n('%Promo_gb_present_socials_description'),
                    link: Jane.Config['mail-url'] + '/share/birthday_gb?mdb=' + that.params.yearsCount,
                    icon: Jane.getEntity('b-box__socials-gb-present-promo.png'),
                    size: 'big',
                    serviceSpecific: {
                        twitter: { title: i18n('%Promo_gb_present_socials_text_vk_t', that.params.yearsCount) },
                        vkontakte: { title: i18n('%Promo_gb_present_socials_text_vk_t', that.params.yearsCount) }
                    },
                    onclick: function() {
                        if (iSeeYouAgane) {
                            Jane.c(['ГБ за ДР', 'Клик на поделяшки', 'Повторно', that.params.yearsCount + ' год']);
                        } else {
                            Jane.c(['ГБ за ДР', 'Клик на поделяшки', 'Первый раз', that.params.yearsCount + ' год']);
                        }
                    },
                    onready: function() {
                        // создаем сам попап
                        d = Daria.Dialog.open({
                            width: 630,
                            body: body,
                            additionalClass: 'b-present-bubble-disk-user',
                            tailPos: { top: 0, left: 0 },
                            onopen: function() {
                                $(this.body).find('.b-disk-presentation-socials').append($container);

                                if (iSeeYouAgane) {
                                    Jane.c(['ГБ за ДР', 'Показ', 'Повторно', that.params.yearsCount + ' год']);
                                } else {
                                    Jane.c(['ГБ за ДР', 'Показ', 'Есть диск', that.params.yearsCount + ' год']);
                                }
                                Jane.ErrorLog.send({
                                    type: 'GB_on_Birthday',
                                    'event': 'with_disk_show',
                                    year: 'year_' + that.params.yearsCount,
                                    uid: Daria.uid
                                });
                            },
                            oncancel: function() {
                                closeDialog();
                                // чтобы выпадающие поделяшки закрывались при закрытии окна.
                                // Метода для этого нет и находятся они не в контейнере, поэтому просто ищем открытые и прячем
                                $('.b-share-popup-wrap_state_visibale').addClass('b-share-popup-wrap_state_hidden');
                                Jane.c(['ГБ за ДР', 'Клик на крестик', that.params.yearsCount + ' год']);
                            }
                        });
                    }
                };
            };

            // выбираем какой тип окна нужно вывести и создаем нужное body для окна
            // если есть диск и зашел первый раз
            if (hasDisk && !iSeeYouAgane) {
                body = Jane.tt("mail-common:gb-present-bubble-disk-user", {
                    yearsCount: that.params.yearsCount,
                    yearsCountImage: Jane.getEntity('b-box__box-gb-present-promo.png'),
                    from: goHereFrom,
                    to: goHereTo
                });
                Jane.share(getParamsForDialog(body));
            // если есть диск и Гб уже выдавались в прошлом году
            } else if (hasDisk && iSeeYouAgane) {
                body = Jane.tt("mail-common:gb-present-bubble-disk-user-second", {
                    yearsCount: that.params.yearsCount,
                    yearsCountImage: Jane.getEntity('b-box__box-gb-present-promo.png'),
                    from: goHereFrom,
                    to: goHereTo
                });
                Jane.share(getParamsForDialog(body));
            // если нет диска
            } else if (!hasDisk) {
                if (hSettings.getSetting('gb-present-not-want')) {
                    hSettings.setSettingOff('gb-present-not-want');
                }
                body = Jane.tt("mail-common:gb-present-bubble", {
                    yearsCount: that.params.yearsCount,
                    yearsCountImage: Jane.getEntity('b-box__box-gb-present-promo.png'),
                    photo: Math.round(that.params.yearsCount * 1024 / contentParams.photo),
                    texts: Math.round(that.params.yearsCount * 1024 / contentParams.texts),
                    songs: Math.round(that.params.yearsCount * 1024 / contentParams.sing),
                    from: goHereFrom,
                    to: goHereTo,
                    forWmiParams: 'gb=' + that.params.yearsCount
                });
                // здесь не нужны поделяшки, поэтому просто создаем диалог
                d = Daria.Dialog.open({
                    width: 630,
                    body: body,
                    additionalClass: 'b-present-bubble-disk-user',
                    tailPos: { top: 0, left: 0 },
                    onopen: function() {
                        Jane.c(['ГБ за ДР', 'Показ', 'Нет Диска', that.params.yearsCount + ' год']);
                    },
                    oncancel: function() {
                        hSettings.setSettings({'gb-present-not-want': Daria.now()});
                        Jane.c(['ГБ за ДР', 'Клик на крестик', that.params.yearsCount + ' год']);
                        Jane.ErrorLog.send({
                            type: 'GB_on_Birthday',
                            'event': 'without_disk_close',
                            year: 'year_' + that.params.yearsCount,
                            uid: Daria.uid
                        });
                    }
                });
            }
        }
    }
});

// Промо сборщиков
Jane.Promo.add({
    name: 'collectors-promo',
    params: {
        ignorePromoDelay: true,
        ignoreStartPromoDelay: true,
        ignoreInboxMessages: true
    },
    check: function() {
        var d = $.Deferred();

        Jane.Handler.getAll(['collectors'], {}, function() {
            var hSettings = Jane.$H('settings');

            if (!Jane.$H('collectors').getCount() &&
                !hSettings.isSet('no_collectors_bubble') &&
                !hSettings.isSet('no_collectors_promo')
            ) {
                d.resolve();
            } else {
                d.reject();
            }
        });

        return d;
    },
    callback: function() {
        var bCollectors = Jane.$B('collectors');
        if (bCollectors) {
            bCollectors.showEditor();
        }
    },
    priority: 30
});

// [DARIA-26718] Промо сборщиков 2
// только для 1%,
// через 2 недели после регистрации,
// если нет сборщиков
Jane.Promo.add({
    name: 'collectors-promo-all',
    params: {
        ignoreStartPromoDelay: true,
        ignoreInboxMessages: true
    },
    check: function() {
        var d = $.Deferred();

        Jane.Handler.getAll(['collectors'], {}, function() {
            var hSettings = Jane.$H('settings');
            var collectorsPromoShowTime = hSettings.getSetting('collectors_promo_s') || 0;

            if (!Jane.$H('collectors').getCount() &&
                !hSettings.isSet('no_collect_bubbl_all') &&
                !hSettings.isSet('no_collect_promo_all') &&
                // после показа collectors-promo прошло больше месяца
                Daria.now() - collectorsPromoShowTime > Jane.Date.MONTH
            ) {
                d.resolve();
            } else {
                d.reject();
            }
        });

        return d;
    },
    callback: function() {
        var bCollectors = Jane.$B('collectors');
        if (bCollectors) {
            bCollectors.showEditorFromAll();
        }
    },
    priority: 30
});

Jane.Promo.add({
    name: 'alias-promo',
    promoBar: null,
    priority: 50,

    // проверка - можно ли форсированно показывать промо
    mandatoryCheck: function() {
        return !Daria.IS_CORP &&
            !Jane.Config.PDD.domain &&
            !Daria.IS_CORP &&
            Daria.Page.type === 'messages' &&
            // Форсированно плашка еще не показывалась
            !Daria.PromoBar.getSetting('preventForceShow') &&
            Jane.Page.params._service === "mail";
    },

    // Убрать плашку ЦА из инбокса
    // https://jira.yandex-team.ru/browse/DARIA-34927
    check: function() {
        return false;
    },

    callback: function() {
        this.promoBar = new Daria.PromoBar(true);
        this.bindEvents();
    },

    onPageGo: function() {
        if (Daria.Page.type !== 'messages') {
            return this.promoBar.hide();
        }
        return this.promoBar.show();
    },

    bindEvents: function() {
        this.onPageGo = this.onPageGo.bind(this);
        Jane.events.bind('pageload', this.onPageGo);
        this.promoBar.once('alias-promo.finish', this.unbindEvents.bind(this));
        this.promoBar.once('alias-promo.closed-by-user', this.unbindEvents.bind(this));
    },

    unbindEvents: function() {
        Jane.events.unbind('pageload', this.onPageGo);
    }
});

// Показ валидации телефона
Jane.Promo.add(
    {
        name: 'phone-validation',
        priority: 150,
        params: {
            autoclosing: Jane.Date.DAY
        },

        staticCheck: function() {
            var closeStatus = Daria.PromoBar.getSetting('closeStatus');
            var closeDate = Daria.PromoBar.getLastUsageTime();

            var after3MonthsClosePromo = closeStatus === 'closed-by-user' && Daria.now() - closeDate > Daria.timify({days: 90});

            return Jane.Page.params._service === "mail" &&
                // На ПДД не показываем
                !Jane.Config.PDD.domain &&
                (!closeStatus || after3MonthsClosePromo) &&
                Daria.getAccountAgeInDays() > 30;
        },

        check: function() {
            if (!this.staticCheck()) {
                return false;
            }

            return Jane.$H('userinfo').hasHint().then(function(hasHint) {
                if (hasHint) {
                    return Daria.phoneValidation.check();
                }
                // Если нет контрольного вопроса, то основная плашка не показывается ...
                // @see promo phone-validation-no-hint
                return $.Deferred().reject().promise();
            });
        },
        callback: function() {
            Daria.phoneValidation.build();
        },
        closePromo: function() {
            Daria.phoneValidation.savePromoData({
                'phone-confirm': false,
                'phone-confirm-date': Daria.now()
            });
        }
    }
);

// Промо-диалог выбора категорий скидок для фильтрации
Jane.Promo.add({
    name: 'groupon',
    priority: Number.NEGATIVE_INFINITY,
    check: function() {

        var hSettings = Jane.$H('settings');
        var now = Daria.now();
        var lastShowDate = hSettings.getSetting('groupon_bubble_last') || now - Jane.Date.MONTH * 3 - 1;

        // показываем
        //      не корпу
        //      не конкурентам
        //      если 2pane
        //      если не настроен скидочный фильтр
        //      если баббл показывался дольше, чем 3 месяца назад
        //      находимся в #inbox
        if (!Daria.IS_CORP && !Daria.IS_KCUF && Daria.layout === '2pane' &&
            !hSettings.getSetting('groupon_filter') &&
            now - lastShowDate >= Jane.Date.MONTH * 3 &&
            Jane.Page.hash.indexOf('#inbox') > -1 &&
            // раскатываем на 5%
            Daria.uid % 20 == 19) {

            // проверяем типы писем
            // если это скидочные письма, то показываем промку
            var messages = Jane.$H('messages').getCacheByPageParams().message;
            for (var i = 0; i < messages.length; i++) {
                var current = messages[i];

                if (Jane.$H('message').isCouponService(current)) {
                    return true;
                }
            }

            // иначе проверяем метки входящих писем
            var d = $.Deferred();
            Jane.Handler.getAll(['labels'], null, function() {
                var hLabels = Jane.$H('labels');

                // если найдем хотя бы одну из этих метод на каком-нибудь письме в инбоксе — сразу показываем промку
                var successLids = $.map(['vtnrf0grouponsite', 'grouponsite', 'vtnrf0bigbuzzyru',
                        'vtnrf0grouponsite', 'vtnrf0gurboyru', 'vtnrf0myfantru'], function(e) {
                    var l = hLabels.getLIDByName(e);
                    if (l) {
                        return l;
                    }
                });

                // нам нужны только численные метки
                var numericLabelRegex = /^\d*$/;

                // объединяем все метки со всех писем в инбоксе в массив
                var messagesLids = [];
                $.each(messages, function(i, m) {
                    Array.prototype.push.apply(messagesLids, $.map(m.lid, function(l) {
                        if (numericLabelRegex.test(l)) {
                            return l;
                        }
                    }));
                });

                messagesLids = _.uniq(messagesLids);

                for (i = 0; i < successLids.length; i++) {
                    if ($.inArray(successLids[i], messagesLids) > -1) {
                        d.resolve();
                        return;
                    }
                }

                d.reject();

            });

            return d;
        }

        return false;

    },
    callback: function() {
        Jane.$H('settings').setSettings({'groupon_bubble_last': Daria.now()});
        Jane.Actions.run('groupon.showPromo');
    }
});

// Показ валидации телефона, в случае отсутствия контрольного вопроса
Jane.Promo.add(
    {
        name: 'phone-validation-no-hint',
        priority: 140,
        params: {
            autoclosing: Jane.Date.DAY
        },

        /**
         * Выдает true, если прошло времение больше чем delay
         * c момента показа последней плашки(альясы или основная плашка валидации)
         *
         * @param {Number} delay
         *
         * @returns {Number}
         */
        afterLastUsageValidationPromos: function(delay) {
            var promobarCloseDate = Daria.PromoBar.getLastUsageTime();
            var phoneValidationCloseDate = Daria.phoneValidation.getLastUsageTime();

            var latestCloseDate = Math.max(promobarCloseDate, phoneValidationCloseDate);

            // Если ни одна из плашек не показывалась
            if (!latestCloseDate) {
                return true;
            }

            return (Daria.now() - latestCloseDate) > delay;
        },

        staticCheck: function() {

            var afterMonthsCloseValidaionPromos = this.afterLastUsageValidationPromos(Daria.timify({months: 1}));

            return Jane.Page.params._service === "mail" &&
                !Jane.Config.PDD.domain &&

                afterMonthsCloseValidaionPromos &&
                Daria.getAccountAgeInDays() > 30;
        },

        check: function() {
            if (!this.staticCheck()) {
                return false;
            }

            return Jane.$H('userinfo').hasHint().then(function(hasHint) {
                if (!hasHint) {
                    return Daria.phoneValidation.check(null, 'no-hint');
                }

                // но при этом показывается плашка валидации про контрольный вопрос.
                // @see promo phone-validation
                return $.Deferred().reject().promise();
            });
        },

        callback: function() {
            Daria.phoneValidation.build(null, 'no-hint');
        },

        closePromo: function() {
            Daria.phoneValidation.savePromoData({
                'phone-confirm': false,
                'phone-confirm-date': Daria.now()
            }, 'no-hint');
        }
    }
);

/**
 * Показ валидации телефона, в случае отсутствия контрольного вопроса
 *
 * @see https://jira.yandex-team.ru/browse/DARIA-36328
 */
Jane.Promo.add({
    name: 'security-questions',
    priority: Number.NEGATIVE_INFINITY,

    /**
     * Инстанс визарда 3 контрольных вопросов
     *
     * @property {?Daria.SecurityQuestionsWizard}
     */
    wizard: null,

    /**
     * Эксперимент для плашки
     *
     * @property {?string}
     */
    experiment: null,

    staticCheck: function() {
        // Если не попали в определенный процент, то выходим
        this.percentFraction = this.getUidPercentFraction('00', Daria.uid);
        if (!this.percentFraction) {
            return false;
        }

        // Определяем эксперимент
        this.experiment = this.determineExperiment(this.percentFraction);

        var conditions = [
            // Показываем в ПДД: нет
            !Jane.Config.PDD.domain,
            // Показывалась ли промка раннее
            !Daria.SecurityQuestionsWizard.isShown(this.experiment)
        ];

        return _.all(conditions);
    },

    check: function() {
        if (!this.staticCheck()) {
            return false;
        }

        // Найти пользователей, которым показывали плашку валидации телефона
        // Найти среди них тех, у кого нет привязанного телефона и которые
        // закрыли плашку валидации телефона по крестику.
        if (Daria.phoneValidation.isClosedByUser()) {
            return Daria.Validator.getUserPhones(true).then(function(phones) {
                var secure = phones.getSecure();
                if (!secure || !secure.isValid()) {
                    return true;
                }

                return $.Deferred().reject().promise();
            });
        }

        return false;
    },

    /**
     * Определяет эксперимент
     *
     * @description
     * Если последняя цифра юида лежит в диапазоне от 5 до 9,
     * включаем эскперимент с отображением селекта как ссылки
     *
     * @param {string|number} percentFraction - одна цифра, являющаяся десятой долей процента
     *
     * @returns {?string}
     */
    determineExperiment: function(percentFraction) {
        if (!percentFraction) {
            throw new Error('Parameter percentFraction is compulsory');
        }

        if (Number(percentFraction) > 4) {
            return 'select-as-link';
        }

        return null;
    },

    /**
     * Попадание в процентную группу, c извлечением процентной доли для последующего анализа
     *
     * @param {string} uidSuffix
     * @param {string} uid
     *
     * @returns {?string} строка означает совпадение с суффиксом, и являет собой процентную долю
     */
    getUidPercentFraction: function(uidSuffix, uid) {
        return _.last([].concat(new RegExp('^\\d+' + uidSuffix + '(\\d)$').exec(uid))) || null;
    },

    /**
     * Показ плашки к экспериментом либо без
     *
     * @param {string} experiment
     */
    callback: function(experiment) {
        this.wizard = new Daria.SecurityQuestionsWizard({
            experiment: experiment || this.experiment
        }).init();
    }
});

/**
 * Предложение выставить цифровой алиас дефолтным адресом
 * @see https://jira.yandex-team.ru/browse/DARIA-37691
 */
(function() {
    var name = 'alias-as-default';
    var jqEventNS = '.' + name;

    Jane.Promo.add({
        name: name,
        params: {
            ignoreStartPromoDelay: true
        },
        priority: 15,
        check: function() {
            var defaultEmailLogin = this.getEmailLogin(this.getDefaultEmail());
            var digitalLogin = this.getDigitalLogin();

            return Daria.layout === '2pane' &&
                _.isString(digitalLogin) &&
                _.isString(defaultEmailLogin) &&
                !this.isShown() &&
                !this.isDigitalAliasDefault(digitalLogin, defaultEmailLogin) &&
                this.isMustShowSettingSet();
        },
        callback: function() {
            this.init();
        },

        init: function() {
            var that = this;
            var digitalLogin = this.getDigitalLogin();
            // Проверка на случай ручного вызова промки
            if (!_.isString(digitalLogin)) {
                console.warn('Показ невозможен: нет цифрового алиаса.');
                return;
            }

            var defaultEmailDomain = this.getEmailDomain(this.getDefaultEmail());
            this.digitalAlias = digitalLogin + '@' + defaultEmailDomain;
            var context = {
                digitalAlias: this.digitalAlias
            };

            Daria.initializeMetrika(['Цифровой логин', 'Экран в инбоксе'], this, {
                'showPopup': [
                    'Показ'
                ],
                'onAgree': [
                    'Клик по кнопке «хочу»'
                ],
                'onReject': [
                    'Клик по кнопке «не хочу»'
                ],
                'onClose': [
                    '@once',
                    'Клик по крестику'
                ]
            });

            this.$node = $(this.render(context)).appendTo('body');
            this.nbPopup = nb.$block(this.$node);
            this.showPopup();
            this.saveShownSetting();
            Daria.bindDataAttrEvents(this.$node, this, '.js-promo-alias-as-default-action', jqEventNS);
            // TODO: удалить после https://github.com/yandex-ui/nanoislands/issues/379
            $(document).on('keydown' + jqEventNS, function(e) {
                if (e.keyCode == Jane.Common.keyCode.ESC) {
                    that.onEscape();
                }
            });
        },

        showPopup: function() {
            this.nbPopup.open();
        },

        /**
         * Рендерит шаблон
         * @param {Object} context
         * @returns {Node}
         */
        render: function(context) {
            return Jane.tt('mail-common:js-promo-alias-as-default', context);
        },

        /**
         * Клик по кнопке «да, хочу»
         */
        onAgree: function() {
            this.saveDigitalLoginAsDefault();
            Jane.Actions.run('header.update-default-email', {email: this.digitalAlias});
            this.destroy();
        },

        /**
         * Клик по кнопке закрытия попапа
         */
        onClose: function() {
            this.destroy();
        },

        /**
         * Закрытие попапа экспейпом
         */
        onEscape: function() {
            this.destroy();
        },

        /**
         * Клик по кнопке «нет»
         */
        onReject: function() {
            this.destroy();
        },

        destroy: function() {
            this.nbPopup.close();
            this.unbindEvents();
            nb.destroy(this.$node.get(0));
            this.$node.remove();
            delete this.digitalAlias;
            delete this.nbPopup;
            delete this.$node;
        },

        unbindEvents: function() {
            this.$node.off(jqEventNS);
            $(document).off(jqEventNS);
        },

        /**
         * Сохраняет цифровой алиас в качестве адреса по-умолчанию
         */
        saveDigitalLoginAsDefault: function() {
            Jane.$H('settings').updateSetting('default_email', this.digitalAlias);
        },

        /**
         * Сохраняет настройку о показе промки.
         *
         * Сохраняем время последнего показа, т.к. это может пригодиться в будущем
         */
        saveShownSetting: function() {
            Jane.$H('settings').updateSetting(name, {
                lastTimeShown: Daria.now()
            });
        },

        /**
         * Возвращает цифровой логин
         * @returns {String|undefined}
         */
        getDigitalLogin: function() {
            return jpath(Jane.$H('account-information').getDigitalAlias(), '.login')[0];
        },

        /**
         * Возвращает адрес по-умолчанию
         * @returns {String}
         */
        getDefaultEmail: function() {
            return Jane.$H('settings').getSetting('default_email') || '';
        },

        /**
         * Возвращает логин емэйла
         * @param {String} email
         * @returns {String}
         */
        getEmailLogin: function(email) {
            return email.split('@')[0];
        },

        /**
         * Возвращает домен емэйла
         * @param {String} email
         * @returns {String}
         */
        getEmailDomain: function(email) {
            return email.split('@')[1];
        },

        /**
         * Возвращает является ли цифровой логин дефолтным
         *
         * @param {String} digitalLogin
         * @param {String} defaultEmailLogin
         *
         * @returns {Boolean}
         */
        isDigitalAliasDefault: function(digitalLogin, defaultEmailLogin) {
            return digitalLogin === defaultEmailLogin;
        },

        /**
         * Возвращает проставлена ли настройка, показывающая нужно ли показывать это промо.
         * Была проставлена определенным юидам (см. тикет)
         *
         * @returns {Boolean}
         */
        isMustShowSettingSet: function() {
            return Jane.$H('settings').isSet('digital_login');
        },

        /**
         * Возвращает была ли уже показана промка
         *
         * @returns {Boolean}
         */
        isShown: function() {
            return Boolean(Jane.$H('settings').getSetting(name, 'json').lastTimeShown);
        }
    });
})();

/* ../../js/daria.promo.js end */

    /* ../../js/daria.action-log.js begin */
/**
 * Логирование действий пользователя
 */
(function(Jane, Daria) {
    /*global Daria:false*/
    /*global Jane:false*/

    /**
     * mark - пометить прочитанным
     * unmark - пометить не прочитанным
     * archive - переместить в архив
     * delete - удалить
     * tospam - пометить как спам
     * notspam - снять метку спам
     * infolder - переложить в папку
     * unsubscribe - отписаться
     * move - переместить
     * label - поставить метку
     * unlabel - снять метку
     * sendon - переадресовать
     * reply-tmpl - автоответ
     * reply-money - ответ деньгами
     * reply - ответить
     * forward - переслать
     * reply-all - ответить всем
     * quick-reply.reply
     * quick-reply.reply-all
     * quick-reply.forward
     */
    function actionLog(eventName, data) {
        var pageParams = $.extend({}, Jane.Page.params);
        var params = $.extend({}, data.eventObject.params || {});
        var action = params.originalAction || data.action;
        var pageName = params._page || pageParams._page;
        var ids = $.extend(true, {}, { ids: [], tids: [], mids: [] }, data.eventObject.ids || {});
        //var isToolbar = !!params.toolbar;

        if (params.islog === false) {
            return;
        }

        // действия из строницы композа не содержат массива ids
        if (!ids.tids.length && !ids.mids.length && pageParams.ids) {
            ids.mids.push(pageParams.ids);
        }


        // действия разрешены только из турбара и хоткеев
        // признак выполнения действия из хоткея никак не определить на данный момент
        //if (!isHotkey && !isToolbar && $.inArray(action, ['mark', 'unmark', 'archive', 'delete', 'tospam', 'notspam', 'infolder', 'unsubscribe', 'sendon', 'reply-tmpl', 'money']) !== -1) {
        //    return;
        //}

        var now = new Date();
        var request = {
            timestamp: now.getTime() + now.getTimezoneOffset() * 60 * 1000,
            action: action,
            platform: navigator.platform,
            filter: {
                page: pageName,
                type: null,
                param: null
            }
        };

        if (pageParams.search === 'yes') {
            request.filter.type = 'search';
            request.filter.param = {};
            $.each(['request', 'fid', 'scope', 'from', 'to', 'unread', 'lid'], function(idx, paramName) {
                if (pageParams[paramName]) {
                    request.filter.param[paramName] = pageParams[paramName];
                }
            });
            request.filter.param = $.param(request.filter.param);

        } else if (pageParams.thread_id) {
            request.filter.type = 'thread';
            request.filter.param = pageParams.thread_id;

        } else if (pageParams.current_label) {
            request.filter.type = 'label';
            request.filter.param = pageParams.current_label;

        } else if (pageParams.current_folder) {
            request.filter.type = 'folder';
            request.filter.param = pageParams.current_folder;

        } else if (pageParams.extra_cond) {
            // only_atta|only_new
            request.filter.type = pageParams.extra_cond;
        }

        // или один тред или одно письмо
        /*jshint -W016 */
        if ((ids.mids.length === 1) ^ (ids.tids.length === 1)) {
            var mid = ids.mids.shift();
            var tid = ids.tids.shift();

            var id = mid ? mid : 't' + tid;
            var hMessage = Jane.$H('message');
            var msgInfo = hMessage.getCache(id) || data.eventObject.messageInfo;

            if (msgInfo && msgInfo.date) {
                request.message = {
                    thread: tid ? msgInfo.count : 0,
                    timestamp: msgInfo.date.timestamp,
                    type: msgInfo.type,
                    from: jpath(msgInfo, '.field[.type=="from"].email')[0],
                    index: msgInfo.idx
                };

                if (hMessage.isNew(id)) {
                    request.message.isnew = 1;
                }

                if (msgInfo.fid) {
                    var folder = Jane.$H('folders').getFolderById(msgInfo.fid);
                    if (folder) {
                        request.message.folder = { fid: folder.fid };
                        if (folder.symbol) {
                            request.message.folder.symbol = folder.symbol;
                        }
                    }
                }

                if (mid) {
                    request.message.mid = mid;
                } else if (tid) {
                    request.message.tid = tid;
                }

            } else {
                request.message = null;
            }

        } else {
            request.messages = {
                count: ids.ids.length,
                threads: ids.tids.length
            };
        }

        $.post(Daria.handlersPrefix + '/action-log.jsx', {
            _ckey: Daria.Page.ckey,
            data: JSON.stringify(request)
        });
    }

    var lastOpenPage;

    Jane.events.bind('user.action.log', actionLog);
    Jane.events.bind('message.action.complete', actionLog);

    // логирование факта перехода из просмотра письма в папку "Входящие"
    Jane.events.bind('pageload', function(eventName, params) {
        if (lastOpenPage) {
            if (lastOpenPage._page === 'message' && params._page === 'messages') {
                var fid = params.current_folder;
                if (fid) {
                    var inbox = Jane.$H('folders').getFolderBySymbol('inbox');
                    if (inbox && inbox.fid === fid) {
                        actionLog('pageload', {
                            action: 'gotoinbox',
                            eventObject: {
                                params: $.extend({ islog: true }, params)
                            }
                        });
                    }
                }
            }
        }

        lastOpenPage = $.extend({}, params);
    });

})(Jane, Daria);


/* ../../js/daria.action-log.js end */


}(jQuery, Daria, Jane));

/* mail.dragndrop.js begin */
(function($, /**Jane*/Jane, /**Jane.Page*/Page) {

    /**
     * @type Jane.DragNDrop
     */
    var DND = Jane.DragNDrop;

    var DragLabel = function() {
    };
    DragLabel.prototype = new DND.EmptyDrag();
    DragLabel.prototype.init = function(evt, draggable) {
        this.is_active = false;
        this.is_draggable = true;
        this.area = DND.getDragMessageArea();
        this.draggable = draggable;
        this.label = this.getLabelText(draggable);
        this.evt = evt;
        this.message_row = this.getMessageRow(evt.target);
        //сохраняем ссылку на текущую ноду с письмами
        this._messagesNode = Jane.$B('messages-list-box').getActiveCacheNode();
        return this;
    };

    DragLabel.prototype.onDragStart = function(evt) {

        this.is_active = true;
        this.area.show();
        this.area.alignByEvent(evt);

        var $target = $(this.evt.target);
        var classList = 'b-page_dragging-label';

        if ($target.parents('.b-labels, .jane-nav-column-labels').size()) {
            classList += ' b-page_dragging-label-from-labels';
        }

        this.standardMessage();
        $('html').addClass(classList);

        return this;
    };

    DragLabel.prototype.standardMessage = function() {
        this.area.setText(i18n('%Drag_Укажите_письмо_для_пометки', this.label));
    };

    DragLabel.prototype.onDrag = function(evt) {
        this.area.alignByEvent(evt);
    };

    DragLabel.prototype.getTargetData = function(target) {
        var $target = $(target);
        var that = this;
        var tests = [
                {
                    name: "message_many",
                    test: function() {
                        if (Page.type != "messages") {
                            return false;
                        }
                        //см - DARIA-348 - Метится первое письмо в списке, если навести метку на название папки
                        if ($.contains(that._messagesNode, target)) {
                            return $(that.getMessageRow(target));
                        }
                        return false;
                    }
                },
                {
                    name: "message_one",
                    test: function() {
                        if ($target.is('.b-message-subject')) {
                            return $target;
                        }
                        return false;
                    }
                },
                {
                    name: "unlabel",
                    test: function() {
                        if (($target.is('[data-action="delete"]') || $target.is('.b-labels') || $target.is('.jane-nav-column-labels') || $target.is('.b-labels *') || $target.is('.jane-nav-column-labels *')) && $(that.evt.target).parents('.b-labels, .jane-nav-column-labels').size() === 0) {
                            return $target;
                        }
                        return false;
                    }
                }
            ];

        return this.testTarget(tests, $target);
    };

    DragLabel.prototype.onDragEnter = function(evt, drag_data) {
        var message;
        if (drag_data.name === 'unlabel') {
            message = i18n('%Drag_Снять_метку', this.label);
        } else {
            message = i18n('%Drag_Пометить_письмо', this.label);
        }
        this.area.setText(message);
        this.hilite(drag_data.target);
        this.area.evaluateDimensions();
    };

    DragLabel.prototype.onDragLeave = function(evt, drag_data) {
        this.standardMessage();
        this.nohilite(drag_data.target);
    };

    DragLabel.prototype.onDragEnd = function() {
        this.area.alignByEvent(this.evt, {animate: true});
        $('html').removeClass('b-page_dragging-label b-page_dragging-label-from-labels');
    };

    DragLabel.prototype.getMessageRow = function(target) {
        var selector = '.b-messages__message:eq(0)';
        return $(target).parents(selector).addBack().filter(selector)[0];
    };

    var get_params = function(row) {
        var params = {};
        if (Page.type == "messages") {
            var mid = row.find('.b-messages__message__checkbox__input').val();
            params[mid] = true;
            var ids = Daria.Table.active.getIDs(params);
            params = {
                "message-id": ids.mids[0],
                "thread-id": ids.tids[0]
            };
        }

        return params;
    };

    DragLabel.prototype.onDrop = function(evt, target_data) {
        this.area.hide();

        var params;

        switch (target_data.name) {

            // Ставим метку
        case 'message_one':
        case 'message_many':

            // Если тащим метку с письма на это же письмо, то ничего не делаем
            if (target_data.target[0] == this.message_row) {
                break;
            }

            params = get_params(target_data.target);
            $.extend(params, Jane.Actions.getParams(this.draggable));
            // Добавление метки
            Jane.Actions.run("label", params);

            //params = get_params($(this.message_row));
            //$.extend(params, Jane.Actions.getParams(this.draggable));
            // Не всегда нужно удалять метку, например, когда мы тащим метку из списка меток на письмо.
            //if (params['message-id'] || params['thread-id']) {
            //    // remove label
            //    Jane.Actions.run("unlabel", params);
            //}

            break;

            // Убираем метку
        case 'unlabel':

            params = get_params($(this.getMessageRow(this.draggable)));
            $.extend(params, Jane.Actions.getParams(this.draggable));

            Jane.Actions.run("unlabel", params);
            break;
        }

        this.nohilite(target_data.target);
        $('html').removeClass('b-page_dragging-label');
    };

    var DragMessage = function() {
    };
    DragMessage.prototype = new DND.EmptyDrag();
    //Предлагаю не выпендриваться и взять, по мере необходимости - обычные майкрософтоские названия, как то -
    //onDrag, onDrop, onDragStart, onDragEnd, onDragEnter, onDragOver, onDragLeave
    DragMessage.prototype.init = function(evt, draggable) {
        this.is_active = false;
        this.is_draggable = true;
        this.area = DND.getDragMessageArea();
        this.draggable = draggable;
        //вынужден был таки (DARIA-246 - Отмена выделения письма при перетаскивании (Drag&drop)) запомнить чекбокс
        //обращаю внимание - для страницы одного письма селектор срабатывает вхолостую, что ни капельки не страшно, но архитектурно неуклюже
        var checkbox = draggable.find(".b-messages__message__checkbox__input");
        this.checked = checkbox.prop("checked");
        this.evt = evt;
        this.TARGET_BLOCK_LABELS = $('.block-labels')[0];
        return this;
    };

    DragMessage.prototype.getTargetData = function(target) {
        var $target = $(target);

        var that = this;

        var _is = function(selector) {
            var is_valid = $target.is(selector);
            if (is_valid) {
                return $target;
            }
            return false;
        };
        var common_test = function(selector) {
            return _is.bind(null, selector);
        };

        var tests = [
            {name: 'mark', test: common_test('[data-action="mark"]')},
            {name: 'unmark', test: common_test('[data-action="unmark"]')},
            {name: 'delete', test: common_test('[data-action="delete"]')},
            {name: 'reply-all', test: common_test('[data-action="reply-all"]')},
            {name: 'reply', test: common_test('[data-action="reply"]')},
            {name: 'forward', test: common_test('[data-action="forward"]')},
            {name: 'tospam', test: common_test('[data-action="tospam"]')},
            {name: 'notspam', test: common_test('[data-action="notspam"]')},
            {name: 'messages.deselect', test: common_test('[data-action="messages.deselect"]')},
            {name: 'folder.messages-remove', test: common_test('[data-action="folder.messages-remove"]')},
            {name: 'folder.current-mark-read', test: common_test('[data-action="folder.current-mark-read"]')},
            {name: 'move', test: function() {
                var action = $target.attr('data-action');
                if (action == 'move' || action == 'folders.switch-open') {
                    var res = $target.parents('.js-valid-drag-target:eq(0)');
                    if (res.length) {
                        return res;
                    }
                }
                return false;
            }},
            {name: 'label', test: function() {
                if (Jane.watcher.get('its-spam') || Jane.watcher.get('its-trash')) {
                    return false;
                }
                var is_valid = !$target.hasClass('js-label-no-dnd') &&
                    _is('[data-action="label"], [data-action="labels-show"]') &&
                    $.contains(that.TARGET_BLOCK_LABELS, target);

                if (is_valid) {
                    return $target;
                }
                return false;
            }}
        ];

        var res = this.testTarget(tests, $target);
        res.original_target = $target;
        return res;
    };

    DragMessage.prototype.hiliteAll = function() {
        //https://jira.yandex-team.ru/browse/DARIA-113
        var class_list = 'b-page_dragging-message';
        if (Jane.watcher.get('its-spam') || Jane.watcher.get('its-trash')) {
            class_list = class_list.concat(' b-page_dragging-spam-message');
        }
        $('html').addClass(class_list);
    };

    DragMessage.prototype.nohiliteAll = function() {
        $('html').removeClass('b-page_dragging-message b-page_dragging-spam-message');
    };

    //TODO: избавиться от этого ужасного проброса evt путём рефакторинга actions.act
    DragMessage.prototype.check = function(checked, evt) {
        if (Page.type == "messages") {
            evt = $.extend(evt, { currentTarget: this.draggable[0]});
            Jane.Actions.get("table.check").run({event: evt, params: {checked: checked}});
        }
    };

    DragMessage.prototype.onDragStart = function(evt) {
        // Драгаем только по левой клавише
        // в ФФ which всегда 0, а кнопку можно определить по buttons
        // в хроме buttons undefined
        // в опере не изменяет ниодно свойство, поэтому таскает по правой
        if (evt.which != 1 || evt.buttons == 2) {
            return;
        }

        this.is_active = true;
        this.area.show();
        this.area.alignByEvent(evt);
        this.hiliteAll();
        this.check(true, evt);
        var count = 1;
        if (Page.type == "messages") {
            count = Daria.Table.active.getCount();
            // в 3pane перетаскиваем письмо из просмотра
            if (count === 0 && Daria.layout != '2pane') {
                count = 1;
            }
        }
        this.count = count;

        //for (var j = 1; j < 35; j++) {
        //console.log(j, '=>', Daria.numInflict(j, letter_inflict));
        //}

        if (count < 5) {
            this.area.$control.addClass('b-drag-helper_few');

        } else if (count !== 1) {
            this.area.$control.addClass('b-drag-helper_many');
        }
        this.standardMessage();
    };

    DragMessage.prototype.standardMessage = function() {
        this.area.setText(i18n('%Drag_Куда_перенести_письма', this.count));
        this.area.evaluateDimensions();
    };

    DragMessage.prototype.onDrag = function(evt) {
        this.area.alignByEvent(evt);
    };

    DragMessage.prototype.onDragEnd = function(evt) {
        this.area.alignByEvent(this.evt, {animate: true});
        //ресетим чекбокс сообщения после окончания драга
        if (this.count == 1) {
            this.check(this.checked, evt);
        }
        this.nohiliteAll();
    };

    DragMessage.prototype.onDragEnter = function(evt, drag_data) {
        var count = this.count;
        var actions = {
            "delete": i18n('%Drag_Удалить', count),
            "mark": i18n('%Drag_Пометить_прочитанным', count),
            "unmark": i18n('%Drag_Пометить_непрочитанным', count),
            "tospam": i18n('%Drag_Пометить_как_спам', count),
            "notspam": i18n('%Drag_Пометить_как_неспам', count),
            "reply-all": i18n('%Drag_Ответить', count),
            "reply": i18n('%Drag_Ответить', count),
            "forward": i18n('%Drag_Переслать', count),
            "messages.deselect": i18n('%Drag_Снять_выделение', count)
        };
        var message = '';
        var where = '';

        this.hilite(drag_data.target);

        switch (drag_data.name) {
        case 'move':
            var target = drag_data.original_target;
            where = target.data('foldername') || target.text();

            message = i18n('%Drag_Перенести_в_папку', count, where);

            this.lazyAction(function() {
                Jane.Actions.run('folders.switch-open', $.extend(evt, {currentTarget: target[0]}), {open: true});
            }, 300);
            break;
        case 'label':
            where = this.getLabelText(drag_data.target[0]);
            message = i18n('%Drag_Пометить_меткой', count, where);
            break;
        case 'folder.current-mark-read':
            count = Jane.$H('folders').getCount(Jane.Page.params.current_folder);
            message = i18n('%Drag_Пометить_прочитанным', count);
            break;
        case 'folder.messages-remove':
            count = Jane.$H('folders').getCount(Jane.Page.params.current_folder);
            message = i18n('%Drag_Удалить', count);
            break;
        default:
            if (drag_data.name in actions) {
                message = actions[drag_data.name];
            }
        }

        this.area.setText(message);
        this.area.evaluateDimensions();
    };

    DragMessage.prototype.lazyAction = function(action, timeout) {
        if (this.lazyActionTimeout) {
            clearTimeout(this.lazyActionTimeout);
            this.lazyActionTimeout = null;
        }

        if (action) {
            this.lazyActionTimeout = setTimeout(action, timeout);
        }
    };

    DragMessage.prototype.onDragLeave = function(evt, drag_data) {
        this.lazyAction(false);
        this.standardMessage();
        this.nohilite(drag_data.target);
    };

    DragMessage.prototype.onDrop = function(evt, target_data) {
        this.lazyAction(false);
        //Jane.Actions.act(target_data.original_target[0]);
        evt = $.extend(evt, {currentTarget: target_data.original_target[0]});
        Jane.Actions.run(target_data.name, evt);
        //ресетим чекбокс сообщения после окончания драга
        if (this.count == 1) {
            this.check(this.checked, evt);
        }
        this.area.hide();
        this.nohilite(target_data.target);
        this.nohiliteAll();
    };

    DND.add([
        {
            test: function(evt, $target) {
                // В папке "Спам" и "Удалённые" не делаем ничего с метками
                if (Jane.watcher.get('its-spam') || Jane.watcher.get('its-trash')) {
                    return false;
                }

                var $label = $target.closest('.b-label, .jane-nav-column-label');

                // Метки "С вложениями" и "Непрочитанные" таскать нельзя
                if (!$label[0] || $label.hasClass('js-label-no-dnd')) {
                    return false;
                }

                var alabel = $label[0];

                if (Page.type == "messages") {
                    return alabel;

                } else if (Page.type == "message" && $.contains(Jane.$B('labels').getCacheNode(), alabel)) {
                    return alabel;
                }

                return false;
            },
            result: function(e, el) {
                return new DragLabel().init(e, el);
            }
        },
        {
            test: function(evt, $target) {
                if ($target.is('.js-invalid-drag-target')) {
                    return false;
                }

                var a_message = $target.closest('.b-message-subject');
                if (a_message[0]) {
                    return a_message;
                }
                return false;
            },
            result: function(evt, el) {
                return new DragMessage().init(evt, el);
            }
        }
    ]);

    Daria.DragMessage = DragMessage;
})(jQuery, Jane, Jane.Page);

/* mail.dragndrop.js end */

/* folder.dragndrop.js begin */
(function($, Jane/*, Page*/) {

    var DND = Jane.DragNDrop;

    var DragArea = function(el) {
        this.$el = $('.b-drag-helper_folder');
        this.$source = $(el);

        var fid = DragFolder.getFidByElement(el);
        var folder = Jane.$H('folders').getFolderById(fid);

        this.folderName = folder && folder.name || '';

        if (!this.$el || this.$el.length === 0) {
            this.$el = $('<div class="b-drag-helper_folder"><div class="b-drag-helper_folder__content"></div></div>')
                .appendTo($('body'));
        }

        this.$el.css({
            opacity: 1
        });

        return this;
    };

    DragArea.prototype.ret = function(/*! evt */) {
        this.$el.animate({
            left: this.$source.parents('.b-folders__nesting').offset().left,
            top: this.$source.offset().top,
            opacity: 0
        }, $.proxy(function() {
            this.hide();
        }, this));
    };

    DragArea.prototype.move = function(evt) {
        var html = document.documentElement;
        var body = document.body;
        var pageX = evt.clientX + (html && html.scrollLeft || body && body.scrollLeft || 0) - (html.clientLeft || 0);
        var pageY = evt.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0);

        this.$el.offset({
            top: pageY + 5,
            left: pageX + 5
        });

        return this;
    };

    DragArea.prototype.show = function() {
        this.$el.show();
        return this;
    };

    DragArea.prototype.hide = function() {
        this.$el.hide();
        return this;
    };

    DragArea.prototype.setDefaultText = function() {
        this.$el.find('.b-drag-helper_folder__content').text(i18n('%Drag_Перенести_папку', this.folderName));
        return this;
    };

    DragArea.prototype.setText = function(text) {
        this.$el.find('.b-drag-helper_folder__content').text(text);
        return this;
    };


    var DragFolder = function() {};

    DragFolder.getFidByElement = function(element) {
        element = $(element);
        if (!element[0]) {
            return false;
        }

        var params = Jane.Actions.getParams(element[0]);

        switch (Jane.Page.type) {
        case 'setup':
            return params.id;

        default:
            return params.fid;
        }
    };

    DragFolder.getOffsetY = function(evt) {
        var html = document.documentElement;
        var body = document.body;
        var y = evt.clientY + (html && html.scrollTop || body && body.scrollTop || 0) - (html.clientTop || 0);
        return y;
    };

    DragFolder.isOffsetTop = function(evt, $target) {
        var y = DragFolder.getOffsetY(evt);
        var pos = y - $target.offset().top;
        return (pos >= -1 && pos <= 5);
    };

    DragFolder.isOffsetBottom = function(evt, $target) {
        var y = DragFolder.getOffsetY(evt);
        var pos = $target.height() + $target.offset().top - y;
        return (pos >= 0 && pos <= 5);
    };

    DragFolder.isOffsetIn = function(evt, $target) {
        var y = DragFolder.getOffsetY(evt);
        var offset = $target.offset().top;
        var postop = y - offset;
        var posbottom = $target.height() + offset - y;
        return (postop > 5 && posbottom > 5);
    };

    DragFolder.prototype = new DND.EmptyDrag();
    DragFolder.prototype.init = function(evt, draggable) {
        this.is_active = false;
        this.is_draggable = true;
        this.evt = evt;
        this.draggable = draggable;

        var moveFids = Jane.$H('folders').getMoveFoldersFid(this.getDragFid());

        switch (Jane.Page.type) {
            case 'setup':
                this.$targets = $('.b-folders__folder', Jane.$B('setup-folders').getCacheNode()).filter('.item-' + moveFids.join(',.item-'));
                break;
            default:
                this.$targets = $('.b-folders__folder', Jane.$B('folders').getCacheNode()).filter('.fid-' + moveFids.join(',.fid-'));
        }

        return this;
    };

    DragFolder.prototype.lazyAction = function(action, timeout) {
        if (this.lazyActionTimeout) {
            clearTimeout(this.lazyActionTimeout);
            this.lazyActionTimeout = null;
        }

        if (action) {
            this.lazyActionTimeout = setTimeout(action, timeout);
        }
    };

    DragFolder.prototype.getTargetData = function(target) {
        var that = this;
        var $target = $(target);
        var tests = [
            {
                name: 'folder',
                test: function($target) {
                    var $f = $target.closest('.b-folders__folder');
                    if ($f.length && that.$targets.filter($f[0]).length) {
                        return $f;
                    }

                    return false;
                }
            }
        ];

        return this.testTarget(tests, $target);
    };

    DragFolder.prototype.onDragStart = function(evt) {
        this.is_active = true;

        switch (Jane.Page.type) {
        case 'setup':
            Jane.$B('setup-folders').foldersList.deselectAll();
            break;
        }

        this.hiliteAll();
        this.area = (new DragArea(this.draggable))
            .setDefaultText()
            .show()
            .move(evt);

        Jane.c('Драгндроп папок', 'Перенос папки');

        return this;
    };

    DragFolder.prototype.onDrag = function(evt, dragData) {
        this.area.move(evt);

        var $target = dragData && dragData.target;
        if (!$target) {
            return;
        }

        var targetFid = DragFolder.getFidByElement($target);
        var folder = Jane.$H('folders').getFolderById(targetFid);
        var folderName = folder && folder.name;

        if (DragFolder.isOffsetTop(evt, $target)) {
            if (folder.symbol !== 'inbox') {
                this.area.setText(i18n('%Drag_Move_Folder_Before', folderName));
                $target.removeClass('b-folders__folder_movein b-folders__folder_movebt')
                    .addClass('b-folders__folder_movetop');
            }

        } else if (DragFolder.isOffsetBottom(evt, $target)) {
            this.area.setText(i18n('%Drag_Move_Folder_Prev', folderName));
            $target.removeClass('b-folders__folder_movein b-folders__folder_movetop')
                .addClass('b-folders__folder_movebt');

        } else if (DragFolder.isOffsetIn(evt, $target)) {
            this.area.setText(i18n('%Drag_Перенести_папку_в_папку', folderName));
            $target.removeClass('b-folders__folder_movebt b-folders__folder_movetop')
                .addClass('b-folders__folder_movein');

        } else {
            this.area.setDefaultText();
            $target.removeClass('b-folders__folder_movebt b-folders__folder_movetop b-folders__folder_movein');
        }
    };

    DragFolder.prototype.onDragEnd = function(evt) {
        this.nohiliteAll();
        this.area.ret(evt);
        //evt.preventDefault();
        //evt.stopPropagation();
    };

    DragFolder.prototype.onDragEnter = function(evt, dragData) {
        var $target = dragData.target;
        var hFolders = Jane.$H('folders');

        //this.hilite($target);
        var targetFid = DragFolder.getFidByElement($target);
        var folder = hFolders.getFolderById(targetFid);
        this.area.setText(i18n('%Drag_Перенести_папку_в_папку', folder && folder.name));

        this.lazyAction(function() {
            Jane.Actions.run(
                'folders.switch-open',
                $.extend(evt, { currentTarget: $target[0] }),
                { open: true }
            );
        }, 300);
    };

    DragFolder.prototype.onDragLeave = function(evt, dragData) {
        var $target = dragData.target;
        this.area.setDefaultText();
        this.lazyAction(false);
        this.nohilite($target);
        $target.removeClass('b-folders__folder_movein b-folders__folder_movetop b-folders__folder_movebt');
    };

    DragFolder.prototype.onDrop = function(evt, targetData) {
        this.lazyAction(false);

        this.area.hide();
        this.nohilite(targetData.target);
        this.nohiliteAll();

        var fid = this.getDragFid();
        var $target = targetData.target;
        var overFid = DragFolder.getFidByElement($target);
        var folder = Jane.$H('folders').getFolderById(overFid);
        var action;

        if (DragFolder.isOffsetTop(evt, $target)) {
            action = (folder.symbol === 'inbox') ? 'putin' : 'putbefore';

        } else if (DragFolder.isOffsetBottom(evt, $target)) {
            action = 'putnext';

        } else if (DragFolder.isOffsetIn(evt, $target)) {
            action = 'putin';
        }

        $target.removeClass('b-folders__folder_movebt b-folders__folder_movetop b-folders__folder_movein');

        if (action) {
            Jane.Actions.run('folder.move', {
                fid: fid,
                overFid: overFid,
                action: action
            });
        }
    };

    DragFolder.prototype.hiliteAll = function() {
        this.$targets.addClass('g-drop-places_hover');
    };

    DragFolder.prototype.nohiliteAll = function() {
        this.$targets.removeClass('g-drop-places_hover');
    };

    DragFolder.prototype.getDragFid = function() {
        return DragFolder.getFidByElement(this.draggable);
    };

    DND.add({
        test: function(evt, $target) {
            if (Daria.IS_CORP) {
                return false;
            }

            var $folder = $target.closest('.b-folders__folder');
            if (!$folder.length) {
                return false;
            }

            var fid = DragFolder.getFidByElement($folder);
            if (!fid) {
                return false;
            }

            if (!Jane.$H('folders').isDraggable(fid)) {
                return false;
            }

            return $folder[0];
        },
        result: function(evt, e) {
            var drag = new DragFolder();
            return drag.init(evt, e);
        }
    });

})(jQuery, Jane, Jane.Page);


/* folder.dragndrop.js end */

/* ../../js/daria.xiva.js begin */
/**
 * Хелперы для обработки сообщение от xiva.
 * @namespace
 */
Daria.Xiva = {};

/* ../../js/daria.xiva.js end */

/* ../../js/daria.xiva.new-msg-queue.js begin */
(function(/** @type Jane */Jane, /** @type Daria */Daria) {

    /**
     * Очередь сообщений на обработку.
     * @description Очередь нужна, чтобы убрать проблемы при одновременном приходе нескольких новых писем.
     * @namespace
     */
    Daria.Xiva.NewMsgQueue = {};

    /**
     * Очередь сообщений
     * @private
     */
    Daria.Xiva.NewMsgQueue._queue = [];

    /**
     * Функция сортировки сообщений по lcn.
     * @param {Object} a
     * @param {Object} b
     * @returns {Number}
     * @private
     */
    Daria.Xiva.NewMsgQueue._queueSort = function(a, b) {
        return a.lcn - b.lcn;
    };

    /**
     * Обнуляет очередь.
     */
    Daria.Xiva.NewMsgQueue.reset = function() {
        this._queue = [];
    };

    /**
     * Добавляет сообщение в очередь
     * @param {Object} xivaMsg Сообщение
     */
    Daria.Xiva.NewMsgQueue.add = function(xivaMsg) {
        this._queue.push({
            lcn: xivaMsg.lcn,
            running: false,
            data: xivaMsg
        });
        this._queue.sort(this._queueSort);

        // запускаем очередь
        this.run();
    };

    /**
     * Запускает первое сообщение из очереди.
     */
    Daria.Xiva.NewMsgQueue.run = function() {
        var that = this;
        var event = this._queue[0];

        // чтобы запуститься надо:
        // 1) событие должно быть
        // 2) не должно уже работать
        if (event && !event.running) {
            // помечаем, что он работает
            event.running = true;

            Daria.Xiva.NewMsgQueue.processData(event.data)
                .pipe(Daria.Xiva.NewMsgQueue.insertMessage)
                .always(function() {
                    // удаляем из очереди
                    that._queue.shift();
                    // запускаем очередь заново
                    that.run();
                });
        }
    };

    /**
     * Парсит сообщение от ксивы и производит первичную обработку.
     * Если промис reject, то не надо делать дальнейшую обработку.
     * @param {Object} xivaMsg
     * @returns {$.Deferred}
     */
    Daria.Xiva.NewMsgQueue.processData = function processXivaData(xivaMsg) {
        var promise = $.Deferred();

        var message = xivaMsg;
        var mid = message.mid;
        var fid = message.fid;

        var hMessage = Jane.$H("message");
        // такое письмо уже есть и ничего не надо делать
        if (hMessage.isCached(mid)) {
            promise.reject();
            return promise;
        }

        var hFolders = Jane.$H("folders");
        // если письмо пришло в отправленные или черновики или шаблоны
        if (hFolders.isFolder(fid, ['sent', 'draft', 'template'])) {
            // просто обнуляем кеш
            Jane.$H('messages').clearCacheByFolder(fid);
            // и безопасно перерисовываемся
            Daria.safeMailRedraw();
            promise.reject();
            return promise;
        }

        var hMessageParams = {ids: mid};
        //из ксивы приходят не все данные, поэтому получаем полные еще раз
        Jane.Handler.getAll(['message'], hMessageParams, function(result) {
            promise.resolve(jpath(result, '.handlers[0].data')[0] || message);
        }, {
            onfail: function() {
                promise.reject();
            }
        });

        return promise;
    };

    /**
     * Производит обработку подготовленного сообщения.
     * Вставляет новое сообщение в список, инвалидирует что надо.
     * @param {Object} message
     * @returns {$.Deferred}
     */
    Daria.Xiva.NewMsgQueue.insertMessage = function(message) {
        var promise = $.Deferred();

        var mid = message.mid;
        var fid = message.fid;
        var tid = message.tid;

        var hFolders = Jane.$H("folders");

        var messageInSpamOrTrash = hFolders.spamOrTrash(fid);
        var newMessage = message['new'];

        var pageType = Jane.Page.type;
        var pageParams = Jane.Page.params;
        var hMessage = Jane.$H("message");

        if (newMessage && !messageInSpamOrTrash) {
            // если находимся в списке писем, то рисуем звездочку в title только для текущей папки или входящих
            if (Daria.IS_CORP && pageType == 'messages') {
                Daria.gotNewMail += fid == pageParams.current_folder || hFolders.isFolder(fid, 'inbox') ? 1 : 0;

            } else if (Daria.IS_CORP && pageType == 'message') {
                Daria.gotNewMail += fid == hMessage.getFolderId(pageParams.ids) || hFolders.isFolder(fid, 'inbox') ? 1 : 0;

            } else {
                // Переменная объявлена в js/daria.page.js
                Daria.gotNewMail += 1;
            }

            var hSettings = Jane.$H('settings');
            if (hSettings.getSetting('sound_message') == 'on') {
                // При воспроизведении звука ставим куку на одну секунду. Пока кука стоит, звук воспроизводиться не будет
                // В результате, если почта открыта в нескольких вкладках, звук пойдёт только из одной.
                if (Daria.getCookie('sound_message_playing') != '1') {
                    Daria.setCookie('sound_message_playing', '1');

                    Jane.Actions.run('sound.message');

                    setTimeout(function() {
                        Daria.delCookie('sound_message_playing');
                    }, 1000);
                }
            }
        }

        // Перерисовывем цифирки в нужной папке.
        if (newMessage) {
            hFolders.updateFolderCounts(fid, { 'new': 1, 'count': 1 });

            // если в папку пришли новые сообщения и мы не в этой папке,
            // то надо нарисовать кружок, а для этого нужно похачить хэндлер
            // и внедрить тэг recent и когда произойдёт invalidate - нарисуется кружок
            if (mid != pageParams.current_folder) {
                hFolders.setRecent(fid);
            }

            // если письмо пришло в inbox, то делаем предзагрузку
            if (hFolders.isFolder(fid, 'inbox')) {
                Daria.preloadMessages([mid]);
            }
        } else {
            hFolders.updateFolderCounts(fid, { 'count': 1 });
        }

        Jane.Block.trigger('folders', 'invalidate');
        Jane.Block.trigger('labels', 'invalidate');

        // Перерисовываем цифирке в нужных метках.
        var hLabels = Jane.$H("labels");
        var lids = {};
        $.each(message.lid, function(i, lid) {
            hLabels.updateLabelCount(lid, 1);
            lids[lid] = true;
        });

        /**
         * @type Jane.Block
         */
        var bMessagesActive = Jane.Block.trigger("messages-list-box", 'getActive');
        var updated;
        var doNotRedrawMessages = true;

        // isMatch - письмо попали в текущую страницу или тред письма попал в текущую страницу
        if (pageType == 'messages' && bMessagesActive && (hMessage.isMatch(mid) || hMessage.isMatch('t' + tid))) { // Открыта первая страница какого-либо списка писем и новое письмо попало именно в него.

            // если письмо в эту папку, но
            // мы читаем непрочитанные, а это письмо прочитанное
            if ((pageParams.extra_cond == 'only_new' && !newMessage) ||
                // или мы читаем "с аттачами", а в письме аттачей нет
                (pageParams.extra_cond == 'only_atta' && !hMessage.hasAttachment(mid))
                ) {
                // все валидно, ниже перерисуем левый блок
                doNotRedrawMessages = true;

            } else {
                // если список пустой, то просто запускаем run
                if (!Jane.$H('messages').isEmptyList(bMessagesActive.params)) {
                    if (tid) {
                        // есть такой тред
                        if (pageParams.threaded != 'yes' || hMessage.getThreadCount(tid) > 1) {
                            updateThreadedList(message, lids, true);
                            promise.resolve();

                        } else {
                            // если currentThreadCount <= 1, то не понятно есть такой тред или нет
                            // письмо пришло в тред, о котором мы не знаем
                            // письмо пришло в тред, которого нет и сейчас должно склеится
                            // запрашиваем информацию о треде
                            Jane.Handler.doAll(['messages'], {thread_id: tid}, function() {
                                updateThreadedList(message, lids, false);

                                promise.resolve();
                            });
                        }
                        return promise;

                    } else if (window['JSON']) {
                        // честно говоря, не знаю как такое возможно для тредных список, но пологируем
                        Jane.ErrorLog.send({
                            errorType: 'xiva.no_tid'
                        }, JSON.stringify(message));
                    }
                }
                // если мы обновили список писем сами, то сюда выполнение не дойдет
                // если дошло, то надо выполнять полный ран
                doNotRedrawMessages = false;
            }

            updateEticketInfo(mid);
            Jane.events.trigger('messages-attachments.check');

        } else if (newMessage && !messageInSpamOrTrash) {
            // Для спамовых писем и прочтенных писем не показываем уведомление.
            var subject = hMessage.getSubject(mid);
            var from = hMessage.getFromName(mid);
            var msg = hMessage.getCache(mid);

            var statusline = function(mid, fid) {
                var url = Jane.Page.params2url({
                    _page: 'message',
                    current_folder: fid,
                    ids: mid
                });

                Daria.Statusline.showMsg({
                    hideOnTimeout: false,
                    body: i18n('%Message_New_Msg2', '<a class="b-statusline__link" href="' + url + '">', _.escape(subject), _.escape(from), '</a>'),
                    body3: i18n('%3pane_Message_New_Msg2', '<a class="b-statusline__link" href="' + url + '">', _.escape(subject), _.escape(from), '</a>')
                });
            };

            // если новое письмо является напоминанием билета, то ссылка строится на билет
            if (msg.eticket) {
                msg.eticket.getFlights().always(function() {
                    if (this.ticketMID) {
                        var ticketFID = hMessage.getFolderId(this.ticketMID);
                        if (ticketFID) {
                            statusline(this.ticketMID, ticketFID);
                            return;
                        }
                    }

                    statusline(mid, fid);
                });
            } else {
                statusline(mid, fid);
            }

            // показываем иконку в таскбаре вместе с сообщением
            Daria.Pinned.newMessageNotify();
        }

        Jane.Page.updateTitle();
        clearCache(mid, fid, tid, lids, updated);

        // полный ран выполнится, если письмо пришло в текущий список писем,
        // но мы его по каким-то причинам не смогли обновить
        Daria.safeMailRedraw(doNotRedrawMessages);

        promise.resolve();
        return promise;
    };

    function updateEticketInfo(mid) {
        var msg = Jane.$H('message').getCache(mid);
        if (msg.eticket) {
            var table = Jane.Block.trigger('messages-list-box', 'getActiveTable');
            if (table) {
                msg.eticket.getFlights().done(function() {
                    this.redrawTable(table);
                });
            }
        }
    }

    function clearCache(mid, fid, tid, lids, updated) {
        var hMessage = Jane.$H("message");
        var hMessages = Jane.$H("messages");
        var hParticipants = Jane.$H('messages-thread-participants');

        var newMessage = hMessage.isNew(mid);
        var messageHasAttach = hMessage.hasAttachment(mid);

        var currentKey = hMessages.getKey(Jane.Page.params);

        var messageInInbox = (fid == Jane.$H("folders").ids['inbox']);

        hMessages.clearCache(function(_key, cacheItem) { // _key это ключ кэша.
            var cacheParams = cacheItem.params;

            // Текущую страницу мы перерисовали уже.
            if (updated && (currentKey == _key)) {
                return false;
            }

            // поиск чистим всегда
            if (cacheParams.search == 'yes') {
                return true;
            }

            // чистим кэш меток
            if (lids[cacheParams.current_label]) {
                return true;
            }

            // чистим кэш треда
            if (cacheParams.thread_id === tid) {
                return true;
            }

            var extra = cacheParams.extra_cond;
            var gotoAll = cacheParams['goto'] == 'all';
            if (gotoAll && !extra) {
                return true;
            }

            // фильтр только с аттачем
            if (extra == 'only_atta' && messageHasAttach) {
                return true;
            }

            var messageInFolder = cacheParams.current_folder === fid || (/*для inbox нет curren_folder*/!cacheParams.current_folder && messageInInbox);

            // фильтр только новые
            if (extra == 'only_new' && newMessage) {
                // есть кэш для всех непрочитанных или кэш для непрочитанных в папке и письмо в этой папке
                if (gotoAll || messageInFolder) {
                    return true;
                }
            }

            // письмо попало в папку и дополнительных параметров
            if (messageInFolder && !(cacheParams['page_number'] || cacheParams['current_label'] || cacheParams['goto'] || cacheParams.thread_id || cacheParams.extra_cond)) {
                return true;
            }

            return false;
        });

        Jane.Handler.clearCache(['message-nearest', 'message-thread-nearest']);
        hParticipants.clearCacheByParams({'tids': tid});
    }

    /**
     * Обновляет тредный список
     * @param {Object} message Кеш письма
     * @param {Object} lids Хеш lid'ов
     * @param {Boolean} hasInfoBeforeMessage Была ли информация о треде перед этим сообщением
     */
    function updateThreadedList(message, lids, hasInfoBeforeMessage) {
        var hMessage = Jane.$H('message');
        var hMessages = Jane.$H('messages');
        var hParticipants = Jane.$H('messages-thread-participants');
        var bMessages = Jane.$B('messages-list-box').getActive();
        var pageParams = bMessages.params;

        var mid = message.mid;
        var tid = message.tid;

        hParticipants.clearCacheByParams({tids: tid});

        var threadKey = 't' + tid;

        var msgKeyToRedraw;

        var threadCount = hMessage.getThreadCount(tid);
        if (threadCount > 1 && pageParams.threaded == 'yes') {
            msgKeyToRedraw = threadKey;
            // есть настоящий тред

            // теперь у нас есть следующие варианты:
            // 1) тред был и надо просто обновить его
            // 1.1) тред свернут, список нужно обновить, а сам тред поднять
            // 1.2) тред развернут, список нужно обновить, сам тред поднять и перерисовать развернутый тред
            // 1.3) мы про тред знаем, что он тред, надо просто добавить его в начало списка
            // 1.4) мы про тред ничего не знаем, надо просто добавить его в начало списка
            // 2) треда не было, надо найти первое письмо и убрать его, завернуть оба в тред и нарисовать

            // тред только что образовался
            if (threadCount == 2 && !hasInfoBeforeMessage) {
                // case 2

                var threadCache = hMessages.getRawCacheByParams({thread_id: tid});
                // второе письмо в списке, в которым образовало тред новое письмо
                var secondMessage = Jane.$H('message').getCacheByParams({ids: threadCache.data.ids[1]});
                if (secondMessage.fid == pageParams.current_folder) {
                    hMessages.insertMessage(pageParams, threadKey, secondMessage.mid);

                } else {
                    // чистим списки со вторым письмом, теперь там тред
                    hMessages.insertMessage({
                        current_folder: secondMessage.fid
                    }, threadKey);
                    hMessages.insertMessage(pageParams, threadKey);
                }
                createThreadFromMessage(message, tid, threadCount);


            } else if (hasInfoBeforeMessage) {
                //тред такой уже был и мы о нем знали (он может быть как свернут, так и развернут)

                // case 1.3
                // обновляем информацию о треде
                hMessage.updateThreadInfo(tid, message);
                // переносим тред наверх
                hMessages.insertMessage(pageParams, threadKey, threadKey);
                //case 1.2 + case 1.1
                // обновляем список писем в треде
                hMessages.insertMessage({
                    thread_id: tid
                }, mid);

                var bMessageThread = Jane.$B('messages-box').getActive();
                if (bMessageThread && bMessageThread.name == 'message-thread' && bMessageThread.params.thread_id == tid) {
                    bMessageThread.addMessage(mid);
                }

            } else {
                // case 1.4
                // тред такой уже был, но мы о нем ничего не знали
                // поэтому просто добавляем его в начало текущего списка
                createThreadFromMessage(message, tid, threadCount);
                hMessages.insertMessage(pageParams, threadKey);
            }

        } else {
            msgKeyToRedraw = mid;
            // это письмо без треда
            hMessages.insertMessage(pageParams, mid);

            // пробуем обновить тред, даже если список не тредный
            if (hasInfoBeforeMessage) {
                hMessage.updateThreadInfo(tid, message);
                hMessages.insertMessage({
                    thread_id: tid
                }, mid);
            }
        }

        var insertedMessage = bMessages.checkMessagesList(msgKeyToRedraw);

        var bThread = bMessages.removeThreadBlock(threadKey);
        if (bThread) {
            var params = {
                thread_id: tid
            };

            bThread.block.run(params, null, {
                "xsl-params": {
                    current_folder: Jane.Page.params.current_folder
                },
                _prevent_table_update: true
            });

            Jane.DOM.insertAfter(insertedMessage, bThread.$box[0]);


            if (bThread.open) {
                $(insertedMessage).addClass('b-messages__message_thread-open');
            }

            bMessages.addThreadBlock(threadKey, null, bThread);

            // Обновляем аватарки в треде
            Daria.SocialAvatarsMessages(bThread.$box[0], params);
        }

        // Обновляем аватарки в списке писем (после рендеринга треда или без треда
        Daria.SocialAvatarsMessages(bMessages.node, bMessages.params);

        // обновляем table и сохраняем фокус если он есть
        Daria.Table.active.updateWithFocus();

        Jane.Page.updateTitle();
        clearCache(mid, message.fid, null, lids, true);

        // перерисовываем только левую колонку
        Daria.safeMailRedraw(true);
        delete Daria.Table.restoreCheckboxes;

        updateEticketInfo(mid);
        Jane.events.trigger('messages-attachments.check');
    }

    /**
     * Создает кеш треда из письма :)
     * У wmi нет метода, чтобы получить структуру thread как в messages, поэтому немного хачим и эмулируем ее.
     * @param {Object} message
     * @param {String} tid
     * @param {Number} threadCount
     */
    function createThreadFromMessage(message, tid, threadCount) {
        // делаем из письма, информацию о треде
        var threadInfo = $.extend(true, {}, message);
        // удаляем метки про аттачи и т.п.
        delete threadInfo.flags;
        threadInfo.mid = tid;
        threadInfo.count = threadCount;
        Jane.$H('message')._setCacheFromMessages(threadInfo, $.now());
    }

})(Jane, Daria);

/* ../../js/daria.xiva.new-msg-queue.js end */

/* ../../js/daria.xivaupdate.js begin */
/*
 Обновление блоков по сообщениям от ксивы

 В неактивном табе слушаем собатие unsupported от ксивы и выстаялем флаг.
 Когда таб становится активным, делаем Page.refresh();
 */
(function(/**Jane*/Jane, /*Daria*/Daria) {

    Jane.watcher.watch('xiva.mail.lcn', {
        value: Daria.lcn,
        strict: true
    });

    // при загрузке логируем совпавшие lcn
    var oldLcn = Jane.LS && Jane.LS.getItem('lcn');
    if (oldLcn) {
        Jane.c('lcn', String(oldLcn == Daria.lcn));
        Jane.watcher.set('mail.lcn-not-changed',  Daria.lcn ? oldLcn == Daria.lcn : undefined);
    }
    delete Daria.lcn;

    Jane.events.bind('xiva.mail.change-lcn', function(eventNme, newLcn) {
        var oldLcn = Jane.watcher.get('xiva.mail.lcn');

        // приводим lcn к числу
        newLcn = parseInt(newLcn, 10);

        var result = true;

        // обрабатываем новый lcn
        if (newLcn) {
            // Если он отличается от текущего больше чем на 1, то значит мы разъехались и надо все почистить
            if (oldLcn && /*при unsupported приходит тот же lcn*/newLcn != oldLcn && newLcn != oldLcn + 1) {
                Jane.ErrorLog.send({
                    'event': 'xiva.invalid_lcn',
                    'diff': newLcn - oldLcn
                });

                // если новое сообщение с lcn большим, чем известный, то перерисовываем почту
                // если меньше, то значит мы уже знаем обо всех изменениях и такое сообщение можно игнорировать
                if (newLcn > oldLcn) {
                    Daria.invalidateMailHandlers();
                    Daria.safeMailRedraw();
                }

                result = false;
            }

            // если нет старого lcn или новый больше старого
            if (!oldLcn || newLcn > oldLcn) {
                // запоминаем новый lcn
                Jane.watcher.set('xiva.mail.lcn', newLcn);
                if (Jane.LS) {
                    Jane.LS.setItem('lcn', newLcn);
                }

            }
        }

        return result;
    });

    // инициализция события о приходе сообщения с operation "insert" (новое письмо)
    Jane.events.bind("xiva.mail.insert", function(e, xivaMsg) {
        if (xivaMsg && xivaMsg.data && xivaMsg.data.lcn) {
            // добавляем сообщение в очередь
            Daria.Xiva.NewMsgQueue.add(xivaMsg.data);
        }
    });

    var updateOnFocus = false;

    Jane.events.bind('pageVisible.change', function(e, diff) {
        if (diff.value) {
            update();
        }
    });

    // Слушаем событие от ксивы
    Jane.events.bind('xiva.mail.unsupported', function(name, data) {
        // Если connection_id совпадают, то значит запрос
        //   был отправлен из текущего таба и делать ничего не надо
        if (data.connection_id == Jane.Config.connection_id) {
            return;
        }

        var method_id = (data && data['method_id']) || '';

        // специальная обработка сообщения
        if (method_id.indexOf('send_delayed_message') > -1) {
            Jane.events.trigger('xiva.mail.send_delayed_message');
            return;
        }

        if (method_id.indexOf('insert draft') > -1 || method_id.indexOf('delete_draft') > -1) {
            Jane.events.trigger('xiva.mail.draft');
            return;
        }

        if (method_id.indexOf(';send') > -1) {
            Jane.events.trigger('xiva.mail.send');
            return;
        }

        // считаем, что unsupported говорит нам, что пользователь прочитал новое сообщение в другой вкладке
        Daria.gotNewMail = 0;
        Jane.Page.updateTitle();

        updateOnFocus = true;

        // если в активный таб пришел не наш unsupported, то вызываем update
        if (Jane.watcher.get('pageVisible')) {
            update();
        }
    });

    // действия с черновиками
    Jane.events.bind('xiva.mail.draft', clearDraft);
    // отправка письма
    Jane.events.bind('xiva.mail.send', clearSentAndOutbox);
    // отправка отложенного сообщения
    Jane.events.bind('xiva.mail.send_delayed_message', clearSentAndOutbox);

    function clearDraft() {
        var draftFID = Jane.$H('folders').ids.draft;
        if (draftFID) {
            Jane.$H('messages').clearCacheByFolder(draftFID);
        }
    }

    function clearSentAndOutbox() {
        var hFoldersIDS = Jane.$H('folders').ids;
        var hMessages = Jane.$H('messages');

        var sentFolderId = hFoldersIDS.sent;
        var ouboxFolderId = hFoldersIDS.outbox;

        if (sentFolderId) {
            hMessages.clearCacheByFolder(sentFolderId);
        }
        if (ouboxFolderId) {
            hMessages.clearCacheByFolder(ouboxFolderId);
        }
    }

    function update() {
        if (updateOnFocus) {
            Daria.invalidateMailHandlers();
            Daria.safeMailRedraw();
            updateOnFocus = false;
        }
    }
})(Jane, Daria);

/* ../../js/daria.xivaupdate.js end */


if (Daria.WND_3PANE && window.opener) {
    Jane.events.bind('pageinit', function() {
        var pageGo = Jane.Page.go;
        // все ссылки уходят в основное окно
        Jane.Page.go = function(hash) {
            /*
            if (/^#(compose|message|thread)/.test(hash)) {
            */
            if (/^#compose/.test(hash)) {
                // рефреш
                pageGo.apply(Jane.Page, arguments);

            } else {
                // остальное - родительское окно
                var opener = window.opener;
                opener.Jane.Page.go(hash);
                Daria.hashReplace(Jane.Page.hash);
            }
        };
    });
}

/* mailbox.js end */

});
